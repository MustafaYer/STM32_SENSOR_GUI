
RTOS_SD_KART_V1.01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f11c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d0  0800f2f0  0800f2f0  000102f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fbc0  0800fbc0  000111f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800fbc0  0800fbc0  00010bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fbc8  0800fbc8  000111f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fbc8  0800fbc8  00010bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fbcc  0800fbcc  00010bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800fbd0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004804  200001f0  0800fdc0  000111f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049f4  0800fdc0  000119f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001caba  00000000  00000000  00011220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000471d  00000000  00000000  0002dcda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001960  00000000  00000000  000323f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013af  00000000  00000000  00033d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000274ca  00000000  00000000  00035107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002151a  00000000  00000000  0005c5d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df578  00000000  00000000  0007daeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015d063  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e10  00000000  00000000  0015d0a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00164eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f2d4 	.word	0x0800f2d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800f2d4 	.word	0x0800f2d4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a0 	b.w	8001040 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	460c      	mov	r4, r1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d14e      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d90:	4694      	mov	ip, r2
 8000d92:	458c      	cmp	ip, r1
 8000d94:	4686      	mov	lr, r0
 8000d96:	fab2 f282 	clz	r2, r2
 8000d9a:	d962      	bls.n	8000e62 <__udivmoddi4+0xde>
 8000d9c:	b14a      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000d9e:	f1c2 0320 	rsb	r3, r2, #32
 8000da2:	4091      	lsls	r1, r2
 8000da4:	fa20 f303 	lsr.w	r3, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	4319      	orrs	r1, r3
 8000dae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f f68c 	uxth.w	r6, ip
 8000dba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb04 f106 	mul.w	r1, r4, r6
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dda:	f080 8112 	bcs.w	8001002 <__udivmoddi4+0x27e>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 810f 	bls.w	8001002 <__udivmoddi4+0x27e>
 8000de4:	3c02      	subs	r4, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a59      	subs	r1, r3, r1
 8000dea:	fa1f f38e 	uxth.w	r3, lr
 8000dee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df2:	fb07 1110 	mls	r1, r7, r0, r1
 8000df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfa:	fb00 f606 	mul.w	r6, r0, r6
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	d90a      	bls.n	8000e18 <__udivmoddi4+0x94>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e0a:	f080 80fc 	bcs.w	8001006 <__udivmoddi4+0x282>
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	f240 80f9 	bls.w	8001006 <__udivmoddi4+0x282>
 8000e14:	4463      	add	r3, ip
 8000e16:	3802      	subs	r0, #2
 8000e18:	1b9b      	subs	r3, r3, r6
 8000e1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e1e:	2100      	movs	r1, #0
 8000e20:	b11d      	cbz	r5, 8000e2a <__udivmoddi4+0xa6>
 8000e22:	40d3      	lsrs	r3, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	e9c5 3200 	strd	r3, r2, [r5]
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d905      	bls.n	8000e3e <__udivmoddi4+0xba>
 8000e32:	b10d      	cbz	r5, 8000e38 <__udivmoddi4+0xb4>
 8000e34:	e9c5 0100 	strd	r0, r1, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e7f5      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e3e:	fab3 f183 	clz	r1, r3
 8000e42:	2900      	cmp	r1, #0
 8000e44:	d146      	bne.n	8000ed4 <__udivmoddi4+0x150>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d302      	bcc.n	8000e50 <__udivmoddi4+0xcc>
 8000e4a:	4290      	cmp	r0, r2
 8000e4c:	f0c0 80f0 	bcc.w	8001030 <__udivmoddi4+0x2ac>
 8000e50:	1a86      	subs	r6, r0, r2
 8000e52:	eb64 0303 	sbc.w	r3, r4, r3
 8000e56:	2001      	movs	r0, #1
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d0e6      	beq.n	8000e2a <__udivmoddi4+0xa6>
 8000e5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e60:	e7e3      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x204>
 8000e68:	eba1 040c 	sub.w	r4, r1, ip
 8000e6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	2101      	movs	r1, #1
 8000e76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb07 f006 	mul.w	r0, r7, r6
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x11c>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x11a>
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	f200 80cd 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e9e:	4626      	mov	r6, r4
 8000ea0:	1a1c      	subs	r4, r3, r0
 8000ea2:	fa1f f38e 	uxth.w	r3, lr
 8000ea6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eaa:	fb08 4410 	mls	r4, r8, r0, r4
 8000eae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eb2:	fb00 f707 	mul.w	r7, r0, r7
 8000eb6:	429f      	cmp	r7, r3
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x148>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec2:	d202      	bcs.n	8000eca <__udivmoddi4+0x146>
 8000ec4:	429f      	cmp	r7, r3
 8000ec6:	f200 80b0 	bhi.w	800102a <__udivmoddi4+0x2a6>
 8000eca:	4620      	mov	r0, r4
 8000ecc:	1bdb      	subs	r3, r3, r7
 8000ece:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ed2:	e7a5      	b.n	8000e20 <__udivmoddi4+0x9c>
 8000ed4:	f1c1 0620 	rsb	r6, r1, #32
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	fa22 f706 	lsr.w	r7, r2, r6
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ee4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ee8:	ea43 030c 	orr.w	r3, r3, ip
 8000eec:	40f4      	lsrs	r4, r6
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	0c38      	lsrs	r0, r7, #16
 8000ef4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ef8:	fbb4 fef0 	udiv	lr, r4, r0
 8000efc:	fa1f fc87 	uxth.w	ip, r7
 8000f00:	fb00 441e 	mls	r4, r0, lr, r4
 8000f04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f08:	fb0e f90c 	mul.w	r9, lr, ip
 8000f0c:	45a1      	cmp	r9, r4
 8000f0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f12:	d90a      	bls.n	8000f2a <__udivmoddi4+0x1a6>
 8000f14:	193c      	adds	r4, r7, r4
 8000f16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f1a:	f080 8084 	bcs.w	8001026 <__udivmoddi4+0x2a2>
 8000f1e:	45a1      	cmp	r9, r4
 8000f20:	f240 8081 	bls.w	8001026 <__udivmoddi4+0x2a2>
 8000f24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	eba4 0409 	sub.w	r4, r4, r9
 8000f2e:	fa1f f983 	uxth.w	r9, r3
 8000f32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f36:	fb00 4413 	mls	r4, r0, r3, r4
 8000f3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x1d2>
 8000f46:	193c      	adds	r4, r7, r4
 8000f48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f4c:	d267      	bcs.n	800101e <__udivmoddi4+0x29a>
 8000f4e:	45a4      	cmp	ip, r4
 8000f50:	d965      	bls.n	800101e <__udivmoddi4+0x29a>
 8000f52:	3b02      	subs	r3, #2
 8000f54:	443c      	add	r4, r7
 8000f56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f5e:	eba4 040c 	sub.w	r4, r4, ip
 8000f62:	429c      	cmp	r4, r3
 8000f64:	46ce      	mov	lr, r9
 8000f66:	469c      	mov	ip, r3
 8000f68:	d351      	bcc.n	800100e <__udivmoddi4+0x28a>
 8000f6a:	d04e      	beq.n	800100a <__udivmoddi4+0x286>
 8000f6c:	b155      	cbz	r5, 8000f84 <__udivmoddi4+0x200>
 8000f6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f72:	eb64 040c 	sbc.w	r4, r4, ip
 8000f76:	fa04 f606 	lsl.w	r6, r4, r6
 8000f7a:	40cb      	lsrs	r3, r1
 8000f7c:	431e      	orrs	r6, r3
 8000f7e:	40cc      	lsrs	r4, r1
 8000f80:	e9c5 6400 	strd	r6, r4, [r5]
 8000f84:	2100      	movs	r1, #0
 8000f86:	e750      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f94:	fa24 f303 	lsr.w	r3, r4, r3
 8000f98:	4094      	lsls	r4, r2
 8000f9a:	430c      	orrs	r4, r1
 8000f9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fa0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa4:	fa1f f78c 	uxth.w	r7, ip
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3110 	mls	r1, r8, r0, r3
 8000fb0:	0c23      	lsrs	r3, r4, #16
 8000fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb6:	fb00 f107 	mul.w	r1, r0, r7
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x24c>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fc6:	d22c      	bcs.n	8001022 <__udivmoddi4+0x29e>
 8000fc8:	4299      	cmp	r1, r3
 8000fca:	d92a      	bls.n	8001022 <__udivmoddi4+0x29e>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fe0:	fb01 f307 	mul.w	r3, r1, r7
 8000fe4:	42a3      	cmp	r3, r4
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x276>
 8000fe8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ff0:	d213      	bcs.n	800101a <__udivmoddi4+0x296>
 8000ff2:	42a3      	cmp	r3, r4
 8000ff4:	d911      	bls.n	800101a <__udivmoddi4+0x296>
 8000ff6:	3902      	subs	r1, #2
 8000ff8:	4464      	add	r4, ip
 8000ffa:	1ae4      	subs	r4, r4, r3
 8000ffc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001000:	e739      	b.n	8000e76 <__udivmoddi4+0xf2>
 8001002:	4604      	mov	r4, r0
 8001004:	e6f0      	b.n	8000de8 <__udivmoddi4+0x64>
 8001006:	4608      	mov	r0, r1
 8001008:	e706      	b.n	8000e18 <__udivmoddi4+0x94>
 800100a:	45c8      	cmp	r8, r9
 800100c:	d2ae      	bcs.n	8000f6c <__udivmoddi4+0x1e8>
 800100e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001012:	eb63 0c07 	sbc.w	ip, r3, r7
 8001016:	3801      	subs	r0, #1
 8001018:	e7a8      	b.n	8000f6c <__udivmoddi4+0x1e8>
 800101a:	4631      	mov	r1, r6
 800101c:	e7ed      	b.n	8000ffa <__udivmoddi4+0x276>
 800101e:	4603      	mov	r3, r0
 8001020:	e799      	b.n	8000f56 <__udivmoddi4+0x1d2>
 8001022:	4630      	mov	r0, r6
 8001024:	e7d4      	b.n	8000fd0 <__udivmoddi4+0x24c>
 8001026:	46d6      	mov	lr, sl
 8001028:	e77f      	b.n	8000f2a <__udivmoddi4+0x1a6>
 800102a:	4463      	add	r3, ip
 800102c:	3802      	subs	r0, #2
 800102e:	e74d      	b.n	8000ecc <__udivmoddi4+0x148>
 8001030:	4606      	mov	r6, r0
 8001032:	4623      	mov	r3, r4
 8001034:	4608      	mov	r0, r1
 8001036:	e70f      	b.n	8000e58 <__udivmoddi4+0xd4>
 8001038:	3e02      	subs	r6, #2
 800103a:	4463      	add	r3, ip
 800103c:	e730      	b.n	8000ea0 <__udivmoddi4+0x11c>
 800103e:	bf00      	nop

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <DHT_Delay>:
uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
uint16_t SUM;
int TEMP, RH;

void DHT_Delay (uint16_t time)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(DHT_TIMER, 0);
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <DHT_Delay+0x30>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2200      	movs	r2, #0
 8001054:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(DHT_TIMER))<time);
 8001056:	bf00      	nop
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <DHT_Delay+0x30>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800105e:	88fb      	ldrh	r3, [r7, #6]
 8001060:	429a      	cmp	r2, r3
 8001062:	d3f9      	bcc.n	8001058 <DHT_Delay+0x14>
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	200009e4 	.word	0x200009e4

08001078 <Set_Pin_Output>:


void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4619      	mov	r1, r3
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f001 fe7a 	bl	8002da0 <HAL_GPIO_Init>
}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	4619      	mov	r1, r3
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f001 fe5c 	bl	8002da0 <HAL_GPIO_Init>
}
 80010e8:	bf00      	nop
 80010ea:	3720      	adds	r7, #32
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <DHT11_Start>:


void DHT11_Start (void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80010f4:	2101      	movs	r1, #1
 80010f6:	480d      	ldr	r0, [pc, #52]	@ (800112c <DHT11_Start+0x3c>)
 80010f8:	f7ff ffbe 	bl	8001078 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80010fc:	2200      	movs	r2, #0
 80010fe:	2101      	movs	r1, #1
 8001100:	480a      	ldr	r0, [pc, #40]	@ (800112c <DHT11_Start+0x3c>)
 8001102:	f001 fff9 	bl	80030f8 <HAL_GPIO_WritePin>
	DHT_Delay (18000);   // wait for 18ms
 8001106:	f244 6050 	movw	r0, #18000	@ 0x4650
 800110a:	f7ff ff9b 	bl	8001044 <DHT_Delay>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800110e:	2201      	movs	r2, #1
 8001110:	2101      	movs	r1, #1
 8001112:	4806      	ldr	r0, [pc, #24]	@ (800112c <DHT11_Start+0x3c>)
 8001114:	f001 fff0 	bl	80030f8 <HAL_GPIO_WritePin>
    DHT_Delay (20);   // wait for 30us
 8001118:	2014      	movs	r0, #20
 800111a:	f7ff ff93 	bl	8001044 <DHT_Delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 800111e:	2101      	movs	r1, #1
 8001120:	4802      	ldr	r0, [pc, #8]	@ (800112c <DHT11_Start+0x3c>)
 8001122:	f7ff ffc7 	bl	80010b4 <Set_Pin_Input>
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40020000 	.word	0x40020000

08001130 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	71fb      	strb	r3, [r7, #7]
	DHT_Delay (40);
 800113a:	2028      	movs	r0, #40	@ 0x28
 800113c:	f7ff ff82 	bl	8001044 <DHT_Delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001140:	2101      	movs	r1, #1
 8001142:	4811      	ldr	r0, [pc, #68]	@ (8001188 <DHT11_Check_Response+0x58>)
 8001144:	f001 ffc0 	bl	80030c8 <HAL_GPIO_ReadPin>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10e      	bne.n	800116c <DHT11_Check_Response+0x3c>
	{
		DHT_Delay (80);
 800114e:	2050      	movs	r0, #80	@ 0x50
 8001150:	f7ff ff78 	bl	8001044 <DHT_Delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001154:	2101      	movs	r1, #1
 8001156:	480c      	ldr	r0, [pc, #48]	@ (8001188 <DHT11_Check_Response+0x58>)
 8001158:	f001 ffb6 	bl	80030c8 <HAL_GPIO_ReadPin>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <DHT11_Check_Response+0x38>
 8001162:	2301      	movs	r3, #1
 8001164:	71fb      	strb	r3, [r7, #7]
 8001166:	e001      	b.n	800116c <DHT11_Check_Response+0x3c>
		else Response = -1;
 8001168:	23ff      	movs	r3, #255	@ 0xff
 800116a:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 800116c:	bf00      	nop
 800116e:	2101      	movs	r1, #1
 8001170:	4805      	ldr	r0, [pc, #20]	@ (8001188 <DHT11_Check_Response+0x58>)
 8001172:	f001 ffa9 	bl	80030c8 <HAL_GPIO_ReadPin>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f8      	bne.n	800116e <DHT11_Check_Response+0x3e>

	return Response;
 800117c:	79fb      	ldrb	r3, [r7, #7]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40020000 	.word	0x40020000

0800118c <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001192:	2300      	movs	r3, #0
 8001194:	71bb      	strb	r3, [r7, #6]
 8001196:	e037      	b.n	8001208 <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8001198:	bf00      	nop
 800119a:	2101      	movs	r1, #1
 800119c:	481e      	ldr	r0, [pc, #120]	@ (8001218 <DHT11_Read+0x8c>)
 800119e:	f001 ff93 	bl	80030c8 <HAL_GPIO_ReadPin>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f8      	beq.n	800119a <DHT11_Read+0xe>
		DHT_Delay (40);   // wait for 40 us
 80011a8:	2028      	movs	r0, #40	@ 0x28
 80011aa:	f7ff ff4b 	bl	8001044 <DHT_Delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80011ae:	2101      	movs	r1, #1
 80011b0:	4819      	ldr	r0, [pc, #100]	@ (8001218 <DHT11_Read+0x8c>)
 80011b2:	f001 ff89 	bl	80030c8 <HAL_GPIO_ReadPin>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d10e      	bne.n	80011da <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 80011bc:	79bb      	ldrb	r3, [r7, #6]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2201      	movs	r2, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	b25a      	sxtb	r2, r3
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	4013      	ands	r3, r2
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	e00b      	b.n	80011f2 <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80011da:	79bb      	ldrb	r3, [r7, #6]
 80011dc:	f1c3 0307 	rsb	r3, r3, #7
 80011e0:	2201      	movs	r2, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	b25a      	sxtb	r2, r3
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 80011f2:	bf00      	nop
 80011f4:	2101      	movs	r1, #1
 80011f6:	4808      	ldr	r0, [pc, #32]	@ (8001218 <DHT11_Read+0x8c>)
 80011f8:	f001 ff66 	bl	80030c8 <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f8      	bne.n	80011f4 <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 8001202:	79bb      	ldrb	r3, [r7, #6]
 8001204:	3301      	adds	r3, #1
 8001206:	71bb      	strb	r3, [r7, #6]
 8001208:	79bb      	ldrb	r3, [r7, #6]
 800120a:	2b07      	cmp	r3, #7
 800120c:	d9c4      	bls.n	8001198 <DHT11_Read+0xc>
	}
	return i;
 800120e:	79fb      	ldrb	r3, [r7, #7]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40020000 	.word	0x40020000

0800121c <DHT11_Get_Data>:

uint8_t DHT11_Get_Data(int *Temperature, int *Humidity) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	DHT11_Start();
 8001226:	f7ff ff63 	bl	80010f0 <DHT11_Start>

	if (DHT11_Check_Response()) {
 800122a:	f7ff ff81 	bl	8001130 <DHT11_Check_Response>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d044      	beq.n	80012be <DHT11_Get_Data+0xa2>
		Rh_byte1 = DHT11_Read();
 8001234:	f7ff ffaa 	bl	800118c <DHT11_Read>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b22      	ldr	r3, [pc, #136]	@ (80012c8 <DHT11_Get_Data+0xac>)
 800123e:	701a      	strb	r2, [r3, #0]
		Rh_byte2 = DHT11_Read();
 8001240:	f7ff ffa4 	bl	800118c <DHT11_Read>
 8001244:	4603      	mov	r3, r0
 8001246:	461a      	mov	r2, r3
 8001248:	4b20      	ldr	r3, [pc, #128]	@ (80012cc <DHT11_Get_Data+0xb0>)
 800124a:	701a      	strb	r2, [r3, #0]
		Temp_byte1 = DHT11_Read();
 800124c:	f7ff ff9e 	bl	800118c <DHT11_Read>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	4b1e      	ldr	r3, [pc, #120]	@ (80012d0 <DHT11_Get_Data+0xb4>)
 8001256:	701a      	strb	r2, [r3, #0]
		Temp_byte2 = DHT11_Read();
 8001258:	f7ff ff98 	bl	800118c <DHT11_Read>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	4b1c      	ldr	r3, [pc, #112]	@ (80012d4 <DHT11_Get_Data+0xb8>)
 8001262:	701a      	strb	r2, [r3, #0]
		SUM = DHT11_Read();
 8001264:	f7ff ff92 	bl	800118c <DHT11_Read>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <DHT11_Get_Data+0xbc>)
 800126e:	801a      	strh	r2, [r3, #0]

		if (SUM == (Rh_byte1 + Rh_byte2 + Temp_byte1 + Temp_byte2)) {
 8001270:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <DHT11_Get_Data+0xbc>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <DHT11_Get_Data+0xac>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	4b13      	ldr	r3, [pc, #76]	@ (80012cc <DHT11_Get_Data+0xb0>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4413      	add	r3, r2
 8001282:	4a13      	ldr	r2, [pc, #76]	@ (80012d0 <DHT11_Get_Data+0xb4>)
 8001284:	7812      	ldrb	r2, [r2, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a12      	ldr	r2, [pc, #72]	@ (80012d4 <DHT11_Get_Data+0xb8>)
 800128a:	7812      	ldrb	r2, [r2, #0]
 800128c:	4413      	add	r3, r2
 800128e:	4299      	cmp	r1, r3
 8001290:	d113      	bne.n	80012ba <DHT11_Get_Data+0x9e>
			TEMP = Temp_byte1;
 8001292:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <DHT11_Get_Data+0xb4>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <DHT11_Get_Data+0xc0>)
 800129a:	601a      	str	r2, [r3, #0]
			RH = Rh_byte1;
 800129c:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <DHT11_Get_Data+0xac>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <DHT11_Get_Data+0xc4>)
 80012a4:	601a      	str	r2, [r3, #0]

	} else {
		return -1;
	}

	*Temperature = (int*) TEMP;
 80012a6:	4b0d      	ldr	r3, [pc, #52]	@ (80012dc <DHT11_Get_Data+0xc0>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	601a      	str	r2, [r3, #0]
	*Humidity = (int*) RH;
 80012ae:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <DHT11_Get_Data+0xc4>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	601a      	str	r2, [r3, #0]

	return 1;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e002      	b.n	80012c0 <DHT11_Get_Data+0xa4>
			return -1;
 80012ba:	23ff      	movs	r3, #255	@ 0xff
 80012bc:	e000      	b.n	80012c0 <DHT11_Get_Data+0xa4>
		return -1;
 80012be:	23ff      	movs	r3, #255	@ 0xff
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000020c 	.word	0x2000020c
 80012cc:	2000020d 	.word	0x2000020d
 80012d0:	2000020e 	.word	0x2000020e
 80012d4:	2000020f 	.word	0x2000020f
 80012d8:	20000210 	.word	0x20000210
 80012dc:	20000214 	.word	0x20000214
 80012e0:	20000218 	.word	0x20000218

080012e4 <Mount_SD>:
//{
//	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
//}

void Mount_SD (const TCHAR* path)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80012ec:	2201      	movs	r2, #1
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	4805      	ldr	r0, [pc, #20]	@ (8001308 <Mount_SD+0x24>)
 80012f2:	f006 f953 	bl	800759c <f_mount>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b04      	ldr	r3, [pc, #16]	@ (800130c <Mount_SD+0x28>)
 80012fc:	701a      	strb	r2, [r3, #0]
//	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
//	else Send_Uart("SD CARD mounted successfully...\n");
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000021c 	.word	0x2000021c
 800130c:	20000698 	.word	0x20000698

08001310 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8001318:	2201      	movs	r2, #1
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	2000      	movs	r0, #0
 800131e:	f006 f93d 	bl	800759c <f_mount>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	4b03      	ldr	r3, [pc, #12]	@ (8001334 <Unmount_SD+0x24>)
 8001328:	701a      	strb	r2, [r3, #0]
//	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
//	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000698 	.word	0x20000698

08001338 <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	@ 0x38
 800133c:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = pvPortMalloc(20*sizeof (char));
 800133e:	2014      	movs	r0, #20
 8001340:	f009 fa1c 	bl	800a77c <pvPortMalloc>
 8001344:	6378      	str	r0, [r7, #52]	@ 0x34
    sprintf (path, "%s","/");
 8001346:	4a29      	ldr	r2, [pc, #164]	@ (80013ec <Format_SD+0xb4>)
 8001348:	4929      	ldr	r1, [pc, #164]	@ (80013f0 <Format_SD+0xb8>)
 800134a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800134c:	f00a fb32 	bl	800b9b4 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001354:	4618      	mov	r0, r3
 8001356:	f006 fda2 	bl	8007e9e <f_opendir>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	4b25      	ldr	r3, [pc, #148]	@ (80013f4 <Format_SD+0xbc>)
 8001360:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001362:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <Format_SD+0xbc>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d136      	bne.n	80013d8 <Format_SD+0xa0>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4922      	ldr	r1, [pc, #136]	@ (80013f8 <Format_SD+0xc0>)
 800136e:	4618      	mov	r0, r3
 8001370:	f006 fe39 	bl	8007fe6 <f_readdir>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <Format_SD+0xbc>)
 800137a:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 800137c:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <Format_SD+0xbc>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d125      	bne.n	80013d0 <Format_SD+0x98>
 8001384:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <Format_SD+0xc0>)
 8001386:	7a5b      	ldrb	r3, [r3, #9]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d021      	beq.n	80013d0 <Format_SD+0x98>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 800138c:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <Format_SD+0xc0>)
 800138e:	7a1b      	ldrb	r3, [r3, #8]
 8001390:	f003 0310 	and.w	r3, r3, #16
 8001394:	2b00      	cmp	r3, #0
 8001396:	d011      	beq.n	80013bc <Format_SD+0x84>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8001398:	4918      	ldr	r1, [pc, #96]	@ (80013fc <Format_SD+0xc4>)
 800139a:	4819      	ldr	r0, [pc, #100]	@ (8001400 <Format_SD+0xc8>)
 800139c:	f7fe ff38 	bl	8000210 <strcmp>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d012      	beq.n	80013cc <Format_SD+0x94>
            	fresult = f_unlink(fno.fname);
 80013a6:	4815      	ldr	r0, [pc, #84]	@ (80013fc <Format_SD+0xc4>)
 80013a8:	f006 fea0 	bl	80080ec <f_unlink>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <Format_SD+0xbc>)
 80013b2:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <Format_SD+0xbc>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b07      	cmp	r3, #7
 80013ba:	e7d6      	b.n	800136a <Format_SD+0x32>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 80013bc:	480f      	ldr	r0, [pc, #60]	@ (80013fc <Format_SD+0xc4>)
 80013be:	f006 fe95 	bl	80080ec <f_unlink>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <Format_SD+0xbc>)
 80013c8:	701a      	strb	r2, [r3, #0]
 80013ca:	e7ce      	b.n	800136a <Format_SD+0x32>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80013cc:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80013ce:	e7cc      	b.n	800136a <Format_SD+0x32>
            }
        }
        f_closedir(&dir);
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4618      	mov	r0, r3
 80013d4:	f006 fddc 	bl	8007f90 <f_closedir>
    }
    vPortFree(path);
 80013d8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80013da:	f009 fa9d 	bl	800a918 <vPortFree>
    return fresult;
 80013de:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <Format_SD+0xbc>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3738      	adds	r7, #56	@ 0x38
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	0800f320 	.word	0x0800f320
 80013f0:	0800f2f0 	.word	0x0800f2f0
 80013f4:	20000698 	.word	0x20000698
 80013f8:	20000680 	.word	0x20000680
 80013fc:	20000689 	.word	0x20000689
 8001400:	0800f2f4 	.word	0x0800f2f4

08001404 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 800140c:	4939      	ldr	r1, [pc, #228]	@ (80014f4 <Create_File+0xf0>)
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f006 fe2c 	bl	800806c <f_stat>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	4b37      	ldr	r3, [pc, #220]	@ (80014f8 <Create_File+0xf4>)
 800141a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800141c:	4b36      	ldr	r3, [pc, #216]	@ (80014f8 <Create_File+0xf4>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d10e      	bne.n	8001442 <Create_File+0x3e>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8001424:	2064      	movs	r0, #100	@ 0x64
 8001426:	f009 f9a9 	bl	800a77c <pvPortMalloc>
 800142a:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	4933      	ldr	r1, [pc, #204]	@ (80014fc <Create_File+0xf8>)
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f00a fabf 	bl	800b9b4 <siprintf>
//		Send_Uart(buf);
		vPortFree(buf);
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f009 fa6e 	bl	800a918 <vPortFree>
	    return fresult;
 800143c:	4b2e      	ldr	r3, [pc, #184]	@ (80014f8 <Create_File+0xf4>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	e053      	b.n	80014ea <Create_File+0xe6>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001442:	220b      	movs	r2, #11
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	482e      	ldr	r0, [pc, #184]	@ (8001500 <Create_File+0xfc>)
 8001448:	f006 f90c 	bl	8007664 <f_open>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <Create_File+0xf4>)
 8001452:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001454:	4b28      	ldr	r3, [pc, #160]	@ (80014f8 <Create_File+0xf4>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d011      	beq.n	8001480 <Create_File+0x7c>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 800145c:	2064      	movs	r0, #100	@ 0x64
 800145e:	f009 f98d 	bl	800a77c <pvPortMalloc>
 8001462:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8001464:	4b24      	ldr	r3, [pc, #144]	@ (80014f8 <Create_File+0xf4>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4925      	ldr	r1, [pc, #148]	@ (8001504 <Create_File+0x100>)
 800146e:	6938      	ldr	r0, [r7, #16]
 8001470:	f00a faa0 	bl	800b9b4 <siprintf>
//			Send_Uart(buf);
			vPortFree(buf);
 8001474:	6938      	ldr	r0, [r7, #16]
 8001476:	f009 fa4f 	bl	800a918 <vPortFree>
		    return fresult;
 800147a:	4b1f      	ldr	r3, [pc, #124]	@ (80014f8 <Create_File+0xf4>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	e034      	b.n	80014ea <Create_File+0xe6>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001480:	2064      	movs	r0, #100	@ 0x64
 8001482:	f009 f97b 	bl	800a77c <pvPortMalloc>
 8001486:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	491f      	ldr	r1, [pc, #124]	@ (8001508 <Create_File+0x104>)
 800148c:	69f8      	ldr	r0, [r7, #28]
 800148e:	f00a fa91 	bl	800b9b4 <siprintf>
//			Send_Uart(buf);
			vPortFree(buf);
 8001492:	69f8      	ldr	r0, [r7, #28]
 8001494:	f009 fa40 	bl	800a918 <vPortFree>
		}

		fresult = f_close(&fil);
 8001498:	4819      	ldr	r0, [pc, #100]	@ (8001500 <Create_File+0xfc>)
 800149a:	f006 fcd1 	bl	8007e40 <f_close>
 800149e:	4603      	mov	r3, r0
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <Create_File+0xf4>)
 80014a4:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80014a6:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <Create_File+0xf4>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00f      	beq.n	80014ce <Create_File+0xca>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80014ae:	2064      	movs	r0, #100	@ 0x64
 80014b0:	f009 f964 	bl	800a77c <pvPortMalloc>
 80014b4:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 80014b6:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <Create_File+0xf4>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4913      	ldr	r1, [pc, #76]	@ (800150c <Create_File+0x108>)
 80014c0:	6978      	ldr	r0, [r7, #20]
 80014c2:	f00a fa77 	bl	800b9b4 <siprintf>
//			Send_Uart(buf);
			vPortFree(buf);
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f009 fa26 	bl	800a918 <vPortFree>
 80014cc:	e00b      	b.n	80014e6 <Create_File+0xe2>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80014ce:	2064      	movs	r0, #100	@ 0x64
 80014d0:	f009 f954 	bl	800a77c <pvPortMalloc>
 80014d4:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	490d      	ldr	r1, [pc, #52]	@ (8001510 <Create_File+0x10c>)
 80014da:	69b8      	ldr	r0, [r7, #24]
 80014dc:	f00a fa6a 	bl	800b9b4 <siprintf>
//			Send_Uart(buf);
			vPortFree(buf);
 80014e0:	69b8      	ldr	r0, [r7, #24]
 80014e2:	f009 fa19 	bl	800a918 <vPortFree>
		}
	}
    return fresult;
 80014e6:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <Create_File+0xf4>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000680 	.word	0x20000680
 80014f8:	20000698 	.word	0x20000698
 80014fc:	0800f49c 	.word	0x0800f49c
 8001500:	20000450 	.word	0x20000450
 8001504:	0800f4d4 	.word	0x0800f4d4
 8001508:	0800f4fc 	.word	0x0800f4fc
 800150c:	0800f53c 	.word	0x0800f53c
 8001510:	0800f47c 	.word	0x0800f47c

08001514 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800151e:	494a      	ldr	r1, [pc, #296]	@ (8001648 <Update_File+0x134>)
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f006 fda3 	bl	800806c <f_stat>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	4b48      	ldr	r3, [pc, #288]	@ (800164c <Update_File+0x138>)
 800152c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800152e:	4b47      	ldr	r3, [pc, #284]	@ (800164c <Update_File+0x138>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00e      	beq.n	8001554 <Update_File+0x40>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8001536:	2064      	movs	r0, #100	@ 0x64
 8001538:	f009 f920 	bl	800a77c <pvPortMalloc>
 800153c:	60b8      	str	r0, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	4943      	ldr	r1, [pc, #268]	@ (8001650 <Update_File+0x13c>)
 8001542:	68b8      	ldr	r0, [r7, #8]
 8001544:	f00a fa36 	bl	800b9b4 <siprintf>
//		Send_Uart (buf);
		vPortFree(buf);
 8001548:	68b8      	ldr	r0, [r7, #8]
 800154a:	f009 f9e5 	bl	800a918 <vPortFree>
	    return fresult;
 800154e:	4b3f      	ldr	r3, [pc, #252]	@ (800164c <Update_File+0x138>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	e074      	b.n	800163e <Update_File+0x12a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8001554:	2232      	movs	r2, #50	@ 0x32
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	483e      	ldr	r0, [pc, #248]	@ (8001654 <Update_File+0x140>)
 800155a:	f006 f883 	bl	8007664 <f_open>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	4b3a      	ldr	r3, [pc, #232]	@ (800164c <Update_File+0x138>)
 8001564:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001566:	4b39      	ldr	r3, [pc, #228]	@ (800164c <Update_File+0x138>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d011      	beq.n	8001592 <Update_File+0x7e>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 800156e:	2064      	movs	r0, #100	@ 0x64
 8001570:	f009 f904 	bl	800a77c <pvPortMalloc>
 8001574:	60f8      	str	r0, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8001576:	4b35      	ldr	r3, [pc, #212]	@ (800164c <Update_File+0x138>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4936      	ldr	r1, [pc, #216]	@ (8001658 <Update_File+0x144>)
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f00a fa17 	bl	800b9b4 <siprintf>
//	    	Send_Uart(buf);
	        vPortFree(buf);
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f009 f9c6 	bl	800a918 <vPortFree>
	        return fresult;
 800158c:	4b2f      	ldr	r3, [pc, #188]	@ (800164c <Update_File+0x138>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	e055      	b.n	800163e <Update_File+0x12a>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8001592:	6838      	ldr	r0, [r7, #0]
 8001594:	f7fe fe9c 	bl	80002d0 <strlen>
 8001598:	4602      	mov	r2, r0
 800159a:	4b30      	ldr	r3, [pc, #192]	@ (800165c <Update_File+0x148>)
 800159c:	6839      	ldr	r1, [r7, #0]
 800159e:	482d      	ldr	r0, [pc, #180]	@ (8001654 <Update_File+0x140>)
 80015a0:	f006 fa21 	bl	80079e6 <f_write>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b28      	ldr	r3, [pc, #160]	@ (800164c <Update_File+0x138>)
 80015aa:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80015ac:	4b27      	ldr	r3, [pc, #156]	@ (800164c <Update_File+0x138>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00f      	beq.n	80015d4 <Update_File+0xc0>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80015b4:	2064      	movs	r0, #100	@ 0x64
 80015b6:	f009 f8e1 	bl	800a77c <pvPortMalloc>
 80015ba:	61b8      	str	r0, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 80015bc:	4b23      	ldr	r3, [pc, #140]	@ (800164c <Update_File+0x138>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4926      	ldr	r1, [pc, #152]	@ (8001660 <Update_File+0x14c>)
 80015c6:	69b8      	ldr	r0, [r7, #24]
 80015c8:	f00a f9f4 	bl	800b9b4 <siprintf>
//	    	Send_Uart(buf);
	    	vPortFree(buf);
 80015cc:	69b8      	ldr	r0, [r7, #24]
 80015ce:	f009 f9a3 	bl	800a918 <vPortFree>
 80015d2:	e00b      	b.n	80015ec <Update_File+0xd8>
	    }

	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80015d4:	2064      	movs	r0, #100	@ 0x64
 80015d6:	f009 f8d1 	bl	800a77c <pvPortMalloc>
 80015da:	61f8      	str	r0, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	4921      	ldr	r1, [pc, #132]	@ (8001664 <Update_File+0x150>)
 80015e0:	69f8      	ldr	r0, [r7, #28]
 80015e2:	f00a f9e7 	bl	800b9b4 <siprintf>
//	    	Send_Uart(buf);
	    	vPortFree(buf);
 80015e6:	69f8      	ldr	r0, [r7, #28]
 80015e8:	f009 f996 	bl	800a918 <vPortFree>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 80015ec:	4819      	ldr	r0, [pc, #100]	@ (8001654 <Update_File+0x140>)
 80015ee:	f006 fc27 	bl	8007e40 <f_close>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b15      	ldr	r3, [pc, #84]	@ (800164c <Update_File+0x138>)
 80015f8:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80015fa:	4b14      	ldr	r3, [pc, #80]	@ (800164c <Update_File+0x138>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00f      	beq.n	8001622 <Update_File+0x10e>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001602:	2064      	movs	r0, #100	@ 0x64
 8001604:	f009 f8ba 	bl	800a77c <pvPortMalloc>
 8001608:	6138      	str	r0, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <Update_File+0x138>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4915      	ldr	r1, [pc, #84]	@ (8001668 <Update_File+0x154>)
 8001614:	6938      	ldr	r0, [r7, #16]
 8001616:	f00a f9cd 	bl	800b9b4 <siprintf>
//	    	Send_Uart(buf);
	    	vPortFree(buf);
 800161a:	6938      	ldr	r0, [r7, #16]
 800161c:	f009 f97c 	bl	800a918 <vPortFree>
 8001620:	e00b      	b.n	800163a <Update_File+0x126>
	    }
	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001622:	2064      	movs	r0, #100	@ 0x64
 8001624:	f009 f8aa 	bl	800a77c <pvPortMalloc>
 8001628:	6178      	str	r0, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	490f      	ldr	r1, [pc, #60]	@ (800166c <Update_File+0x158>)
 800162e:	6978      	ldr	r0, [r7, #20]
 8001630:	f00a f9c0 	bl	800b9b4 <siprintf>
//	    	Send_Uart(buf);
	    	vPortFree(buf);
 8001634:	6978      	ldr	r0, [r7, #20]
 8001636:	f009 f96f 	bl	800a918 <vPortFree>
	     }
	}
    return fresult;
 800163a:	4b04      	ldr	r3, [pc, #16]	@ (800164c <Update_File+0x138>)
 800163c:	781b      	ldrb	r3, [r3, #0]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3720      	adds	r7, #32
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000680 	.word	0x20000680
 800164c:	20000698 	.word	0x20000698
 8001650:	0800f324 	.word	0x0800f324
 8001654:	20000450 	.word	0x20000450
 8001658:	0800f344 	.word	0x0800f344
 800165c:	2000069c 	.word	0x2000069c
 8001660:	0800f560 	.word	0x0800f560
 8001664:	0800f588 	.word	0x0800f588
 8001668:	0800f454 	.word	0x0800f454
 800166c:	0800f47c 	.word	0x0800f47c

08001670 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	2140      	movs	r1, #64	@ 0x40
 8001678:	4802      	ldr	r0, [pc, #8]	@ (8001684 <SELECT+0x14>)
 800167a:	f001 fd3d 	bl	80030f8 <HAL_GPIO_WritePin>
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40020400 	.word	0x40020400

08001688 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800168c:	2201      	movs	r2, #1
 800168e:	2140      	movs	r1, #64	@ 0x40
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <DESELECT+0x14>)
 8001692:	f001 fd31 	bl	80030f8 <HAL_GPIO_WritePin>
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40020400 	.word	0x40020400

080016a0 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80016aa:	bf00      	nop
 80016ac:	4808      	ldr	r0, [pc, #32]	@ (80016d0 <SPI_TxByte+0x30>)
 80016ae:	f002 fecd 	bl	800444c <HAL_SPI_GetState>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d1f9      	bne.n	80016ac <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80016b8:	1df9      	adds	r1, r7, #7
 80016ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016be:	2201      	movs	r2, #1
 80016c0:	4803      	ldr	r0, [pc, #12]	@ (80016d0 <SPI_TxByte+0x30>)
 80016c2:	f002 fbd6 	bl	8003e72 <HAL_SPI_Transmit>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000944 	.word	0x20000944

080016d4 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80016da:	23ff      	movs	r3, #255	@ 0xff
 80016dc:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80016e2:	bf00      	nop
 80016e4:	4809      	ldr	r0, [pc, #36]	@ (800170c <SPI_RxByte+0x38>)
 80016e6:	f002 feb1 	bl	800444c <HAL_SPI_GetState>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d1f9      	bne.n	80016e4 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80016f0:	1dba      	adds	r2, r7, #6
 80016f2:	1df9      	adds	r1, r7, #7
 80016f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2301      	movs	r3, #1
 80016fc:	4803      	ldr	r0, [pc, #12]	@ (800170c <SPI_RxByte+0x38>)
 80016fe:	f002 fcfc 	bl	80040fa <HAL_SPI_TransmitReceive>
  
  return data;
 8001702:	79bb      	ldrb	r3, [r7, #6]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000944 	.word	0x20000944

08001710 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001718:	f7ff ffdc 	bl	80016d4 <SPI_RxByte>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	701a      	strb	r2, [r3, #0]
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8001732:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <SD_ReadyWait+0x34>)
 8001734:	2232      	movs	r2, #50	@ 0x32
 8001736:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8001738:	f7ff ffcc 	bl	80016d4 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 800173c:	f7ff ffca 	bl	80016d4 <SPI_RxByte>
 8001740:	4603      	mov	r3, r0
 8001742:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	2bff      	cmp	r3, #255	@ 0xff
 8001748:	d004      	beq.n	8001754 <SD_ReadyWait+0x28>
 800174a:	4b05      	ldr	r3, [pc, #20]	@ (8001760 <SD_ReadyWait+0x34>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1f3      	bne.n	800173c <SD_ReadyWait+0x10>
  
  return res;
 8001754:	79fb      	ldrb	r3, [r7, #7]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000ace 	.word	0x20000ace

08001764 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800176a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800176e:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8001770:	f7ff ff8a 	bl	8001688 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	e005      	b.n	8001786 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800177a:	20ff      	movs	r0, #255	@ 0xff
 800177c:	f7ff ff90 	bl	80016a0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	3301      	adds	r3, #1
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	2b09      	cmp	r3, #9
 800178a:	ddf6      	ble.n	800177a <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 800178c:	f7ff ff70 	bl	8001670 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8001790:	2340      	movs	r3, #64	@ 0x40
 8001792:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80017a4:	2395      	movs	r3, #149	@ 0x95
 80017a6:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	e009      	b.n	80017c2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80017ae:	1d3a      	adds	r2, r7, #4
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ff72 	bl	80016a0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3301      	adds	r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2b05      	cmp	r3, #5
 80017c6:	ddf2      	ble.n	80017ae <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80017c8:	e002      	b.n	80017d0 <SD_PowerOn+0x6c>
  {
    Count--;
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80017d0:	f7ff ff80 	bl	80016d4 <SPI_RxByte>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d002      	beq.n	80017e0 <SD_PowerOn+0x7c>
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1f4      	bne.n	80017ca <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80017e0:	f7ff ff52 	bl	8001688 <DESELECT>
  SPI_TxByte(0XFF);
 80017e4:	20ff      	movs	r0, #255	@ 0xff
 80017e6:	f7ff ff5b 	bl	80016a0 <SPI_TxByte>
  
  PowerFlag = 1;
 80017ea:	4b03      	ldr	r3, [pc, #12]	@ (80017f8 <SD_PowerOn+0x94>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
}
 80017f0:	bf00      	nop
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200006a1 	.word	0x200006a1

080017fc <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001800:	4b03      	ldr	r3, [pc, #12]	@ (8001810 <SD_PowerOff+0x14>)
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	200006a1 	.word	0x200006a1

08001814 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001818:	4b03      	ldr	r3, [pc, #12]	@ (8001828 <SD_CheckPower+0x14>)
 800181a:	781b      	ldrb	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	200006a1 	.word	0x200006a1

0800182c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8001836:	4b17      	ldr	r3, [pc, #92]	@ (8001894 <SD_RxDataBlock+0x68>)
 8001838:	220a      	movs	r2, #10
 800183a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 800183c:	f7ff ff4a 	bl	80016d4 <SPI_RxByte>
 8001840:	4603      	mov	r3, r0
 8001842:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	2bff      	cmp	r3, #255	@ 0xff
 8001848:	d104      	bne.n	8001854 <SD_RxDataBlock+0x28>
 800184a:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <SD_RxDataBlock+0x68>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f3      	bne.n	800183c <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	2bfe      	cmp	r3, #254	@ 0xfe
 8001858:	d001      	beq.n	800185e <SD_RxDataBlock+0x32>
    return FALSE;
 800185a:	2300      	movs	r3, #0
 800185c:	e016      	b.n	800188c <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff53 	bl	8001710 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff4d 	bl	8001710 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	3b02      	subs	r3, #2
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1ed      	bne.n	800185e <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8001882:	f7ff ff27 	bl	80016d4 <SPI_RxByte>
  SPI_RxByte();
 8001886:	f7ff ff25 	bl	80016d4 <SPI_RxByte>
  
  return TRUE;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000acd 	.word	0x20000acd

08001898 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80018a8:	f7ff ff40 	bl	800172c <SD_ReadyWait>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2bff      	cmp	r3, #255	@ 0xff
 80018b0:	d001      	beq.n	80018b6 <SD_TxDataBlock+0x1e>
    return FALSE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e040      	b.n	8001938 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fef1 	bl	80016a0 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	2bfd      	cmp	r3, #253	@ 0xfd
 80018c2:	d031      	beq.n	8001928 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fee5 	bl	80016a0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fede 	bl	80016a0 <SPI_TxByte>
    } while (--wc);
 80018e4:	7bbb      	ldrb	r3, [r7, #14]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	73bb      	strb	r3, [r7, #14]
 80018ea:	7bbb      	ldrb	r3, [r7, #14]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1eb      	bne.n	80018c8 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80018f0:	f7ff fef0 	bl	80016d4 <SPI_RxByte>
    SPI_RxByte();
 80018f4:	f7ff feee 	bl	80016d4 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80018f8:	e00b      	b.n	8001912 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80018fa:	f7ff feeb 	bl	80016d4 <SPI_RxByte>
 80018fe:	4603      	mov	r3, r0
 8001900:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	f003 031f 	and.w	r3, r3, #31
 8001908:	2b05      	cmp	r3, #5
 800190a:	d006      	beq.n	800191a <SD_TxDataBlock+0x82>
        break;
      
      i++;
 800190c:	7b7b      	ldrb	r3, [r7, #13]
 800190e:	3301      	adds	r3, #1
 8001910:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8001912:	7b7b      	ldrb	r3, [r7, #13]
 8001914:	2b40      	cmp	r3, #64	@ 0x40
 8001916:	d9f0      	bls.n	80018fa <SD_TxDataBlock+0x62>
 8001918:	e000      	b.n	800191c <SD_TxDataBlock+0x84>
        break;
 800191a:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800191c:	bf00      	nop
 800191e:	f7ff fed9 	bl	80016d4 <SPI_RxByte>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0fa      	beq.n	800191e <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	f003 031f 	and.w	r3, r3, #31
 800192e:	2b05      	cmp	r3, #5
 8001930:	d101      	bne.n	8001936 <SD_TxDataBlock+0x9e>
    return TRUE;
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	6039      	str	r1, [r7, #0]
 800194a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800194c:	f7ff feee 	bl	800172c <SD_ReadyWait>
 8001950:	4603      	mov	r3, r0
 8001952:	2bff      	cmp	r3, #255	@ 0xff
 8001954:	d001      	beq.n	800195a <SD_SendCmd+0x1a>
    return 0xFF;
 8001956:	23ff      	movs	r3, #255	@ 0xff
 8001958:	e040      	b.n	80019dc <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fe9f 	bl	80016a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	0e1b      	lsrs	r3, r3, #24
 8001966:	b2db      	uxtb	r3, r3
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fe99 	bl	80016a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	0c1b      	lsrs	r3, r3, #16
 8001972:	b2db      	uxtb	r3, r3
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fe93 	bl	80016a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	b2db      	uxtb	r3, r3
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fe8d 	bl	80016a0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fe88 	bl	80016a0 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8001990:	2300      	movs	r3, #0
 8001992:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b40      	cmp	r3, #64	@ 0x40
 8001998:	d101      	bne.n	800199e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800199a:	2395      	movs	r3, #149	@ 0x95
 800199c:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	2b48      	cmp	r3, #72	@ 0x48
 80019a2:	d101      	bne.n	80019a8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80019a4:	2387      	movs	r3, #135	@ 0x87
 80019a6:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fe78 	bl	80016a0 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	2b4c      	cmp	r3, #76	@ 0x4c
 80019b4:	d101      	bne.n	80019ba <SD_SendCmd+0x7a>
    SPI_RxByte();
 80019b6:	f7ff fe8d 	bl	80016d4 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80019ba:	230a      	movs	r3, #10
 80019bc:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80019be:	f7ff fe89 	bl	80016d4 <SPI_RxByte>
 80019c2:	4603      	mov	r3, r0
 80019c4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80019c6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	da05      	bge.n	80019da <SD_SendCmd+0x9a>
 80019ce:	7bbb      	ldrb	r3, [r7, #14]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	73bb      	strb	r3, [r7, #14]
 80019d4:	7bbb      	ldrb	r3, [r7, #14]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f1      	bne.n	80019be <SD_SendCmd+0x7e>
  
  return res;
 80019da:	7b7b      	ldrb	r3, [r7, #13]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80019e4:	b590      	push	{r4, r7, lr}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0d5      	b.n	8001ba4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80019f8:	4b6c      	ldr	r3, [pc, #432]	@ (8001bac <SD_disk_initialize+0x1c8>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <SD_disk_initialize+0x2a>
    return Stat;        
 8001a06:	4b69      	ldr	r3, [pc, #420]	@ (8001bac <SD_disk_initialize+0x1c8>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	e0ca      	b.n	8001ba4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8001a0e:	f7ff fea9 	bl	8001764 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8001a12:	f7ff fe2d 	bl	8001670 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	2040      	movs	r0, #64	@ 0x40
 8001a1e:	f7ff ff8f 	bl	8001940 <SD_SendCmd>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	f040 80a5 	bne.w	8001b74 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001a2a:	4b61      	ldr	r3, [pc, #388]	@ (8001bb0 <SD_disk_initialize+0x1cc>)
 8001a2c:	2264      	movs	r2, #100	@ 0x64
 8001a2e:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001a30:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001a34:	2048      	movs	r0, #72	@ 0x48
 8001a36:	f7ff ff83 	bl	8001940 <SD_SendCmd>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d158      	bne.n	8001af2 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001a40:	2300      	movs	r3, #0
 8001a42:	73fb      	strb	r3, [r7, #15]
 8001a44:	e00c      	b.n	8001a60 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001a46:	7bfc      	ldrb	r4, [r7, #15]
 8001a48:	f7ff fe44 	bl	80016d4 <SPI_RxByte>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	461a      	mov	r2, r3
 8001a50:	f104 0310 	add.w	r3, r4, #16
 8001a54:	443b      	add	r3, r7
 8001a56:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	73fb      	strb	r3, [r7, #15]
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d9ef      	bls.n	8001a46 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001a66:	7abb      	ldrb	r3, [r7, #10]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	f040 8083 	bne.w	8001b74 <SD_disk_initialize+0x190>
 8001a6e:	7afb      	ldrb	r3, [r7, #11]
 8001a70:	2baa      	cmp	r3, #170	@ 0xaa
 8001a72:	d17f      	bne.n	8001b74 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001a74:	2100      	movs	r1, #0
 8001a76:	2077      	movs	r0, #119	@ 0x77
 8001a78:	f7ff ff62 	bl	8001940 <SD_SendCmd>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d807      	bhi.n	8001a92 <SD_disk_initialize+0xae>
 8001a82:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001a86:	2069      	movs	r0, #105	@ 0x69
 8001a88:	f7ff ff5a 	bl	8001940 <SD_SendCmd>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d005      	beq.n	8001a9e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001a92:	4b47      	ldr	r3, [pc, #284]	@ (8001bb0 <SD_disk_initialize+0x1cc>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1eb      	bne.n	8001a74 <SD_disk_initialize+0x90>
 8001a9c:	e000      	b.n	8001aa0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001a9e:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001aa0:	4b43      	ldr	r3, [pc, #268]	@ (8001bb0 <SD_disk_initialize+0x1cc>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d064      	beq.n	8001b74 <SD_disk_initialize+0x190>
 8001aaa:	2100      	movs	r1, #0
 8001aac:	207a      	movs	r0, #122	@ 0x7a
 8001aae:	f7ff ff47 	bl	8001940 <SD_SendCmd>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d15d      	bne.n	8001b74 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	73fb      	strb	r3, [r7, #15]
 8001abc:	e00c      	b.n	8001ad8 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001abe:	7bfc      	ldrb	r4, [r7, #15]
 8001ac0:	f7ff fe08 	bl	80016d4 <SPI_RxByte>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	f104 0310 	add.w	r3, r4, #16
 8001acc:	443b      	add	r3, r7
 8001ace:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d9ef      	bls.n	8001abe <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8001ade:	7a3b      	ldrb	r3, [r7, #8]
 8001ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <SD_disk_initialize+0x108>
 8001ae8:	2306      	movs	r3, #6
 8001aea:	e000      	b.n	8001aee <SD_disk_initialize+0x10a>
 8001aec:	2302      	movs	r3, #2
 8001aee:	73bb      	strb	r3, [r7, #14]
 8001af0:	e040      	b.n	8001b74 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001af2:	2100      	movs	r1, #0
 8001af4:	2077      	movs	r0, #119	@ 0x77
 8001af6:	f7ff ff23 	bl	8001940 <SD_SendCmd>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d808      	bhi.n	8001b12 <SD_disk_initialize+0x12e>
 8001b00:	2100      	movs	r1, #0
 8001b02:	2069      	movs	r0, #105	@ 0x69
 8001b04:	f7ff ff1c 	bl	8001940 <SD_SendCmd>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d801      	bhi.n	8001b12 <SD_disk_initialize+0x12e>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e000      	b.n	8001b14 <SD_disk_initialize+0x130>
 8001b12:	2301      	movs	r3, #1
 8001b14:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001b16:	7bbb      	ldrb	r3, [r7, #14]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d10e      	bne.n	8001b3a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	2077      	movs	r0, #119	@ 0x77
 8001b20:	f7ff ff0e 	bl	8001940 <SD_SendCmd>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d80e      	bhi.n	8001b48 <SD_disk_initialize+0x164>
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	2069      	movs	r0, #105	@ 0x69
 8001b2e:	f7ff ff07 	bl	8001940 <SD_SendCmd>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d107      	bne.n	8001b48 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001b38:	e00d      	b.n	8001b56 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	2041      	movs	r0, #65	@ 0x41
 8001b3e:	f7ff feff 	bl	8001940 <SD_SendCmd>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001b48:	4b19      	ldr	r3, [pc, #100]	@ (8001bb0 <SD_disk_initialize+0x1cc>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1e1      	bne.n	8001b16 <SD_disk_initialize+0x132>
 8001b52:	e000      	b.n	8001b56 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001b54:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001b56:	4b16      	ldr	r3, [pc, #88]	@ (8001bb0 <SD_disk_initialize+0x1cc>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d007      	beq.n	8001b70 <SD_disk_initialize+0x18c>
 8001b60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b64:	2050      	movs	r0, #80	@ 0x50
 8001b66:	f7ff feeb 	bl	8001940 <SD_SendCmd>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8001b74:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb4 <SD_disk_initialize+0x1d0>)
 8001b76:	7bbb      	ldrb	r3, [r7, #14]
 8001b78:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8001b7a:	f7ff fd85 	bl	8001688 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001b7e:	f7ff fda9 	bl	80016d4 <SPI_RxByte>
  
  if (type) 
 8001b82:	7bbb      	ldrb	r3, [r7, #14]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d008      	beq.n	8001b9a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001b88:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <SD_disk_initialize+0x1c8>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	f023 0301 	bic.w	r3, r3, #1
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <SD_disk_initialize+0x1c8>)
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	e001      	b.n	8001b9e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001b9a:	f7ff fe2f 	bl	80017fc <SD_PowerOff>
  }
  
  return Stat;
 8001b9e:	4b03      	ldr	r3, [pc, #12]	@ (8001bac <SD_disk_initialize+0x1c8>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	b2db      	uxtb	r3, r3
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd90      	pop	{r4, r7, pc}
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	20000acd 	.word	0x20000acd
 8001bb4:	200006a0 	.word	0x200006a0

08001bb8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e002      	b.n	8001bd2 <SD_disk_status+0x1a>
  
  return Stat;
 8001bcc:	4b04      	ldr	r3, [pc, #16]	@ (8001be0 <SD_disk_status+0x28>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	b2db      	uxtb	r3, r3
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000000 	.word	0x20000000

08001be4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d102      	bne.n	8001c00 <SD_disk_read+0x1c>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <SD_disk_read+0x20>
    return RES_PARERR;
 8001c00:	2304      	movs	r3, #4
 8001c02:	e051      	b.n	8001ca8 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001c04:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb0 <SD_disk_read+0xcc>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e048      	b.n	8001ca8 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001c16:	4b27      	ldr	r3, [pc, #156]	@ (8001cb4 <SD_disk_read+0xd0>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d102      	bne.n	8001c28 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	025b      	lsls	r3, r3, #9
 8001c26:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001c28:	f7ff fd22 	bl	8001670 <SELECT>
  
  if (count == 1) 
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d111      	bne.n	8001c56 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	2051      	movs	r0, #81	@ 0x51
 8001c36:	f7ff fe83 	bl	8001940 <SD_SendCmd>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d129      	bne.n	8001c94 <SD_disk_read+0xb0>
 8001c40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c44:	68b8      	ldr	r0, [r7, #8]
 8001c46:	f7ff fdf1 	bl	800182c <SD_RxDataBlock>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d021      	beq.n	8001c94 <SD_disk_read+0xb0>
      count = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	e01e      	b.n	8001c94 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	2052      	movs	r0, #82	@ 0x52
 8001c5a:	f7ff fe71 	bl	8001940 <SD_SendCmd>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d117      	bne.n	8001c94 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001c64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c68:	68b8      	ldr	r0, [r7, #8]
 8001c6a:	f7ff fddf 	bl	800182c <SD_RxDataBlock>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00a      	beq.n	8001c8a <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001c7a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1ed      	bne.n	8001c64 <SD_disk_read+0x80>
 8001c88:	e000      	b.n	8001c8c <SD_disk_read+0xa8>
          break;
 8001c8a:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	204c      	movs	r0, #76	@ 0x4c
 8001c90:	f7ff fe56 	bl	8001940 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8001c94:	f7ff fcf8 	bl	8001688 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001c98:	f7ff fd1c 	bl	80016d4 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	bf14      	ite	ne
 8001ca2:	2301      	movne	r3, #1
 8001ca4:	2300      	moveq	r3, #0
 8001ca6:	b2db      	uxtb	r3, r3
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	200006a0 	.word	0x200006a0

08001cb8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d102      	bne.n	8001cd4 <SD_disk_write+0x1c>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <SD_disk_write+0x20>
    return RES_PARERR;
 8001cd4:	2304      	movs	r3, #4
 8001cd6:	e06b      	b.n	8001db0 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001cd8:	4b37      	ldr	r3, [pc, #220]	@ (8001db8 <SD_disk_write+0x100>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e062      	b.n	8001db0 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001cea:	4b33      	ldr	r3, [pc, #204]	@ (8001db8 <SD_disk_write+0x100>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <SD_disk_write+0x44>
    return RES_WRPRT;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e059      	b.n	8001db0 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001cfc:	4b2f      	ldr	r3, [pc, #188]	@ (8001dbc <SD_disk_write+0x104>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	025b      	lsls	r3, r3, #9
 8001d0c:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001d0e:	f7ff fcaf 	bl	8001670 <SELECT>
  
  if (count == 1) 
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d110      	bne.n	8001d3a <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	2058      	movs	r0, #88	@ 0x58
 8001d1c:	f7ff fe10 	bl	8001940 <SD_SendCmd>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d13a      	bne.n	8001d9c <SD_disk_write+0xe4>
 8001d26:	21fe      	movs	r1, #254	@ 0xfe
 8001d28:	68b8      	ldr	r0, [r7, #8]
 8001d2a:	f7ff fdb5 	bl	8001898 <SD_TxDataBlock>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d033      	beq.n	8001d9c <SD_disk_write+0xe4>
      count = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	e030      	b.n	8001d9c <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001d3a:	4b20      	ldr	r3, [pc, #128]	@ (8001dbc <SD_disk_write+0x104>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d007      	beq.n	8001d56 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001d46:	2100      	movs	r1, #0
 8001d48:	2077      	movs	r0, #119	@ 0x77
 8001d4a:	f7ff fdf9 	bl	8001940 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001d4e:	6839      	ldr	r1, [r7, #0]
 8001d50:	2057      	movs	r0, #87	@ 0x57
 8001d52:	f7ff fdf5 	bl	8001940 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	2059      	movs	r0, #89	@ 0x59
 8001d5a:	f7ff fdf1 	bl	8001940 <SD_SendCmd>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d11b      	bne.n	8001d9c <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001d64:	21fc      	movs	r1, #252	@ 0xfc
 8001d66:	68b8      	ldr	r0, [r7, #8]
 8001d68:	f7ff fd96 	bl	8001898 <SD_TxDataBlock>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00a      	beq.n	8001d88 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001d78:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1ee      	bne.n	8001d64 <SD_disk_write+0xac>
 8001d86:	e000      	b.n	8001d8a <SD_disk_write+0xd2>
          break;
 8001d88:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8001d8a:	21fd      	movs	r1, #253	@ 0xfd
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f7ff fd83 	bl	8001898 <SD_TxDataBlock>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <SD_disk_write+0xe4>
      {        
        count = 1;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001d9c:	f7ff fc74 	bl	8001688 <DESELECT>
  SPI_RxByte();
 8001da0:	f7ff fc98 	bl	80016d4 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	bf14      	ite	ne
 8001daa:	2301      	movne	r3, #1
 8001dac:	2300      	moveq	r3, #0
 8001dae:	b2db      	uxtb	r3, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	200006a0 	.word	0x200006a0

08001dc0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b08b      	sub	sp, #44	@ 0x2c
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	603a      	str	r2, [r7, #0]
 8001dca:	71fb      	strb	r3, [r7, #7]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001dda:	2304      	movs	r3, #4
 8001ddc:	e119      	b.n	8002012 <SD_disk_ioctl+0x252>
  
  res = RES_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  if (ctrl == CTRL_POWER) 
 8001de4:	79bb      	ldrb	r3, [r7, #6]
 8001de6:	2b05      	cmp	r3, #5
 8001de8:	d129      	bne.n	8001e3e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d017      	beq.n	8001e22 <SD_disk_ioctl+0x62>
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	dc1f      	bgt.n	8001e36 <SD_disk_ioctl+0x76>
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <SD_disk_ioctl+0x40>
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d00b      	beq.n	8001e16 <SD_disk_ioctl+0x56>
 8001dfe:	e01a      	b.n	8001e36 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001e00:	f7ff fd08 	bl	8001814 <SD_CheckPower>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001e0a:	f7ff fcf7 	bl	80017fc <SD_PowerOff>
      res = RES_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001e14:	e0fb      	b.n	800200e <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8001e16:	f7ff fca5 	bl	8001764 <SD_PowerOn>
      res = RES_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001e20:	e0f5      	b.n	800200e <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	1c5c      	adds	r4, r3, #1
 8001e26:	f7ff fcf5 	bl	8001814 <SD_CheckPower>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001e34:	e0eb      	b.n	800200e <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8001e36:	2304      	movs	r3, #4
 8001e38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001e3c:	e0e7      	b.n	800200e <SD_disk_ioctl+0x24e>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8001e3e:	4b77      	ldr	r3, [pc, #476]	@ (800201c <SD_disk_ioctl+0x25c>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e0e0      	b.n	8002012 <SD_disk_ioctl+0x252>
    
    SELECT();
 8001e50:	f7ff fc0e 	bl	8001670 <SELECT>
    
    switch (ctrl) 
 8001e54:	79bb      	ldrb	r3, [r7, #6]
 8001e56:	2b0d      	cmp	r3, #13
 8001e58:	f200 80ca 	bhi.w	8001ff0 <SD_disk_ioctl+0x230>
 8001e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e64 <SD_disk_ioctl+0xa4>)
 8001e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e62:	bf00      	nop
 8001e64:	08001f5b 	.word	0x08001f5b
 8001e68:	08001e9d 	.word	0x08001e9d
 8001e6c:	08001f4b 	.word	0x08001f4b
 8001e70:	08001ff1 	.word	0x08001ff1
 8001e74:	08001ff1 	.word	0x08001ff1
 8001e78:	08001ff1 	.word	0x08001ff1
 8001e7c:	08001ff1 	.word	0x08001ff1
 8001e80:	08001ff1 	.word	0x08001ff1
 8001e84:	08001ff1 	.word	0x08001ff1
 8001e88:	08001ff1 	.word	0x08001ff1
 8001e8c:	08001ff1 	.word	0x08001ff1
 8001e90:	08001f6d 	.word	0x08001f6d
 8001e94:	08001f91 	.word	0x08001f91
 8001e98:	08001fb5 	.word	0x08001fb5
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2049      	movs	r0, #73	@ 0x49
 8001ea0:	f7ff fd4e 	bl	8001940 <SD_SendCmd>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f040 80a6 	bne.w	8001ff8 <SD_disk_ioctl+0x238>
 8001eac:	f107 030c 	add.w	r3, r7, #12
 8001eb0:	2110      	movs	r1, #16
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fcba 	bl	800182c <SD_RxDataBlock>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 809c 	beq.w	8001ff8 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1) 
 8001ec0:	7b3b      	ldrb	r3, [r7, #12]
 8001ec2:	099b      	lsrs	r3, r3, #6
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d10d      	bne.n	8001ee6 <SD_disk_ioctl+0x126>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001eca:	7d7b      	ldrb	r3, [r7, #21]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	7d3b      	ldrb	r3, [r7, #20]
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3301      	adds	r3, #1
 8001eda:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001edc:	8bfb      	ldrh	r3, [r7, #30]
 8001ede:	029a      	lsls	r2, r3, #10
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	e02d      	b.n	8001f42 <SD_disk_ioctl+0x182>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001ee6:	7c7b      	ldrb	r3, [r7, #17]
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	7dbb      	ldrb	r3, [r7, #22]
 8001ef0:	09db      	lsrs	r3, r3, #7
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	7d7b      	ldrb	r3, [r7, #21]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	f003 0306 	and.w	r3, r3, #6
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	3302      	adds	r3, #2
 8001f0a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001f0e:	7d3b      	ldrb	r3, [r7, #20]
 8001f10:	099b      	lsrs	r3, r3, #6
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	7cfb      	ldrb	r3, [r7, #19]
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	7cbb      	ldrb	r3, [r7, #18]
 8001f22:	029b      	lsls	r3, r3, #10
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001f34:	8bfa      	ldrh	r2, [r7, #30]
 8001f36:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f3a:	3b09      	subs	r3, #9
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001f48:	e056      	b.n	8001ff8 <SD_disk_ioctl+0x238>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f50:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001f58:	e055      	b.n	8002006 <SD_disk_ioctl+0x246>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001f5a:	f7ff fbe7 	bl	800172c <SD_ReadyWait>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2bff      	cmp	r3, #255	@ 0xff
 8001f62:	d14b      	bne.n	8001ffc <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001f6a:	e047      	b.n	8001ffc <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	2049      	movs	r0, #73	@ 0x49
 8001f70:	f7ff fce6 	bl	8001940 <SD_SendCmd>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d142      	bne.n	8002000 <SD_disk_ioctl+0x240>
 8001f7a:	2110      	movs	r1, #16
 8001f7c:	6a38      	ldr	r0, [r7, #32]
 8001f7e:	f7ff fc55 	bl	800182c <SD_RxDataBlock>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d03b      	beq.n	8002000 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001f8e:	e037      	b.n	8002000 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001f90:	2100      	movs	r1, #0
 8001f92:	204a      	movs	r0, #74	@ 0x4a
 8001f94:	f7ff fcd4 	bl	8001940 <SD_SendCmd>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d132      	bne.n	8002004 <SD_disk_ioctl+0x244>
 8001f9e:	2110      	movs	r1, #16
 8001fa0:	6a38      	ldr	r0, [r7, #32]
 8001fa2:	f7ff fc43 	bl	800182c <SD_RxDataBlock>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d02b      	beq.n	8002004 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001fb2:	e027      	b.n	8002004 <SD_disk_ioctl+0x244>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	207a      	movs	r0, #122	@ 0x7a
 8001fb8:	f7ff fcc2 	bl	8001940 <SD_SendCmd>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d116      	bne.n	8001ff0 <SD_disk_ioctl+0x230>
      {         
        for (n = 0; n < 4; n++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001fc8:	e00b      	b.n	8001fe2 <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 8001fca:	6a3c      	ldr	r4, [r7, #32]
 8001fcc:	1c63      	adds	r3, r4, #1
 8001fce:	623b      	str	r3, [r7, #32]
 8001fd0:	f7ff fb80 	bl	80016d4 <SPI_RxByte>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001fd8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001fdc:	3301      	adds	r3, #1
 8001fde:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001fe2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d9ef      	bls.n	8001fca <SD_disk_ioctl+0x20a>
        }
        
        res = RES_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }     
      
    default:
      res = RES_PARERR;
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001ff6:	e006      	b.n	8002006 <SD_disk_ioctl+0x246>
      break;
 8001ff8:	bf00      	nop
 8001ffa:	e004      	b.n	8002006 <SD_disk_ioctl+0x246>
      break;
 8001ffc:	bf00      	nop
 8001ffe:	e002      	b.n	8002006 <SD_disk_ioctl+0x246>
      break;
 8002000:	bf00      	nop
 8002002:	e000      	b.n	8002006 <SD_disk_ioctl+0x246>
      break;
 8002004:	bf00      	nop
    }
    
    DESELECT();
 8002006:	f7ff fb3f 	bl	8001688 <DESELECT>
    SPI_RxByte();
 800200a:	f7ff fb63 	bl	80016d4 <SPI_RxByte>
  }
  
  return res;
 800200e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002012:	4618      	mov	r0, r3
 8002014:	372c      	adds	r7, #44	@ 0x2c
 8002016:	46bd      	mov	sp, r7
 8002018:	bd90      	pop	{r4, r7, pc}
 800201a:	bf00      	nop
 800201c:	20000000 	.word	0x20000000

08002020 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4a07      	ldr	r2, [pc, #28]	@ (800204c <vApplicationGetIdleTaskMemory+0x2c>)
 8002030:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	4a06      	ldr	r2, [pc, #24]	@ (8002050 <vApplicationGetIdleTaskMemory+0x30>)
 8002036:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2280      	movs	r2, #128	@ 0x80
 800203c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800203e:	bf00      	nop
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	200006a4 	.word	0x200006a4
 8002050:	20000744 	.word	0x20000744

08002054 <DHT_Task>:
xTaskHandle SDCARD_Task_Handler;



uint8_t data_ready = 0;
void DHT_Task(void *argument) {
 8002054:	b580      	push	{r7, lr}
 8002056:	b090      	sub	sp, #64	@ 0x40
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]

	char uart_buffer[50] = {0};
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	f107 0310 	add.w	r3, r7, #16
 8002064:	222e      	movs	r2, #46	@ 0x2e
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f009 fd06 	bl	800ba7a <memset>
	//memset(uart_buffer, 0, 50);  // Sadece başta buffer'ı sıfırla

    while (1) {

        DHT11_Get_Data(&Temperature, &Humidity);
 800206e:	4911      	ldr	r1, [pc, #68]	@ (80020b4 <DHT_Task+0x60>)
 8002070:	4811      	ldr	r0, [pc, #68]	@ (80020b8 <DHT_Task+0x64>)
 8002072:	f7ff f8d3 	bl	800121c <DHT11_Get_Data>
        data_ready = 1;  // Veri hazır bayrağını set et
 8002076:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <DHT_Task+0x68>)
 8002078:	2201      	movs	r2, #1
 800207a:	701a      	strb	r2, [r3, #0]

//        sprintf(uart_buffer, "Temp=%dC, Humidity=%d%%\n", Temperature, Humidity);

        sprintf(uart_buffer, "%d\n", Temperature);
 800207c:	4b0e      	ldr	r3, [pc, #56]	@ (80020b8 <DHT_Task+0x64>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	f107 030c 	add.w	r3, r7, #12
 8002084:	490e      	ldr	r1, [pc, #56]	@ (80020c0 <DHT_Task+0x6c>)
 8002086:	4618      	mov	r0, r3
 8002088:	f009 fc94 	bl	800b9b4 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe f91d 	bl	80002d0 <strlen>
 8002096:	4603      	mov	r3, r0
 8002098:	b29a      	uxth	r2, r3
 800209a:	f107 010c 	add.w	r1, r7, #12
 800209e:	f04f 33ff 	mov.w	r3, #4294967295
 80020a2:	4808      	ldr	r0, [pc, #32]	@ (80020c4 <DHT_Task+0x70>)
 80020a4:	f002 ffea 	bl	800507c <HAL_UART_Transmit>

        vTaskDelay(1000);  // 2 saniyede bir veri oku
 80020a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020ac:	f007 fa9a 	bl	80095e4 <vTaskDelay>
        DHT11_Get_Data(&Temperature, &Humidity);
 80020b0:	bf00      	nop
 80020b2:	e7dc      	b.n	800206e <DHT_Task+0x1a>
 80020b4:	20000a78 	.word	0x20000a78
 80020b8:	20000a74 	.word	0x20000a74
 80020bc:	20000a80 	.word	0x20000a80
 80020c0:	0800f674 	.word	0x0800f674
 80020c4:	20000a2c 	.word	0x20000a2c

080020c8 <SDCARD_Task>:
    }
}

void SDCARD_Task(void *argument) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b092      	sub	sp, #72	@ 0x48
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	6078      	str	r0, [r7, #4]

    int indx = 1;
 80020d0:	2301      	movs	r3, #1
 80020d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    char buffer[50];

    while (1) {
        if (data_ready) {  // Veri hazırsa SD karta yaz
 80020d4:	4b13      	ldr	r3, [pc, #76]	@ (8002124 <SDCARD_Task+0x5c>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d01d      	beq.n	8002118 <SDCARD_Task+0x50>
            Mount_SD("/");
 80020dc:	4812      	ldr	r0, [pc, #72]	@ (8002128 <SDCARD_Task+0x60>)
 80020de:	f7ff f901 	bl	80012e4 <Mount_SD>
            sprintf(buffer, "%d. Temp = %d C\t RH = %d \n", indx, Temperature, Humidity);
 80020e2:	4b12      	ldr	r3, [pc, #72]	@ (800212c <SDCARD_Task+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	4b12      	ldr	r3, [pc, #72]	@ (8002130 <SDCARD_Task+0x68>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f107 0008 	add.w	r0, r7, #8
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	4613      	mov	r3, r2
 80020f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80020f4:	490f      	ldr	r1, [pc, #60]	@ (8002134 <SDCARD_Task+0x6c>)
 80020f6:	f009 fc5d 	bl	800b9b4 <siprintf>

            Update_File("TEMP.TXT", buffer);
 80020fa:	f107 0308 	add.w	r3, r7, #8
 80020fe:	4619      	mov	r1, r3
 8002100:	480d      	ldr	r0, [pc, #52]	@ (8002138 <SDCARD_Task+0x70>)
 8002102:	f7ff fa07 	bl	8001514 <Update_File>
            Unmount_SD("/");
 8002106:	4808      	ldr	r0, [pc, #32]	@ (8002128 <SDCARD_Task+0x60>)
 8002108:	f7ff f902 	bl	8001310 <Unmount_SD>

            indx++;
 800210c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800210e:	3301      	adds	r3, #1
 8002110:	63fb      	str	r3, [r7, #60]	@ 0x3c
            data_ready = 0;  // Bayrağı sıfırla
 8002112:	4b04      	ldr	r3, [pc, #16]	@ (8002124 <SDCARD_Task+0x5c>)
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
        }
        vTaskDelay(1000);  // 1 saniye bekle
 8002118:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800211c:	f007 fa62 	bl	80095e4 <vTaskDelay>
        if (data_ready) {  // Veri hazırsa SD karta yaz
 8002120:	e7d8      	b.n	80020d4 <SDCARD_Task+0xc>
 8002122:	bf00      	nop
 8002124:	20000a80 	.word	0x20000a80
 8002128:	0800f678 	.word	0x0800f678
 800212c:	20000a74 	.word	0x20000a74
 8002130:	20000a78 	.word	0x20000a78
 8002134:	0800f67c 	.word	0x0800f67c
 8002138:	0800f698 	.word	0x0800f698

0800213c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002142:	f000 fd09 	bl	8002b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002146:	f000 f849 	bl	80021dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800214a:	f000 f99b 	bl	8002484 <MX_GPIO_Init>
  MX_SPI1_Init();
 800214e:	f000 f8b1 	bl	80022b4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002152:	f000 f8e5 	bl	8002320 <MX_TIM1_Init>
  MX_TIM7_Init();
 8002156:	f000 f935 	bl	80023c4 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 800215a:	f000 f969 	bl	8002430 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800215e:	f003 fb49 	bl	80057f4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  Mount_SD("/");
 8002162:	4815      	ldr	r0, [pc, #84]	@ (80021b8 <main+0x7c>)
 8002164:	f7ff f8be 	bl	80012e4 <Mount_SD>
  Format_SD();
 8002168:	f7ff f8e6 	bl	8001338 <Format_SD>
  Create_File("TEMP.TXT");
 800216c:	4813      	ldr	r0, [pc, #76]	@ (80021bc <main+0x80>)
 800216e:	f7ff f949 	bl	8001404 <Create_File>
  Unmount_SD("/");
 8002172:	4811      	ldr	r0, [pc, #68]	@ (80021b8 <main+0x7c>)
 8002174:	f7ff f8cc 	bl	8001310 <Unmount_SD>

  xTaskCreate(DHT_Task, "DHT", 128, NULL, 1, &SDCARD_Task_Handler);
 8002178:	4b11      	ldr	r3, [pc, #68]	@ (80021c0 <main+0x84>)
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	2301      	movs	r3, #1
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2300      	movs	r3, #0
 8002182:	2280      	movs	r2, #128	@ 0x80
 8002184:	490f      	ldr	r1, [pc, #60]	@ (80021c4 <main+0x88>)
 8002186:	4810      	ldr	r0, [pc, #64]	@ (80021c8 <main+0x8c>)
 8002188:	f007 f8dc 	bl	8009344 <xTaskCreate>
  xTaskCreate(SDCARD_Task, "SD", 128, NULL, 2, &SDCARD_Task_Handler);
 800218c:	4b0c      	ldr	r3, [pc, #48]	@ (80021c0 <main+0x84>)
 800218e:	9301      	str	r3, [sp, #4]
 8002190:	2302      	movs	r3, #2
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	2300      	movs	r3, #0
 8002196:	2280      	movs	r2, #128	@ 0x80
 8002198:	490c      	ldr	r1, [pc, #48]	@ (80021cc <main+0x90>)
 800219a:	480d      	ldr	r0, [pc, #52]	@ (80021d0 <main+0x94>)
 800219c:	f007 f8d2 	bl	8009344 <xTaskCreate>

  HAL_TIM_Base_Start(&htim7);  // us delay timer
 80021a0:	480c      	ldr	r0, [pc, #48]	@ (80021d4 <main+0x98>)
 80021a2:	f002 fa8d 	bl	80046c0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim1); // periodic delay timer
 80021a6:	480c      	ldr	r0, [pc, #48]	@ (80021d8 <main+0x9c>)
 80021a8:	f002 faf2 	bl	8004790 <HAL_TIM_Base_Start_IT>

  vTaskStartScheduler();
 80021ac:	f007 fa50 	bl	8009650 <vTaskStartScheduler>

  /* USER CODE END 2 */


  /* Start scheduler */
  osKernelStart();
 80021b0:	f006 f907 	bl	80083c2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <main+0x78>
 80021b8:	0800f678 	.word	0x0800f678
 80021bc:	0800f698 	.word	0x0800f698
 80021c0:	20000a7c 	.word	0x20000a7c
 80021c4:	0800f6a4 	.word	0x0800f6a4
 80021c8:	08002055 	.word	0x08002055
 80021cc:	0800f6a8 	.word	0x0800f6a8
 80021d0:	080020c9 	.word	0x080020c9
 80021d4:	200009e4 	.word	0x200009e4
 80021d8:	2000099c 	.word	0x2000099c

080021dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b094      	sub	sp, #80	@ 0x50
 80021e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021e2:	f107 031c 	add.w	r3, r7, #28
 80021e6:	2234      	movs	r2, #52	@ 0x34
 80021e8:	2100      	movs	r1, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f009 fc45 	bl	800ba7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021f0:	f107 0308 	add.w	r3, r7, #8
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002200:	2300      	movs	r3, #0
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	4b29      	ldr	r3, [pc, #164]	@ (80022ac <SystemClock_Config+0xd0>)
 8002206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002208:	4a28      	ldr	r2, [pc, #160]	@ (80022ac <SystemClock_Config+0xd0>)
 800220a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800220e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002210:	4b26      	ldr	r3, [pc, #152]	@ (80022ac <SystemClock_Config+0xd0>)
 8002212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002218:	607b      	str	r3, [r7, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800221c:	2300      	movs	r3, #0
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	4b23      	ldr	r3, [pc, #140]	@ (80022b0 <SystemClock_Config+0xd4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002228:	4a21      	ldr	r2, [pc, #132]	@ (80022b0 <SystemClock_Config+0xd4>)
 800222a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	4b1f      	ldr	r3, [pc, #124]	@ (80022b0 <SystemClock_Config+0xd4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002238:	603b      	str	r3, [r7, #0]
 800223a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800223c:	2302      	movs	r3, #2
 800223e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002240:	2301      	movs	r3, #1
 8002242:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002244:	2310      	movs	r3, #16
 8002246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002248:	2302      	movs	r3, #2
 800224a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800224c:	2300      	movs	r3, #0
 800224e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002250:	2308      	movs	r3, #8
 8002252:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8002254:	233c      	movs	r3, #60	@ 0x3c
 8002256:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002258:	2302      	movs	r3, #2
 800225a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800225c:	2302      	movs	r3, #2
 800225e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002260:	2302      	movs	r3, #2
 8002262:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002264:	f107 031c 	add.w	r3, r7, #28
 8002268:	4618      	mov	r0, r3
 800226a:	f001 fadb 	bl	8003824 <HAL_RCC_OscConfig>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002274:	f000 f98c 	bl	8002590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002278:	230f      	movs	r3, #15
 800227a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800227c:	2302      	movs	r3, #2
 800227e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002280:	2300      	movs	r3, #0
 8002282:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002284:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002288:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800228a:	2300      	movs	r3, #0
 800228c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800228e:	f107 0308 	add.w	r3, r7, #8
 8002292:	2101      	movs	r1, #1
 8002294:	4618      	mov	r0, r3
 8002296:	f000 ff49 	bl	800312c <HAL_RCC_ClockConfig>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80022a0:	f000 f976 	bl	8002590 <Error_Handler>
  }
}
 80022a4:	bf00      	nop
 80022a6:	3750      	adds	r7, #80	@ 0x50
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40007000 	.word	0x40007000

080022b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80022b8:	4b17      	ldr	r3, [pc, #92]	@ (8002318 <MX_SPI1_Init+0x64>)
 80022ba:	4a18      	ldr	r2, [pc, #96]	@ (800231c <MX_SPI1_Init+0x68>)
 80022bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022be:	4b16      	ldr	r3, [pc, #88]	@ (8002318 <MX_SPI1_Init+0x64>)
 80022c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80022c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022c6:	4b14      	ldr	r3, [pc, #80]	@ (8002318 <MX_SPI1_Init+0x64>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022cc:	4b12      	ldr	r3, [pc, #72]	@ (8002318 <MX_SPI1_Init+0x64>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022d2:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <MX_SPI1_Init+0x64>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002318 <MX_SPI1_Init+0x64>)
 80022da:	2200      	movs	r2, #0
 80022dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022de:	4b0e      	ldr	r3, [pc, #56]	@ (8002318 <MX_SPI1_Init+0x64>)
 80022e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80022e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002318 <MX_SPI1_Init+0x64>)
 80022e8:	2220      	movs	r2, #32
 80022ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002318 <MX_SPI1_Init+0x64>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022f2:	4b09      	ldr	r3, [pc, #36]	@ (8002318 <MX_SPI1_Init+0x64>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022f8:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <MX_SPI1_Init+0x64>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80022fe:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <MX_SPI1_Init+0x64>)
 8002300:	220a      	movs	r2, #10
 8002302:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002304:	4804      	ldr	r0, [pc, #16]	@ (8002318 <MX_SPI1_Init+0x64>)
 8002306:	f001 fd2b 	bl	8003d60 <HAL_SPI_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002310:	f000 f93e 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002314:	bf00      	nop
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000944 	.word	0x20000944
 800231c:	40013000 	.word	0x40013000

08002320 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002326:	f107 0308 	add.w	r3, r7, #8
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	605a      	str	r2, [r3, #4]
 8002330:	609a      	str	r2, [r3, #8]
 8002332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002334:	463b      	mov	r3, r7
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800233c:	4b1f      	ldr	r3, [pc, #124]	@ (80023bc <MX_TIM1_Init+0x9c>)
 800233e:	4a20      	ldr	r2, [pc, #128]	@ (80023c0 <MX_TIM1_Init+0xa0>)
 8002340:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 60000-1;
 8002342:	4b1e      	ldr	r3, [pc, #120]	@ (80023bc <MX_TIM1_Init+0x9c>)
 8002344:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8002348:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800234a:	4b1c      	ldr	r3, [pc, #112]	@ (80023bc <MX_TIM1_Init+0x9c>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8002350:	4b1a      	ldr	r3, [pc, #104]	@ (80023bc <MX_TIM1_Init+0x9c>)
 8002352:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002356:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002358:	4b18      	ldr	r3, [pc, #96]	@ (80023bc <MX_TIM1_Init+0x9c>)
 800235a:	2200      	movs	r2, #0
 800235c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800235e:	4b17      	ldr	r3, [pc, #92]	@ (80023bc <MX_TIM1_Init+0x9c>)
 8002360:	2200      	movs	r2, #0
 8002362:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002364:	4b15      	ldr	r3, [pc, #84]	@ (80023bc <MX_TIM1_Init+0x9c>)
 8002366:	2200      	movs	r2, #0
 8002368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800236a:	4814      	ldr	r0, [pc, #80]	@ (80023bc <MX_TIM1_Init+0x9c>)
 800236c:	f002 f958 	bl	8004620 <HAL_TIM_Base_Init>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002376:	f000 f90b 	bl	8002590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800237a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800237e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002380:	f107 0308 	add.w	r3, r7, #8
 8002384:	4619      	mov	r1, r3
 8002386:	480d      	ldr	r0, [pc, #52]	@ (80023bc <MX_TIM1_Init+0x9c>)
 8002388:	f002 fb62 	bl	8004a50 <HAL_TIM_ConfigClockSource>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002392:	f000 f8fd 	bl	8002590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002396:	2320      	movs	r3, #32
 8002398:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800239a:	2300      	movs	r3, #0
 800239c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800239e:	463b      	mov	r3, r7
 80023a0:	4619      	mov	r1, r3
 80023a2:	4806      	ldr	r0, [pc, #24]	@ (80023bc <MX_TIM1_Init+0x9c>)
 80023a4:	f002 fd8a 	bl	8004ebc <HAL_TIMEx_MasterConfigSynchronization>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80023ae:	f000 f8ef 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023b2:	bf00      	nop
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	2000099c 	.word	0x2000099c
 80023c0:	40010000 	.word	0x40010000

080023c4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ca:	463b      	mov	r3, r7
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80023d2:	4b15      	ldr	r3, [pc, #84]	@ (8002428 <MX_TIM7_Init+0x64>)
 80023d4:	4a15      	ldr	r2, [pc, #84]	@ (800242c <MX_TIM7_Init+0x68>)
 80023d6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 60-1;
 80023d8:	4b13      	ldr	r3, [pc, #76]	@ (8002428 <MX_TIM7_Init+0x64>)
 80023da:	223b      	movs	r2, #59	@ 0x3b
 80023dc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023de:	4b12      	ldr	r3, [pc, #72]	@ (8002428 <MX_TIM7_Init+0x64>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0xffff-1;
 80023e4:	4b10      	ldr	r3, [pc, #64]	@ (8002428 <MX_TIM7_Init+0x64>)
 80023e6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80023ea:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002428 <MX_TIM7_Init+0x64>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80023f2:	480d      	ldr	r0, [pc, #52]	@ (8002428 <MX_TIM7_Init+0x64>)
 80023f4:	f002 f914 	bl	8004620 <HAL_TIM_Base_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80023fe:	f000 f8c7 	bl	8002590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002402:	2300      	movs	r3, #0
 8002404:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002406:	2300      	movs	r3, #0
 8002408:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800240a:	463b      	mov	r3, r7
 800240c:	4619      	mov	r1, r3
 800240e:	4806      	ldr	r0, [pc, #24]	@ (8002428 <MX_TIM7_Init+0x64>)
 8002410:	f002 fd54 	bl	8004ebc <HAL_TIMEx_MasterConfigSynchronization>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800241a:	f000 f8b9 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200009e4 	.word	0x200009e4
 800242c:	40001400 	.word	0x40001400

08002430 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002434:	4b11      	ldr	r3, [pc, #68]	@ (800247c <MX_USART2_UART_Init+0x4c>)
 8002436:	4a12      	ldr	r2, [pc, #72]	@ (8002480 <MX_USART2_UART_Init+0x50>)
 8002438:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800243a:	4b10      	ldr	r3, [pc, #64]	@ (800247c <MX_USART2_UART_Init+0x4c>)
 800243c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002440:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002442:	4b0e      	ldr	r3, [pc, #56]	@ (800247c <MX_USART2_UART_Init+0x4c>)
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002448:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <MX_USART2_UART_Init+0x4c>)
 800244a:	2200      	movs	r2, #0
 800244c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800244e:	4b0b      	ldr	r3, [pc, #44]	@ (800247c <MX_USART2_UART_Init+0x4c>)
 8002450:	2200      	movs	r2, #0
 8002452:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002454:	4b09      	ldr	r3, [pc, #36]	@ (800247c <MX_USART2_UART_Init+0x4c>)
 8002456:	220c      	movs	r2, #12
 8002458:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800245a:	4b08      	ldr	r3, [pc, #32]	@ (800247c <MX_USART2_UART_Init+0x4c>)
 800245c:	2200      	movs	r2, #0
 800245e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002460:	4b06      	ldr	r3, [pc, #24]	@ (800247c <MX_USART2_UART_Init+0x4c>)
 8002462:	2200      	movs	r2, #0
 8002464:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002466:	4805      	ldr	r0, [pc, #20]	@ (800247c <MX_USART2_UART_Init+0x4c>)
 8002468:	f002 fdb8 	bl	8004fdc <HAL_UART_Init>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002472:	f000 f88d 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000a2c 	.word	0x20000a2c
 8002480:	40004400 	.word	0x40004400

08002484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248a:	f107 030c 	add.w	r3, r7, #12
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	609a      	str	r2, [r3, #8]
 8002496:	60da      	str	r2, [r3, #12]
 8002498:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	4b25      	ldr	r3, [pc, #148]	@ (8002534 <MX_GPIO_Init+0xb0>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	4a24      	ldr	r2, [pc, #144]	@ (8002534 <MX_GPIO_Init+0xb0>)
 80024a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024aa:	4b22      	ldr	r3, [pc, #136]	@ (8002534 <MX_GPIO_Init+0xb0>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	607b      	str	r3, [r7, #4]
 80024ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002534 <MX_GPIO_Init+0xb0>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	4a1d      	ldr	r2, [pc, #116]	@ (8002534 <MX_GPIO_Init+0xb0>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002534 <MX_GPIO_Init+0xb0>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	603b      	str	r3, [r7, #0]
 80024d6:	4b17      	ldr	r3, [pc, #92]	@ (8002534 <MX_GPIO_Init+0xb0>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	4a16      	ldr	r2, [pc, #88]	@ (8002534 <MX_GPIO_Init+0xb0>)
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e2:	4b14      	ldr	r3, [pc, #80]	@ (8002534 <MX_GPIO_Init+0xb0>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80024ee:	2200      	movs	r2, #0
 80024f0:	2140      	movs	r1, #64	@ 0x40
 80024f2:	4811      	ldr	r0, [pc, #68]	@ (8002538 <MX_GPIO_Init+0xb4>)
 80024f4:	f000 fe00 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024f8:	2301      	movs	r3, #1
 80024fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024fc:	2300      	movs	r3, #0
 80024fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002504:	f107 030c 	add.w	r3, r7, #12
 8002508:	4619      	mov	r1, r3
 800250a:	480c      	ldr	r0, [pc, #48]	@ (800253c <MX_GPIO_Init+0xb8>)
 800250c:	f000 fc48 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8002510:	2340      	movs	r3, #64	@ 0x40
 8002512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002514:	2301      	movs	r3, #1
 8002516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251c:	2300      	movs	r3, #0
 800251e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8002520:	f107 030c 	add.w	r3, r7, #12
 8002524:	4619      	mov	r1, r3
 8002526:	4804      	ldr	r0, [pc, #16]	@ (8002538 <MX_GPIO_Init+0xb4>)
 8002528:	f000 fc3a 	bl	8002da0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800252c:	bf00      	nop
 800252e:	3720      	adds	r7, #32
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40023800 	.word	0x40023800
 8002538:	40020400 	.word	0x40020400
 800253c:	40020000 	.word	0x40020000

08002540 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0d      	ldr	r2, [pc, #52]	@ (8002584 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d10c      	bne.n	800256c <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		// release the semaphore here
		 /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE as
		 it will get set to pdTRUE inside the interrupt safe API function if a
		 context switch is required. */
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
		 xHigherPriorityTaskWoken was set to pdTRUE inside xSemaphoreGiveFromISR()
		 then calling portEND_SWITCHING_ISR() will request a context switch. If
		 xHigherPriorityTaskWoken is still pdFALSE then calling
		 portEND_SWITCHING_ISR() will have no effect */

		portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <HAL_TIM_PeriodElapsedCallback+0x2c>
 800255c:	4b0a      	ldr	r3, [pc, #40]	@ (8002588 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800255e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	f3bf 8f6f 	isb	sy
	}


  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a06      	ldr	r2, [pc, #24]	@ (800258c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d101      	bne.n	800257a <HAL_TIM_PeriodElapsedCallback+0x3a>
    HAL_IncTick();
 8002576:	f000 fb11 	bl	8002b9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40010000 	.word	0x40010000
 8002588:	e000ed04 	.word	0xe000ed04
 800258c:	40001000 	.word	0x40001000

08002590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002594:	b672      	cpsid	i
}
 8002596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002598:	bf00      	nop
 800259a:	e7fd      	b.n	8002598 <Error_Handler+0x8>

0800259c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
 80025a6:	4b12      	ldr	r3, [pc, #72]	@ (80025f0 <HAL_MspInit+0x54>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	4a11      	ldr	r2, [pc, #68]	@ (80025f0 <HAL_MspInit+0x54>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025b2:	4b0f      	ldr	r3, [pc, #60]	@ (80025f0 <HAL_MspInit+0x54>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	4b0b      	ldr	r3, [pc, #44]	@ (80025f0 <HAL_MspInit+0x54>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	4a0a      	ldr	r2, [pc, #40]	@ (80025f0 <HAL_MspInit+0x54>)
 80025c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ce:	4b08      	ldr	r3, [pc, #32]	@ (80025f0 <HAL_MspInit+0x54>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	210f      	movs	r1, #15
 80025de:	f06f 0001 	mvn.w	r0, #1
 80025e2:	f000 fbb3 	bl	8002d4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800

080025f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	@ 0x28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a19      	ldr	r2, [pc, #100]	@ (8002678 <HAL_SPI_MspInit+0x84>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d12b      	bne.n	800266e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	4b18      	ldr	r3, [pc, #96]	@ (800267c <HAL_SPI_MspInit+0x88>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	4a17      	ldr	r2, [pc, #92]	@ (800267c <HAL_SPI_MspInit+0x88>)
 8002620:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002624:	6453      	str	r3, [r2, #68]	@ 0x44
 8002626:	4b15      	ldr	r3, [pc, #84]	@ (800267c <HAL_SPI_MspInit+0x88>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	4b11      	ldr	r3, [pc, #68]	@ (800267c <HAL_SPI_MspInit+0x88>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	4a10      	ldr	r2, [pc, #64]	@ (800267c <HAL_SPI_MspInit+0x88>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6313      	str	r3, [r2, #48]	@ 0x30
 8002642:	4b0e      	ldr	r3, [pc, #56]	@ (800267c <HAL_SPI_MspInit+0x88>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800264e:	23e0      	movs	r3, #224	@ 0xe0
 8002650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	2302      	movs	r3, #2
 8002654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265a:	2303      	movs	r3, #3
 800265c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800265e:	2305      	movs	r3, #5
 8002660:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002662:	f107 0314 	add.w	r3, r7, #20
 8002666:	4619      	mov	r1, r3
 8002668:	4805      	ldr	r0, [pc, #20]	@ (8002680 <HAL_SPI_MspInit+0x8c>)
 800266a:	f000 fb99 	bl	8002da0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800266e:	bf00      	nop
 8002670:	3728      	adds	r7, #40	@ 0x28
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40013000 	.word	0x40013000
 800267c:	40023800 	.word	0x40023800
 8002680:	40020000 	.word	0x40020000

08002684 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a18      	ldr	r2, [pc, #96]	@ (80026f4 <HAL_TIM_Base_MspInit+0x70>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d116      	bne.n	80026c4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	4b17      	ldr	r3, [pc, #92]	@ (80026f8 <HAL_TIM_Base_MspInit+0x74>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269e:	4a16      	ldr	r2, [pc, #88]	@ (80026f8 <HAL_TIM_Base_MspInit+0x74>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026a6:	4b14      	ldr	r3, [pc, #80]	@ (80026f8 <HAL_TIM_Base_MspInit+0x74>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80026b2:	2200      	movs	r2, #0
 80026b4:	2105      	movs	r1, #5
 80026b6:	2019      	movs	r0, #25
 80026b8:	f000 fb48 	bl	8002d4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80026bc:	2019      	movs	r0, #25
 80026be:	f000 fb61 	bl	8002d84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80026c2:	e012      	b.n	80026ea <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0c      	ldr	r2, [pc, #48]	@ (80026fc <HAL_TIM_Base_MspInit+0x78>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d10d      	bne.n	80026ea <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	4b09      	ldr	r3, [pc, #36]	@ (80026f8 <HAL_TIM_Base_MspInit+0x74>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	4a08      	ldr	r2, [pc, #32]	@ (80026f8 <HAL_TIM_Base_MspInit+0x74>)
 80026d8:	f043 0320 	orr.w	r3, r3, #32
 80026dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80026de:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <HAL_TIM_Base_MspInit+0x74>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40010000 	.word	0x40010000
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40001400 	.word	0x40001400

08002700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08a      	sub	sp, #40	@ 0x28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a19      	ldr	r2, [pc, #100]	@ (8002784 <HAL_UART_MspInit+0x84>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d12b      	bne.n	800277a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	4b18      	ldr	r3, [pc, #96]	@ (8002788 <HAL_UART_MspInit+0x88>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272a:	4a17      	ldr	r2, [pc, #92]	@ (8002788 <HAL_UART_MspInit+0x88>)
 800272c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002730:	6413      	str	r3, [r2, #64]	@ 0x40
 8002732:	4b15      	ldr	r3, [pc, #84]	@ (8002788 <HAL_UART_MspInit+0x88>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	4b11      	ldr	r3, [pc, #68]	@ (8002788 <HAL_UART_MspInit+0x88>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	4a10      	ldr	r2, [pc, #64]	@ (8002788 <HAL_UART_MspInit+0x88>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6313      	str	r3, [r2, #48]	@ 0x30
 800274e:	4b0e      	ldr	r3, [pc, #56]	@ (8002788 <HAL_UART_MspInit+0x88>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800275a:	230c      	movs	r3, #12
 800275c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002766:	2303      	movs	r3, #3
 8002768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800276a:	2307      	movs	r3, #7
 800276c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276e:	f107 0314 	add.w	r3, r7, #20
 8002772:	4619      	mov	r1, r3
 8002774:	4805      	ldr	r0, [pc, #20]	@ (800278c <HAL_UART_MspInit+0x8c>)
 8002776:	f000 fb13 	bl	8002da0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800277a:	bf00      	nop
 800277c:	3728      	adds	r7, #40	@ 0x28
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40004400 	.word	0x40004400
 8002788:	40023800 	.word	0x40023800
 800278c:	40020000 	.word	0x40020000

08002790 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08e      	sub	sp, #56	@ 0x38
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	4b33      	ldr	r3, [pc, #204]	@ (8002874 <HAL_InitTick+0xe4>)
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	4a32      	ldr	r2, [pc, #200]	@ (8002874 <HAL_InitTick+0xe4>)
 80027aa:	f043 0310 	orr.w	r3, r3, #16
 80027ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80027b0:	4b30      	ldr	r3, [pc, #192]	@ (8002874 <HAL_InitTick+0xe4>)
 80027b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027bc:	f107 0210 	add.w	r2, r7, #16
 80027c0:	f107 0314 	add.w	r3, r7, #20
 80027c4:	4611      	mov	r1, r2
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 fdca 	bl	8003360 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80027d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d103      	bne.n	80027de <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80027d6:	f000 fd9b 	bl	8003310 <HAL_RCC_GetPCLK1Freq>
 80027da:	6378      	str	r0, [r7, #52]	@ 0x34
 80027dc:	e004      	b.n	80027e8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80027de:	f000 fd97 	bl	8003310 <HAL_RCC_GetPCLK1Freq>
 80027e2:	4603      	mov	r3, r0
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ea:	4a23      	ldr	r2, [pc, #140]	@ (8002878 <HAL_InitTick+0xe8>)
 80027ec:	fba2 2303 	umull	r2, r3, r2, r3
 80027f0:	0c9b      	lsrs	r3, r3, #18
 80027f2:	3b01      	subs	r3, #1
 80027f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80027f6:	4b21      	ldr	r3, [pc, #132]	@ (800287c <HAL_InitTick+0xec>)
 80027f8:	4a21      	ldr	r2, [pc, #132]	@ (8002880 <HAL_InitTick+0xf0>)
 80027fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80027fc:	4b1f      	ldr	r3, [pc, #124]	@ (800287c <HAL_InitTick+0xec>)
 80027fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002802:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002804:	4a1d      	ldr	r2, [pc, #116]	@ (800287c <HAL_InitTick+0xec>)
 8002806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002808:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800280a:	4b1c      	ldr	r3, [pc, #112]	@ (800287c <HAL_InitTick+0xec>)
 800280c:	2200      	movs	r2, #0
 800280e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002810:	4b1a      	ldr	r3, [pc, #104]	@ (800287c <HAL_InitTick+0xec>)
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002816:	4b19      	ldr	r3, [pc, #100]	@ (800287c <HAL_InitTick+0xec>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800281c:	4817      	ldr	r0, [pc, #92]	@ (800287c <HAL_InitTick+0xec>)
 800281e:	f001 feff 	bl	8004620 <HAL_TIM_Base_Init>
 8002822:	4603      	mov	r3, r0
 8002824:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002828:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800282c:	2b00      	cmp	r3, #0
 800282e:	d11b      	bne.n	8002868 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002830:	4812      	ldr	r0, [pc, #72]	@ (800287c <HAL_InitTick+0xec>)
 8002832:	f001 ffad 	bl	8004790 <HAL_TIM_Base_Start_IT>
 8002836:	4603      	mov	r3, r0
 8002838:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800283c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002840:	2b00      	cmp	r3, #0
 8002842:	d111      	bne.n	8002868 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002844:	2036      	movs	r0, #54	@ 0x36
 8002846:	f000 fa9d 	bl	8002d84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b0f      	cmp	r3, #15
 800284e:	d808      	bhi.n	8002862 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002850:	2200      	movs	r2, #0
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	2036      	movs	r0, #54	@ 0x36
 8002856:	f000 fa79 	bl	8002d4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800285a:	4a0a      	ldr	r2, [pc, #40]	@ (8002884 <HAL_InitTick+0xf4>)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	e002      	b.n	8002868 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002868:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800286c:	4618      	mov	r0, r3
 800286e:	3738      	adds	r7, #56	@ 0x38
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40023800 	.word	0x40023800
 8002878:	431bde83 	.word	0x431bde83
 800287c:	20000a84 	.word	0x20000a84
 8002880:	40001000 	.word	0x40001000
 8002884:	20000008 	.word	0x20000008

08002888 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(){
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
	if(Timer1 > 0) Timer1--;
 800288c:	4b0e      	ldr	r3, [pc, #56]	@ (80028c8 <SDTimer_Handler+0x40>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d006      	beq.n	80028a4 <SDTimer_Handler+0x1c>
 8002896:	4b0c      	ldr	r3, [pc, #48]	@ (80028c8 <SDTimer_Handler+0x40>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	3b01      	subs	r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	4b09      	ldr	r3, [pc, #36]	@ (80028c8 <SDTimer_Handler+0x40>)
 80028a2:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0) Timer2--;
 80028a4:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <SDTimer_Handler+0x44>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d006      	beq.n	80028bc <SDTimer_Handler+0x34>
 80028ae:	4b07      	ldr	r3, [pc, #28]	@ (80028cc <SDTimer_Handler+0x44>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	4b04      	ldr	r3, [pc, #16]	@ (80028cc <SDTimer_Handler+0x44>)
 80028ba:	701a      	strb	r2, [r3, #0]
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20000acd 	.word	0x20000acd
 80028cc:	20000ace 	.word	0x20000ace

080028d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028d4:	bf00      	nop
 80028d6:	e7fd      	b.n	80028d4 <NMI_Handler+0x4>

080028d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028dc:	bf00      	nop
 80028de:	e7fd      	b.n	80028dc <HardFault_Handler+0x4>

080028e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028e4:	bf00      	nop
 80028e6:	e7fd      	b.n	80028e4 <MemManage_Handler+0x4>

080028e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ec:	bf00      	nop
 80028ee:	e7fd      	b.n	80028ec <BusFault_Handler+0x4>

080028f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f4:	bf00      	nop
 80028f6:	e7fd      	b.n	80028f4 <UsageFault_Handler+0x4>

080028f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800290c:	4802      	ldr	r0, [pc, #8]	@ (8002918 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800290e:	f001 ffaf 	bl	8004870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	2000099c 	.word	0x2000099c

0800291c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	FatFsCnt++;
 8002920:	4b0a      	ldr	r3, [pc, #40]	@ (800294c <TIM6_DAC_IRQHandler+0x30>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	3301      	adds	r3, #1
 8002928:	b2da      	uxtb	r2, r3
 800292a:	4b08      	ldr	r3, [pc, #32]	@ (800294c <TIM6_DAC_IRQHandler+0x30>)
 800292c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10){
 800292e:	4b07      	ldr	r3, [pc, #28]	@ (800294c <TIM6_DAC_IRQHandler+0x30>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b09      	cmp	r3, #9
 8002936:	d904      	bls.n	8002942 <TIM6_DAC_IRQHandler+0x26>
		FatFsCnt = 0;
 8002938:	4b04      	ldr	r3, [pc, #16]	@ (800294c <TIM6_DAC_IRQHandler+0x30>)
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800293e:	f7ff ffa3 	bl	8002888 <SDTimer_Handler>
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002942:	4803      	ldr	r0, [pc, #12]	@ (8002950 <TIM6_DAC_IRQHandler+0x34>)
 8002944:	f001 ff94 	bl	8004870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002948:	bf00      	nop
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000acc 	.word	0x20000acc
 8002950:	20000a84 	.word	0x20000a84

08002954 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return 1;
 8002958:	2301      	movs	r3, #1
}
 800295a:	4618      	mov	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <_kill>:

int _kill(int pid, int sig)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800296e:	f009 f92d 	bl	800bbcc <__errno>
 8002972:	4603      	mov	r3, r0
 8002974:	2216      	movs	r2, #22
 8002976:	601a      	str	r2, [r3, #0]
  return -1;
 8002978:	f04f 33ff 	mov.w	r3, #4294967295
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <_exit>:

void _exit (int status)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800298c:	f04f 31ff 	mov.w	r1, #4294967295
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7ff ffe7 	bl	8002964 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002996:	bf00      	nop
 8002998:	e7fd      	b.n	8002996 <_exit+0x12>

0800299a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b086      	sub	sp, #24
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	e00a      	b.n	80029c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029ac:	f3af 8000 	nop.w
 80029b0:	4601      	mov	r1, r0
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	60ba      	str	r2, [r7, #8]
 80029b8:	b2ca      	uxtb	r2, r1
 80029ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	3301      	adds	r3, #1
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	dbf0      	blt.n	80029ac <_read+0x12>
  }

  return len;
 80029ca:	687b      	ldr	r3, [r7, #4]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	e009      	b.n	80029fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	60ba      	str	r2, [r7, #8]
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	3301      	adds	r3, #1
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	dbf1      	blt.n	80029e6 <_write+0x12>
  }
  return len;
 8002a02:	687b      	ldr	r3, [r7, #4]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <_close>:

int _close(int file)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a34:	605a      	str	r2, [r3, #4]
  return 0;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <_isatty>:

int _isatty(int file)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a4c:	2301      	movs	r3, #1
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b085      	sub	sp, #20
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a7c:	4a14      	ldr	r2, [pc, #80]	@ (8002ad0 <_sbrk+0x5c>)
 8002a7e:	4b15      	ldr	r3, [pc, #84]	@ (8002ad4 <_sbrk+0x60>)
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a88:	4b13      	ldr	r3, [pc, #76]	@ (8002ad8 <_sbrk+0x64>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d102      	bne.n	8002a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a90:	4b11      	ldr	r3, [pc, #68]	@ (8002ad8 <_sbrk+0x64>)
 8002a92:	4a12      	ldr	r2, [pc, #72]	@ (8002adc <_sbrk+0x68>)
 8002a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a96:	4b10      	ldr	r3, [pc, #64]	@ (8002ad8 <_sbrk+0x64>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d207      	bcs.n	8002ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002aa4:	f009 f892 	bl	800bbcc <__errno>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	220c      	movs	r2, #12
 8002aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aae:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab2:	e009      	b.n	8002ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ab4:	4b08      	ldr	r3, [pc, #32]	@ (8002ad8 <_sbrk+0x64>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aba:	4b07      	ldr	r3, [pc, #28]	@ (8002ad8 <_sbrk+0x64>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	4a05      	ldr	r2, [pc, #20]	@ (8002ad8 <_sbrk+0x64>)
 8002ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20020000 	.word	0x20020000
 8002ad4:	00000400 	.word	0x00000400
 8002ad8:	20000ad0 	.word	0x20000ad0
 8002adc:	200049f8 	.word	0x200049f8

08002ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ae4:	4b06      	ldr	r3, [pc, #24]	@ (8002b00 <SystemInit+0x20>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aea:	4a05      	ldr	r2, [pc, #20]	@ (8002b00 <SystemInit+0x20>)
 8002aec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002af0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002b08:	f7ff ffea 	bl	8002ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b0c:	480c      	ldr	r0, [pc, #48]	@ (8002b40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b0e:	490d      	ldr	r1, [pc, #52]	@ (8002b44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b10:	4a0d      	ldr	r2, [pc, #52]	@ (8002b48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b14:	e002      	b.n	8002b1c <LoopCopyDataInit>

08002b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b1a:	3304      	adds	r3, #4

08002b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b20:	d3f9      	bcc.n	8002b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b22:	4a0a      	ldr	r2, [pc, #40]	@ (8002b4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b24:	4c0a      	ldr	r4, [pc, #40]	@ (8002b50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b28:	e001      	b.n	8002b2e <LoopFillZerobss>

08002b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b2c:	3204      	adds	r2, #4

08002b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b30:	d3fb      	bcc.n	8002b2a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002b32:	f009 f851 	bl	800bbd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b36:	f7ff fb01 	bl	800213c <main>
  bx  lr    
 8002b3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b44:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002b48:	0800fbd0 	.word	0x0800fbd0
  ldr r2, =_sbss
 8002b4c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002b50:	200049f4 	.word	0x200049f4

08002b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b54:	e7fe      	b.n	8002b54 <ADC_IRQHandler>
	...

08002b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b98 <HAL_Init+0x40>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a0d      	ldr	r2, [pc, #52]	@ (8002b98 <HAL_Init+0x40>)
 8002b62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b68:	4b0b      	ldr	r3, [pc, #44]	@ (8002b98 <HAL_Init+0x40>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b98 <HAL_Init+0x40>)
 8002b6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b74:	4b08      	ldr	r3, [pc, #32]	@ (8002b98 <HAL_Init+0x40>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a07      	ldr	r2, [pc, #28]	@ (8002b98 <HAL_Init+0x40>)
 8002b7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b80:	2003      	movs	r0, #3
 8002b82:	f000 f8d8 	bl	8002d36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b86:	200f      	movs	r0, #15
 8002b88:	f7ff fe02 	bl	8002790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b8c:	f7ff fd06 	bl	800259c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40023c00 	.word	0x40023c00

08002b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ba0:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <HAL_IncTick+0x20>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4b06      	ldr	r3, [pc, #24]	@ (8002bc0 <HAL_IncTick+0x24>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4413      	add	r3, r2
 8002bac:	4a04      	ldr	r2, [pc, #16]	@ (8002bc0 <HAL_IncTick+0x24>)
 8002bae:	6013      	str	r3, [r2, #0]
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	2000000c 	.word	0x2000000c
 8002bc0:	20000ad4 	.word	0x20000ad4

08002bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc8:	4b03      	ldr	r3, [pc, #12]	@ (8002bd8 <HAL_GetTick+0x14>)
 8002bca:	681b      	ldr	r3, [r3, #0]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	20000ad4 	.word	0x20000ad4

08002bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bec:	4b0c      	ldr	r3, [pc, #48]	@ (8002c20 <__NVIC_SetPriorityGrouping+0x44>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c0e:	4a04      	ldr	r2, [pc, #16]	@ (8002c20 <__NVIC_SetPriorityGrouping+0x44>)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	60d3      	str	r3, [r2, #12]
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c28:	4b04      	ldr	r3, [pc, #16]	@ (8002c3c <__NVIC_GetPriorityGrouping+0x18>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	0a1b      	lsrs	r3, r3, #8
 8002c2e:	f003 0307 	and.w	r3, r3, #7
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	db0b      	blt.n	8002c6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	f003 021f 	and.w	r2, r3, #31
 8002c58:	4907      	ldr	r1, [pc, #28]	@ (8002c78 <__NVIC_EnableIRQ+0x38>)
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	2001      	movs	r0, #1
 8002c62:	fa00 f202 	lsl.w	r2, r0, r2
 8002c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	e000e100 	.word	0xe000e100

08002c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	6039      	str	r1, [r7, #0]
 8002c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	db0a      	blt.n	8002ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	490c      	ldr	r1, [pc, #48]	@ (8002cc8 <__NVIC_SetPriority+0x4c>)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	0112      	lsls	r2, r2, #4
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ca4:	e00a      	b.n	8002cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	4908      	ldr	r1, [pc, #32]	@ (8002ccc <__NVIC_SetPriority+0x50>)
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	3b04      	subs	r3, #4
 8002cb4:	0112      	lsls	r2, r2, #4
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	440b      	add	r3, r1
 8002cba:	761a      	strb	r2, [r3, #24]
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000e100 	.word	0xe000e100
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b089      	sub	sp, #36	@ 0x24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f1c3 0307 	rsb	r3, r3, #7
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	bf28      	it	cs
 8002cee:	2304      	movcs	r3, #4
 8002cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	2b06      	cmp	r3, #6
 8002cf8:	d902      	bls.n	8002d00 <NVIC_EncodePriority+0x30>
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3b03      	subs	r3, #3
 8002cfe:	e000      	b.n	8002d02 <NVIC_EncodePriority+0x32>
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d04:	f04f 32ff 	mov.w	r2, #4294967295
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43da      	mvns	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	401a      	ands	r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d18:	f04f 31ff 	mov.w	r1, #4294967295
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d22:	43d9      	mvns	r1, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d28:	4313      	orrs	r3, r2
         );
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3724      	adds	r7, #36	@ 0x24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff ff4c 	bl	8002bdc <__NVIC_SetPriorityGrouping>
}
 8002d44:	bf00      	nop
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d5e:	f7ff ff61 	bl	8002c24 <__NVIC_GetPriorityGrouping>
 8002d62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	68b9      	ldr	r1, [r7, #8]
 8002d68:	6978      	ldr	r0, [r7, #20]
 8002d6a:	f7ff ffb1 	bl	8002cd0 <NVIC_EncodePriority>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff ff80 	bl	8002c7c <__NVIC_SetPriority>
}
 8002d7c:	bf00      	nop
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff ff54 	bl	8002c40 <__NVIC_EnableIRQ>
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	@ 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	e165      	b.n	8003088 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	f040 8154 	bne.w	8003082 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d005      	beq.n	8002df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d130      	bne.n	8002e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e28:	2201      	movs	r2, #1
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 0201 	and.w	r2, r3, #1
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d017      	beq.n	8002e90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d123      	bne.n	8002ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	08da      	lsrs	r2, r3, #3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3208      	adds	r2, #8
 8002ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	220f      	movs	r2, #15
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	08da      	lsrs	r2, r3, #3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3208      	adds	r2, #8
 8002ede:	69b9      	ldr	r1, [r7, #24]
 8002ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2203      	movs	r2, #3
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0203 	and.w	r2, r3, #3
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80ae 	beq.w	8003082 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	4b5d      	ldr	r3, [pc, #372]	@ (80030a0 <HAL_GPIO_Init+0x300>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2e:	4a5c      	ldr	r2, [pc, #368]	@ (80030a0 <HAL_GPIO_Init+0x300>)
 8002f30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f36:	4b5a      	ldr	r3, [pc, #360]	@ (80030a0 <HAL_GPIO_Init+0x300>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f42:	4a58      	ldr	r2, [pc, #352]	@ (80030a4 <HAL_GPIO_Init+0x304>)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	089b      	lsrs	r3, r3, #2
 8002f48:	3302      	adds	r3, #2
 8002f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	220f      	movs	r2, #15
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a4f      	ldr	r2, [pc, #316]	@ (80030a8 <HAL_GPIO_Init+0x308>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d025      	beq.n	8002fba <HAL_GPIO_Init+0x21a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a4e      	ldr	r2, [pc, #312]	@ (80030ac <HAL_GPIO_Init+0x30c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d01f      	beq.n	8002fb6 <HAL_GPIO_Init+0x216>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a4d      	ldr	r2, [pc, #308]	@ (80030b0 <HAL_GPIO_Init+0x310>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d019      	beq.n	8002fb2 <HAL_GPIO_Init+0x212>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a4c      	ldr	r2, [pc, #304]	@ (80030b4 <HAL_GPIO_Init+0x314>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d013      	beq.n	8002fae <HAL_GPIO_Init+0x20e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a4b      	ldr	r2, [pc, #300]	@ (80030b8 <HAL_GPIO_Init+0x318>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00d      	beq.n	8002faa <HAL_GPIO_Init+0x20a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a4a      	ldr	r2, [pc, #296]	@ (80030bc <HAL_GPIO_Init+0x31c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d007      	beq.n	8002fa6 <HAL_GPIO_Init+0x206>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a49      	ldr	r2, [pc, #292]	@ (80030c0 <HAL_GPIO_Init+0x320>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d101      	bne.n	8002fa2 <HAL_GPIO_Init+0x202>
 8002f9e:	2306      	movs	r3, #6
 8002fa0:	e00c      	b.n	8002fbc <HAL_GPIO_Init+0x21c>
 8002fa2:	2307      	movs	r3, #7
 8002fa4:	e00a      	b.n	8002fbc <HAL_GPIO_Init+0x21c>
 8002fa6:	2305      	movs	r3, #5
 8002fa8:	e008      	b.n	8002fbc <HAL_GPIO_Init+0x21c>
 8002faa:	2304      	movs	r3, #4
 8002fac:	e006      	b.n	8002fbc <HAL_GPIO_Init+0x21c>
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e004      	b.n	8002fbc <HAL_GPIO_Init+0x21c>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e002      	b.n	8002fbc <HAL_GPIO_Init+0x21c>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <HAL_GPIO_Init+0x21c>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	f002 0203 	and.w	r2, r2, #3
 8002fc2:	0092      	lsls	r2, r2, #2
 8002fc4:	4093      	lsls	r3, r2
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fcc:	4935      	ldr	r1, [pc, #212]	@ (80030a4 <HAL_GPIO_Init+0x304>)
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	089b      	lsrs	r3, r3, #2
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fda:	4b3a      	ldr	r3, [pc, #232]	@ (80030c4 <HAL_GPIO_Init+0x324>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ffe:	4a31      	ldr	r2, [pc, #196]	@ (80030c4 <HAL_GPIO_Init+0x324>)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003004:	4b2f      	ldr	r3, [pc, #188]	@ (80030c4 <HAL_GPIO_Init+0x324>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003028:	4a26      	ldr	r2, [pc, #152]	@ (80030c4 <HAL_GPIO_Init+0x324>)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800302e:	4b25      	ldr	r3, [pc, #148]	@ (80030c4 <HAL_GPIO_Init+0x324>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	43db      	mvns	r3, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4013      	ands	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003052:	4a1c      	ldr	r2, [pc, #112]	@ (80030c4 <HAL_GPIO_Init+0x324>)
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003058:	4b1a      	ldr	r3, [pc, #104]	@ (80030c4 <HAL_GPIO_Init+0x324>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800307c:	4a11      	ldr	r2, [pc, #68]	@ (80030c4 <HAL_GPIO_Init+0x324>)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3301      	adds	r3, #1
 8003086:	61fb      	str	r3, [r7, #28]
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	2b0f      	cmp	r3, #15
 800308c:	f67f ae96 	bls.w	8002dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003090:	bf00      	nop
 8003092:	bf00      	nop
 8003094:	3724      	adds	r7, #36	@ 0x24
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40013800 	.word	0x40013800
 80030a8:	40020000 	.word	0x40020000
 80030ac:	40020400 	.word	0x40020400
 80030b0:	40020800 	.word	0x40020800
 80030b4:	40020c00 	.word	0x40020c00
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40021400 	.word	0x40021400
 80030c0:	40021800 	.word	0x40021800
 80030c4:	40013c00 	.word	0x40013c00

080030c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	887b      	ldrh	r3, [r7, #2]
 80030da:	4013      	ands	r3, r2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030e0:	2301      	movs	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
 80030e4:	e001      	b.n	80030ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030e6:	2300      	movs	r3, #0
 80030e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	807b      	strh	r3, [r7, #2]
 8003104:	4613      	mov	r3, r2
 8003106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003108:	787b      	ldrb	r3, [r7, #1]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800310e:	887a      	ldrh	r2, [r7, #2]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003114:	e003      	b.n	800311e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003116:	887b      	ldrh	r3, [r7, #2]
 8003118:	041a      	lsls	r2, r3, #16
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	619a      	str	r2, [r3, #24]
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0cc      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003140:	4b68      	ldr	r3, [pc, #416]	@ (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d90c      	bls.n	8003168 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b65      	ldr	r3, [pc, #404]	@ (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b63      	ldr	r3, [pc, #396]	@ (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0b8      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d020      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003180:	4b59      	ldr	r3, [pc, #356]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4a58      	ldr	r2, [pc, #352]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800318a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003198:	4b53      	ldr	r3, [pc, #332]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	4a52      	ldr	r2, [pc, #328]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a4:	4b50      	ldr	r3, [pc, #320]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	494d      	ldr	r1, [pc, #308]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d044      	beq.n	800324c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d107      	bne.n	80031da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ca:	4b47      	ldr	r3, [pc, #284]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d119      	bne.n	800320a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e07f      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d003      	beq.n	80031ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d107      	bne.n	80031fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ea:	4b3f      	ldr	r3, [pc, #252]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d109      	bne.n	800320a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e06f      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fa:	4b3b      	ldr	r3, [pc, #236]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e067      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800320a:	4b37      	ldr	r3, [pc, #220]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f023 0203 	bic.w	r2, r3, #3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	4934      	ldr	r1, [pc, #208]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	4313      	orrs	r3, r2
 800321a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800321c:	f7ff fcd2 	bl	8002bc4 <HAL_GetTick>
 8003220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003222:	e00a      	b.n	800323a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003224:	f7ff fcce 	bl	8002bc4 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003232:	4293      	cmp	r3, r2
 8003234:	d901      	bls.n	800323a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e04f      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323a:	4b2b      	ldr	r3, [pc, #172]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 020c 	and.w	r2, r3, #12
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	429a      	cmp	r2, r3
 800324a:	d1eb      	bne.n	8003224 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800324c:	4b25      	ldr	r3, [pc, #148]	@ (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d20c      	bcs.n	8003274 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325a:	4b22      	ldr	r3, [pc, #136]	@ (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003262:	4b20      	ldr	r3, [pc, #128]	@ (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d001      	beq.n	8003274 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e032      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003280:	4b19      	ldr	r3, [pc, #100]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	4916      	ldr	r1, [pc, #88]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	4313      	orrs	r3, r2
 8003290:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d009      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800329e:	4b12      	ldr	r3, [pc, #72]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	490e      	ldr	r1, [pc, #56]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032b2:	f000 f887 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 80032b6:	4602      	mov	r2, r0
 80032b8:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	490a      	ldr	r1, [pc, #40]	@ (80032ec <HAL_RCC_ClockConfig+0x1c0>)
 80032c4:	5ccb      	ldrb	r3, [r1, r3]
 80032c6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ca:	4a09      	ldr	r2, [pc, #36]	@ (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80032ce:	4b09      	ldr	r3, [pc, #36]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fa5c 	bl	8002790 <HAL_InitTick>

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40023c00 	.word	0x40023c00
 80032e8:	40023800 	.word	0x40023800
 80032ec:	0800f6f8 	.word	0x0800f6f8
 80032f0:	20000004 	.word	0x20000004
 80032f4:	20000008 	.word	0x20000008

080032f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032fc:	4b03      	ldr	r3, [pc, #12]	@ (800330c <HAL_RCC_GetHCLKFreq+0x14>)
 80032fe:	681b      	ldr	r3, [r3, #0]
}
 8003300:	4618      	mov	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	20000004 	.word	0x20000004

08003310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003314:	f7ff fff0 	bl	80032f8 <HAL_RCC_GetHCLKFreq>
 8003318:	4602      	mov	r2, r0
 800331a:	4b05      	ldr	r3, [pc, #20]	@ (8003330 <HAL_RCC_GetPCLK1Freq+0x20>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	0a9b      	lsrs	r3, r3, #10
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	4903      	ldr	r1, [pc, #12]	@ (8003334 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003326:	5ccb      	ldrb	r3, [r1, r3]
 8003328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800332c:	4618      	mov	r0, r3
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40023800 	.word	0x40023800
 8003334:	0800f708 	.word	0x0800f708

08003338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800333c:	f7ff ffdc 	bl	80032f8 <HAL_RCC_GetHCLKFreq>
 8003340:	4602      	mov	r2, r0
 8003342:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	0b5b      	lsrs	r3, r3, #13
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	4903      	ldr	r1, [pc, #12]	@ (800335c <HAL_RCC_GetPCLK2Freq+0x24>)
 800334e:	5ccb      	ldrb	r3, [r1, r3]
 8003350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003354:	4618      	mov	r0, r3
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40023800 	.word	0x40023800
 800335c:	0800f708 	.word	0x0800f708

08003360 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	220f      	movs	r2, #15
 800336e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003370:	4b12      	ldr	r3, [pc, #72]	@ (80033bc <HAL_RCC_GetClockConfig+0x5c>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 0203 	and.w	r2, r3, #3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800337c:	4b0f      	ldr	r3, [pc, #60]	@ (80033bc <HAL_RCC_GetClockConfig+0x5c>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003388:	4b0c      	ldr	r3, [pc, #48]	@ (80033bc <HAL_RCC_GetClockConfig+0x5c>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <HAL_RCC_GetClockConfig+0x5c>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	08db      	lsrs	r3, r3, #3
 800339a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033a2:	4b07      	ldr	r3, [pc, #28]	@ (80033c0 <HAL_RCC_GetClockConfig+0x60>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 020f 	and.w	r2, r3, #15
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	601a      	str	r2, [r3, #0]
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800
 80033c0:	40023c00 	.word	0x40023c00

080033c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c8:	b0ae      	sub	sp, #184	@ 0xb8
 80033ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033ea:	4bcb      	ldr	r3, [pc, #812]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x354>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 030c 	and.w	r3, r3, #12
 80033f2:	2b0c      	cmp	r3, #12
 80033f4:	f200 8206 	bhi.w	8003804 <HAL_RCC_GetSysClockFreq+0x440>
 80033f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003400 <HAL_RCC_GetSysClockFreq+0x3c>)
 80033fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fe:	bf00      	nop
 8003400:	08003435 	.word	0x08003435
 8003404:	08003805 	.word	0x08003805
 8003408:	08003805 	.word	0x08003805
 800340c:	08003805 	.word	0x08003805
 8003410:	0800343d 	.word	0x0800343d
 8003414:	08003805 	.word	0x08003805
 8003418:	08003805 	.word	0x08003805
 800341c:	08003805 	.word	0x08003805
 8003420:	08003445 	.word	0x08003445
 8003424:	08003805 	.word	0x08003805
 8003428:	08003805 	.word	0x08003805
 800342c:	08003805 	.word	0x08003805
 8003430:	08003635 	.word	0x08003635
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003434:	4bb9      	ldr	r3, [pc, #740]	@ (800371c <HAL_RCC_GetSysClockFreq+0x358>)
 8003436:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800343a:	e1e7      	b.n	800380c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800343c:	4bb8      	ldr	r3, [pc, #736]	@ (8003720 <HAL_RCC_GetSysClockFreq+0x35c>)
 800343e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003442:	e1e3      	b.n	800380c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003444:	4bb4      	ldr	r3, [pc, #720]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x354>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800344c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003450:	4bb1      	ldr	r3, [pc, #708]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x354>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d071      	beq.n	8003540 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800345c:	4bae      	ldr	r3, [pc, #696]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x354>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	099b      	lsrs	r3, r3, #6
 8003462:	2200      	movs	r2, #0
 8003464:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003468:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800346c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003474:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003478:	2300      	movs	r3, #0
 800347a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800347e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003482:	4622      	mov	r2, r4
 8003484:	462b      	mov	r3, r5
 8003486:	f04f 0000 	mov.w	r0, #0
 800348a:	f04f 0100 	mov.w	r1, #0
 800348e:	0159      	lsls	r1, r3, #5
 8003490:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003494:	0150      	lsls	r0, r2, #5
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4621      	mov	r1, r4
 800349c:	1a51      	subs	r1, r2, r1
 800349e:	6439      	str	r1, [r7, #64]	@ 0x40
 80034a0:	4629      	mov	r1, r5
 80034a2:	eb63 0301 	sbc.w	r3, r3, r1
 80034a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	f04f 0300 	mov.w	r3, #0
 80034b0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80034b4:	4649      	mov	r1, r9
 80034b6:	018b      	lsls	r3, r1, #6
 80034b8:	4641      	mov	r1, r8
 80034ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034be:	4641      	mov	r1, r8
 80034c0:	018a      	lsls	r2, r1, #6
 80034c2:	4641      	mov	r1, r8
 80034c4:	1a51      	subs	r1, r2, r1
 80034c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80034c8:	4649      	mov	r1, r9
 80034ca:	eb63 0301 	sbc.w	r3, r3, r1
 80034ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80034dc:	4649      	mov	r1, r9
 80034de:	00cb      	lsls	r3, r1, #3
 80034e0:	4641      	mov	r1, r8
 80034e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034e6:	4641      	mov	r1, r8
 80034e8:	00ca      	lsls	r2, r1, #3
 80034ea:	4610      	mov	r0, r2
 80034ec:	4619      	mov	r1, r3
 80034ee:	4603      	mov	r3, r0
 80034f0:	4622      	mov	r2, r4
 80034f2:	189b      	adds	r3, r3, r2
 80034f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80034f6:	462b      	mov	r3, r5
 80034f8:	460a      	mov	r2, r1
 80034fa:	eb42 0303 	adc.w	r3, r2, r3
 80034fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800350c:	4629      	mov	r1, r5
 800350e:	024b      	lsls	r3, r1, #9
 8003510:	4621      	mov	r1, r4
 8003512:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003516:	4621      	mov	r1, r4
 8003518:	024a      	lsls	r2, r1, #9
 800351a:	4610      	mov	r0, r2
 800351c:	4619      	mov	r1, r3
 800351e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003522:	2200      	movs	r2, #0
 8003524:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003528:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800352c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003530:	f7fd fbda 	bl	8000ce8 <__aeabi_uldivmod>
 8003534:	4602      	mov	r2, r0
 8003536:	460b      	mov	r3, r1
 8003538:	4613      	mov	r3, r2
 800353a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800353e:	e067      	b.n	8003610 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003540:	4b75      	ldr	r3, [pc, #468]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x354>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	099b      	lsrs	r3, r3, #6
 8003546:	2200      	movs	r2, #0
 8003548:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800354c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003550:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003558:	67bb      	str	r3, [r7, #120]	@ 0x78
 800355a:	2300      	movs	r3, #0
 800355c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800355e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003562:	4622      	mov	r2, r4
 8003564:	462b      	mov	r3, r5
 8003566:	f04f 0000 	mov.w	r0, #0
 800356a:	f04f 0100 	mov.w	r1, #0
 800356e:	0159      	lsls	r1, r3, #5
 8003570:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003574:	0150      	lsls	r0, r2, #5
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	4621      	mov	r1, r4
 800357c:	1a51      	subs	r1, r2, r1
 800357e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003580:	4629      	mov	r1, r5
 8003582:	eb63 0301 	sbc.w	r3, r3, r1
 8003586:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003594:	4649      	mov	r1, r9
 8003596:	018b      	lsls	r3, r1, #6
 8003598:	4641      	mov	r1, r8
 800359a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800359e:	4641      	mov	r1, r8
 80035a0:	018a      	lsls	r2, r1, #6
 80035a2:	4641      	mov	r1, r8
 80035a4:	ebb2 0a01 	subs.w	sl, r2, r1
 80035a8:	4649      	mov	r1, r9
 80035aa:	eb63 0b01 	sbc.w	fp, r3, r1
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035c2:	4692      	mov	sl, r2
 80035c4:	469b      	mov	fp, r3
 80035c6:	4623      	mov	r3, r4
 80035c8:	eb1a 0303 	adds.w	r3, sl, r3
 80035cc:	623b      	str	r3, [r7, #32]
 80035ce:	462b      	mov	r3, r5
 80035d0:	eb4b 0303 	adc.w	r3, fp, r3
 80035d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80035e2:	4629      	mov	r1, r5
 80035e4:	028b      	lsls	r3, r1, #10
 80035e6:	4621      	mov	r1, r4
 80035e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035ec:	4621      	mov	r1, r4
 80035ee:	028a      	lsls	r2, r1, #10
 80035f0:	4610      	mov	r0, r2
 80035f2:	4619      	mov	r1, r3
 80035f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035f8:	2200      	movs	r2, #0
 80035fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80035fc:	677a      	str	r2, [r7, #116]	@ 0x74
 80035fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003602:	f7fd fb71 	bl	8000ce8 <__aeabi_uldivmod>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4613      	mov	r3, r2
 800360c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003610:	4b41      	ldr	r3, [pc, #260]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x354>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	0c1b      	lsrs	r3, r3, #16
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	3301      	adds	r3, #1
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003622:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003626:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800362a:	fbb2 f3f3 	udiv	r3, r2, r3
 800362e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003632:	e0eb      	b.n	800380c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003634:	4b38      	ldr	r3, [pc, #224]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x354>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800363c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003640:	4b35      	ldr	r3, [pc, #212]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x354>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d06b      	beq.n	8003724 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800364c:	4b32      	ldr	r3, [pc, #200]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x354>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	099b      	lsrs	r3, r3, #6
 8003652:	2200      	movs	r2, #0
 8003654:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003656:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003658:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800365a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003660:	2300      	movs	r3, #0
 8003662:	667b      	str	r3, [r7, #100]	@ 0x64
 8003664:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003668:	4622      	mov	r2, r4
 800366a:	462b      	mov	r3, r5
 800366c:	f04f 0000 	mov.w	r0, #0
 8003670:	f04f 0100 	mov.w	r1, #0
 8003674:	0159      	lsls	r1, r3, #5
 8003676:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800367a:	0150      	lsls	r0, r2, #5
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4621      	mov	r1, r4
 8003682:	1a51      	subs	r1, r2, r1
 8003684:	61b9      	str	r1, [r7, #24]
 8003686:	4629      	mov	r1, r5
 8003688:	eb63 0301 	sbc.w	r3, r3, r1
 800368c:	61fb      	str	r3, [r7, #28]
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800369a:	4659      	mov	r1, fp
 800369c:	018b      	lsls	r3, r1, #6
 800369e:	4651      	mov	r1, sl
 80036a0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036a4:	4651      	mov	r1, sl
 80036a6:	018a      	lsls	r2, r1, #6
 80036a8:	4651      	mov	r1, sl
 80036aa:	ebb2 0801 	subs.w	r8, r2, r1
 80036ae:	4659      	mov	r1, fp
 80036b0:	eb63 0901 	sbc.w	r9, r3, r1
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036c8:	4690      	mov	r8, r2
 80036ca:	4699      	mov	r9, r3
 80036cc:	4623      	mov	r3, r4
 80036ce:	eb18 0303 	adds.w	r3, r8, r3
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	462b      	mov	r3, r5
 80036d6:	eb49 0303 	adc.w	r3, r9, r3
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80036e8:	4629      	mov	r1, r5
 80036ea:	024b      	lsls	r3, r1, #9
 80036ec:	4621      	mov	r1, r4
 80036ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036f2:	4621      	mov	r1, r4
 80036f4:	024a      	lsls	r2, r1, #9
 80036f6:	4610      	mov	r0, r2
 80036f8:	4619      	mov	r1, r3
 80036fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036fe:	2200      	movs	r2, #0
 8003700:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003702:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003704:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003708:	f7fd faee 	bl	8000ce8 <__aeabi_uldivmod>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4613      	mov	r3, r2
 8003712:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003716:	e065      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x420>
 8003718:	40023800 	.word	0x40023800
 800371c:	00f42400 	.word	0x00f42400
 8003720:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003724:	4b3d      	ldr	r3, [pc, #244]	@ (800381c <HAL_RCC_GetSysClockFreq+0x458>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	099b      	lsrs	r3, r3, #6
 800372a:	2200      	movs	r2, #0
 800372c:	4618      	mov	r0, r3
 800372e:	4611      	mov	r1, r2
 8003730:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003734:	653b      	str	r3, [r7, #80]	@ 0x50
 8003736:	2300      	movs	r3, #0
 8003738:	657b      	str	r3, [r7, #84]	@ 0x54
 800373a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800373e:	4642      	mov	r2, r8
 8003740:	464b      	mov	r3, r9
 8003742:	f04f 0000 	mov.w	r0, #0
 8003746:	f04f 0100 	mov.w	r1, #0
 800374a:	0159      	lsls	r1, r3, #5
 800374c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003750:	0150      	lsls	r0, r2, #5
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4641      	mov	r1, r8
 8003758:	1a51      	subs	r1, r2, r1
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	4649      	mov	r1, r9
 800375e:	eb63 0301 	sbc.w	r3, r3, r1
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003770:	4659      	mov	r1, fp
 8003772:	018b      	lsls	r3, r1, #6
 8003774:	4651      	mov	r1, sl
 8003776:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800377a:	4651      	mov	r1, sl
 800377c:	018a      	lsls	r2, r1, #6
 800377e:	4651      	mov	r1, sl
 8003780:	1a54      	subs	r4, r2, r1
 8003782:	4659      	mov	r1, fp
 8003784:	eb63 0501 	sbc.w	r5, r3, r1
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	00eb      	lsls	r3, r5, #3
 8003792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003796:	00e2      	lsls	r2, r4, #3
 8003798:	4614      	mov	r4, r2
 800379a:	461d      	mov	r5, r3
 800379c:	4643      	mov	r3, r8
 800379e:	18e3      	adds	r3, r4, r3
 80037a0:	603b      	str	r3, [r7, #0]
 80037a2:	464b      	mov	r3, r9
 80037a4:	eb45 0303 	adc.w	r3, r5, r3
 80037a8:	607b      	str	r3, [r7, #4]
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037b6:	4629      	mov	r1, r5
 80037b8:	028b      	lsls	r3, r1, #10
 80037ba:	4621      	mov	r1, r4
 80037bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037c0:	4621      	mov	r1, r4
 80037c2:	028a      	lsls	r2, r1, #10
 80037c4:	4610      	mov	r0, r2
 80037c6:	4619      	mov	r1, r3
 80037c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037cc:	2200      	movs	r2, #0
 80037ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037d0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80037d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80037d6:	f7fd fa87 	bl	8000ce8 <__aeabi_uldivmod>
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	4613      	mov	r3, r2
 80037e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80037e4:	4b0d      	ldr	r3, [pc, #52]	@ (800381c <HAL_RCC_GetSysClockFreq+0x458>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	0f1b      	lsrs	r3, r3, #28
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80037f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80037fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003802:	e003      	b.n	800380c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003804:	4b06      	ldr	r3, [pc, #24]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003806:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800380a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800380c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003810:	4618      	mov	r0, r3
 8003812:	37b8      	adds	r7, #184	@ 0xb8
 8003814:	46bd      	mov	sp, r7
 8003816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800381a:	bf00      	nop
 800381c:	40023800 	.word	0x40023800
 8003820:	00f42400 	.word	0x00f42400

08003824 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e28d      	b.n	8003d52 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 8083 	beq.w	800394a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003844:	4b94      	ldr	r3, [pc, #592]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 030c 	and.w	r3, r3, #12
 800384c:	2b04      	cmp	r3, #4
 800384e:	d019      	beq.n	8003884 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003850:	4b91      	ldr	r3, [pc, #580]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 030c 	and.w	r3, r3, #12
        || \
 8003858:	2b08      	cmp	r3, #8
 800385a:	d106      	bne.n	800386a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800385c:	4b8e      	ldr	r3, [pc, #568]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003864:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003868:	d00c      	beq.n	8003884 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800386a:	4b8b      	ldr	r3, [pc, #556]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003872:	2b0c      	cmp	r3, #12
 8003874:	d112      	bne.n	800389c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003876:	4b88      	ldr	r3, [pc, #544]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800387e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003882:	d10b      	bne.n	800389c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003884:	4b84      	ldr	r3, [pc, #528]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d05b      	beq.n	8003948 <HAL_RCC_OscConfig+0x124>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d157      	bne.n	8003948 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e25a      	b.n	8003d52 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038a4:	d106      	bne.n	80038b4 <HAL_RCC_OscConfig+0x90>
 80038a6:	4b7c      	ldr	r3, [pc, #496]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a7b      	ldr	r2, [pc, #492]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 80038ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	e01d      	b.n	80038f0 <HAL_RCC_OscConfig+0xcc>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0xb4>
 80038be:	4b76      	ldr	r3, [pc, #472]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a75      	ldr	r2, [pc, #468]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 80038c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	4b73      	ldr	r3, [pc, #460]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a72      	ldr	r2, [pc, #456]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 80038d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e00b      	b.n	80038f0 <HAL_RCC_OscConfig+0xcc>
 80038d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a6e      	ldr	r2, [pc, #440]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 80038de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	4b6c      	ldr	r3, [pc, #432]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a6b      	ldr	r2, [pc, #428]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 80038ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d013      	beq.n	8003920 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f8:	f7ff f964 	bl	8002bc4 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003900:	f7ff f960 	bl	8002bc4 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b64      	cmp	r3, #100	@ 0x64
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e21f      	b.n	8003d52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	4b61      	ldr	r3, [pc, #388]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0xdc>
 800391e:	e014      	b.n	800394a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7ff f950 	bl	8002bc4 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003928:	f7ff f94c 	bl	8002bc4 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	@ 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e20b      	b.n	8003d52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393a:	4b57      	ldr	r3, [pc, #348]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x104>
 8003946:	e000      	b.n	800394a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d06f      	beq.n	8003a36 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003956:	4b50      	ldr	r3, [pc, #320]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b00      	cmp	r3, #0
 8003960:	d017      	beq.n	8003992 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003962:	4b4d      	ldr	r3, [pc, #308]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
        || \
 800396a:	2b08      	cmp	r3, #8
 800396c:	d105      	bne.n	800397a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800396e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00b      	beq.n	8003992 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800397a:	4b47      	ldr	r3, [pc, #284]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003982:	2b0c      	cmp	r3, #12
 8003984:	d11c      	bne.n	80039c0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003986:	4b44      	ldr	r3, [pc, #272]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d116      	bne.n	80039c0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003992:	4b41      	ldr	r3, [pc, #260]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d005      	beq.n	80039aa <HAL_RCC_OscConfig+0x186>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e1d3      	b.n	8003d52 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	4937      	ldr	r1, [pc, #220]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039be:	e03a      	b.n	8003a36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d020      	beq.n	8003a0a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039c8:	4b34      	ldr	r3, [pc, #208]	@ (8003a9c <HAL_RCC_OscConfig+0x278>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ce:	f7ff f8f9 	bl	8002bc4 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039d6:	f7ff f8f5 	bl	8002bc4 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e1b4      	b.n	8003d52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0f0      	beq.n	80039d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f4:	4b28      	ldr	r3, [pc, #160]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4925      	ldr	r1, [pc, #148]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	600b      	str	r3, [r1, #0]
 8003a08:	e015      	b.n	8003a36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a0a:	4b24      	ldr	r3, [pc, #144]	@ (8003a9c <HAL_RCC_OscConfig+0x278>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7ff f8d8 	bl	8002bc4 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a18:	f7ff f8d4 	bl	8002bc4 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e193      	b.n	8003d52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d036      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d016      	beq.n	8003a78 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a4a:	4b15      	ldr	r3, [pc, #84]	@ (8003aa0 <HAL_RCC_OscConfig+0x27c>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a50:	f7ff f8b8 	bl	8002bc4 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a58:	f7ff f8b4 	bl	8002bc4 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e173      	b.n	8003d52 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a98 <HAL_RCC_OscConfig+0x274>)
 8003a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0x234>
 8003a76:	e01b      	b.n	8003ab0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a78:	4b09      	ldr	r3, [pc, #36]	@ (8003aa0 <HAL_RCC_OscConfig+0x27c>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a7e:	f7ff f8a1 	bl	8002bc4 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a84:	e00e      	b.n	8003aa4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a86:	f7ff f89d 	bl	8002bc4 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d907      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e15c      	b.n	8003d52 <HAL_RCC_OscConfig+0x52e>
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	42470000 	.word	0x42470000
 8003aa0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa4:	4b8a      	ldr	r3, [pc, #552]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003aa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1ea      	bne.n	8003a86 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 8097 	beq.w	8003bec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ac2:	4b83      	ldr	r3, [pc, #524]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10f      	bne.n	8003aee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	4b7f      	ldr	r3, [pc, #508]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	4a7e      	ldr	r2, [pc, #504]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ade:	4b7c      	ldr	r3, [pc, #496]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae6:	60bb      	str	r3, [r7, #8]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aea:	2301      	movs	r3, #1
 8003aec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aee:	4b79      	ldr	r3, [pc, #484]	@ (8003cd4 <HAL_RCC_OscConfig+0x4b0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d118      	bne.n	8003b2c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003afa:	4b76      	ldr	r3, [pc, #472]	@ (8003cd4 <HAL_RCC_OscConfig+0x4b0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a75      	ldr	r2, [pc, #468]	@ (8003cd4 <HAL_RCC_OscConfig+0x4b0>)
 8003b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b06:	f7ff f85d 	bl	8002bc4 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0e:	f7ff f859 	bl	8002bc4 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e118      	b.n	8003d52 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b20:	4b6c      	ldr	r3, [pc, #432]	@ (8003cd4 <HAL_RCC_OscConfig+0x4b0>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0f0      	beq.n	8003b0e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d106      	bne.n	8003b42 <HAL_RCC_OscConfig+0x31e>
 8003b34:	4b66      	ldr	r3, [pc, #408]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b38:	4a65      	ldr	r2, [pc, #404]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b40:	e01c      	b.n	8003b7c <HAL_RCC_OscConfig+0x358>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b05      	cmp	r3, #5
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCC_OscConfig+0x340>
 8003b4a:	4b61      	ldr	r3, [pc, #388]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4e:	4a60      	ldr	r2, [pc, #384]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003b50:	f043 0304 	orr.w	r3, r3, #4
 8003b54:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b56:	4b5e      	ldr	r3, [pc, #376]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5a:	4a5d      	ldr	r2, [pc, #372]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b62:	e00b      	b.n	8003b7c <HAL_RCC_OscConfig+0x358>
 8003b64:	4b5a      	ldr	r3, [pc, #360]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b68:	4a59      	ldr	r2, [pc, #356]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003b6a:	f023 0301 	bic.w	r3, r3, #1
 8003b6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b70:	4b57      	ldr	r3, [pc, #348]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b74:	4a56      	ldr	r2, [pc, #344]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003b76:	f023 0304 	bic.w	r3, r3, #4
 8003b7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d015      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b84:	f7ff f81e 	bl	8002bc4 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8a:	e00a      	b.n	8003ba2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8c:	f7ff f81a 	bl	8002bc4 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e0d7      	b.n	8003d52 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba2:	4b4b      	ldr	r3, [pc, #300]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0ee      	beq.n	8003b8c <HAL_RCC_OscConfig+0x368>
 8003bae:	e014      	b.n	8003bda <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb0:	f7ff f808 	bl	8002bc4 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb6:	e00a      	b.n	8003bce <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb8:	f7ff f804 	bl	8002bc4 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e0c1      	b.n	8003d52 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bce:	4b40      	ldr	r3, [pc, #256]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1ee      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bda:	7dfb      	ldrb	r3, [r7, #23]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d105      	bne.n	8003bec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be0:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be4:	4a3a      	ldr	r2, [pc, #232]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003be6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 80ad 	beq.w	8003d50 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bf6:	4b36      	ldr	r3, [pc, #216]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d060      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d145      	bne.n	8003c96 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0a:	4b33      	ldr	r3, [pc, #204]	@ (8003cd8 <HAL_RCC_OscConfig+0x4b4>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fe ffd8 	bl	8002bc4 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c18:	f7fe ffd4 	bl	8002bc4 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e093      	b.n	8003d52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c2a:	4b29      	ldr	r3, [pc, #164]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69da      	ldr	r2, [r3, #28]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	019b      	lsls	r3, r3, #6
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4c:	085b      	lsrs	r3, r3, #1
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	041b      	lsls	r3, r3, #16
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c58:	061b      	lsls	r3, r3, #24
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c60:	071b      	lsls	r3, r3, #28
 8003c62:	491b      	ldr	r1, [pc, #108]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c68:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd8 <HAL_RCC_OscConfig+0x4b4>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6e:	f7fe ffa9 	bl	8002bc4 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c76:	f7fe ffa5 	bl	8002bc4 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e064      	b.n	8003d52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c88:	4b11      	ldr	r3, [pc, #68]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0x452>
 8003c94:	e05c      	b.n	8003d50 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c96:	4b10      	ldr	r3, [pc, #64]	@ (8003cd8 <HAL_RCC_OscConfig+0x4b4>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9c:	f7fe ff92 	bl	8002bc4 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca4:	f7fe ff8e 	bl	8002bc4 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e04d      	b.n	8003d52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb6:	4b06      	ldr	r3, [pc, #24]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ac>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1f0      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x480>
 8003cc2:	e045      	b.n	8003d50 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d107      	bne.n	8003cdc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e040      	b.n	8003d52 <HAL_RCC_OscConfig+0x52e>
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	40007000 	.word	0x40007000
 8003cd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8003d5c <HAL_RCC_OscConfig+0x538>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d030      	beq.n	8003d4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d129      	bne.n	8003d4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d122      	bne.n	8003d4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d119      	bne.n	8003d4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d22:	085b      	lsrs	r3, r3, #1
 8003d24:	3b01      	subs	r3, #1
 8003d26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d10f      	bne.n	8003d4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d107      	bne.n	8003d4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d46:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e000      	b.n	8003d52 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40023800 	.word	0x40023800

08003d60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e07b      	b.n	8003e6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d108      	bne.n	8003d8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d82:	d009      	beq.n	8003d98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	61da      	str	r2, [r3, #28]
 8003d8a:	e005      	b.n	8003d98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d106      	bne.n	8003db8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fe fc1e 	bl	80025f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e1c:	ea42 0103 	orr.w	r1, r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e24:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	0c1b      	lsrs	r3, r3, #16
 8003e36:	f003 0104 	and.w	r1, r3, #4
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3e:	f003 0210 	and.w	r2, r3, #16
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	69da      	ldr	r2, [r3, #28]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b088      	sub	sp, #32
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	603b      	str	r3, [r7, #0]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e82:	f7fe fe9f 	bl	8002bc4 <HAL_GetTick>
 8003e86:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003e88:	88fb      	ldrh	r3, [r7, #6]
 8003e8a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d001      	beq.n	8003e9c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e12a      	b.n	80040f2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_SPI_Transmit+0x36>
 8003ea2:	88fb      	ldrh	r3, [r7, #6]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e122      	b.n	80040f2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d101      	bne.n	8003eba <HAL_SPI_Transmit+0x48>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e11b      	b.n	80040f2 <HAL_SPI_Transmit+0x280>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	88fa      	ldrh	r2, [r7, #6]
 8003eda:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	88fa      	ldrh	r2, [r7, #6]
 8003ee0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f08:	d10f      	bne.n	8003f2a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f34:	2b40      	cmp	r3, #64	@ 0x40
 8003f36:	d007      	beq.n	8003f48 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f50:	d152      	bne.n	8003ff8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_SPI_Transmit+0xee>
 8003f5a:	8b7b      	ldrh	r3, [r7, #26]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d145      	bne.n	8003fec <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f64:	881a      	ldrh	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f70:	1c9a      	adds	r2, r3, #2
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f84:	e032      	b.n	8003fec <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d112      	bne.n	8003fba <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f98:	881a      	ldrh	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa4:	1c9a      	adds	r2, r3, #2
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003fb8:	e018      	b.n	8003fec <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fba:	f7fe fe03 	bl	8002bc4 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d803      	bhi.n	8003fd2 <HAL_SPI_Transmit+0x160>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd0:	d102      	bne.n	8003fd8 <HAL_SPI_Transmit+0x166>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d109      	bne.n	8003fec <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e082      	b.n	80040f2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1c7      	bne.n	8003f86 <HAL_SPI_Transmit+0x114>
 8003ff6:	e053      	b.n	80040a0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <HAL_SPI_Transmit+0x194>
 8004000:	8b7b      	ldrh	r3, [r7, #26]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d147      	bne.n	8004096 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	330c      	adds	r3, #12
 8004010:	7812      	ldrb	r2, [r2, #0]
 8004012:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800402c:	e033      	b.n	8004096 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b02      	cmp	r3, #2
 800403a:	d113      	bne.n	8004064 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	330c      	adds	r3, #12
 8004046:	7812      	ldrb	r2, [r2, #0]
 8004048:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004058:	b29b      	uxth	r3, r3
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004062:	e018      	b.n	8004096 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004064:	f7fe fdae 	bl	8002bc4 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	429a      	cmp	r2, r3
 8004072:	d803      	bhi.n	800407c <HAL_SPI_Transmit+0x20a>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407a:	d102      	bne.n	8004082 <HAL_SPI_Transmit+0x210>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d109      	bne.n	8004096 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e02d      	b.n	80040f2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800409a:	b29b      	uxth	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1c6      	bne.n	800402e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	6839      	ldr	r1, [r7, #0]
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 fa67 	bl	8004578 <SPI_EndRxTxTransaction>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10a      	bne.n	80040d4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	617b      	str	r3, [r7, #20]
 80040d2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e000      	b.n	80040f2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80040f0:	2300      	movs	r3, #0
  }
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3720      	adds	r7, #32
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b08a      	sub	sp, #40	@ 0x28
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004108:	2301      	movs	r3, #1
 800410a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800410c:	f7fe fd5a 	bl	8002bc4 <HAL_GetTick>
 8004110:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004118:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004120:	887b      	ldrh	r3, [r7, #2]
 8004122:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004124:	7ffb      	ldrb	r3, [r7, #31]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d00c      	beq.n	8004144 <HAL_SPI_TransmitReceive+0x4a>
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004130:	d106      	bne.n	8004140 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d102      	bne.n	8004140 <HAL_SPI_TransmitReceive+0x46>
 800413a:	7ffb      	ldrb	r3, [r7, #31]
 800413c:	2b04      	cmp	r3, #4
 800413e:	d001      	beq.n	8004144 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004140:	2302      	movs	r3, #2
 8004142:	e17f      	b.n	8004444 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d005      	beq.n	8004156 <HAL_SPI_TransmitReceive+0x5c>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_SPI_TransmitReceive+0x5c>
 8004150:	887b      	ldrh	r3, [r7, #2]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e174      	b.n	8004444 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_SPI_TransmitReceive+0x6e>
 8004164:	2302      	movs	r3, #2
 8004166:	e16d      	b.n	8004444 <HAL_SPI_TransmitReceive+0x34a>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b04      	cmp	r3, #4
 800417a:	d003      	beq.n	8004184 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2205      	movs	r2, #5
 8004180:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	887a      	ldrh	r2, [r7, #2]
 8004194:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	887a      	ldrh	r2, [r7, #2]
 800419a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	887a      	ldrh	r2, [r7, #2]
 80041a6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	887a      	ldrh	r2, [r7, #2]
 80041ac:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c4:	2b40      	cmp	r3, #64	@ 0x40
 80041c6:	d007      	beq.n	80041d8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041e0:	d17e      	bne.n	80042e0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_SPI_TransmitReceive+0xf6>
 80041ea:	8afb      	ldrh	r3, [r7, #22]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d16c      	bne.n	80042ca <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f4:	881a      	ldrh	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004200:	1c9a      	adds	r2, r3, #2
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800420a:	b29b      	uxth	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004214:	e059      	b.n	80042ca <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b02      	cmp	r3, #2
 8004222:	d11b      	bne.n	800425c <HAL_SPI_TransmitReceive+0x162>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d016      	beq.n	800425c <HAL_SPI_TransmitReceive+0x162>
 800422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004230:	2b01      	cmp	r3, #1
 8004232:	d113      	bne.n	800425c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004238:	881a      	ldrh	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004244:	1c9a      	adds	r2, r3, #2
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b01      	cmp	r3, #1
 8004268:	d119      	bne.n	800429e <HAL_SPI_TransmitReceive+0x1a4>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d014      	beq.n	800429e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427e:	b292      	uxth	r2, r2
 8004280:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004286:	1c9a      	adds	r2, r3, #2
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800429a:	2301      	movs	r3, #1
 800429c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800429e:	f7fe fc91 	bl	8002bc4 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d80d      	bhi.n	80042ca <HAL_SPI_TransmitReceive+0x1d0>
 80042ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b4:	d009      	beq.n	80042ca <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e0bc      	b.n	8004444 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1a0      	bne.n	8004216 <HAL_SPI_TransmitReceive+0x11c>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d19b      	bne.n	8004216 <HAL_SPI_TransmitReceive+0x11c>
 80042de:	e082      	b.n	80043e6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <HAL_SPI_TransmitReceive+0x1f4>
 80042e8:	8afb      	ldrh	r3, [r7, #22]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d171      	bne.n	80043d2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	330c      	adds	r3, #12
 80042f8:	7812      	ldrb	r2, [r2, #0]
 80042fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004314:	e05d      	b.n	80043d2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b02      	cmp	r3, #2
 8004322:	d11c      	bne.n	800435e <HAL_SPI_TransmitReceive+0x264>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004328:	b29b      	uxth	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d017      	beq.n	800435e <HAL_SPI_TransmitReceive+0x264>
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	2b01      	cmp	r3, #1
 8004332:	d114      	bne.n	800435e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	330c      	adds	r3, #12
 800433e:	7812      	ldrb	r2, [r2, #0]
 8004340:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b01      	cmp	r3, #1
 800436a:	d119      	bne.n	80043a0 <HAL_SPI_TransmitReceive+0x2a6>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d014      	beq.n	80043a0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800439c:	2301      	movs	r3, #1
 800439e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043a0:	f7fe fc10 	bl	8002bc4 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d803      	bhi.n	80043b8 <HAL_SPI_TransmitReceive+0x2be>
 80043b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b6:	d102      	bne.n	80043be <HAL_SPI_TransmitReceive+0x2c4>
 80043b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e038      	b.n	8004444 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d19c      	bne.n	8004316 <HAL_SPI_TransmitReceive+0x21c>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d197      	bne.n	8004316 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043e6:	6a3a      	ldr	r2, [r7, #32]
 80043e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 f8c4 	bl	8004578 <SPI_EndRxTxTransaction>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d008      	beq.n	8004408 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e01d      	b.n	8004444 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004410:	2300      	movs	r3, #0
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	613b      	str	r3, [r7, #16]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	613b      	str	r3, [r7, #16]
 8004424:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004442:	2300      	movs	r3, #0
  }
}
 8004444:	4618      	mov	r0, r3
 8004446:	3728      	adds	r7, #40	@ 0x28
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800445a:	b2db      	uxtb	r3, r3
}
 800445c:	4618      	mov	r0, r3
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	4613      	mov	r3, r2
 8004476:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004478:	f7fe fba4 	bl	8002bc4 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004480:	1a9b      	subs	r3, r3, r2
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	4413      	add	r3, r2
 8004486:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004488:	f7fe fb9c 	bl	8002bc4 <HAL_GetTick>
 800448c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800448e:	4b39      	ldr	r3, [pc, #228]	@ (8004574 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	015b      	lsls	r3, r3, #5
 8004494:	0d1b      	lsrs	r3, r3, #20
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	fb02 f303 	mul.w	r3, r2, r3
 800449c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800449e:	e054      	b.n	800454a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a6:	d050      	beq.n	800454a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044a8:	f7fe fb8c 	bl	8002bc4 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d902      	bls.n	80044be <SPI_WaitFlagStateUntilTimeout+0x56>
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d13d      	bne.n	800453a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80044cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044d6:	d111      	bne.n	80044fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044e0:	d004      	beq.n	80044ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ea:	d107      	bne.n	80044fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004500:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004504:	d10f      	bne.n	8004526 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004524:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e017      	b.n	800456a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	3b01      	subs	r3, #1
 8004548:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4013      	ands	r3, r2
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	429a      	cmp	r2, r3
 8004558:	bf0c      	ite	eq
 800455a:	2301      	moveq	r3, #1
 800455c:	2300      	movne	r3, #0
 800455e:	b2db      	uxtb	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	429a      	cmp	r2, r3
 8004566:	d19b      	bne.n	80044a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3720      	adds	r7, #32
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20000004 	.word	0x20000004

08004578 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af02      	add	r7, sp, #8
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2201      	movs	r2, #1
 800458c:	2102      	movs	r1, #2
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f7ff ff6a 	bl	8004468 <SPI_WaitFlagStateUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d007      	beq.n	80045aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459e:	f043 0220 	orr.w	r2, r3, #32
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e032      	b.n	8004610 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80045aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004618 <SPI_EndRxTxTransaction+0xa0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a1b      	ldr	r2, [pc, #108]	@ (800461c <SPI_EndRxTxTransaction+0xa4>)
 80045b0:	fba2 2303 	umull	r2, r3, r2, r3
 80045b4:	0d5b      	lsrs	r3, r3, #21
 80045b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80045ba:	fb02 f303 	mul.w	r3, r2, r3
 80045be:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045c8:	d112      	bne.n	80045f0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2200      	movs	r2, #0
 80045d2:	2180      	movs	r1, #128	@ 0x80
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f7ff ff47 	bl	8004468 <SPI_WaitFlagStateUntilTimeout>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d016      	beq.n	800460e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e4:	f043 0220 	orr.w	r2, r3, #32
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e00f      	b.n	8004610 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004606:	2b80      	cmp	r3, #128	@ 0x80
 8004608:	d0f2      	beq.n	80045f0 <SPI_EndRxTxTransaction+0x78>
 800460a:	e000      	b.n	800460e <SPI_EndRxTxTransaction+0x96>
        break;
 800460c:	bf00      	nop
  }

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	20000004 	.word	0x20000004
 800461c:	165e9f81 	.word	0x165e9f81

08004620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e041      	b.n	80046b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fe f81c 	bl	8002684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3304      	adds	r3, #4
 800465c:	4619      	mov	r1, r3
 800465e:	4610      	mov	r0, r2
 8004660:	f000 fae6 	bl	8004c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d001      	beq.n	80046d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e046      	b.n	8004766 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a23      	ldr	r2, [pc, #140]	@ (8004774 <HAL_TIM_Base_Start+0xb4>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d022      	beq.n	8004730 <HAL_TIM_Base_Start+0x70>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046f2:	d01d      	beq.n	8004730 <HAL_TIM_Base_Start+0x70>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004778 <HAL_TIM_Base_Start+0xb8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d018      	beq.n	8004730 <HAL_TIM_Base_Start+0x70>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1e      	ldr	r2, [pc, #120]	@ (800477c <HAL_TIM_Base_Start+0xbc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d013      	beq.n	8004730 <HAL_TIM_Base_Start+0x70>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1c      	ldr	r2, [pc, #112]	@ (8004780 <HAL_TIM_Base_Start+0xc0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00e      	beq.n	8004730 <HAL_TIM_Base_Start+0x70>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a1b      	ldr	r2, [pc, #108]	@ (8004784 <HAL_TIM_Base_Start+0xc4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d009      	beq.n	8004730 <HAL_TIM_Base_Start+0x70>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a19      	ldr	r2, [pc, #100]	@ (8004788 <HAL_TIM_Base_Start+0xc8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d004      	beq.n	8004730 <HAL_TIM_Base_Start+0x70>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a18      	ldr	r2, [pc, #96]	@ (800478c <HAL_TIM_Base_Start+0xcc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d111      	bne.n	8004754 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b06      	cmp	r3, #6
 8004740:	d010      	beq.n	8004764 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 0201 	orr.w	r2, r2, #1
 8004750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004752:	e007      	b.n	8004764 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40010000 	.word	0x40010000
 8004778:	40000400 	.word	0x40000400
 800477c:	40000800 	.word	0x40000800
 8004780:	40000c00 	.word	0x40000c00
 8004784:	40010400 	.word	0x40010400
 8004788:	40014000 	.word	0x40014000
 800478c:	40001800 	.word	0x40001800

08004790 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d001      	beq.n	80047a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e04e      	b.n	8004846 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a23      	ldr	r2, [pc, #140]	@ (8004854 <HAL_TIM_Base_Start_IT+0xc4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d022      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047d2:	d01d      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004858 <HAL_TIM_Base_Start_IT+0xc8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d018      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a1e      	ldr	r2, [pc, #120]	@ (800485c <HAL_TIM_Base_Start_IT+0xcc>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004860 <HAL_TIM_Base_Start_IT+0xd0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00e      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004864 <HAL_TIM_Base_Start_IT+0xd4>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d009      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a19      	ldr	r2, [pc, #100]	@ (8004868 <HAL_TIM_Base_Start_IT+0xd8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0x80>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a18      	ldr	r2, [pc, #96]	@ (800486c <HAL_TIM_Base_Start_IT+0xdc>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d111      	bne.n	8004834 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b06      	cmp	r3, #6
 8004820:	d010      	beq.n	8004844 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0201 	orr.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004832:	e007      	b.n	8004844 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0201 	orr.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40010000 	.word	0x40010000
 8004858:	40000400 	.word	0x40000400
 800485c:	40000800 	.word	0x40000800
 8004860:	40000c00 	.word	0x40000c00
 8004864:	40010400 	.word	0x40010400
 8004868:	40014000 	.word	0x40014000
 800486c:	40001800 	.word	0x40001800

08004870 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d020      	beq.n	80048d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01b      	beq.n	80048d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0202 	mvn.w	r2, #2
 80048a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f999 	bl	8004bf2 <HAL_TIM_IC_CaptureCallback>
 80048c0:	e005      	b.n	80048ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f98b 	bl	8004bde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f99c 	bl	8004c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d020      	beq.n	8004920 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d01b      	beq.n	8004920 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f06f 0204 	mvn.w	r2, #4
 80048f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2202      	movs	r2, #2
 80048f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f973 	bl	8004bf2 <HAL_TIM_IC_CaptureCallback>
 800490c:	e005      	b.n	800491a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f965 	bl	8004bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f976 	bl	8004c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	2b00      	cmp	r3, #0
 8004928:	d020      	beq.n	800496c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b00      	cmp	r3, #0
 8004932:	d01b      	beq.n	800496c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0208 	mvn.w	r2, #8
 800493c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2204      	movs	r2, #4
 8004942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f94d 	bl	8004bf2 <HAL_TIM_IC_CaptureCallback>
 8004958:	e005      	b.n	8004966 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f93f 	bl	8004bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f950 	bl	8004c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f003 0310 	and.w	r3, r3, #16
 8004972:	2b00      	cmp	r3, #0
 8004974:	d020      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01b      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f06f 0210 	mvn.w	r2, #16
 8004988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2208      	movs	r2, #8
 800498e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f927 	bl	8004bf2 <HAL_TIM_IC_CaptureCallback>
 80049a4:	e005      	b.n	80049b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f919 	bl	8004bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f92a 	bl	8004c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00c      	beq.n	80049dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0201 	mvn.w	r2, #1
 80049d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fd fdb2 	bl	8002540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00c      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80049f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fae4 	bl	8004fc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00c      	beq.n	8004a24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d007      	beq.n	8004a24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f8fb 	bl	8004c1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00c      	beq.n	8004a48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0220 	mvn.w	r2, #32
 8004a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 fab6 	bl	8004fb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a48:	bf00      	nop
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d101      	bne.n	8004a6c <HAL_TIM_ConfigClockSource+0x1c>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e0b4      	b.n	8004bd6 <HAL_TIM_ConfigClockSource+0x186>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aa4:	d03e      	beq.n	8004b24 <HAL_TIM_ConfigClockSource+0xd4>
 8004aa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aaa:	f200 8087 	bhi.w	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004aae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ab2:	f000 8086 	beq.w	8004bc2 <HAL_TIM_ConfigClockSource+0x172>
 8004ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aba:	d87f      	bhi.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004abc:	2b70      	cmp	r3, #112	@ 0x70
 8004abe:	d01a      	beq.n	8004af6 <HAL_TIM_ConfigClockSource+0xa6>
 8004ac0:	2b70      	cmp	r3, #112	@ 0x70
 8004ac2:	d87b      	bhi.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ac4:	2b60      	cmp	r3, #96	@ 0x60
 8004ac6:	d050      	beq.n	8004b6a <HAL_TIM_ConfigClockSource+0x11a>
 8004ac8:	2b60      	cmp	r3, #96	@ 0x60
 8004aca:	d877      	bhi.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004acc:	2b50      	cmp	r3, #80	@ 0x50
 8004ace:	d03c      	beq.n	8004b4a <HAL_TIM_ConfigClockSource+0xfa>
 8004ad0:	2b50      	cmp	r3, #80	@ 0x50
 8004ad2:	d873      	bhi.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ad4:	2b40      	cmp	r3, #64	@ 0x40
 8004ad6:	d058      	beq.n	8004b8a <HAL_TIM_ConfigClockSource+0x13a>
 8004ad8:	2b40      	cmp	r3, #64	@ 0x40
 8004ada:	d86f      	bhi.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004adc:	2b30      	cmp	r3, #48	@ 0x30
 8004ade:	d064      	beq.n	8004baa <HAL_TIM_ConfigClockSource+0x15a>
 8004ae0:	2b30      	cmp	r3, #48	@ 0x30
 8004ae2:	d86b      	bhi.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	d060      	beq.n	8004baa <HAL_TIM_ConfigClockSource+0x15a>
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	d867      	bhi.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d05c      	beq.n	8004baa <HAL_TIM_ConfigClockSource+0x15a>
 8004af0:	2b10      	cmp	r3, #16
 8004af2:	d05a      	beq.n	8004baa <HAL_TIM_ConfigClockSource+0x15a>
 8004af4:	e062      	b.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b06:	f000 f9b9 	bl	8004e7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	609a      	str	r2, [r3, #8]
      break;
 8004b22:	e04f      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b34:	f000 f9a2 	bl	8004e7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b46:	609a      	str	r2, [r3, #8]
      break;
 8004b48:	e03c      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b56:	461a      	mov	r2, r3
 8004b58:	f000 f916 	bl	8004d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2150      	movs	r1, #80	@ 0x50
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 f96f 	bl	8004e46 <TIM_ITRx_SetConfig>
      break;
 8004b68:	e02c      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b76:	461a      	mov	r2, r3
 8004b78:	f000 f935 	bl	8004de6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2160      	movs	r1, #96	@ 0x60
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 f95f 	bl	8004e46 <TIM_ITRx_SetConfig>
      break;
 8004b88:	e01c      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b96:	461a      	mov	r2, r3
 8004b98:	f000 f8f6 	bl	8004d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2140      	movs	r1, #64	@ 0x40
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 f94f 	bl	8004e46 <TIM_ITRx_SetConfig>
      break;
 8004ba8:	e00c      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	f000 f946 	bl	8004e46 <TIM_ITRx_SetConfig>
      break;
 8004bba:	e003      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004bc0:	e000      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b083      	sub	sp, #12
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
	...

08004c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a46      	ldr	r2, [pc, #280]	@ (8004d5c <TIM_Base_SetConfig+0x12c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d013      	beq.n	8004c70 <TIM_Base_SetConfig+0x40>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c4e:	d00f      	beq.n	8004c70 <TIM_Base_SetConfig+0x40>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a43      	ldr	r2, [pc, #268]	@ (8004d60 <TIM_Base_SetConfig+0x130>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d00b      	beq.n	8004c70 <TIM_Base_SetConfig+0x40>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a42      	ldr	r2, [pc, #264]	@ (8004d64 <TIM_Base_SetConfig+0x134>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d007      	beq.n	8004c70 <TIM_Base_SetConfig+0x40>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a41      	ldr	r2, [pc, #260]	@ (8004d68 <TIM_Base_SetConfig+0x138>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d003      	beq.n	8004c70 <TIM_Base_SetConfig+0x40>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a40      	ldr	r2, [pc, #256]	@ (8004d6c <TIM_Base_SetConfig+0x13c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d108      	bne.n	8004c82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a35      	ldr	r2, [pc, #212]	@ (8004d5c <TIM_Base_SetConfig+0x12c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d02b      	beq.n	8004ce2 <TIM_Base_SetConfig+0xb2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c90:	d027      	beq.n	8004ce2 <TIM_Base_SetConfig+0xb2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a32      	ldr	r2, [pc, #200]	@ (8004d60 <TIM_Base_SetConfig+0x130>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d023      	beq.n	8004ce2 <TIM_Base_SetConfig+0xb2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a31      	ldr	r2, [pc, #196]	@ (8004d64 <TIM_Base_SetConfig+0x134>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d01f      	beq.n	8004ce2 <TIM_Base_SetConfig+0xb2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a30      	ldr	r2, [pc, #192]	@ (8004d68 <TIM_Base_SetConfig+0x138>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d01b      	beq.n	8004ce2 <TIM_Base_SetConfig+0xb2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a2f      	ldr	r2, [pc, #188]	@ (8004d6c <TIM_Base_SetConfig+0x13c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d017      	beq.n	8004ce2 <TIM_Base_SetConfig+0xb2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a2e      	ldr	r2, [pc, #184]	@ (8004d70 <TIM_Base_SetConfig+0x140>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d013      	beq.n	8004ce2 <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a2d      	ldr	r2, [pc, #180]	@ (8004d74 <TIM_Base_SetConfig+0x144>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00f      	beq.n	8004ce2 <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a2c      	ldr	r2, [pc, #176]	@ (8004d78 <TIM_Base_SetConfig+0x148>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d00b      	beq.n	8004ce2 <TIM_Base_SetConfig+0xb2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8004d7c <TIM_Base_SetConfig+0x14c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d007      	beq.n	8004ce2 <TIM_Base_SetConfig+0xb2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a2a      	ldr	r2, [pc, #168]	@ (8004d80 <TIM_Base_SetConfig+0x150>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d003      	beq.n	8004ce2 <TIM_Base_SetConfig+0xb2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a29      	ldr	r2, [pc, #164]	@ (8004d84 <TIM_Base_SetConfig+0x154>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d108      	bne.n	8004cf4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a10      	ldr	r2, [pc, #64]	@ (8004d5c <TIM_Base_SetConfig+0x12c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d003      	beq.n	8004d28 <TIM_Base_SetConfig+0xf8>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a12      	ldr	r2, [pc, #72]	@ (8004d6c <TIM_Base_SetConfig+0x13c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d103      	bne.n	8004d30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	691a      	ldr	r2, [r3, #16]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d105      	bne.n	8004d4e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f023 0201 	bic.w	r2, r3, #1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	611a      	str	r2, [r3, #16]
  }
}
 8004d4e:	bf00      	nop
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40010000 	.word	0x40010000
 8004d60:	40000400 	.word	0x40000400
 8004d64:	40000800 	.word	0x40000800
 8004d68:	40000c00 	.word	0x40000c00
 8004d6c:	40010400 	.word	0x40010400
 8004d70:	40014000 	.word	0x40014000
 8004d74:	40014400 	.word	0x40014400
 8004d78:	40014800 	.word	0x40014800
 8004d7c:	40001800 	.word	0x40001800
 8004d80:	40001c00 	.word	0x40001c00
 8004d84:	40002000 	.word	0x40002000

08004d88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	f023 0201 	bic.w	r2, r3, #1
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f023 030a 	bic.w	r3, r3, #10
 8004dc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	621a      	str	r2, [r3, #32]
}
 8004dda:	bf00      	nop
 8004ddc:	371c      	adds	r7, #28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b087      	sub	sp, #28
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	f023 0210 	bic.w	r2, r3, #16
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	031b      	lsls	r3, r3, #12
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	621a      	str	r2, [r3, #32]
}
 8004e3a:	bf00      	nop
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b085      	sub	sp, #20
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f043 0307 	orr.w	r3, r3, #7
 8004e68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	609a      	str	r2, [r3, #8]
}
 8004e70:	bf00      	nop
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	021a      	lsls	r2, r3, #8
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	609a      	str	r2, [r3, #8]
}
 8004eb0:	bf00      	nop
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e05a      	b.n	8004f8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004efa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a21      	ldr	r2, [pc, #132]	@ (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d022      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f20:	d01d      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a1d      	ldr	r2, [pc, #116]	@ (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d018      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1b      	ldr	r2, [pc, #108]	@ (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a1a      	ldr	r2, [pc, #104]	@ (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a18      	ldr	r2, [pc, #96]	@ (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d009      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a17      	ldr	r2, [pc, #92]	@ (8004fac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a15      	ldr	r2, [pc, #84]	@ (8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d10c      	bne.n	8004f78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40010000 	.word	0x40010000
 8004f9c:	40000400 	.word	0x40000400
 8004fa0:	40000800 	.word	0x40000800
 8004fa4:	40000c00 	.word	0x40000c00
 8004fa8:	40010400 	.word	0x40010400
 8004fac:	40014000 	.word	0x40014000
 8004fb0:	40001800 	.word	0x40001800

08004fb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e042      	b.n	8005074 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fd fb7c 	bl	8002700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2224      	movs	r2, #36	@ 0x24
 800500c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800501e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f973 	bl	800530c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005034:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	695a      	ldr	r2, [r3, #20]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005044:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005054:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2220      	movs	r2, #32
 8005068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b08a      	sub	sp, #40	@ 0x28
 8005080:	af02      	add	r7, sp, #8
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	603b      	str	r3, [r7, #0]
 8005088:	4613      	mov	r3, r2
 800508a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b20      	cmp	r3, #32
 800509a:	d175      	bne.n	8005188 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <HAL_UART_Transmit+0x2c>
 80050a2:	88fb      	ldrh	r3, [r7, #6]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e06e      	b.n	800518a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2221      	movs	r2, #33	@ 0x21
 80050b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050ba:	f7fd fd83 	bl	8002bc4 <HAL_GetTick>
 80050be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	88fa      	ldrh	r2, [r7, #6]
 80050c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	88fa      	ldrh	r2, [r7, #6]
 80050ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050d4:	d108      	bne.n	80050e8 <HAL_UART_Transmit+0x6c>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d104      	bne.n	80050e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050de:	2300      	movs	r3, #0
 80050e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	61bb      	str	r3, [r7, #24]
 80050e6:	e003      	b.n	80050f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050ec:	2300      	movs	r3, #0
 80050ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050f0:	e02e      	b.n	8005150 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2200      	movs	r2, #0
 80050fa:	2180      	movs	r1, #128	@ 0x80
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f000 f848 	bl	8005192 <UART_WaitOnFlagUntilTimeout>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d005      	beq.n	8005114 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e03a      	b.n	800518a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10b      	bne.n	8005132 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	461a      	mov	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005128:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	3302      	adds	r3, #2
 800512e:	61bb      	str	r3, [r7, #24]
 8005130:	e007      	b.n	8005142 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	781a      	ldrb	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	3301      	adds	r3, #1
 8005140:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005146:	b29b      	uxth	r3, r3
 8005148:	3b01      	subs	r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005154:	b29b      	uxth	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1cb      	bne.n	80050f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2200      	movs	r2, #0
 8005162:	2140      	movs	r1, #64	@ 0x40
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 f814 	bl	8005192 <UART_WaitOnFlagUntilTimeout>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d005      	beq.n	800517c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2220      	movs	r2, #32
 8005174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e006      	b.n	800518a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2220      	movs	r2, #32
 8005180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005184:	2300      	movs	r3, #0
 8005186:	e000      	b.n	800518a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005188:	2302      	movs	r3, #2
  }
}
 800518a:	4618      	mov	r0, r3
 800518c:	3720      	adds	r7, #32
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b086      	sub	sp, #24
 8005196:	af00      	add	r7, sp, #0
 8005198:	60f8      	str	r0, [r7, #12]
 800519a:	60b9      	str	r1, [r7, #8]
 800519c:	603b      	str	r3, [r7, #0]
 800519e:	4613      	mov	r3, r2
 80051a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a2:	e03b      	b.n	800521c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051aa:	d037      	beq.n	800521c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ac:	f7fd fd0a 	bl	8002bc4 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	6a3a      	ldr	r2, [r7, #32]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d302      	bcc.n	80051c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e03a      	b.n	800523c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d023      	beq.n	800521c <UART_WaitOnFlagUntilTimeout+0x8a>
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2b80      	cmp	r3, #128	@ 0x80
 80051d8:	d020      	beq.n	800521c <UART_WaitOnFlagUntilTimeout+0x8a>
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2b40      	cmp	r3, #64	@ 0x40
 80051de:	d01d      	beq.n	800521c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d116      	bne.n	800521c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80051ee:	2300      	movs	r3, #0
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	617b      	str	r3, [r7, #20]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	617b      	str	r3, [r7, #20]
 8005202:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 f81d 	bl	8005244 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2208      	movs	r2, #8
 800520e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e00f      	b.n	800523c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	4013      	ands	r3, r2
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	429a      	cmp	r2, r3
 800522a:	bf0c      	ite	eq
 800522c:	2301      	moveq	r3, #1
 800522e:	2300      	movne	r3, #0
 8005230:	b2db      	uxtb	r3, r3
 8005232:	461a      	mov	r2, r3
 8005234:	79fb      	ldrb	r3, [r7, #7]
 8005236:	429a      	cmp	r2, r3
 8005238:	d0b4      	beq.n	80051a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005244:	b480      	push	{r7}
 8005246:	b095      	sub	sp, #84	@ 0x54
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	330c      	adds	r3, #12
 8005252:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005256:	e853 3f00 	ldrex	r3, [r3]
 800525a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800525c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005262:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	330c      	adds	r3, #12
 800526a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800526c:	643a      	str	r2, [r7, #64]	@ 0x40
 800526e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005270:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005272:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005274:	e841 2300 	strex	r3, r2, [r1]
 8005278:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800527a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1e5      	bne.n	800524c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3314      	adds	r3, #20
 8005286:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	e853 3f00 	ldrex	r3, [r3]
 800528e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	f023 0301 	bic.w	r3, r3, #1
 8005296:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3314      	adds	r3, #20
 800529e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052a8:	e841 2300 	strex	r3, r2, [r1]
 80052ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1e5      	bne.n	8005280 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d119      	bne.n	80052f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	330c      	adds	r3, #12
 80052c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	e853 3f00 	ldrex	r3, [r3]
 80052ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f023 0310 	bic.w	r3, r3, #16
 80052d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	330c      	adds	r3, #12
 80052da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052dc:	61ba      	str	r2, [r7, #24]
 80052de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e0:	6979      	ldr	r1, [r7, #20]
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	e841 2300 	strex	r3, r2, [r1]
 80052e8:	613b      	str	r3, [r7, #16]
   return(result);
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1e5      	bne.n	80052bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80052fe:	bf00      	nop
 8005300:	3754      	adds	r7, #84	@ 0x54
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
	...

0800530c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800530c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005310:	b0c0      	sub	sp, #256	@ 0x100
 8005312:	af00      	add	r7, sp, #0
 8005314:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005328:	68d9      	ldr	r1, [r3, #12]
 800532a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	ea40 0301 	orr.w	r3, r0, r1
 8005334:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	431a      	orrs	r2, r3
 8005344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	431a      	orrs	r2, r3
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005364:	f021 010c 	bic.w	r1, r1, #12
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005372:	430b      	orrs	r3, r1
 8005374:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005386:	6999      	ldr	r1, [r3, #24]
 8005388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	ea40 0301 	orr.w	r3, r0, r1
 8005392:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	4b8f      	ldr	r3, [pc, #572]	@ (80055d8 <UART_SetConfig+0x2cc>)
 800539c:	429a      	cmp	r2, r3
 800539e:	d005      	beq.n	80053ac <UART_SetConfig+0xa0>
 80053a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	4b8d      	ldr	r3, [pc, #564]	@ (80055dc <UART_SetConfig+0x2d0>)
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d104      	bne.n	80053b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053ac:	f7fd ffc4 	bl	8003338 <HAL_RCC_GetPCLK2Freq>
 80053b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80053b4:	e003      	b.n	80053be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053b6:	f7fd ffab 	bl	8003310 <HAL_RCC_GetPCLK1Freq>
 80053ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053c8:	f040 810c 	bne.w	80055e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053d0:	2200      	movs	r2, #0
 80053d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80053d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80053da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80053de:	4622      	mov	r2, r4
 80053e0:	462b      	mov	r3, r5
 80053e2:	1891      	adds	r1, r2, r2
 80053e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80053e6:	415b      	adcs	r3, r3
 80053e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80053ee:	4621      	mov	r1, r4
 80053f0:	eb12 0801 	adds.w	r8, r2, r1
 80053f4:	4629      	mov	r1, r5
 80053f6:	eb43 0901 	adc.w	r9, r3, r1
 80053fa:	f04f 0200 	mov.w	r2, #0
 80053fe:	f04f 0300 	mov.w	r3, #0
 8005402:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005406:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800540a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800540e:	4690      	mov	r8, r2
 8005410:	4699      	mov	r9, r3
 8005412:	4623      	mov	r3, r4
 8005414:	eb18 0303 	adds.w	r3, r8, r3
 8005418:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800541c:	462b      	mov	r3, r5
 800541e:	eb49 0303 	adc.w	r3, r9, r3
 8005422:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005432:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005436:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800543a:	460b      	mov	r3, r1
 800543c:	18db      	adds	r3, r3, r3
 800543e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005440:	4613      	mov	r3, r2
 8005442:	eb42 0303 	adc.w	r3, r2, r3
 8005446:	657b      	str	r3, [r7, #84]	@ 0x54
 8005448:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800544c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005450:	f7fb fc4a 	bl	8000ce8 <__aeabi_uldivmod>
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	4b61      	ldr	r3, [pc, #388]	@ (80055e0 <UART_SetConfig+0x2d4>)
 800545a:	fba3 2302 	umull	r2, r3, r3, r2
 800545e:	095b      	lsrs	r3, r3, #5
 8005460:	011c      	lsls	r4, r3, #4
 8005462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005466:	2200      	movs	r2, #0
 8005468:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800546c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005470:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005474:	4642      	mov	r2, r8
 8005476:	464b      	mov	r3, r9
 8005478:	1891      	adds	r1, r2, r2
 800547a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800547c:	415b      	adcs	r3, r3
 800547e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005480:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005484:	4641      	mov	r1, r8
 8005486:	eb12 0a01 	adds.w	sl, r2, r1
 800548a:	4649      	mov	r1, r9
 800548c:	eb43 0b01 	adc.w	fp, r3, r1
 8005490:	f04f 0200 	mov.w	r2, #0
 8005494:	f04f 0300 	mov.w	r3, #0
 8005498:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800549c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054a4:	4692      	mov	sl, r2
 80054a6:	469b      	mov	fp, r3
 80054a8:	4643      	mov	r3, r8
 80054aa:	eb1a 0303 	adds.w	r3, sl, r3
 80054ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054b2:	464b      	mov	r3, r9
 80054b4:	eb4b 0303 	adc.w	r3, fp, r3
 80054b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80054cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80054d0:	460b      	mov	r3, r1
 80054d2:	18db      	adds	r3, r3, r3
 80054d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80054d6:	4613      	mov	r3, r2
 80054d8:	eb42 0303 	adc.w	r3, r2, r3
 80054dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80054de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80054e6:	f7fb fbff 	bl	8000ce8 <__aeabi_uldivmod>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4611      	mov	r1, r2
 80054f0:	4b3b      	ldr	r3, [pc, #236]	@ (80055e0 <UART_SetConfig+0x2d4>)
 80054f2:	fba3 2301 	umull	r2, r3, r3, r1
 80054f6:	095b      	lsrs	r3, r3, #5
 80054f8:	2264      	movs	r2, #100	@ 0x64
 80054fa:	fb02 f303 	mul.w	r3, r2, r3
 80054fe:	1acb      	subs	r3, r1, r3
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005506:	4b36      	ldr	r3, [pc, #216]	@ (80055e0 <UART_SetConfig+0x2d4>)
 8005508:	fba3 2302 	umull	r2, r3, r3, r2
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005514:	441c      	add	r4, r3
 8005516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800551a:	2200      	movs	r2, #0
 800551c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005520:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005524:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005528:	4642      	mov	r2, r8
 800552a:	464b      	mov	r3, r9
 800552c:	1891      	adds	r1, r2, r2
 800552e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005530:	415b      	adcs	r3, r3
 8005532:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005534:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005538:	4641      	mov	r1, r8
 800553a:	1851      	adds	r1, r2, r1
 800553c:	6339      	str	r1, [r7, #48]	@ 0x30
 800553e:	4649      	mov	r1, r9
 8005540:	414b      	adcs	r3, r1
 8005542:	637b      	str	r3, [r7, #52]	@ 0x34
 8005544:	f04f 0200 	mov.w	r2, #0
 8005548:	f04f 0300 	mov.w	r3, #0
 800554c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005550:	4659      	mov	r1, fp
 8005552:	00cb      	lsls	r3, r1, #3
 8005554:	4651      	mov	r1, sl
 8005556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800555a:	4651      	mov	r1, sl
 800555c:	00ca      	lsls	r2, r1, #3
 800555e:	4610      	mov	r0, r2
 8005560:	4619      	mov	r1, r3
 8005562:	4603      	mov	r3, r0
 8005564:	4642      	mov	r2, r8
 8005566:	189b      	adds	r3, r3, r2
 8005568:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800556c:	464b      	mov	r3, r9
 800556e:	460a      	mov	r2, r1
 8005570:	eb42 0303 	adc.w	r3, r2, r3
 8005574:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005584:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005588:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800558c:	460b      	mov	r3, r1
 800558e:	18db      	adds	r3, r3, r3
 8005590:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005592:	4613      	mov	r3, r2
 8005594:	eb42 0303 	adc.w	r3, r2, r3
 8005598:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800559a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800559e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80055a2:	f7fb fba1 	bl	8000ce8 <__aeabi_uldivmod>
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	4b0d      	ldr	r3, [pc, #52]	@ (80055e0 <UART_SetConfig+0x2d4>)
 80055ac:	fba3 1302 	umull	r1, r3, r3, r2
 80055b0:	095b      	lsrs	r3, r3, #5
 80055b2:	2164      	movs	r1, #100	@ 0x64
 80055b4:	fb01 f303 	mul.w	r3, r1, r3
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	3332      	adds	r3, #50	@ 0x32
 80055be:	4a08      	ldr	r2, [pc, #32]	@ (80055e0 <UART_SetConfig+0x2d4>)
 80055c0:	fba2 2303 	umull	r2, r3, r2, r3
 80055c4:	095b      	lsrs	r3, r3, #5
 80055c6:	f003 0207 	and.w	r2, r3, #7
 80055ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4422      	add	r2, r4
 80055d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055d4:	e106      	b.n	80057e4 <UART_SetConfig+0x4d8>
 80055d6:	bf00      	nop
 80055d8:	40011000 	.word	0x40011000
 80055dc:	40011400 	.word	0x40011400
 80055e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055e8:	2200      	movs	r2, #0
 80055ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80055f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80055f6:	4642      	mov	r2, r8
 80055f8:	464b      	mov	r3, r9
 80055fa:	1891      	adds	r1, r2, r2
 80055fc:	6239      	str	r1, [r7, #32]
 80055fe:	415b      	adcs	r3, r3
 8005600:	627b      	str	r3, [r7, #36]	@ 0x24
 8005602:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005606:	4641      	mov	r1, r8
 8005608:	1854      	adds	r4, r2, r1
 800560a:	4649      	mov	r1, r9
 800560c:	eb43 0501 	adc.w	r5, r3, r1
 8005610:	f04f 0200 	mov.w	r2, #0
 8005614:	f04f 0300 	mov.w	r3, #0
 8005618:	00eb      	lsls	r3, r5, #3
 800561a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800561e:	00e2      	lsls	r2, r4, #3
 8005620:	4614      	mov	r4, r2
 8005622:	461d      	mov	r5, r3
 8005624:	4643      	mov	r3, r8
 8005626:	18e3      	adds	r3, r4, r3
 8005628:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800562c:	464b      	mov	r3, r9
 800562e:	eb45 0303 	adc.w	r3, r5, r3
 8005632:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005642:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	f04f 0300 	mov.w	r3, #0
 800564e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005652:	4629      	mov	r1, r5
 8005654:	008b      	lsls	r3, r1, #2
 8005656:	4621      	mov	r1, r4
 8005658:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800565c:	4621      	mov	r1, r4
 800565e:	008a      	lsls	r2, r1, #2
 8005660:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005664:	f7fb fb40 	bl	8000ce8 <__aeabi_uldivmod>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4b60      	ldr	r3, [pc, #384]	@ (80057f0 <UART_SetConfig+0x4e4>)
 800566e:	fba3 2302 	umull	r2, r3, r3, r2
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	011c      	lsls	r4, r3, #4
 8005676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800567a:	2200      	movs	r2, #0
 800567c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005680:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005684:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005688:	4642      	mov	r2, r8
 800568a:	464b      	mov	r3, r9
 800568c:	1891      	adds	r1, r2, r2
 800568e:	61b9      	str	r1, [r7, #24]
 8005690:	415b      	adcs	r3, r3
 8005692:	61fb      	str	r3, [r7, #28]
 8005694:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005698:	4641      	mov	r1, r8
 800569a:	1851      	adds	r1, r2, r1
 800569c:	6139      	str	r1, [r7, #16]
 800569e:	4649      	mov	r1, r9
 80056a0:	414b      	adcs	r3, r1
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	f04f 0200 	mov.w	r2, #0
 80056a8:	f04f 0300 	mov.w	r3, #0
 80056ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056b0:	4659      	mov	r1, fp
 80056b2:	00cb      	lsls	r3, r1, #3
 80056b4:	4651      	mov	r1, sl
 80056b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ba:	4651      	mov	r1, sl
 80056bc:	00ca      	lsls	r2, r1, #3
 80056be:	4610      	mov	r0, r2
 80056c0:	4619      	mov	r1, r3
 80056c2:	4603      	mov	r3, r0
 80056c4:	4642      	mov	r2, r8
 80056c6:	189b      	adds	r3, r3, r2
 80056c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056cc:	464b      	mov	r3, r9
 80056ce:	460a      	mov	r2, r1
 80056d0:	eb42 0303 	adc.w	r3, r2, r3
 80056d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80056f0:	4649      	mov	r1, r9
 80056f2:	008b      	lsls	r3, r1, #2
 80056f4:	4641      	mov	r1, r8
 80056f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056fa:	4641      	mov	r1, r8
 80056fc:	008a      	lsls	r2, r1, #2
 80056fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005702:	f7fb faf1 	bl	8000ce8 <__aeabi_uldivmod>
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4611      	mov	r1, r2
 800570c:	4b38      	ldr	r3, [pc, #224]	@ (80057f0 <UART_SetConfig+0x4e4>)
 800570e:	fba3 2301 	umull	r2, r3, r3, r1
 8005712:	095b      	lsrs	r3, r3, #5
 8005714:	2264      	movs	r2, #100	@ 0x64
 8005716:	fb02 f303 	mul.w	r3, r2, r3
 800571a:	1acb      	subs	r3, r1, r3
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	3332      	adds	r3, #50	@ 0x32
 8005720:	4a33      	ldr	r2, [pc, #204]	@ (80057f0 <UART_SetConfig+0x4e4>)
 8005722:	fba2 2303 	umull	r2, r3, r2, r3
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800572c:	441c      	add	r4, r3
 800572e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005732:	2200      	movs	r2, #0
 8005734:	673b      	str	r3, [r7, #112]	@ 0x70
 8005736:	677a      	str	r2, [r7, #116]	@ 0x74
 8005738:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800573c:	4642      	mov	r2, r8
 800573e:	464b      	mov	r3, r9
 8005740:	1891      	adds	r1, r2, r2
 8005742:	60b9      	str	r1, [r7, #8]
 8005744:	415b      	adcs	r3, r3
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800574c:	4641      	mov	r1, r8
 800574e:	1851      	adds	r1, r2, r1
 8005750:	6039      	str	r1, [r7, #0]
 8005752:	4649      	mov	r1, r9
 8005754:	414b      	adcs	r3, r1
 8005756:	607b      	str	r3, [r7, #4]
 8005758:	f04f 0200 	mov.w	r2, #0
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005764:	4659      	mov	r1, fp
 8005766:	00cb      	lsls	r3, r1, #3
 8005768:	4651      	mov	r1, sl
 800576a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800576e:	4651      	mov	r1, sl
 8005770:	00ca      	lsls	r2, r1, #3
 8005772:	4610      	mov	r0, r2
 8005774:	4619      	mov	r1, r3
 8005776:	4603      	mov	r3, r0
 8005778:	4642      	mov	r2, r8
 800577a:	189b      	adds	r3, r3, r2
 800577c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800577e:	464b      	mov	r3, r9
 8005780:	460a      	mov	r2, r1
 8005782:	eb42 0303 	adc.w	r3, r2, r3
 8005786:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	663b      	str	r3, [r7, #96]	@ 0x60
 8005792:	667a      	str	r2, [r7, #100]	@ 0x64
 8005794:	f04f 0200 	mov.w	r2, #0
 8005798:	f04f 0300 	mov.w	r3, #0
 800579c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80057a0:	4649      	mov	r1, r9
 80057a2:	008b      	lsls	r3, r1, #2
 80057a4:	4641      	mov	r1, r8
 80057a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057aa:	4641      	mov	r1, r8
 80057ac:	008a      	lsls	r2, r1, #2
 80057ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80057b2:	f7fb fa99 	bl	8000ce8 <__aeabi_uldivmod>
 80057b6:	4602      	mov	r2, r0
 80057b8:	460b      	mov	r3, r1
 80057ba:	4b0d      	ldr	r3, [pc, #52]	@ (80057f0 <UART_SetConfig+0x4e4>)
 80057bc:	fba3 1302 	umull	r1, r3, r3, r2
 80057c0:	095b      	lsrs	r3, r3, #5
 80057c2:	2164      	movs	r1, #100	@ 0x64
 80057c4:	fb01 f303 	mul.w	r3, r1, r3
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	011b      	lsls	r3, r3, #4
 80057cc:	3332      	adds	r3, #50	@ 0x32
 80057ce:	4a08      	ldr	r2, [pc, #32]	@ (80057f0 <UART_SetConfig+0x4e4>)
 80057d0:	fba2 2303 	umull	r2, r3, r2, r3
 80057d4:	095b      	lsrs	r3, r3, #5
 80057d6:	f003 020f 	and.w	r2, r3, #15
 80057da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4422      	add	r2, r4
 80057e2:	609a      	str	r2, [r3, #8]
}
 80057e4:	bf00      	nop
 80057e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80057ea:	46bd      	mov	sp, r7
 80057ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057f0:	51eb851f 	.word	0x51eb851f

080057f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80057f8:	4904      	ldr	r1, [pc, #16]	@ (800580c <MX_FATFS_Init+0x18>)
 80057fa:	4805      	ldr	r0, [pc, #20]	@ (8005810 <MX_FATFS_Init+0x1c>)
 80057fc:	f002 fd74 	bl	80082e8 <FATFS_LinkDriver>
 8005800:	4603      	mov	r3, r0
 8005802:	461a      	mov	r2, r3
 8005804:	4b03      	ldr	r3, [pc, #12]	@ (8005814 <MX_FATFS_Init+0x20>)
 8005806:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005808:	bf00      	nop
 800580a:	bd80      	pop	{r7, pc}
 800580c:	20000adc 	.word	0x20000adc
 8005810:	20000010 	.word	0x20000010
 8005814:	20000ad8 	.word	0x20000ad8

08005818 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800581c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800581e:	4618      	mov	r0, r3
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	4603      	mov	r3, r0
 8005830:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	4618      	mov	r0, r3
 8005836:	f7fc f8d5 	bl	80019e4 <SD_disk_initialize>
 800583a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800583c:	4618      	mov	r0, r3
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	4603      	mov	r3, r0
 800584c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800584e:	79fb      	ldrb	r3, [r7, #7]
 8005850:	4618      	mov	r0, r3
 8005852:	f7fc f9b1 	bl	8001bb8 <SD_disk_status>
 8005856:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	607a      	str	r2, [r7, #4]
 800586a:	603b      	str	r3, [r7, #0]
 800586c:	4603      	mov	r3, r0
 800586e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8005870:	7bf8      	ldrb	r0, [r7, #15]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	68b9      	ldr	r1, [r7, #8]
 8005878:	f7fc f9b4 	bl	8001be4 <SD_disk_read>
 800587c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b084      	sub	sp, #16
 800588a:	af00      	add	r7, sp, #0
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	603b      	str	r3, [r7, #0]
 8005892:	4603      	mov	r3, r0
 8005894:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8005896:	7bf8      	ldrb	r0, [r7, #15]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	68b9      	ldr	r1, [r7, #8]
 800589e:	f7fc fa0b 	bl	8001cb8 <SD_disk_write>
 80058a2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	4603      	mov	r3, r0
 80058b4:	603a      	str	r2, [r7, #0]
 80058b6:	71fb      	strb	r3, [r7, #7]
 80058b8:	460b      	mov	r3, r1
 80058ba:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 80058bc:	79b9      	ldrb	r1, [r7, #6]
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fc fa7c 	bl	8001dc0 <SD_disk_ioctl>
 80058c8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
	...

080058d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	4603      	mov	r3, r0
 80058dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80058de:	79fb      	ldrb	r3, [r7, #7]
 80058e0:	4a08      	ldr	r2, [pc, #32]	@ (8005904 <disk_status+0x30>)
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	79fa      	ldrb	r2, [r7, #7]
 80058ec:	4905      	ldr	r1, [pc, #20]	@ (8005904 <disk_status+0x30>)
 80058ee:	440a      	add	r2, r1
 80058f0:	7a12      	ldrb	r2, [r2, #8]
 80058f2:	4610      	mov	r0, r2
 80058f4:	4798      	blx	r3
 80058f6:	4603      	mov	r3, r0
 80058f8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	20000b08 	.word	0x20000b08

08005908 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005916:	79fb      	ldrb	r3, [r7, #7]
 8005918:	4a0e      	ldr	r2, [pc, #56]	@ (8005954 <disk_initialize+0x4c>)
 800591a:	5cd3      	ldrb	r3, [r2, r3]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d114      	bne.n	800594a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005920:	79fb      	ldrb	r3, [r7, #7]
 8005922:	4a0c      	ldr	r2, [pc, #48]	@ (8005954 <disk_initialize+0x4c>)
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	79fa      	ldrb	r2, [r7, #7]
 800592e:	4909      	ldr	r1, [pc, #36]	@ (8005954 <disk_initialize+0x4c>)
 8005930:	440a      	add	r2, r1
 8005932:	7a12      	ldrb	r2, [r2, #8]
 8005934:	4610      	mov	r0, r2
 8005936:	4798      	blx	r3
 8005938:	4603      	mov	r3, r0
 800593a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800593c:	7bfb      	ldrb	r3, [r7, #15]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d103      	bne.n	800594a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005942:	79fb      	ldrb	r3, [r7, #7]
 8005944:	4a03      	ldr	r2, [pc, #12]	@ (8005954 <disk_initialize+0x4c>)
 8005946:	2101      	movs	r1, #1
 8005948:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800594a:	7bfb      	ldrb	r3, [r7, #15]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	20000b08 	.word	0x20000b08

08005958 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005958:	b590      	push	{r4, r7, lr}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	60b9      	str	r1, [r7, #8]
 8005960:	607a      	str	r2, [r7, #4]
 8005962:	603b      	str	r3, [r7, #0]
 8005964:	4603      	mov	r3, r0
 8005966:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	4a0a      	ldr	r2, [pc, #40]	@ (8005994 <disk_read+0x3c>)
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	689c      	ldr	r4, [r3, #8]
 8005974:	7bfb      	ldrb	r3, [r7, #15]
 8005976:	4a07      	ldr	r2, [pc, #28]	@ (8005994 <disk_read+0x3c>)
 8005978:	4413      	add	r3, r2
 800597a:	7a18      	ldrb	r0, [r3, #8]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	68b9      	ldr	r1, [r7, #8]
 8005982:	47a0      	blx	r4
 8005984:	4603      	mov	r3, r0
 8005986:	75fb      	strb	r3, [r7, #23]
  return res;
 8005988:	7dfb      	ldrb	r3, [r7, #23]
}
 800598a:	4618      	mov	r0, r3
 800598c:	371c      	adds	r7, #28
 800598e:	46bd      	mov	sp, r7
 8005990:	bd90      	pop	{r4, r7, pc}
 8005992:	bf00      	nop
 8005994:	20000b08 	.word	0x20000b08

08005998 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005998:	b590      	push	{r4, r7, lr}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	607a      	str	r2, [r7, #4]
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	4603      	mov	r3, r0
 80059a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
 80059aa:	4a0a      	ldr	r2, [pc, #40]	@ (80059d4 <disk_write+0x3c>)
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	68dc      	ldr	r4, [r3, #12]
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
 80059b6:	4a07      	ldr	r2, [pc, #28]	@ (80059d4 <disk_write+0x3c>)
 80059b8:	4413      	add	r3, r2
 80059ba:	7a18      	ldrb	r0, [r3, #8]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	47a0      	blx	r4
 80059c4:	4603      	mov	r3, r0
 80059c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80059c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd90      	pop	{r4, r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20000b08 	.word	0x20000b08

080059d8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	4603      	mov	r3, r0
 80059e0:	603a      	str	r2, [r7, #0]
 80059e2:	71fb      	strb	r3, [r7, #7]
 80059e4:	460b      	mov	r3, r1
 80059e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80059e8:	79fb      	ldrb	r3, [r7, #7]
 80059ea:	4a09      	ldr	r2, [pc, #36]	@ (8005a10 <disk_ioctl+0x38>)
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	79fa      	ldrb	r2, [r7, #7]
 80059f6:	4906      	ldr	r1, [pc, #24]	@ (8005a10 <disk_ioctl+0x38>)
 80059f8:	440a      	add	r2, r1
 80059fa:	7a10      	ldrb	r0, [r2, #8]
 80059fc:	79b9      	ldrb	r1, [r7, #6]
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	4798      	blx	r3
 8005a02:	4603      	mov	r3, r0
 8005a04:	73fb      	strb	r3, [r7, #15]
  return res;
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	20000b08 	.word	0x20000b08

08005a14 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005a24:	89fb      	ldrh	r3, [r7, #14]
 8005a26:	021b      	lsls	r3, r3, #8
 8005a28:	b21a      	sxth	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	b21b      	sxth	r3, r3
 8005a30:	4313      	orrs	r3, r2
 8005a32:	b21b      	sxth	r3, r3
 8005a34:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005a36:	89fb      	ldrh	r3, [r7, #14]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3303      	adds	r3, #3
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	021b      	lsls	r3, r3, #8
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	3202      	adds	r2, #2
 8005a5c:	7812      	ldrb	r2, [r2, #0]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	021b      	lsls	r3, r3, #8
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	3201      	adds	r2, #1
 8005a6a:	7812      	ldrb	r2, [r2, #0]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	021b      	lsls	r3, r3, #8
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	7812      	ldrb	r2, [r2, #0]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]
	return rv;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b083      	sub	sp, #12
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	460b      	mov	r3, r1
 8005a94:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	887a      	ldrh	r2, [r7, #2]
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	701a      	strb	r2, [r3, #0]
 8005aa2:	887b      	ldrh	r3, [r7, #2]
 8005aa4:	0a1b      	lsrs	r3, r3, #8
 8005aa6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	607a      	str	r2, [r7, #4]
 8005aae:	887a      	ldrh	r2, [r7, #2]
 8005ab0:	b2d2      	uxtb	r2, r2
 8005ab2:	701a      	strb	r2, [r3, #0]
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	1c5a      	adds	r2, r3, #1
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	0a1b      	lsrs	r3, r3, #8
 8005ada:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	607a      	str	r2, [r7, #4]
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	b2d2      	uxtb	r2, r2
 8005ae6:	701a      	strb	r2, [r3, #0]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	0a1b      	lsrs	r3, r3, #8
 8005aec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	701a      	strb	r2, [r3, #0]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	0a1b      	lsrs	r3, r3, #8
 8005afe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	1c5a      	adds	r2, r3, #1
 8005b04:	607a      	str	r2, [r7, #4]
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	b2d2      	uxtb	r2, r2
 8005b0a:	701a      	strb	r2, [r3, #0]
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00d      	beq.n	8005b4e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	1c53      	adds	r3, r2, #1
 8005b36:	613b      	str	r3, [r7, #16]
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	1c59      	adds	r1, r3, #1
 8005b3c:	6179      	str	r1, [r7, #20]
 8005b3e:	7812      	ldrb	r2, [r2, #0]
 8005b40:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	3b01      	subs	r3, #1
 8005b46:	607b      	str	r3, [r7, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1f1      	bne.n	8005b32 <mem_cpy+0x1a>
	}
}
 8005b4e:	bf00      	nop
 8005b50:	371c      	adds	r7, #28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005b5a:	b480      	push	{r7}
 8005b5c:	b087      	sub	sp, #28
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	617a      	str	r2, [r7, #20]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	b2d2      	uxtb	r2, r2
 8005b74:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	607b      	str	r3, [r7, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1f3      	bne.n	8005b6a <mem_set+0x10>
}
 8005b82:	bf00      	nop
 8005b84:	bf00      	nop
 8005b86:	371c      	adds	r7, #28
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005b90:	b480      	push	{r7}
 8005b92:	b089      	sub	sp, #36	@ 0x24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	61fb      	str	r3, [r7, #28]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	61fa      	str	r2, [r7, #28]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	61ba      	str	r2, [r7, #24]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	1acb      	subs	r3, r1, r3
 8005bbc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	607b      	str	r3, [r7, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <mem_cmp+0x40>
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0eb      	beq.n	8005ba8 <mem_cmp+0x18>

	return r;
 8005bd0:	697b      	ldr	r3, [r7, #20]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3724      	adds	r7, #36	@ 0x24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005be8:	e002      	b.n	8005bf0 <chk_chr+0x12>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	3301      	adds	r3, #1
 8005bee:	607b      	str	r3, [r7, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <chk_chr+0x26>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d1f2      	bne.n	8005bea <chk_chr+0xc>
	return *str;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	781b      	ldrb	r3, [r3, #0]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d009      	beq.n	8005c36 <lock_fs+0x22>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f002 fb99 	bl	800835e <ff_req_grant>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <lock_fs+0x22>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e000      	b.n	8005c38 <lock_fs+0x24>
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00d      	beq.n	8005c6e <unlock_fs+0x2e>
 8005c52:	78fb      	ldrb	r3, [r7, #3]
 8005c54:	2b0c      	cmp	r3, #12
 8005c56:	d00a      	beq.n	8005c6e <unlock_fs+0x2e>
 8005c58:	78fb      	ldrb	r3, [r7, #3]
 8005c5a:	2b0b      	cmp	r3, #11
 8005c5c:	d007      	beq.n	8005c6e <unlock_fs+0x2e>
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	2b0f      	cmp	r3, #15
 8005c62:	d004      	beq.n	8005c6e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f002 fb8d 	bl	8008388 <ff_rel_grant>
	}
}
 8005c6e:	bf00      	nop
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005c82:	2300      	movs	r3, #0
 8005c84:	60bb      	str	r3, [r7, #8]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	e029      	b.n	8005ce0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005c8c:	4a27      	ldr	r2, [pc, #156]	@ (8005d2c <chk_lock+0xb4>)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	011b      	lsls	r3, r3, #4
 8005c92:	4413      	add	r3, r2
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d01d      	beq.n	8005cd6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005c9a:	4a24      	ldr	r2, [pc, #144]	@ (8005d2c <chk_lock+0xb4>)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	011b      	lsls	r3, r3, #4
 8005ca0:	4413      	add	r3, r2
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d116      	bne.n	8005cda <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005cac:	4a1f      	ldr	r2, [pc, #124]	@ (8005d2c <chk_lock+0xb4>)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	011b      	lsls	r3, r3, #4
 8005cb2:	4413      	add	r3, r2
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d10c      	bne.n	8005cda <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005cc0:	4a1a      	ldr	r2, [pc, #104]	@ (8005d2c <chk_lock+0xb4>)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	4413      	add	r3, r2
 8005cc8:	3308      	adds	r3, #8
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d102      	bne.n	8005cda <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005cd4:	e007      	b.n	8005ce6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d9d2      	bls.n	8005c8c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d109      	bne.n	8005d00 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d102      	bne.n	8005cf8 <chk_lock+0x80>
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d101      	bne.n	8005cfc <chk_lock+0x84>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	e010      	b.n	8005d1e <chk_lock+0xa6>
 8005cfc:	2312      	movs	r3, #18
 8005cfe:	e00e      	b.n	8005d1e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d108      	bne.n	8005d18 <chk_lock+0xa0>
 8005d06:	4a09      	ldr	r2, [pc, #36]	@ (8005d2c <chk_lock+0xb4>)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	4413      	add	r3, r2
 8005d0e:	330c      	adds	r3, #12
 8005d10:	881b      	ldrh	r3, [r3, #0]
 8005d12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d16:	d101      	bne.n	8005d1c <chk_lock+0xa4>
 8005d18:	2310      	movs	r3, #16
 8005d1a:	e000      	b.n	8005d1e <chk_lock+0xa6>
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	20000ae8 	.word	0x20000ae8

08005d30 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005d36:	2300      	movs	r3, #0
 8005d38:	607b      	str	r3, [r7, #4]
 8005d3a:	e002      	b.n	8005d42 <enq_lock+0x12>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	607b      	str	r3, [r7, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d806      	bhi.n	8005d56 <enq_lock+0x26>
 8005d48:	4a09      	ldr	r2, [pc, #36]	@ (8005d70 <enq_lock+0x40>)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	011b      	lsls	r3, r3, #4
 8005d4e:	4413      	add	r3, r2
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1f2      	bne.n	8005d3c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	bf14      	ite	ne
 8005d5c:	2301      	movne	r3, #1
 8005d5e:	2300      	moveq	r3, #0
 8005d60:	b2db      	uxtb	r3, r3
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	20000ae8 	.word	0x20000ae8

08005d74 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	e01f      	b.n	8005dc4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005d84:	4a41      	ldr	r2, [pc, #260]	@ (8005e8c <inc_lock+0x118>)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	011b      	lsls	r3, r3, #4
 8005d8a:	4413      	add	r3, r2
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d113      	bne.n	8005dbe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005d96:	4a3d      	ldr	r2, [pc, #244]	@ (8005e8c <inc_lock+0x118>)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	4413      	add	r3, r2
 8005d9e:	3304      	adds	r3, #4
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d109      	bne.n	8005dbe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005daa:	4a38      	ldr	r2, [pc, #224]	@ (8005e8c <inc_lock+0x118>)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	011b      	lsls	r3, r3, #4
 8005db0:	4413      	add	r3, r2
 8005db2:	3308      	adds	r3, #8
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d006      	beq.n	8005dcc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d9dc      	bls.n	8005d84 <inc_lock+0x10>
 8005dca:	e000      	b.n	8005dce <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005dcc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d132      	bne.n	8005e3a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	e002      	b.n	8005de0 <inc_lock+0x6c>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d806      	bhi.n	8005df4 <inc_lock+0x80>
 8005de6:	4a29      	ldr	r2, [pc, #164]	@ (8005e8c <inc_lock+0x118>)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	4413      	add	r3, r2
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1f2      	bne.n	8005dda <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d101      	bne.n	8005dfe <inc_lock+0x8a>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	e040      	b.n	8005e80 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	4922      	ldr	r1, [pc, #136]	@ (8005e8c <inc_lock+0x118>)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	440b      	add	r3, r1
 8005e0a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	491e      	ldr	r1, [pc, #120]	@ (8005e8c <inc_lock+0x118>)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	011b      	lsls	r3, r3, #4
 8005e16:	440b      	add	r3, r1
 8005e18:	3304      	adds	r3, #4
 8005e1a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	695a      	ldr	r2, [r3, #20]
 8005e20:	491a      	ldr	r1, [pc, #104]	@ (8005e8c <inc_lock+0x118>)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	440b      	add	r3, r1
 8005e28:	3308      	adds	r3, #8
 8005e2a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005e2c:	4a17      	ldr	r2, [pc, #92]	@ (8005e8c <inc_lock+0x118>)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	4413      	add	r3, r2
 8005e34:	330c      	adds	r3, #12
 8005e36:	2200      	movs	r2, #0
 8005e38:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d009      	beq.n	8005e54 <inc_lock+0xe0>
 8005e40:	4a12      	ldr	r2, [pc, #72]	@ (8005e8c <inc_lock+0x118>)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	4413      	add	r3, r2
 8005e48:	330c      	adds	r3, #12
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <inc_lock+0xe0>
 8005e50:	2300      	movs	r3, #0
 8005e52:	e015      	b.n	8005e80 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d108      	bne.n	8005e6c <inc_lock+0xf8>
 8005e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8005e8c <inc_lock+0x118>)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	4413      	add	r3, r2
 8005e62:	330c      	adds	r3, #12
 8005e64:	881b      	ldrh	r3, [r3, #0]
 8005e66:	3301      	adds	r3, #1
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	e001      	b.n	8005e70 <inc_lock+0xfc>
 8005e6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e70:	4906      	ldr	r1, [pc, #24]	@ (8005e8c <inc_lock+0x118>)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	011b      	lsls	r3, r3, #4
 8005e76:	440b      	add	r3, r1
 8005e78:	330c      	adds	r3, #12
 8005e7a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	3301      	adds	r3, #1
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	20000ae8 	.word	0x20000ae8

08005e90 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	607b      	str	r3, [r7, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d825      	bhi.n	8005ef0 <dec_lock+0x60>
		n = Files[i].ctr;
 8005ea4:	4a17      	ldr	r2, [pc, #92]	@ (8005f04 <dec_lock+0x74>)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	011b      	lsls	r3, r3, #4
 8005eaa:	4413      	add	r3, r2
 8005eac:	330c      	adds	r3, #12
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005eb2:	89fb      	ldrh	r3, [r7, #14]
 8005eb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eb8:	d101      	bne.n	8005ebe <dec_lock+0x2e>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005ebe:	89fb      	ldrh	r3, [r7, #14]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <dec_lock+0x3a>
 8005ec4:	89fb      	ldrh	r3, [r7, #14]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005eca:	4a0e      	ldr	r2, [pc, #56]	@ (8005f04 <dec_lock+0x74>)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	4413      	add	r3, r2
 8005ed2:	330c      	adds	r3, #12
 8005ed4:	89fa      	ldrh	r2, [r7, #14]
 8005ed6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005ed8:	89fb      	ldrh	r3, [r7, #14]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d105      	bne.n	8005eea <dec_lock+0x5a>
 8005ede:	4a09      	ldr	r2, [pc, #36]	@ (8005f04 <dec_lock+0x74>)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	4413      	add	r3, r2
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	737b      	strb	r3, [r7, #13]
 8005eee:	e001      	b.n	8005ef4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005ef4:	7b7b      	ldrb	r3, [r7, #13]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	20000ae8 	.word	0x20000ae8

08005f08 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005f10:	2300      	movs	r3, #0
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	e010      	b.n	8005f38 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005f16:	4a0d      	ldr	r2, [pc, #52]	@ (8005f4c <clear_lock+0x44>)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	011b      	lsls	r3, r3, #4
 8005f1c:	4413      	add	r3, r2
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d105      	bne.n	8005f32 <clear_lock+0x2a>
 8005f26:	4a09      	ldr	r2, [pc, #36]	@ (8005f4c <clear_lock+0x44>)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	4413      	add	r3, r2
 8005f2e:	2200      	movs	r2, #0
 8005f30:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3301      	adds	r3, #1
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d9eb      	bls.n	8005f16 <clear_lock+0xe>
	}
}
 8005f3e:	bf00      	nop
 8005f40:	bf00      	nop
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	20000ae8 	.word	0x20000ae8

08005f50 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	78db      	ldrb	r3, [r3, #3]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d034      	beq.n	8005fce <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f68:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	7858      	ldrb	r0, [r3, #1]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005f74:	2301      	movs	r3, #1
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	f7ff fd0e 	bl	8005998 <disk_write>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d002      	beq.n	8005f88 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	73fb      	strb	r3, [r7, #15]
 8005f86:	e022      	b.n	8005fce <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	1ad2      	subs	r2, r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d217      	bcs.n	8005fce <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	789b      	ldrb	r3, [r3, #2]
 8005fa2:	613b      	str	r3, [r7, #16]
 8005fa4:	e010      	b.n	8005fc8 <sync_window+0x78>
					wsect += fs->fsize;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4413      	add	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	7858      	ldrb	r0, [r3, #1]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005fba:	2301      	movs	r3, #1
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	f7ff fceb 	bl	8005998 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	613b      	str	r3, [r7, #16]
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d8eb      	bhi.n	8005fa6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d01b      	beq.n	8006028 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7ff ffad 	bl	8005f50 <sync_window>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d113      	bne.n	8006028 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	7858      	ldrb	r0, [r3, #1]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800600a:	2301      	movs	r3, #1
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	f7ff fca3 	bl	8005958 <disk_read>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d004      	beq.n	8006022 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006018:	f04f 33ff 	mov.w	r3, #4294967295
 800601c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800601e:	2301      	movs	r3, #1
 8006020:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8006028:	7bfb      	ldrb	r3, [r7, #15]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
	...

08006034 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f7ff ff87 	bl	8005f50 <sync_window>
 8006042:	4603      	mov	r3, r0
 8006044:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006046:	7bfb      	ldrb	r3, [r7, #15]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d158      	bne.n	80060fe <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b03      	cmp	r3, #3
 8006052:	d148      	bne.n	80060e6 <sync_fs+0xb2>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	791b      	ldrb	r3, [r3, #4]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d144      	bne.n	80060e6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3334      	adds	r3, #52	@ 0x34
 8006060:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006064:	2100      	movs	r1, #0
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff fd77 	bl	8005b5a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3334      	adds	r3, #52	@ 0x34
 8006070:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006074:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006078:	4618      	mov	r0, r3
 800607a:	f7ff fd06 	bl	8005a8a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3334      	adds	r3, #52	@ 0x34
 8006082:	4921      	ldr	r1, [pc, #132]	@ (8006108 <sync_fs+0xd4>)
 8006084:	4618      	mov	r0, r3
 8006086:	f7ff fd1b 	bl	8005ac0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	3334      	adds	r3, #52	@ 0x34
 800608e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006092:	491e      	ldr	r1, [pc, #120]	@ (800610c <sync_fs+0xd8>)
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff fd13 	bl	8005ac0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3334      	adds	r3, #52	@ 0x34
 800609e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	4619      	mov	r1, r3
 80060a8:	4610      	mov	r0, r2
 80060aa:	f7ff fd09 	bl	8005ac0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	3334      	adds	r3, #52	@ 0x34
 80060b2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	4619      	mov	r1, r3
 80060bc:	4610      	mov	r0, r2
 80060be:	f7ff fcff 	bl	8005ac0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	1c5a      	adds	r2, r3, #1
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	7858      	ldrb	r0, [r3, #1]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060da:	2301      	movs	r3, #1
 80060dc:	f7ff fc5c 	bl	8005998 <disk_write>
			fs->fsi_flag = 0;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	785b      	ldrb	r3, [r3, #1]
 80060ea:	2200      	movs	r2, #0
 80060ec:	2100      	movs	r1, #0
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7ff fc72 	bl	80059d8 <disk_ioctl>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <sync_fs+0xca>
 80060fa:	2301      	movs	r3, #1
 80060fc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80060fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	41615252 	.word	0x41615252
 800610c:	61417272 	.word	0x61417272

08006110 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	3b02      	subs	r3, #2
 800611e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	3b02      	subs	r3, #2
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	429a      	cmp	r2, r3
 800612a:	d301      	bcc.n	8006130 <clust2sect+0x20>
 800612c:	2300      	movs	r3, #0
 800612e:	e008      	b.n	8006142 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	895b      	ldrh	r3, [r3, #10]
 8006134:	461a      	mov	r2, r3
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	fb03 f202 	mul.w	r2, r3, r2
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006140:	4413      	add	r3, r2
}
 8006142:	4618      	mov	r0, r3
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b086      	sub	sp, #24
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d904      	bls.n	800616e <get_fat+0x20>
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d302      	bcc.n	8006174 <get_fat+0x26>
		val = 1;	/* Internal error */
 800616e:	2301      	movs	r3, #1
 8006170:	617b      	str	r3, [r7, #20]
 8006172:	e08e      	b.n	8006292 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006174:	f04f 33ff 	mov.w	r3, #4294967295
 8006178:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b03      	cmp	r3, #3
 8006180:	d061      	beq.n	8006246 <get_fat+0xf8>
 8006182:	2b03      	cmp	r3, #3
 8006184:	dc7b      	bgt.n	800627e <get_fat+0x130>
 8006186:	2b01      	cmp	r3, #1
 8006188:	d002      	beq.n	8006190 <get_fat+0x42>
 800618a:	2b02      	cmp	r3, #2
 800618c:	d041      	beq.n	8006212 <get_fat+0xc4>
 800618e:	e076      	b.n	800627e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	085b      	lsrs	r3, r3, #1
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4413      	add	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	0a5b      	lsrs	r3, r3, #9
 80061a6:	4413      	add	r3, r2
 80061a8:	4619      	mov	r1, r3
 80061aa:	6938      	ldr	r0, [r7, #16]
 80061ac:	f7ff ff14 	bl	8005fd8 <move_window>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d166      	bne.n	8006284 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	60fa      	str	r2, [r7, #12]
 80061bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	4413      	add	r3, r2
 80061c4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80061c8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	0a5b      	lsrs	r3, r3, #9
 80061d2:	4413      	add	r3, r2
 80061d4:	4619      	mov	r1, r3
 80061d6:	6938      	ldr	r0, [r7, #16]
 80061d8:	f7ff fefe 	bl	8005fd8 <move_window>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d152      	bne.n	8006288 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	4413      	add	r3, r2
 80061ec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80061f0:	021b      	lsls	r3, r3, #8
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d002      	beq.n	8006208 <get_fat+0xba>
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	091b      	lsrs	r3, r3, #4
 8006206:	e002      	b.n	800620e <get_fat+0xc0>
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800620e:	617b      	str	r3, [r7, #20]
			break;
 8006210:	e03f      	b.n	8006292 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	0a1b      	lsrs	r3, r3, #8
 800621a:	4413      	add	r3, r2
 800621c:	4619      	mov	r1, r3
 800621e:	6938      	ldr	r0, [r7, #16]
 8006220:	f7ff feda 	bl	8005fd8 <move_window>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d130      	bne.n	800628c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006238:	4413      	add	r3, r2
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff fbea 	bl	8005a14 <ld_word>
 8006240:	4603      	mov	r3, r0
 8006242:	617b      	str	r3, [r7, #20]
			break;
 8006244:	e025      	b.n	8006292 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	09db      	lsrs	r3, r3, #7
 800624e:	4413      	add	r3, r2
 8006250:	4619      	mov	r1, r3
 8006252:	6938      	ldr	r0, [r7, #16]
 8006254:	f7ff fec0 	bl	8005fd8 <move_window>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d118      	bne.n	8006290 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800626c:	4413      	add	r3, r2
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff fbe8 	bl	8005a44 <ld_dword>
 8006274:	4603      	mov	r3, r0
 8006276:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800627a:	617b      	str	r3, [r7, #20]
			break;
 800627c:	e009      	b.n	8006292 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800627e:	2301      	movs	r3, #1
 8006280:	617b      	str	r3, [r7, #20]
 8006282:	e006      	b.n	8006292 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006284:	bf00      	nop
 8006286:	e004      	b.n	8006292 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006288:	bf00      	nop
 800628a:	e002      	b.n	8006292 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800628c:	bf00      	nop
 800628e:	e000      	b.n	8006292 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006290:	bf00      	nop
		}
	}

	return val;
 8006292:	697b      	ldr	r3, [r7, #20]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3718      	adds	r7, #24
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800629c:	b590      	push	{r4, r7, lr}
 800629e:	b089      	sub	sp, #36	@ 0x24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80062a8:	2302      	movs	r3, #2
 80062aa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	f240 80d9 	bls.w	8006466 <put_fat+0x1ca>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	f080 80d3 	bcs.w	8006466 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	f000 8096 	beq.w	80063f6 <put_fat+0x15a>
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	f300 80cb 	bgt.w	8006466 <put_fat+0x1ca>
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d002      	beq.n	80062da <put_fat+0x3e>
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d06e      	beq.n	80063b6 <put_fat+0x11a>
 80062d8:	e0c5      	b.n	8006466 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	61bb      	str	r3, [r7, #24]
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	085b      	lsrs	r3, r3, #1
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	4413      	add	r3, r2
 80062e6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	0a5b      	lsrs	r3, r3, #9
 80062f0:	4413      	add	r3, r2
 80062f2:	4619      	mov	r1, r3
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f7ff fe6f 	bl	8005fd8 <move_window>
 80062fa:	4603      	mov	r3, r0
 80062fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062fe:	7ffb      	ldrb	r3, [r7, #31]
 8006300:	2b00      	cmp	r3, #0
 8006302:	f040 80a9 	bne.w	8006458 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	1c59      	adds	r1, r3, #1
 8006310:	61b9      	str	r1, [r7, #24]
 8006312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006316:	4413      	add	r3, r2
 8006318:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00d      	beq.n	8006340 <put_fat+0xa4>
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	b25b      	sxtb	r3, r3
 800632a:	f003 030f 	and.w	r3, r3, #15
 800632e:	b25a      	sxtb	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	b2db      	uxtb	r3, r3
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	b25b      	sxtb	r3, r3
 8006338:	4313      	orrs	r3, r2
 800633a:	b25b      	sxtb	r3, r3
 800633c:	b2db      	uxtb	r3, r3
 800633e:	e001      	b.n	8006344 <put_fat+0xa8>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	b2db      	uxtb	r3, r3
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2201      	movs	r2, #1
 800634c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	0a5b      	lsrs	r3, r3, #9
 8006356:	4413      	add	r3, r2
 8006358:	4619      	mov	r1, r3
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f7ff fe3c 	bl	8005fd8 <move_window>
 8006360:	4603      	mov	r3, r0
 8006362:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006364:	7ffb      	ldrb	r3, [r7, #31]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d178      	bne.n	800645c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006376:	4413      	add	r3, r2
 8006378:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b00      	cmp	r3, #0
 8006382:	d003      	beq.n	800638c <put_fat+0xf0>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	091b      	lsrs	r3, r3, #4
 8006388:	b2db      	uxtb	r3, r3
 800638a:	e00e      	b.n	80063aa <put_fat+0x10e>
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	b25b      	sxtb	r3, r3
 8006392:	f023 030f 	bic.w	r3, r3, #15
 8006396:	b25a      	sxtb	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	0a1b      	lsrs	r3, r3, #8
 800639c:	b25b      	sxtb	r3, r3
 800639e:	f003 030f 	and.w	r3, r3, #15
 80063a2:	b25b      	sxtb	r3, r3
 80063a4:	4313      	orrs	r3, r2
 80063a6:	b25b      	sxtb	r3, r3
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2201      	movs	r2, #1
 80063b2:	70da      	strb	r2, [r3, #3]
			break;
 80063b4:	e057      	b.n	8006466 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	0a1b      	lsrs	r3, r3, #8
 80063be:	4413      	add	r3, r2
 80063c0:	4619      	mov	r1, r3
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f7ff fe08 	bl	8005fd8 <move_window>
 80063c8:	4603      	mov	r3, r0
 80063ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80063cc:	7ffb      	ldrb	r3, [r7, #31]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d146      	bne.n	8006460 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	005b      	lsls	r3, r3, #1
 80063dc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80063e0:	4413      	add	r3, r2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	b292      	uxth	r2, r2
 80063e6:	4611      	mov	r1, r2
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff fb4e 	bl	8005a8a <st_word>
			fs->wflag = 1;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	70da      	strb	r2, [r3, #3]
			break;
 80063f4:	e037      	b.n	8006466 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	09db      	lsrs	r3, r3, #7
 80063fe:	4413      	add	r3, r2
 8006400:	4619      	mov	r1, r3
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f7ff fde8 	bl	8005fd8 <move_window>
 8006408:	4603      	mov	r3, r0
 800640a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800640c:	7ffb      	ldrb	r3, [r7, #31]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d128      	bne.n	8006464 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006426:	4413      	add	r3, r2
 8006428:	4618      	mov	r0, r3
 800642a:	f7ff fb0b 	bl	8005a44 <ld_dword>
 800642e:	4603      	mov	r3, r0
 8006430:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006434:	4323      	orrs	r3, r4
 8006436:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006446:	4413      	add	r3, r2
 8006448:	6879      	ldr	r1, [r7, #4]
 800644a:	4618      	mov	r0, r3
 800644c:	f7ff fb38 	bl	8005ac0 <st_dword>
			fs->wflag = 1;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2201      	movs	r2, #1
 8006454:	70da      	strb	r2, [r3, #3]
			break;
 8006456:	e006      	b.n	8006466 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006458:	bf00      	nop
 800645a:	e004      	b.n	8006466 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800645c:	bf00      	nop
 800645e:	e002      	b.n	8006466 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006460:	bf00      	nop
 8006462:	e000      	b.n	8006466 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006464:	bf00      	nop
		}
	}
	return res;
 8006466:	7ffb      	ldrb	r3, [r7, #31]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3724      	adds	r7, #36	@ 0x24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd90      	pop	{r4, r7, pc}

08006470 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b088      	sub	sp, #32
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800647c:	2300      	movs	r3, #0
 800647e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d904      	bls.n	8006496 <remove_chain+0x26>
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	429a      	cmp	r2, r3
 8006494:	d301      	bcc.n	800649a <remove_chain+0x2a>
 8006496:	2302      	movs	r3, #2
 8006498:	e04b      	b.n	8006532 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00c      	beq.n	80064ba <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80064a0:	f04f 32ff 	mov.w	r2, #4294967295
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	69b8      	ldr	r0, [r7, #24]
 80064a8:	f7ff fef8 	bl	800629c <put_fat>
 80064ac:	4603      	mov	r3, r0
 80064ae:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80064b0:	7ffb      	ldrb	r3, [r7, #31]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <remove_chain+0x4a>
 80064b6:	7ffb      	ldrb	r3, [r7, #31]
 80064b8:	e03b      	b.n	8006532 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80064ba:	68b9      	ldr	r1, [r7, #8]
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f7ff fe46 	bl	800614e <get_fat>
 80064c2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d031      	beq.n	800652e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d101      	bne.n	80064d4 <remove_chain+0x64>
 80064d0:	2302      	movs	r3, #2
 80064d2:	e02e      	b.n	8006532 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064da:	d101      	bne.n	80064e0 <remove_chain+0x70>
 80064dc:	2301      	movs	r3, #1
 80064de:	e028      	b.n	8006532 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80064e0:	2200      	movs	r2, #0
 80064e2:	68b9      	ldr	r1, [r7, #8]
 80064e4:	69b8      	ldr	r0, [r7, #24]
 80064e6:	f7ff fed9 	bl	800629c <put_fat>
 80064ea:	4603      	mov	r3, r0
 80064ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80064ee:	7ffb      	ldrb	r3, [r7, #31]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <remove_chain+0x88>
 80064f4:	7ffb      	ldrb	r3, [r7, #31]
 80064f6:	e01c      	b.n	8006532 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	695a      	ldr	r2, [r3, #20]
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	3b02      	subs	r3, #2
 8006502:	429a      	cmp	r2, r3
 8006504:	d20b      	bcs.n	800651e <remove_chain+0xae>
			fs->free_clst++;
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	1c5a      	adds	r2, r3, #1
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	791b      	ldrb	r3, [r3, #4]
 8006514:	f043 0301 	orr.w	r3, r3, #1
 8006518:	b2da      	uxtb	r2, r3
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	429a      	cmp	r2, r3
 800652a:	d3c6      	bcc.n	80064ba <remove_chain+0x4a>
 800652c:	e000      	b.n	8006530 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800652e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3720      	adds	r7, #32
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b088      	sub	sp, #32
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10d      	bne.n	800656c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d004      	beq.n	8006566 <create_chain+0x2c>
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	429a      	cmp	r2, r3
 8006564:	d31b      	bcc.n	800659e <create_chain+0x64>
 8006566:	2301      	movs	r3, #1
 8006568:	61bb      	str	r3, [r7, #24]
 800656a:	e018      	b.n	800659e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800656c:	6839      	ldr	r1, [r7, #0]
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7ff fded 	bl	800614e <get_fat>
 8006574:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d801      	bhi.n	8006580 <create_chain+0x46>
 800657c:	2301      	movs	r3, #1
 800657e:	e070      	b.n	8006662 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006586:	d101      	bne.n	800658c <create_chain+0x52>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	e06a      	b.n	8006662 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	429a      	cmp	r2, r3
 8006594:	d201      	bcs.n	800659a <create_chain+0x60>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	e063      	b.n	8006662 <create_chain+0x128>
		scl = clst;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	3301      	adds	r3, #1
 80065a6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	69fa      	ldr	r2, [r7, #28]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d307      	bcc.n	80065c2 <create_chain+0x88>
				ncl = 2;
 80065b2:	2302      	movs	r3, #2
 80065b4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80065b6:	69fa      	ldr	r2, [r7, #28]
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d901      	bls.n	80065c2 <create_chain+0x88>
 80065be:	2300      	movs	r3, #0
 80065c0:	e04f      	b.n	8006662 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80065c2:	69f9      	ldr	r1, [r7, #28]
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7ff fdc2 	bl	800614e <get_fat>
 80065ca:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00e      	beq.n	80065f0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d003      	beq.n	80065e0 <create_chain+0xa6>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065de:	d101      	bne.n	80065e4 <create_chain+0xaa>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	e03e      	b.n	8006662 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80065e4:	69fa      	ldr	r2, [r7, #28]
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d1da      	bne.n	80065a2 <create_chain+0x68>
 80065ec:	2300      	movs	r3, #0
 80065ee:	e038      	b.n	8006662 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80065f0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80065f2:	f04f 32ff 	mov.w	r2, #4294967295
 80065f6:	69f9      	ldr	r1, [r7, #28]
 80065f8:	6938      	ldr	r0, [r7, #16]
 80065fa:	f7ff fe4f 	bl	800629c <put_fat>
 80065fe:	4603      	mov	r3, r0
 8006600:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006602:	7dfb      	ldrb	r3, [r7, #23]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d109      	bne.n	800661c <create_chain+0xe2>
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d006      	beq.n	800661c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800660e:	69fa      	ldr	r2, [r7, #28]
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	6938      	ldr	r0, [r7, #16]
 8006614:	f7ff fe42 	bl	800629c <put_fat>
 8006618:	4603      	mov	r3, r0
 800661a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800661c:	7dfb      	ldrb	r3, [r7, #23]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d116      	bne.n	8006650 <create_chain+0x116>
		fs->last_clst = ncl;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	69fa      	ldr	r2, [r7, #28]
 8006626:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	695a      	ldr	r2, [r3, #20]
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	3b02      	subs	r3, #2
 8006632:	429a      	cmp	r2, r3
 8006634:	d804      	bhi.n	8006640 <create_chain+0x106>
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	1e5a      	subs	r2, r3, #1
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	791b      	ldrb	r3, [r3, #4]
 8006644:	f043 0301 	orr.w	r3, r3, #1
 8006648:	b2da      	uxtb	r2, r3
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	711a      	strb	r2, [r3, #4]
 800664e:	e007      	b.n	8006660 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006650:	7dfb      	ldrb	r3, [r7, #23]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d102      	bne.n	800665c <create_chain+0x122>
 8006656:	f04f 33ff 	mov.w	r3, #4294967295
 800665a:	e000      	b.n	800665e <create_chain+0x124>
 800665c:	2301      	movs	r3, #1
 800665e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006660:	69fb      	ldr	r3, [r7, #28]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3720      	adds	r7, #32
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800666a:	b480      	push	{r7}
 800666c:	b087      	sub	sp, #28
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667e:	3304      	adds	r3, #4
 8006680:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	0a5b      	lsrs	r3, r3, #9
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	8952      	ldrh	r2, [r2, #10]
 800668a:	fbb3 f3f2 	udiv	r3, r3, r2
 800668e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	1d1a      	adds	r2, r3, #4
 8006694:	613a      	str	r2, [r7, #16]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <clmt_clust+0x3a>
 80066a0:	2300      	movs	r3, #0
 80066a2:	e010      	b.n	80066c6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d307      	bcc.n	80066bc <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	617b      	str	r3, [r7, #20]
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	3304      	adds	r3, #4
 80066b8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80066ba:	e7e9      	b.n	8006690 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80066bc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	4413      	add	r3, r2
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	371c      	adds	r7, #28
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b086      	sub	sp, #24
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066e8:	d204      	bcs.n	80066f4 <dir_sdi+0x22>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	f003 031f 	and.w	r3, r3, #31
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80066f4:	2302      	movs	r3, #2
 80066f6:	e063      	b.n	80067c0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d106      	bne.n	8006718 <dir_sdi+0x46>
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b02      	cmp	r3, #2
 8006710:	d902      	bls.n	8006718 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006716:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10c      	bne.n	8006738 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	095b      	lsrs	r3, r3, #5
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	8912      	ldrh	r2, [r2, #8]
 8006726:	4293      	cmp	r3, r2
 8006728:	d301      	bcc.n	800672e <dir_sdi+0x5c>
 800672a:	2302      	movs	r3, #2
 800672c:	e048      	b.n	80067c0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	61da      	str	r2, [r3, #28]
 8006736:	e029      	b.n	800678c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	895b      	ldrh	r3, [r3, #10]
 800673c:	025b      	lsls	r3, r3, #9
 800673e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006740:	e019      	b.n	8006776 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6979      	ldr	r1, [r7, #20]
 8006746:	4618      	mov	r0, r3
 8006748:	f7ff fd01 	bl	800614e <get_fat>
 800674c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006754:	d101      	bne.n	800675a <dir_sdi+0x88>
 8006756:	2301      	movs	r3, #1
 8006758:	e032      	b.n	80067c0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d904      	bls.n	800676a <dir_sdi+0x98>
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	429a      	cmp	r2, r3
 8006768:	d301      	bcc.n	800676e <dir_sdi+0x9c>
 800676a:	2302      	movs	r3, #2
 800676c:	e028      	b.n	80067c0 <dir_sdi+0xee>
			ofs -= csz;
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	429a      	cmp	r2, r3
 800677c:	d2e1      	bcs.n	8006742 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800677e:	6979      	ldr	r1, [r7, #20]
 8006780:	6938      	ldr	r0, [r7, #16]
 8006782:	f7ff fcc5 	bl	8006110 <clust2sect>
 8006786:	4602      	mov	r2, r0
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <dir_sdi+0xcc>
 800679a:	2302      	movs	r3, #2
 800679c:	e010      	b.n	80067c0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69da      	ldr	r2, [r3, #28]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	0a5b      	lsrs	r3, r3, #9
 80067a6:	441a      	add	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b8:	441a      	add	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3718      	adds	r7, #24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	3320      	adds	r3, #32
 80067de:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d003      	beq.n	80067f0 <dir_next+0x28>
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067ee:	d301      	bcc.n	80067f4 <dir_next+0x2c>
 80067f0:	2304      	movs	r3, #4
 80067f2:	e0aa      	b.n	800694a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f040 8098 	bne.w	8006930 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10b      	bne.n	800682a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	095b      	lsrs	r3, r3, #5
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	8912      	ldrh	r2, [r2, #8]
 800681a:	4293      	cmp	r3, r2
 800681c:	f0c0 8088 	bcc.w	8006930 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	61da      	str	r2, [r3, #28]
 8006826:	2304      	movs	r3, #4
 8006828:	e08f      	b.n	800694a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	0a5b      	lsrs	r3, r3, #9
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	8952      	ldrh	r2, [r2, #10]
 8006832:	3a01      	subs	r2, #1
 8006834:	4013      	ands	r3, r2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d17a      	bne.n	8006930 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	4619      	mov	r1, r3
 8006842:	4610      	mov	r0, r2
 8006844:	f7ff fc83 	bl	800614e <get_fat>
 8006848:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d801      	bhi.n	8006854 <dir_next+0x8c>
 8006850:	2302      	movs	r3, #2
 8006852:	e07a      	b.n	800694a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685a:	d101      	bne.n	8006860 <dir_next+0x98>
 800685c:	2301      	movs	r3, #1
 800685e:	e074      	b.n	800694a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	429a      	cmp	r2, r3
 8006868:	d358      	bcc.n	800691c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d104      	bne.n	800687a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	61da      	str	r2, [r3, #28]
 8006876:	2304      	movs	r3, #4
 8006878:	e067      	b.n	800694a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	4619      	mov	r1, r3
 8006882:	4610      	mov	r0, r2
 8006884:	f7ff fe59 	bl	800653a <create_chain>
 8006888:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <dir_next+0xcc>
 8006890:	2307      	movs	r3, #7
 8006892:	e05a      	b.n	800694a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d101      	bne.n	800689e <dir_next+0xd6>
 800689a:	2302      	movs	r3, #2
 800689c:	e055      	b.n	800694a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a4:	d101      	bne.n	80068aa <dir_next+0xe2>
 80068a6:	2301      	movs	r3, #1
 80068a8:	e04f      	b.n	800694a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f7ff fb50 	bl	8005f50 <sync_window>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <dir_next+0xf2>
 80068b6:	2301      	movs	r3, #1
 80068b8:	e047      	b.n	800694a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	3334      	adds	r3, #52	@ 0x34
 80068be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068c2:	2100      	movs	r1, #0
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7ff f948 	bl	8005b5a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80068ca:	2300      	movs	r3, #0
 80068cc:	613b      	str	r3, [r7, #16]
 80068ce:	6979      	ldr	r1, [r7, #20]
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f7ff fc1d 	bl	8006110 <clust2sect>
 80068d6:	4602      	mov	r2, r0
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	631a      	str	r2, [r3, #48]	@ 0x30
 80068dc:	e012      	b.n	8006904 <dir_next+0x13c>
						fs->wflag = 1;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2201      	movs	r2, #1
 80068e2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f7ff fb33 	bl	8005f50 <sync_window>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <dir_next+0x12c>
 80068f0:	2301      	movs	r3, #1
 80068f2:	e02a      	b.n	800694a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	3301      	adds	r3, #1
 80068f8:	613b      	str	r3, [r7, #16]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068fe:	1c5a      	adds	r2, r3, #1
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	631a      	str	r2, [r3, #48]	@ 0x30
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	895b      	ldrh	r3, [r3, #10]
 8006908:	461a      	mov	r2, r3
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	4293      	cmp	r3, r2
 800690e:	d3e6      	bcc.n	80068de <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	1ad2      	subs	r2, r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006922:	6979      	ldr	r1, [r7, #20]
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f7ff fbf3 	bl	8006110 <clust2sect>
 800692a:	4602      	mov	r2, r0
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006942:	441a      	add	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b086      	sub	sp, #24
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006962:	2100      	movs	r1, #0
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f7ff feb4 	bl	80066d2 <dir_sdi>
 800696a:	4603      	mov	r3, r0
 800696c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800696e:	7dfb      	ldrb	r3, [r7, #23]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d12b      	bne.n	80069cc <dir_alloc+0x7a>
		n = 0;
 8006974:	2300      	movs	r3, #0
 8006976:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	4619      	mov	r1, r3
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f7ff fb2a 	bl	8005fd8 <move_window>
 8006984:	4603      	mov	r3, r0
 8006986:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006988:	7dfb      	ldrb	r3, [r7, #23]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d11d      	bne.n	80069ca <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	2be5      	cmp	r3, #229	@ 0xe5
 8006996:	d004      	beq.n	80069a2 <dir_alloc+0x50>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d107      	bne.n	80069b2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	3301      	adds	r3, #1
 80069a6:	613b      	str	r3, [r7, #16]
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d102      	bne.n	80069b6 <dir_alloc+0x64>
 80069b0:	e00c      	b.n	80069cc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80069b2:	2300      	movs	r3, #0
 80069b4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80069b6:	2101      	movs	r1, #1
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7ff ff05 	bl	80067c8 <dir_next>
 80069be:	4603      	mov	r3, r0
 80069c0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80069c2:	7dfb      	ldrb	r3, [r7, #23]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0d7      	beq.n	8006978 <dir_alloc+0x26>
 80069c8:	e000      	b.n	80069cc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80069ca:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80069cc:	7dfb      	ldrb	r3, [r7, #23]
 80069ce:	2b04      	cmp	r3, #4
 80069d0:	d101      	bne.n	80069d6 <dir_alloc+0x84>
 80069d2:	2307      	movs	r3, #7
 80069d4:	75fb      	strb	r3, [r7, #23]
	return res;
 80069d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	331a      	adds	r3, #26
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7ff f810 	bl	8005a14 <ld_word>
 80069f4:	4603      	mov	r3, r0
 80069f6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d109      	bne.n	8006a14 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	3314      	adds	r3, #20
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7ff f805 	bl	8005a14 <ld_word>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	041b      	lsls	r3, r3, #16
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006a14:	68fb      	ldr	r3, [r7, #12]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	60f8      	str	r0, [r7, #12]
 8006a26:	60b9      	str	r1, [r7, #8]
 8006a28:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	331a      	adds	r3, #26
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	b292      	uxth	r2, r2
 8006a32:	4611      	mov	r1, r2
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7ff f828 	bl	8005a8a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d109      	bne.n	8006a56 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	f103 0214 	add.w	r2, r3, #20
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	0c1b      	lsrs	r3, r3, #16
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4610      	mov	r0, r2
 8006a52:	f7ff f81a 	bl	8005a8a <st_word>
	}
}
 8006a56:	bf00      	nop
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b086      	sub	sp, #24
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006a68:	2304      	movs	r3, #4
 8006a6a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8006a72:	e03c      	b.n	8006aee <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6938      	ldr	r0, [r7, #16]
 8006a7c:	f7ff faac 	bl	8005fd8 <move_window>
 8006a80:	4603      	mov	r3, r0
 8006a82:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006a84:	7dfb      	ldrb	r3, [r7, #23]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d136      	bne.n	8006af8 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8006a92:	7bfb      	ldrb	r3, [r7, #15]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d102      	bne.n	8006a9e <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006a98:	2304      	movs	r3, #4
 8006a9a:	75fb      	strb	r3, [r7, #23]
 8006a9c:	e031      	b.n	8006b02 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	330b      	adds	r3, #11
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006aaa:	73bb      	strb	r3, [r7, #14]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	7bba      	ldrb	r2, [r7, #14]
 8006ab0:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	2be5      	cmp	r3, #229	@ 0xe5
 8006ab6:	d011      	beq.n	8006adc <dir_read+0x7e>
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	2b2e      	cmp	r3, #46	@ 0x2e
 8006abc:	d00e      	beq.n	8006adc <dir_read+0x7e>
 8006abe:	7bbb      	ldrb	r3, [r7, #14]
 8006ac0:	2b0f      	cmp	r3, #15
 8006ac2:	d00b      	beq.n	8006adc <dir_read+0x7e>
 8006ac4:	7bbb      	ldrb	r3, [r7, #14]
 8006ac6:	f023 0320 	bic.w	r3, r3, #32
 8006aca:	2b08      	cmp	r3, #8
 8006acc:	bf0c      	ite	eq
 8006ace:	2301      	moveq	r3, #1
 8006ad0:	2300      	movne	r3, #0
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d00f      	beq.n	8006afc <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006adc:	2100      	movs	r1, #0
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff fe72 	bl	80067c8 <dir_next>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006ae8:	7dfb      	ldrb	r3, [r7, #23]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d108      	bne.n	8006b00 <dir_read+0xa2>
	while (dp->sect) {
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1be      	bne.n	8006a74 <dir_read+0x16>
 8006af6:	e004      	b.n	8006b02 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006af8:	bf00      	nop
 8006afa:	e002      	b.n	8006b02 <dir_read+0xa4>
				break;
 8006afc:	bf00      	nop
 8006afe:	e000      	b.n	8006b02 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006b00:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <dir_read+0xb0>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	61da      	str	r2, [r3, #28]
	return res;
 8006b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3718      	adds	r7, #24
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006b26:	2100      	movs	r1, #0
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7ff fdd2 	bl	80066d2 <dir_sdi>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006b32:	7dfb      	ldrb	r3, [r7, #23]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d001      	beq.n	8006b3c <dir_find+0x24>
 8006b38:	7dfb      	ldrb	r3, [r7, #23]
 8006b3a:	e03e      	b.n	8006bba <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	4619      	mov	r1, r3
 8006b42:	6938      	ldr	r0, [r7, #16]
 8006b44:	f7ff fa48 	bl	8005fd8 <move_window>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006b4c:	7dfb      	ldrb	r3, [r7, #23]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d12f      	bne.n	8006bb2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d102      	bne.n	8006b66 <dir_find+0x4e>
 8006b60:	2304      	movs	r3, #4
 8006b62:	75fb      	strb	r3, [r7, #23]
 8006b64:	e028      	b.n	8006bb8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	330b      	adds	r3, #11
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a1b      	ldr	r3, [r3, #32]
 8006b7c:	330b      	adds	r3, #11
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	f003 0308 	and.w	r3, r3, #8
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d10a      	bne.n	8006b9e <dir_find+0x86>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a18      	ldr	r0, [r3, #32]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3324      	adds	r3, #36	@ 0x24
 8006b90:	220b      	movs	r2, #11
 8006b92:	4619      	mov	r1, r3
 8006b94:	f7fe fffc 	bl	8005b90 <mem_cmp>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00b      	beq.n	8006bb6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7ff fe11 	bl	80067c8 <dir_next>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006baa:	7dfb      	ldrb	r3, [r7, #23]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d0c5      	beq.n	8006b3c <dir_find+0x24>
 8006bb0:	e002      	b.n	8006bb8 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006bb2:	bf00      	nop
 8006bb4:	e000      	b.n	8006bb8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006bb6:	bf00      	nop

	return res;
 8006bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3718      	adds	r7, #24
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7ff febd 	bl	8006952 <dir_alloc>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d11c      	bne.n	8006c1c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	4619      	mov	r1, r3
 8006be8:	68b8      	ldr	r0, [r7, #8]
 8006bea:	f7ff f9f5 	bl	8005fd8 <move_window>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d111      	bne.n	8006c1c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	2100      	movs	r1, #0
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fe ffaa 	bl	8005b5a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a18      	ldr	r0, [r3, #32]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3324      	adds	r3, #36	@ 0x24
 8006c0e:	220b      	movs	r2, #11
 8006c10:	4619      	mov	r1, r3
 8006c12:	f7fe ff81 	bl	8005b18 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b084      	sub	sp, #16
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	4619      	mov	r1, r3
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f7ff f9cc 	bl	8005fd8 <move_window>
 8006c40:	4603      	mov	r3, r0
 8006c42:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8006c44:	7afb      	ldrb	r3, [r7, #11]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d106      	bne.n	8006c58 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	22e5      	movs	r2, #229	@ 0xe5
 8006c50:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2201      	movs	r2, #1
 8006c56:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8006c58:	7afb      	ldrb	r3, [r7, #11]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b086      	sub	sp, #24
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d04f      	beq.n	8006d1a <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	613b      	str	r3, [r7, #16]
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8006c82:	e022      	b.n	8006cca <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a1a      	ldr	r2, [r3, #32]
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	1c59      	adds	r1, r3, #1
 8006c8c:	6179      	str	r1, [r7, #20]
 8006c8e:	4413      	add	r3, r2
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
 8006c96:	2b20      	cmp	r3, #32
 8006c98:	d016      	beq.n	8006cc8 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	2b05      	cmp	r3, #5
 8006c9e:	d101      	bne.n	8006ca4 <get_fileinfo+0x42>
 8006ca0:	23e5      	movs	r3, #229	@ 0xe5
 8006ca2:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	2b09      	cmp	r3, #9
 8006ca8:	d106      	bne.n	8006cb8 <get_fileinfo+0x56>
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	613a      	str	r2, [r7, #16]
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	222e      	movs	r2, #46	@ 0x2e
 8006cb6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	1c5a      	adds	r2, r3, #1
 8006cbc:	613a      	str	r2, [r7, #16]
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	7bfa      	ldrb	r2, [r7, #15]
 8006cc4:	725a      	strb	r2, [r3, #9]
 8006cc6:	e000      	b.n	8006cca <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 8006cc8:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2b0a      	cmp	r3, #10
 8006cce:	d9d9      	bls.n	8006c84 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	3309      	adds	r3, #9
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	7ada      	ldrb	r2, [r3, #11]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	331c      	adds	r3, #28
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7fe fea9 	bl	8005a44 <ld_dword>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	3316      	adds	r3, #22
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fe fea0 	bl	8005a44 <ld_dword>
 8006d04:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	80da      	strh	r2, [r3, #6]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	0c1b      	lsrs	r3, r3, #16
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	809a      	strh	r2, [r3, #4]
 8006d18:	e000      	b.n	8006d1c <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006d1a:	bf00      	nop
}
 8006d1c:	3718      	adds	r7, #24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b088      	sub	sp, #32
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	60fb      	str	r3, [r7, #12]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3324      	adds	r3, #36	@ 0x24
 8006d38:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006d3a:	220b      	movs	r2, #11
 8006d3c:	2120      	movs	r1, #32
 8006d3e:	68b8      	ldr	r0, [r7, #8]
 8006d40:	f7fe ff0b 	bl	8005b5a <mem_set>
	si = i = 0; ni = 8;
 8006d44:	2300      	movs	r3, #0
 8006d46:	613b      	str	r3, [r7, #16]
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	61fb      	str	r3, [r7, #28]
 8006d4c:	2308      	movs	r3, #8
 8006d4e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	1c5a      	adds	r2, r3, #1
 8006d54:	61fa      	str	r2, [r7, #28]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	4413      	add	r3, r2
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006d5e:	7efb      	ldrb	r3, [r7, #27]
 8006d60:	2b20      	cmp	r3, #32
 8006d62:	d94e      	bls.n	8006e02 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006d64:	7efb      	ldrb	r3, [r7, #27]
 8006d66:	2b2f      	cmp	r3, #47	@ 0x2f
 8006d68:	d006      	beq.n	8006d78 <create_name+0x54>
 8006d6a:	7efb      	ldrb	r3, [r7, #27]
 8006d6c:	2b5c      	cmp	r3, #92	@ 0x5c
 8006d6e:	d110      	bne.n	8006d92 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006d70:	e002      	b.n	8006d78 <create_name+0x54>
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	3301      	adds	r3, #1
 8006d76:	61fb      	str	r3, [r7, #28]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	2b2f      	cmp	r3, #47	@ 0x2f
 8006d82:	d0f6      	beq.n	8006d72 <create_name+0x4e>
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	4413      	add	r3, r2
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	2b5c      	cmp	r3, #92	@ 0x5c
 8006d8e:	d0f0      	beq.n	8006d72 <create_name+0x4e>
			break;
 8006d90:	e038      	b.n	8006e04 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006d92:	7efb      	ldrb	r3, [r7, #27]
 8006d94:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d96:	d003      	beq.n	8006da0 <create_name+0x7c>
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d30c      	bcc.n	8006dba <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2b0b      	cmp	r3, #11
 8006da4:	d002      	beq.n	8006dac <create_name+0x88>
 8006da6:	7efb      	ldrb	r3, [r7, #27]
 8006da8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006daa:	d001      	beq.n	8006db0 <create_name+0x8c>
 8006dac:	2306      	movs	r3, #6
 8006dae:	e044      	b.n	8006e3a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006db0:	2308      	movs	r3, #8
 8006db2:	613b      	str	r3, [r7, #16]
 8006db4:	230b      	movs	r3, #11
 8006db6:	617b      	str	r3, [r7, #20]
			continue;
 8006db8:	e022      	b.n	8006e00 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006dba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	da04      	bge.n	8006dcc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006dc2:	7efb      	ldrb	r3, [r7, #27]
 8006dc4:	3b80      	subs	r3, #128	@ 0x80
 8006dc6:	4a1f      	ldr	r2, [pc, #124]	@ (8006e44 <create_name+0x120>)
 8006dc8:	5cd3      	ldrb	r3, [r2, r3]
 8006dca:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006dcc:	7efb      	ldrb	r3, [r7, #27]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	481d      	ldr	r0, [pc, #116]	@ (8006e48 <create_name+0x124>)
 8006dd2:	f7fe ff04 	bl	8005bde <chk_chr>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <create_name+0xbc>
 8006ddc:	2306      	movs	r3, #6
 8006dde:	e02c      	b.n	8006e3a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006de0:	7efb      	ldrb	r3, [r7, #27]
 8006de2:	2b60      	cmp	r3, #96	@ 0x60
 8006de4:	d905      	bls.n	8006df2 <create_name+0xce>
 8006de6:	7efb      	ldrb	r3, [r7, #27]
 8006de8:	2b7a      	cmp	r3, #122	@ 0x7a
 8006dea:	d802      	bhi.n	8006df2 <create_name+0xce>
 8006dec:	7efb      	ldrb	r3, [r7, #27]
 8006dee:	3b20      	subs	r3, #32
 8006df0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	1c5a      	adds	r2, r3, #1
 8006df6:	613a      	str	r2, [r7, #16]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	7efa      	ldrb	r2, [r7, #27]
 8006dfe:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006e00:	e7a6      	b.n	8006d50 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006e02:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	441a      	add	r2, r3
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <create_name+0xf4>
 8006e14:	2306      	movs	r3, #6
 8006e16:	e010      	b.n	8006e3a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	2be5      	cmp	r3, #229	@ 0xe5
 8006e1e:	d102      	bne.n	8006e26 <create_name+0x102>
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2205      	movs	r2, #5
 8006e24:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006e26:	7efb      	ldrb	r3, [r7, #27]
 8006e28:	2b20      	cmp	r3, #32
 8006e2a:	d801      	bhi.n	8006e30 <create_name+0x10c>
 8006e2c:	2204      	movs	r2, #4
 8006e2e:	e000      	b.n	8006e32 <create_name+0x10e>
 8006e30:	2200      	movs	r2, #0
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	330b      	adds	r3, #11
 8006e36:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006e38:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3720      	adds	r7, #32
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	0800f710 	.word	0x0800f710
 8006e48:	0800f6ac 	.word	0x0800f6ac

08006e4c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006e60:	e002      	b.n	8006e68 <follow_path+0x1c>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	3301      	adds	r3, #1
 8006e66:	603b      	str	r3, [r7, #0]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	2b2f      	cmp	r3, #47	@ 0x2f
 8006e6e:	d0f8      	beq.n	8006e62 <follow_path+0x16>
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	2b5c      	cmp	r3, #92	@ 0x5c
 8006e76:	d0f4      	beq.n	8006e62 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	2b1f      	cmp	r3, #31
 8006e84:	d80a      	bhi.n	8006e9c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2280      	movs	r2, #128	@ 0x80
 8006e8a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8006e8e:	2100      	movs	r1, #0
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7ff fc1e 	bl	80066d2 <dir_sdi>
 8006e96:	4603      	mov	r3, r0
 8006e98:	75fb      	strb	r3, [r7, #23]
 8006e9a:	e043      	b.n	8006f24 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006e9c:	463b      	mov	r3, r7
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7ff ff3f 	bl	8006d24 <create_name>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006eaa:	7dfb      	ldrb	r3, [r7, #23]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d134      	bne.n	8006f1a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7ff fe31 	bl	8006b18 <dir_find>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006ec0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006ec2:	7dfb      	ldrb	r3, [r7, #23]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00a      	beq.n	8006ede <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d127      	bne.n	8006f1e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006ece:	7afb      	ldrb	r3, [r7, #11]
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d122      	bne.n	8006f1e <follow_path+0xd2>
 8006ed8:	2305      	movs	r3, #5
 8006eda:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006edc:	e01f      	b.n	8006f1e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006ede:	7afb      	ldrb	r3, [r7, #11]
 8006ee0:	f003 0304 	and.w	r3, r3, #4
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d11c      	bne.n	8006f22 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	799b      	ldrb	r3, [r3, #6]
 8006eec:	f003 0310 	and.w	r3, r3, #16
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d102      	bne.n	8006efa <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006ef4:	2305      	movs	r3, #5
 8006ef6:	75fb      	strb	r3, [r7, #23]
 8006ef8:	e014      	b.n	8006f24 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f08:	4413      	add	r3, r2
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f7ff fd67 	bl	80069e0 <ld_clust>
 8006f12:	4602      	mov	r2, r0
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006f18:	e7c0      	b.n	8006e9c <follow_path+0x50>
			if (res != FR_OK) break;
 8006f1a:	bf00      	nop
 8006f1c:	e002      	b.n	8006f24 <follow_path+0xd8>
				break;
 8006f1e:	bf00      	nop
 8006f20:	e000      	b.n	8006f24 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006f22:	bf00      	nop
			}
		}
	}

	return res;
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b087      	sub	sp, #28
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006f36:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d031      	beq.n	8006fa8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	617b      	str	r3, [r7, #20]
 8006f4a:	e002      	b.n	8006f52 <get_ldnumber+0x24>
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	617b      	str	r3, [r7, #20]
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	2b20      	cmp	r3, #32
 8006f58:	d903      	bls.n	8006f62 <get_ldnumber+0x34>
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	2b3a      	cmp	r3, #58	@ 0x3a
 8006f60:	d1f4      	bne.n	8006f4c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2b3a      	cmp	r3, #58	@ 0x3a
 8006f68:	d11c      	bne.n	8006fa4 <get_ldnumber+0x76>
			tp = *path;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	1c5a      	adds	r2, r3, #1
 8006f74:	60fa      	str	r2, [r7, #12]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	3b30      	subs	r3, #48	@ 0x30
 8006f7a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2b09      	cmp	r3, #9
 8006f80:	d80e      	bhi.n	8006fa0 <get_ldnumber+0x72>
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d10a      	bne.n	8006fa0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d107      	bne.n	8006fa0 <get_ldnumber+0x72>
					vol = (int)i;
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	3301      	adds	r3, #1
 8006f98:	617b      	str	r3, [r7, #20]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	e002      	b.n	8006faa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006fa8:	693b      	ldr	r3, [r7, #16]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	371c      	adds	r7, #28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
	...

08006fb8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	70da      	strb	r2, [r3, #3]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f04f 32ff 	mov.w	r2, #4294967295
 8006fce:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff f800 	bl	8005fd8 <move_window>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d001      	beq.n	8006fe2 <check_fs+0x2a>
 8006fde:	2304      	movs	r3, #4
 8006fe0:	e038      	b.n	8007054 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	3334      	adds	r3, #52	@ 0x34
 8006fe6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fe fd12 	bl	8005a14 <ld_word>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d001      	beq.n	8007000 <check_fs+0x48>
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e029      	b.n	8007054 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007006:	2be9      	cmp	r3, #233	@ 0xe9
 8007008:	d009      	beq.n	800701e <check_fs+0x66>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007010:	2beb      	cmp	r3, #235	@ 0xeb
 8007012:	d11e      	bne.n	8007052 <check_fs+0x9a>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800701a:	2b90      	cmp	r3, #144	@ 0x90
 800701c:	d119      	bne.n	8007052 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	3334      	adds	r3, #52	@ 0x34
 8007022:	3336      	adds	r3, #54	@ 0x36
 8007024:	4618      	mov	r0, r3
 8007026:	f7fe fd0d 	bl	8005a44 <ld_dword>
 800702a:	4603      	mov	r3, r0
 800702c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007030:	4a0a      	ldr	r2, [pc, #40]	@ (800705c <check_fs+0xa4>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d101      	bne.n	800703a <check_fs+0x82>
 8007036:	2300      	movs	r3, #0
 8007038:	e00c      	b.n	8007054 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	3334      	adds	r3, #52	@ 0x34
 800703e:	3352      	adds	r3, #82	@ 0x52
 8007040:	4618      	mov	r0, r3
 8007042:	f7fe fcff 	bl	8005a44 <ld_dword>
 8007046:	4603      	mov	r3, r0
 8007048:	4a05      	ldr	r2, [pc, #20]	@ (8007060 <check_fs+0xa8>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d101      	bne.n	8007052 <check_fs+0x9a>
 800704e:	2300      	movs	r3, #0
 8007050:	e000      	b.n	8007054 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007052:	2302      	movs	r3, #2
}
 8007054:	4618      	mov	r0, r3
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	00544146 	.word	0x00544146
 8007060:	33544146 	.word	0x33544146

08007064 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b096      	sub	sp, #88	@ 0x58
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	4613      	mov	r3, r2
 8007070:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	2200      	movs	r2, #0
 8007076:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f7ff ff58 	bl	8006f2e <get_ldnumber>
 800707e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007082:	2b00      	cmp	r3, #0
 8007084:	da01      	bge.n	800708a <find_volume+0x26>
 8007086:	230b      	movs	r3, #11
 8007088:	e235      	b.n	80074f6 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800708a:	4aa5      	ldr	r2, [pc, #660]	@ (8007320 <find_volume+0x2bc>)
 800708c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800708e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007092:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <find_volume+0x3a>
 800709a:	230c      	movs	r3, #12
 800709c:	e22b      	b.n	80074f6 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800709e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80070a0:	f7fe fdb8 	bl	8005c14 <lock_fs>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <find_volume+0x4a>
 80070aa:	230f      	movs	r3, #15
 80070ac:	e223      	b.n	80074f6 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070b2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80070b4:	79fb      	ldrb	r3, [r7, #7]
 80070b6:	f023 0301 	bic.w	r3, r3, #1
 80070ba:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80070bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d01a      	beq.n	80070fa <find_volume+0x96>
		stat = disk_status(fs->drv);
 80070c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c6:	785b      	ldrb	r3, [r3, #1]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fe fc03 	bl	80058d4 <disk_status>
 80070ce:	4603      	mov	r3, r0
 80070d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80070d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10c      	bne.n	80070fa <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80070e0:	79fb      	ldrb	r3, [r7, #7]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d007      	beq.n	80070f6 <find_volume+0x92>
 80070e6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80070ea:	f003 0304 	and.w	r3, r3, #4
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80070f2:	230a      	movs	r3, #10
 80070f4:	e1ff      	b.n	80074f6 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 80070f6:	2300      	movs	r3, #0
 80070f8:	e1fd      	b.n	80074f6 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80070fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070fc:	2200      	movs	r2, #0
 80070fe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007102:	b2da      	uxtb	r2, r3
 8007104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007106:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710a:	785b      	ldrb	r3, [r3, #1]
 800710c:	4618      	mov	r0, r3
 800710e:	f7fe fbfb 	bl	8005908 <disk_initialize>
 8007112:	4603      	mov	r3, r0
 8007114:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007118:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	2b00      	cmp	r3, #0
 8007122:	d001      	beq.n	8007128 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007124:	2303      	movs	r3, #3
 8007126:	e1e6      	b.n	80074f6 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007128:	79fb      	ldrb	r3, [r7, #7]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d007      	beq.n	800713e <find_volume+0xda>
 800712e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007132:	f003 0304 	and.w	r3, r3, #4
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800713a:	230a      	movs	r3, #10
 800713c:	e1db      	b.n	80074f6 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007142:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007144:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007146:	f7ff ff37 	bl	8006fb8 <check_fs>
 800714a:	4603      	mov	r3, r0
 800714c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007150:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007154:	2b02      	cmp	r3, #2
 8007156:	d149      	bne.n	80071ec <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007158:	2300      	movs	r3, #0
 800715a:	643b      	str	r3, [r7, #64]	@ 0x40
 800715c:	e01e      	b.n	800719c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800715e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007160:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800716c:	4413      	add	r3, r2
 800716e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007172:	3304      	adds	r3, #4
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d006      	beq.n	8007188 <find_volume+0x124>
 800717a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717c:	3308      	adds	r3, #8
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe fc60 	bl	8005a44 <ld_dword>
 8007184:	4602      	mov	r2, r0
 8007186:	e000      	b.n	800718a <find_volume+0x126>
 8007188:	2200      	movs	r2, #0
 800718a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	3358      	adds	r3, #88	@ 0x58
 8007190:	443b      	add	r3, r7
 8007192:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007198:	3301      	adds	r3, #1
 800719a:	643b      	str	r3, [r7, #64]	@ 0x40
 800719c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d9dd      	bls.n	800715e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80071a2:	2300      	movs	r3, #0
 80071a4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80071a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <find_volume+0x14e>
 80071ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071ae:	3b01      	subs	r3, #1
 80071b0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80071b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	3358      	adds	r3, #88	@ 0x58
 80071b8:	443b      	add	r3, r7
 80071ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80071be:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80071c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d005      	beq.n	80071d2 <find_volume+0x16e>
 80071c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80071c8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80071ca:	f7ff fef5 	bl	8006fb8 <check_fs>
 80071ce:	4603      	mov	r3, r0
 80071d0:	e000      	b.n	80071d4 <find_volume+0x170>
 80071d2:	2303      	movs	r3, #3
 80071d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80071d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d905      	bls.n	80071ec <find_volume+0x188>
 80071e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071e2:	3301      	adds	r3, #1
 80071e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80071e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071e8:	2b03      	cmp	r3, #3
 80071ea:	d9e2      	bls.n	80071b2 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80071ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80071f0:	2b04      	cmp	r3, #4
 80071f2:	d101      	bne.n	80071f8 <find_volume+0x194>
 80071f4:	2301      	movs	r3, #1
 80071f6:	e17e      	b.n	80074f6 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80071f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d901      	bls.n	8007204 <find_volume+0x1a0>
 8007200:	230d      	movs	r3, #13
 8007202:	e178      	b.n	80074f6 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007206:	3334      	adds	r3, #52	@ 0x34
 8007208:	330b      	adds	r3, #11
 800720a:	4618      	mov	r0, r3
 800720c:	f7fe fc02 	bl	8005a14 <ld_word>
 8007210:	4603      	mov	r3, r0
 8007212:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007216:	d001      	beq.n	800721c <find_volume+0x1b8>
 8007218:	230d      	movs	r3, #13
 800721a:	e16c      	b.n	80074f6 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800721c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800721e:	3334      	adds	r3, #52	@ 0x34
 8007220:	3316      	adds	r3, #22
 8007222:	4618      	mov	r0, r3
 8007224:	f7fe fbf6 	bl	8005a14 <ld_word>
 8007228:	4603      	mov	r3, r0
 800722a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800722c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800722e:	2b00      	cmp	r3, #0
 8007230:	d106      	bne.n	8007240 <find_volume+0x1dc>
 8007232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007234:	3334      	adds	r3, #52	@ 0x34
 8007236:	3324      	adds	r3, #36	@ 0x24
 8007238:	4618      	mov	r0, r3
 800723a:	f7fe fc03 	bl	8005a44 <ld_dword>
 800723e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007242:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007244:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007248:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800724c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800724e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007252:	789b      	ldrb	r3, [r3, #2]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d005      	beq.n	8007264 <find_volume+0x200>
 8007258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800725a:	789b      	ldrb	r3, [r3, #2]
 800725c:	2b02      	cmp	r3, #2
 800725e:	d001      	beq.n	8007264 <find_volume+0x200>
 8007260:	230d      	movs	r3, #13
 8007262:	e148      	b.n	80074f6 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007266:	789b      	ldrb	r3, [r3, #2]
 8007268:	461a      	mov	r2, r3
 800726a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800726c:	fb02 f303 	mul.w	r3, r2, r3
 8007270:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007278:	461a      	mov	r2, r3
 800727a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800727c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800727e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007280:	895b      	ldrh	r3, [r3, #10]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d008      	beq.n	8007298 <find_volume+0x234>
 8007286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007288:	895b      	ldrh	r3, [r3, #10]
 800728a:	461a      	mov	r2, r3
 800728c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800728e:	895b      	ldrh	r3, [r3, #10]
 8007290:	3b01      	subs	r3, #1
 8007292:	4013      	ands	r3, r2
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <find_volume+0x238>
 8007298:	230d      	movs	r3, #13
 800729a:	e12c      	b.n	80074f6 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800729c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800729e:	3334      	adds	r3, #52	@ 0x34
 80072a0:	3311      	adds	r3, #17
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe fbb6 	bl	8005a14 <ld_word>
 80072a8:	4603      	mov	r3, r0
 80072aa:	461a      	mov	r2, r3
 80072ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80072b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b2:	891b      	ldrh	r3, [r3, #8]
 80072b4:	f003 030f 	and.w	r3, r3, #15
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <find_volume+0x25e>
 80072be:	230d      	movs	r3, #13
 80072c0:	e119      	b.n	80074f6 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80072c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c4:	3334      	adds	r3, #52	@ 0x34
 80072c6:	3313      	adds	r3, #19
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7fe fba3 	bl	8005a14 <ld_word>
 80072ce:	4603      	mov	r3, r0
 80072d0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80072d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d106      	bne.n	80072e6 <find_volume+0x282>
 80072d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072da:	3334      	adds	r3, #52	@ 0x34
 80072dc:	3320      	adds	r3, #32
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fe fbb0 	bl	8005a44 <ld_dword>
 80072e4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80072e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e8:	3334      	adds	r3, #52	@ 0x34
 80072ea:	330e      	adds	r3, #14
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fe fb91 	bl	8005a14 <ld_word>
 80072f2:	4603      	mov	r3, r0
 80072f4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80072f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <find_volume+0x29c>
 80072fc:	230d      	movs	r3, #13
 80072fe:	e0fa      	b.n	80074f6 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007300:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007302:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007304:	4413      	add	r3, r2
 8007306:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007308:	8912      	ldrh	r2, [r2, #8]
 800730a:	0912      	lsrs	r2, r2, #4
 800730c:	b292      	uxth	r2, r2
 800730e:	4413      	add	r3, r2
 8007310:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007312:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007316:	429a      	cmp	r2, r3
 8007318:	d204      	bcs.n	8007324 <find_volume+0x2c0>
 800731a:	230d      	movs	r3, #13
 800731c:	e0eb      	b.n	80074f6 <find_volume+0x492>
 800731e:	bf00      	nop
 8007320:	20000ae0 	.word	0x20000ae0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007324:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800732c:	8952      	ldrh	r2, [r2, #10]
 800732e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007332:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <find_volume+0x2da>
 800733a:	230d      	movs	r3, #13
 800733c:	e0db      	b.n	80074f6 <find_volume+0x492>
		fmt = FS_FAT32;
 800733e:	2303      	movs	r3, #3
 8007340:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007346:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800734a:	4293      	cmp	r3, r2
 800734c:	d802      	bhi.n	8007354 <find_volume+0x2f0>
 800734e:	2302      	movs	r3, #2
 8007350:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007356:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800735a:	4293      	cmp	r3, r2
 800735c:	d802      	bhi.n	8007364 <find_volume+0x300>
 800735e:	2301      	movs	r3, #1
 8007360:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007366:	1c9a      	adds	r2, r3, #2
 8007368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800736c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007370:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007372:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007374:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007376:	441a      	add	r2, r3
 8007378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800737a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800737c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800737e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007380:	441a      	add	r2, r3
 8007382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007384:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8007386:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800738a:	2b03      	cmp	r3, #3
 800738c:	d11e      	bne.n	80073cc <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800738e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007390:	3334      	adds	r3, #52	@ 0x34
 8007392:	332a      	adds	r3, #42	@ 0x2a
 8007394:	4618      	mov	r0, r3
 8007396:	f7fe fb3d 	bl	8005a14 <ld_word>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <find_volume+0x340>
 80073a0:	230d      	movs	r3, #13
 80073a2:	e0a8      	b.n	80074f6 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80073a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a6:	891b      	ldrh	r3, [r3, #8]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <find_volume+0x34c>
 80073ac:	230d      	movs	r3, #13
 80073ae:	e0a2      	b.n	80074f6 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80073b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b2:	3334      	adds	r3, #52	@ 0x34
 80073b4:	332c      	adds	r3, #44	@ 0x2c
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fe fb44 	bl	8005a44 <ld_dword>
 80073bc:	4602      	mov	r2, r0
 80073be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c0:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80073c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ca:	e01f      	b.n	800740c <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80073cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ce:	891b      	ldrh	r3, [r3, #8]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d101      	bne.n	80073d8 <find_volume+0x374>
 80073d4:	230d      	movs	r3, #13
 80073d6:	e08e      	b.n	80074f6 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80073d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073de:	441a      	add	r2, r3
 80073e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e2:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80073e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d103      	bne.n	80073f4 <find_volume+0x390>
 80073ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	005b      	lsls	r3, r3, #1
 80073f2:	e00a      	b.n	800740a <find_volume+0x3a6>
 80073f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f6:	699a      	ldr	r2, [r3, #24]
 80073f8:	4613      	mov	r3, r2
 80073fa:	005b      	lsls	r3, r3, #1
 80073fc:	4413      	add	r3, r2
 80073fe:	085a      	lsrs	r2, r3, #1
 8007400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800740a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800740c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800740e:	69da      	ldr	r2, [r3, #28]
 8007410:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007412:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8007416:	0a5b      	lsrs	r3, r3, #9
 8007418:	429a      	cmp	r2, r3
 800741a:	d201      	bcs.n	8007420 <find_volume+0x3bc>
 800741c:	230d      	movs	r3, #13
 800741e:	e06a      	b.n	80074f6 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007422:	f04f 32ff 	mov.w	r2, #4294967295
 8007426:	615a      	str	r2, [r3, #20]
 8007428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800742a:	695a      	ldr	r2, [r3, #20]
 800742c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800742e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007432:	2280      	movs	r2, #128	@ 0x80
 8007434:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007436:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800743a:	2b03      	cmp	r3, #3
 800743c:	d149      	bne.n	80074d2 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800743e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007440:	3334      	adds	r3, #52	@ 0x34
 8007442:	3330      	adds	r3, #48	@ 0x30
 8007444:	4618      	mov	r0, r3
 8007446:	f7fe fae5 	bl	8005a14 <ld_word>
 800744a:	4603      	mov	r3, r0
 800744c:	2b01      	cmp	r3, #1
 800744e:	d140      	bne.n	80074d2 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007450:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007452:	3301      	adds	r3, #1
 8007454:	4619      	mov	r1, r3
 8007456:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007458:	f7fe fdbe 	bl	8005fd8 <move_window>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d137      	bne.n	80074d2 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8007462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007464:	2200      	movs	r2, #0
 8007466:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746a:	3334      	adds	r3, #52	@ 0x34
 800746c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007470:	4618      	mov	r0, r3
 8007472:	f7fe facf 	bl	8005a14 <ld_word>
 8007476:	4603      	mov	r3, r0
 8007478:	461a      	mov	r2, r3
 800747a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800747e:	429a      	cmp	r2, r3
 8007480:	d127      	bne.n	80074d2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007484:	3334      	adds	r3, #52	@ 0x34
 8007486:	4618      	mov	r0, r3
 8007488:	f7fe fadc 	bl	8005a44 <ld_dword>
 800748c:	4603      	mov	r3, r0
 800748e:	4a1c      	ldr	r2, [pc, #112]	@ (8007500 <find_volume+0x49c>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d11e      	bne.n	80074d2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007496:	3334      	adds	r3, #52	@ 0x34
 8007498:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800749c:	4618      	mov	r0, r3
 800749e:	f7fe fad1 	bl	8005a44 <ld_dword>
 80074a2:	4603      	mov	r3, r0
 80074a4:	4a17      	ldr	r2, [pc, #92]	@ (8007504 <find_volume+0x4a0>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d113      	bne.n	80074d2 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80074aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ac:	3334      	adds	r3, #52	@ 0x34
 80074ae:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fe fac6 	bl	8005a44 <ld_dword>
 80074b8:	4602      	mov	r2, r0
 80074ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074bc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80074be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c0:	3334      	adds	r3, #52	@ 0x34
 80074c2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fe fabc 	bl	8005a44 <ld_dword>
 80074cc:	4602      	mov	r2, r0
 80074ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80074d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80074d8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80074da:	4b0b      	ldr	r3, [pc, #44]	@ (8007508 <find_volume+0x4a4>)
 80074dc:	881b      	ldrh	r3, [r3, #0]
 80074de:	3301      	adds	r3, #1
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	4b09      	ldr	r3, [pc, #36]	@ (8007508 <find_volume+0x4a4>)
 80074e4:	801a      	strh	r2, [r3, #0]
 80074e6:	4b08      	ldr	r3, [pc, #32]	@ (8007508 <find_volume+0x4a4>)
 80074e8:	881a      	ldrh	r2, [r3, #0]
 80074ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ec:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80074ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80074f0:	f7fe fd0a 	bl	8005f08 <clear_lock>
#endif
	return FR_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3758      	adds	r7, #88	@ 0x58
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	41615252 	.word	0x41615252
 8007504:	61417272 	.word	0x61417272
 8007508:	20000ae4 	.word	0x20000ae4

0800750c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007516:	2309      	movs	r3, #9
 8007518:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d02e      	beq.n	800757e <validate+0x72>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d02a      	beq.n	800757e <validate+0x72>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d025      	beq.n	800757e <validate+0x72>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	889a      	ldrh	r2, [r3, #4]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	88db      	ldrh	r3, [r3, #6]
 800753c:	429a      	cmp	r2, r3
 800753e:	d11e      	bne.n	800757e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4618      	mov	r0, r3
 8007546:	f7fe fb65 	bl	8005c14 <lock_fs>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d014      	beq.n	800757a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	785b      	ldrb	r3, [r3, #1]
 8007556:	4618      	mov	r0, r3
 8007558:	f7fe f9bc 	bl	80058d4 <disk_status>
 800755c:	4603      	mov	r3, r0
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b00      	cmp	r3, #0
 8007564:	d102      	bne.n	800756c <validate+0x60>
				res = FR_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	73fb      	strb	r3, [r7, #15]
 800756a:	e008      	b.n	800757e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2100      	movs	r1, #0
 8007572:	4618      	mov	r0, r3
 8007574:	f7fe fb64 	bl	8005c40 <unlock_fs>
 8007578:	e001      	b.n	800757e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800757a:	230f      	movs	r3, #15
 800757c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800757e:	7bfb      	ldrb	r3, [r7, #15]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d102      	bne.n	800758a <validate+0x7e>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	e000      	b.n	800758c <validate+0x80>
 800758a:	2300      	movs	r3, #0
 800758c:	683a      	ldr	r2, [r7, #0]
 800758e:	6013      	str	r3, [r2, #0]
	return res;
 8007590:	7bfb      	ldrb	r3, [r7, #15]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
	...

0800759c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b088      	sub	sp, #32
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	4613      	mov	r3, r2
 80075a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80075ae:	f107 0310 	add.w	r3, r7, #16
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7ff fcbb 	bl	8006f2e <get_ldnumber>
 80075b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	da01      	bge.n	80075c4 <f_mount+0x28>
 80075c0:	230b      	movs	r3, #11
 80075c2:	e048      	b.n	8007656 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80075c4:	4a26      	ldr	r2, [pc, #152]	@ (8007660 <f_mount+0xc4>)
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00f      	beq.n	80075f4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80075d4:	69b8      	ldr	r0, [r7, #24]
 80075d6:	f7fe fc97 	bl	8005f08 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 feb1 	bl	8008346 <ff_del_syncobj>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d101      	bne.n	80075ee <f_mount+0x52>
 80075ea:	2302      	movs	r3, #2
 80075ec:	e033      	b.n	8007656 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	2200      	movs	r2, #0
 80075f2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00f      	beq.n	800761a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	b2da      	uxtb	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	330c      	adds	r3, #12
 8007608:	4619      	mov	r1, r3
 800760a:	4610      	mov	r0, r2
 800760c:	f000 fe7b 	bl	8008306 <ff_cre_syncobj>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <f_mount+0x7e>
 8007616:	2302      	movs	r3, #2
 8007618:	e01d      	b.n	8007656 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	4910      	ldr	r1, [pc, #64]	@ (8007660 <f_mount+0xc4>)
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d002      	beq.n	8007630 <f_mount+0x94>
 800762a:	79fb      	ldrb	r3, [r7, #7]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d001      	beq.n	8007634 <f_mount+0x98>
 8007630:	2300      	movs	r3, #0
 8007632:	e010      	b.n	8007656 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007634:	f107 010c 	add.w	r1, r7, #12
 8007638:	f107 0308 	add.w	r3, r7, #8
 800763c:	2200      	movs	r2, #0
 800763e:	4618      	mov	r0, r3
 8007640:	f7ff fd10 	bl	8007064 <find_volume>
 8007644:	4603      	mov	r3, r0
 8007646:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	7dfa      	ldrb	r2, [r7, #23]
 800764c:	4611      	mov	r1, r2
 800764e:	4618      	mov	r0, r3
 8007650:	f7fe faf6 	bl	8005c40 <unlock_fs>
 8007654:	7dfb      	ldrb	r3, [r7, #23]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3720      	adds	r7, #32
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	20000ae0 	.word	0x20000ae0

08007664 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b098      	sub	sp, #96	@ 0x60
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	4613      	mov	r3, r2
 8007670:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <f_open+0x18>
 8007678:	2309      	movs	r3, #9
 800767a:	e1b0      	b.n	80079de <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800767c:	79fb      	ldrb	r3, [r7, #7]
 800767e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007682:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007684:	79fa      	ldrb	r2, [r7, #7]
 8007686:	f107 0110 	add.w	r1, r7, #16
 800768a:	f107 0308 	add.w	r3, r7, #8
 800768e:	4618      	mov	r0, r3
 8007690:	f7ff fce8 	bl	8007064 <find_volume>
 8007694:	4603      	mov	r3, r0
 8007696:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800769a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f040 818d 	bne.w	80079be <f_open+0x35a>
		dj.obj.fs = fs;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	f107 0314 	add.w	r3, r7, #20
 80076ae:	4611      	mov	r1, r2
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7ff fbcb 	bl	8006e4c <follow_path>
 80076b6:	4603      	mov	r3, r0
 80076b8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80076bc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d118      	bne.n	80076f6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80076c4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80076c8:	b25b      	sxtb	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	da03      	bge.n	80076d6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80076ce:	2306      	movs	r3, #6
 80076d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80076d4:	e00f      	b.n	80076f6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80076d6:	79fb      	ldrb	r3, [r7, #7]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	bf8c      	ite	hi
 80076dc:	2301      	movhi	r3, #1
 80076de:	2300      	movls	r3, #0
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	461a      	mov	r2, r3
 80076e4:	f107 0314 	add.w	r3, r7, #20
 80076e8:	4611      	mov	r1, r2
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe fac4 	bl	8005c78 <chk_lock>
 80076f0:	4603      	mov	r3, r0
 80076f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80076f6:	79fb      	ldrb	r3, [r7, #7]
 80076f8:	f003 031c 	and.w	r3, r3, #28
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d07f      	beq.n	8007800 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007700:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007704:	2b00      	cmp	r3, #0
 8007706:	d017      	beq.n	8007738 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007708:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800770c:	2b04      	cmp	r3, #4
 800770e:	d10e      	bne.n	800772e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007710:	f7fe fb0e 	bl	8005d30 <enq_lock>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d006      	beq.n	8007728 <f_open+0xc4>
 800771a:	f107 0314 	add.w	r3, r7, #20
 800771e:	4618      	mov	r0, r3
 8007720:	f7ff fa4f 	bl	8006bc2 <dir_register>
 8007724:	4603      	mov	r3, r0
 8007726:	e000      	b.n	800772a <f_open+0xc6>
 8007728:	2312      	movs	r3, #18
 800772a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800772e:	79fb      	ldrb	r3, [r7, #7]
 8007730:	f043 0308 	orr.w	r3, r3, #8
 8007734:	71fb      	strb	r3, [r7, #7]
 8007736:	e010      	b.n	800775a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007738:	7ebb      	ldrb	r3, [r7, #26]
 800773a:	f003 0311 	and.w	r3, r3, #17
 800773e:	2b00      	cmp	r3, #0
 8007740:	d003      	beq.n	800774a <f_open+0xe6>
					res = FR_DENIED;
 8007742:	2307      	movs	r3, #7
 8007744:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007748:	e007      	b.n	800775a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800774a:	79fb      	ldrb	r3, [r7, #7]
 800774c:	f003 0304 	and.w	r3, r3, #4
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <f_open+0xf6>
 8007754:	2308      	movs	r3, #8
 8007756:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800775a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800775e:	2b00      	cmp	r3, #0
 8007760:	d168      	bne.n	8007834 <f_open+0x1d0>
 8007762:	79fb      	ldrb	r3, [r7, #7]
 8007764:	f003 0308 	and.w	r3, r3, #8
 8007768:	2b00      	cmp	r3, #0
 800776a:	d063      	beq.n	8007834 <f_open+0x1d0>
				dw = GET_FATTIME();
 800776c:	f7fe f854 	bl	8005818 <get_fattime>
 8007770:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007774:	330e      	adds	r3, #14
 8007776:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007778:	4618      	mov	r0, r3
 800777a:	f7fe f9a1 	bl	8005ac0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800777e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007780:	3316      	adds	r3, #22
 8007782:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007784:	4618      	mov	r0, r3
 8007786:	f7fe f99b 	bl	8005ac0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800778a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800778c:	330b      	adds	r3, #11
 800778e:	2220      	movs	r2, #32
 8007790:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007796:	4611      	mov	r1, r2
 8007798:	4618      	mov	r0, r3
 800779a:	f7ff f921 	bl	80069e0 <ld_clust>
 800779e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80077a4:	2200      	movs	r2, #0
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7ff f939 	bl	8006a1e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80077ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ae:	331c      	adds	r3, #28
 80077b0:	2100      	movs	r1, #0
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fe f984 	bl	8005ac0 <st_dword>
					fs->wflag = 1;
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	2201      	movs	r2, #1
 80077bc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80077be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d037      	beq.n	8007834 <f_open+0x1d0>
						dw = fs->winsect;
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077c8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80077ca:	f107 0314 	add.w	r3, r7, #20
 80077ce:	2200      	movs	r2, #0
 80077d0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fe fe4c 	bl	8006470 <remove_chain>
 80077d8:	4603      	mov	r3, r0
 80077da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80077de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d126      	bne.n	8007834 <f_open+0x1d0>
							res = move_window(fs, dw);
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fe fbf4 	bl	8005fd8 <move_window>
 80077f0:	4603      	mov	r3, r0
 80077f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80077fa:	3a01      	subs	r2, #1
 80077fc:	611a      	str	r2, [r3, #16]
 80077fe:	e019      	b.n	8007834 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007800:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007804:	2b00      	cmp	r3, #0
 8007806:	d115      	bne.n	8007834 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007808:	7ebb      	ldrb	r3, [r7, #26]
 800780a:	f003 0310 	and.w	r3, r3, #16
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <f_open+0x1b6>
					res = FR_NO_FILE;
 8007812:	2304      	movs	r3, #4
 8007814:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007818:	e00c      	b.n	8007834 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800781a:	79fb      	ldrb	r3, [r7, #7]
 800781c:	f003 0302 	and.w	r3, r3, #2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d007      	beq.n	8007834 <f_open+0x1d0>
 8007824:	7ebb      	ldrb	r3, [r7, #26]
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	d002      	beq.n	8007834 <f_open+0x1d0>
						res = FR_DENIED;
 800782e:	2307      	movs	r3, #7
 8007830:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007834:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007838:	2b00      	cmp	r3, #0
 800783a:	d126      	bne.n	800788a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800783c:	79fb      	ldrb	r3, [r7, #7]
 800783e:	f003 0308 	and.w	r3, r3, #8
 8007842:	2b00      	cmp	r3, #0
 8007844:	d003      	beq.n	800784e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007846:	79fb      	ldrb	r3, [r7, #7]
 8007848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800784c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007856:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800785c:	79fb      	ldrb	r3, [r7, #7]
 800785e:	2b01      	cmp	r3, #1
 8007860:	bf8c      	ite	hi
 8007862:	2301      	movhi	r3, #1
 8007864:	2300      	movls	r3, #0
 8007866:	b2db      	uxtb	r3, r3
 8007868:	461a      	mov	r2, r3
 800786a:	f107 0314 	add.w	r3, r7, #20
 800786e:	4611      	mov	r1, r2
 8007870:	4618      	mov	r0, r3
 8007872:	f7fe fa7f 	bl	8005d74 <inc_lock>
 8007876:	4602      	mov	r2, r0
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d102      	bne.n	800788a <f_open+0x226>
 8007884:	2302      	movs	r3, #2
 8007886:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800788a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800788e:	2b00      	cmp	r3, #0
 8007890:	f040 8095 	bne.w	80079be <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007898:	4611      	mov	r1, r2
 800789a:	4618      	mov	r0, r3
 800789c:	f7ff f8a0 	bl	80069e0 <ld_clust>
 80078a0:	4602      	mov	r2, r0
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80078a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078a8:	331c      	adds	r3, #28
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe f8ca 	bl	8005a44 <ld_dword>
 80078b0:	4602      	mov	r2, r0
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	88da      	ldrh	r2, [r3, #6]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	79fa      	ldrb	r2, [r7, #7]
 80078ce:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3330      	adds	r3, #48	@ 0x30
 80078e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078ea:	2100      	movs	r1, #0
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fe f934 	bl	8005b5a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80078f2:	79fb      	ldrb	r3, [r7, #7]
 80078f4:	f003 0320 	and.w	r3, r3, #32
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d060      	beq.n	80079be <f_open+0x35a>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d05c      	beq.n	80079be <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	68da      	ldr	r2, [r3, #12]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	895b      	ldrh	r3, [r3, #10]
 8007910:	025b      	lsls	r3, r3, #9
 8007912:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007920:	e016      	b.n	8007950 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007926:	4618      	mov	r0, r3
 8007928:	f7fe fc11 	bl	800614e <get_fat>
 800792c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800792e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007930:	2b01      	cmp	r3, #1
 8007932:	d802      	bhi.n	800793a <f_open+0x2d6>
 8007934:	2302      	movs	r3, #2
 8007936:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800793a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800793c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007940:	d102      	bne.n	8007948 <f_open+0x2e4>
 8007942:	2301      	movs	r3, #1
 8007944:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007948:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800794a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007950:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007954:	2b00      	cmp	r3, #0
 8007956:	d103      	bne.n	8007960 <f_open+0x2fc>
 8007958:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800795a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800795c:	429a      	cmp	r2, r3
 800795e:	d8e0      	bhi.n	8007922 <f_open+0x2be>
				}
				fp->clust = clst;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007964:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007966:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800796a:	2b00      	cmp	r3, #0
 800796c:	d127      	bne.n	80079be <f_open+0x35a>
 800796e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007974:	2b00      	cmp	r3, #0
 8007976:	d022      	beq.n	80079be <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800797c:	4618      	mov	r0, r3
 800797e:	f7fe fbc7 	bl	8006110 <clust2sect>
 8007982:	6478      	str	r0, [r7, #68]	@ 0x44
 8007984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007986:	2b00      	cmp	r3, #0
 8007988:	d103      	bne.n	8007992 <f_open+0x32e>
						res = FR_INT_ERR;
 800798a:	2302      	movs	r3, #2
 800798c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007990:	e015      	b.n	80079be <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007994:	0a5a      	lsrs	r2, r3, #9
 8007996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007998:	441a      	add	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	7858      	ldrb	r0, [r3, #1]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6a1a      	ldr	r2, [r3, #32]
 80079ac:	2301      	movs	r3, #1
 80079ae:	f7fd ffd3 	bl	8005958 <disk_read>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d002      	beq.n	80079be <f_open+0x35a>
 80079b8:	2301      	movs	r3, #1
 80079ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80079be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d002      	beq.n	80079cc <f_open+0x368>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80079d2:	4611      	mov	r1, r2
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7fe f933 	bl	8005c40 <unlock_fs>
 80079da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3760      	adds	r7, #96	@ 0x60
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b08c      	sub	sp, #48	@ 0x30
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	60f8      	str	r0, [r7, #12]
 80079ee:	60b9      	str	r1, [r7, #8]
 80079f0:	607a      	str	r2, [r7, #4]
 80079f2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2200      	movs	r2, #0
 80079fc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f107 0210 	add.w	r2, r7, #16
 8007a04:	4611      	mov	r1, r2
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff fd80 	bl	800750c <validate>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007a12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d107      	bne.n	8007a2a <f_write+0x44>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	7d5b      	ldrb	r3, [r3, #21]
 8007a1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007a22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d009      	beq.n	8007a3e <f_write+0x58>
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007a30:	4611      	mov	r1, r2
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fe f904 	bl	8005c40 <unlock_fs>
 8007a38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007a3c:	e173      	b.n	8007d26 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	7d1b      	ldrb	r3, [r3, #20]
 8007a42:	f003 0302 	and.w	r3, r3, #2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d106      	bne.n	8007a58 <f_write+0x72>
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	2107      	movs	r1, #7
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fe f8f6 	bl	8005c40 <unlock_fs>
 8007a54:	2307      	movs	r3, #7
 8007a56:	e166      	b.n	8007d26 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	699a      	ldr	r2, [r3, #24]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	441a      	add	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	f080 814b 	bcs.w	8007d00 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	43db      	mvns	r3, r3
 8007a70:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007a72:	e145      	b.n	8007d00 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f040 8101 	bne.w	8007c84 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	0a5b      	lsrs	r3, r3, #9
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	8952      	ldrh	r2, [r2, #10]
 8007a8c:	3a01      	subs	r2, #1
 8007a8e:	4013      	ands	r3, r2
 8007a90:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d14d      	bne.n	8007b34 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10c      	bne.n	8007aba <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d11a      	bne.n	8007ae2 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2100      	movs	r1, #0
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fe fd42 	bl	800653a <create_chain>
 8007ab6:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007ab8:	e013      	b.n	8007ae2 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d007      	beq.n	8007ad2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f7fe fdce 	bl	800666a <clmt_clust>
 8007ace:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007ad0:	e007      	b.n	8007ae2 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	69db      	ldr	r3, [r3, #28]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	4610      	mov	r0, r2
 8007adc:	f7fe fd2d 	bl	800653a <create_chain>
 8007ae0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 8110 	beq.w	8007d0a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d109      	bne.n	8007b04 <f_write+0x11e>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2202      	movs	r2, #2
 8007af4:	755a      	strb	r2, [r3, #21]
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	2102      	movs	r1, #2
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fe f8a0 	bl	8005c40 <unlock_fs>
 8007b00:	2302      	movs	r3, #2
 8007b02:	e110      	b.n	8007d26 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0a:	d109      	bne.n	8007b20 <f_write+0x13a>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	755a      	strb	r2, [r3, #21]
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	2101      	movs	r1, #1
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fe f892 	bl	8005c40 <unlock_fs>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e102      	b.n	8007d26 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b24:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d102      	bne.n	8007b34 <f_write+0x14e>
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b32:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	7d1b      	ldrb	r3, [r3, #20]
 8007b38:	b25b      	sxtb	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	da1d      	bge.n	8007b7a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	7858      	ldrb	r0, [r3, #1]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6a1a      	ldr	r2, [r3, #32]
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	f7fd ff23 	bl	8005998 <disk_write>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d009      	beq.n	8007b6c <f_write+0x186>
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	755a      	strb	r2, [r3, #21]
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	2101      	movs	r1, #1
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fe f86c 	bl	8005c40 <unlock_fs>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e0dc      	b.n	8007d26 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	7d1b      	ldrb	r3, [r3, #20]
 8007b70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	69db      	ldr	r3, [r3, #28]
 8007b80:	4619      	mov	r1, r3
 8007b82:	4610      	mov	r0, r2
 8007b84:	f7fe fac4 	bl	8006110 <clust2sect>
 8007b88:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d109      	bne.n	8007ba4 <f_write+0x1be>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2202      	movs	r2, #2
 8007b94:	755a      	strb	r2, [r3, #21]
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	2102      	movs	r1, #2
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fe f850 	bl	8005c40 <unlock_fs>
 8007ba0:	2302      	movs	r3, #2
 8007ba2:	e0c0      	b.n	8007d26 <f_write+0x340>
			sect += csect;
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	4413      	add	r3, r2
 8007baa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	0a5b      	lsrs	r3, r3, #9
 8007bb0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007bb2:	6a3b      	ldr	r3, [r7, #32]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d041      	beq.n	8007c3c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	8952      	ldrh	r2, [r2, #10]
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d905      	bls.n	8007bd2 <f_write+0x1ec>
					cc = fs->csize - csect;
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	895b      	ldrh	r3, [r3, #10]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	7858      	ldrb	r0, [r3, #1]
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	69f9      	ldr	r1, [r7, #28]
 8007bdc:	f7fd fedc 	bl	8005998 <disk_write>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d009      	beq.n	8007bfa <f_write+0x214>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2201      	movs	r2, #1
 8007bea:	755a      	strb	r2, [r3, #21]
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	2101      	movs	r1, #1
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fe f825 	bl	8005c40 <unlock_fs>
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e095      	b.n	8007d26 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6a1a      	ldr	r2, [r3, #32]
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	6a3a      	ldr	r2, [r7, #32]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d915      	bls.n	8007c34 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6a1a      	ldr	r2, [r3, #32]
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	025b      	lsls	r3, r3, #9
 8007c18:	69fa      	ldr	r2, [r7, #28]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c20:	4619      	mov	r1, r3
 8007c22:	f7fd ff79 	bl	8005b18 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	7d1b      	ldrb	r3, [r3, #20]
 8007c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	025b      	lsls	r3, r3, #9
 8007c38:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8007c3a:	e044      	b.n	8007cc6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6a1b      	ldr	r3, [r3, #32]
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d01b      	beq.n	8007c7e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	699a      	ldr	r2, [r3, #24]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d215      	bcs.n	8007c7e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	7858      	ldrb	r0, [r3, #1]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	f7fd fe7a 	bl	8005958 <disk_read>
 8007c64:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d009      	beq.n	8007c7e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	755a      	strb	r2, [r3, #21]
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	2101      	movs	r1, #1
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7fd ffe3 	bl	8005c40 <unlock_fs>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e053      	b.n	8007d26 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c8c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007c90:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d901      	bls.n	8007c9e <f_write+0x2b8>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cac:	4413      	add	r3, r2
 8007cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cb0:	69f9      	ldr	r1, [r7, #28]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fd ff30 	bl	8005b18 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	7d1b      	ldrb	r3, [r3, #20]
 8007cbc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007cc6:	69fa      	ldr	r2, [r7, #28]
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cca:	4413      	add	r3, r2
 8007ccc:	61fb      	str	r3, [r7, #28]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	699a      	ldr	r2, [r3, #24]
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd4:	441a      	add	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	619a      	str	r2, [r3, #24]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	68da      	ldr	r2, [r3, #12]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	bf38      	it	cc
 8007ce6:	461a      	movcc	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	60da      	str	r2, [r3, #12]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf2:	441a      	add	r2, r3
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	601a      	str	r2, [r3, #0]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f47f aeb6 	bne.w	8007a74 <f_write+0x8e>
 8007d08:	e000      	b.n	8007d0c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007d0a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	7d1b      	ldrb	r3, [r3, #20]
 8007d10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fd ff8e 	bl	8005c40 <unlock_fs>
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3730      	adds	r7, #48	@ 0x30
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b086      	sub	sp, #24
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f107 0208 	add.w	r2, r7, #8
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7ff fbe4 	bl	800750c <validate>
 8007d44:	4603      	mov	r3, r0
 8007d46:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007d48:	7dfb      	ldrb	r3, [r7, #23]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d16d      	bne.n	8007e2a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	7d1b      	ldrb	r3, [r3, #20]
 8007d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d067      	beq.n	8007e2a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	7d1b      	ldrb	r3, [r3, #20]
 8007d5e:	b25b      	sxtb	r3, r3
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	da1a      	bge.n	8007d9a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	7858      	ldrb	r0, [r3, #1]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a1a      	ldr	r2, [r3, #32]
 8007d72:	2301      	movs	r3, #1
 8007d74:	f7fd fe10 	bl	8005998 <disk_write>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d006      	beq.n	8007d8c <f_sync+0x5e>
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2101      	movs	r1, #1
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fd ff5c 	bl	8005c40 <unlock_fs>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e055      	b.n	8007e38 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	7d1b      	ldrb	r3, [r3, #20]
 8007d90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007d9a:	f7fd fd3d 	bl	8005818 <get_fattime>
 8007d9e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007da6:	4619      	mov	r1, r3
 8007da8:	4610      	mov	r0, r2
 8007daa:	f7fe f915 	bl	8005fd8 <move_window>
 8007dae:	4603      	mov	r3, r0
 8007db0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007db2:	7dfb      	ldrb	r3, [r7, #23]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d138      	bne.n	8007e2a <f_sync+0xfc>
					dir = fp->dir_ptr;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dbc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	330b      	adds	r3, #11
 8007dc2:	781a      	ldrb	r2, [r3, #0]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	330b      	adds	r3, #11
 8007dc8:	f042 0220 	orr.w	r2, r2, #32
 8007dcc:	b2d2      	uxtb	r2, r2
 8007dce:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6818      	ldr	r0, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	461a      	mov	r2, r3
 8007dda:	68f9      	ldr	r1, [r7, #12]
 8007ddc:	f7fe fe1f 	bl	8006a1e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f103 021c 	add.w	r2, r3, #28
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	4619      	mov	r1, r3
 8007dec:	4610      	mov	r0, r2
 8007dee:	f7fd fe67 	bl	8005ac0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3316      	adds	r3, #22
 8007df6:	6939      	ldr	r1, [r7, #16]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7fd fe61 	bl	8005ac0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	3312      	adds	r3, #18
 8007e02:	2100      	movs	r1, #0
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fd fe40 	bl	8005a8a <st_word>
					fs->wflag = 1;
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fe f90e 	bl	8006034 <sync_fs>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	7d1b      	ldrb	r3, [r3, #20]
 8007e20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	7dfa      	ldrb	r2, [r7, #23]
 8007e2e:	4611      	mov	r1, r2
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7fd ff05 	bl	8005c40 <unlock_fs>
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7ff ff70 	bl	8007d2e <f_sync>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d11d      	bne.n	8007e94 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f107 0208 	add.w	r2, r7, #8
 8007e5e:	4611      	mov	r1, r2
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7ff fb53 	bl	800750c <validate>
 8007e66:	4603      	mov	r3, r0
 8007e68:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d111      	bne.n	8007e94 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7fe f80b 	bl	8005e90 <dec_lock>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d102      	bne.n	8007e8a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7fd fed6 	bl	8005c40 <unlock_fs>
#endif
		}
	}
	return res;
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b086      	sub	sp, #24
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <f_opendir+0x14>
 8007eae:	2309      	movs	r3, #9
 8007eb0:	e06a      	b.n	8007f88 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8007eb6:	f107 010c 	add.w	r1, r7, #12
 8007eba:	463b      	mov	r3, r7
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7ff f8d0 	bl	8007064 <find_volume>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007ec8:	7dfb      	ldrb	r3, [r7, #23]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d14f      	bne.n	8007f6e <f_opendir+0xd0>
		obj->fs = fs;
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7fe ffb7 	bl	8006e4c <follow_path>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8007ee2:	7dfb      	ldrb	r3, [r7, #23]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d13d      	bne.n	8007f64 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007eee:	b25b      	sxtb	r3, r3
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	db12      	blt.n	8007f1a <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	799b      	ldrb	r3, [r3, #6]
 8007ef8:	f003 0310 	and.w	r3, r3, #16
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00a      	beq.n	8007f16 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a1b      	ldr	r3, [r3, #32]
 8007f06:	4619      	mov	r1, r3
 8007f08:	4610      	mov	r0, r2
 8007f0a:	f7fe fd69 	bl	80069e0 <ld_clust>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	609a      	str	r2, [r3, #8]
 8007f14:	e001      	b.n	8007f1a <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8007f16:	2305      	movs	r3, #5
 8007f18:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d121      	bne.n	8007f64 <f_opendir+0xc6>
				obj->id = fs->id;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	88da      	ldrh	r2, [r3, #6]
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8007f28:	2100      	movs	r1, #0
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7fe fbd1 	bl	80066d2 <dir_sdi>
 8007f30:	4603      	mov	r3, r0
 8007f32:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8007f34:	7dfb      	ldrb	r3, [r7, #23]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d114      	bne.n	8007f64 <f_opendir+0xc6>
					if (obj->sclust) {
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00d      	beq.n	8007f5e <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8007f42:	2100      	movs	r1, #0
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7fd ff15 	bl	8005d74 <inc_lock>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d105      	bne.n	8007f64 <f_opendir+0xc6>
 8007f58:	2312      	movs	r3, #18
 8007f5a:	75fb      	strb	r3, [r7, #23]
 8007f5c:	e002      	b.n	8007f64 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	2200      	movs	r2, #0
 8007f62:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
 8007f66:	2b04      	cmp	r3, #4
 8007f68:	d101      	bne.n	8007f6e <f_opendir+0xd0>
 8007f6a:	2305      	movs	r3, #5
 8007f6c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8007f6e:	7dfb      	ldrb	r3, [r7, #23]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <f_opendir+0xdc>
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	2200      	movs	r2, #0
 8007f78:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	7dfa      	ldrb	r2, [r7, #23]
 8007f7e:	4611      	mov	r1, r2
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7fd fe5d 	bl	8005c40 <unlock_fs>
 8007f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3718      	adds	r7, #24
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f107 0208 	add.w	r2, r7, #8
 8007f9e:	4611      	mov	r1, r2
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7ff fab3 	bl	800750c <validate>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007faa:	7bfb      	ldrb	r3, [r7, #15]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d115      	bne.n	8007fdc <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d006      	beq.n	8007fc6 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fd ff67 	bl	8005e90 <dec_lock>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8007fc6:	7bfb      	ldrb	r3, [r7, #15]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d102      	bne.n	8007fd2 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7fd fe32 	bl	8005c40 <unlock_fs>
#endif
	}
	return res;
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f107 0208 	add.w	r2, r7, #8
 8007ff6:	4611      	mov	r1, r2
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7ff fa87 	bl	800750c <validate>
 8007ffe:	4603      	mov	r3, r0
 8008000:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d126      	bne.n	8008056 <f_readdir+0x70>
		if (!fno) {
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d106      	bne.n	800801c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800800e:	2100      	movs	r1, #0
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f7fe fb5e 	bl	80066d2 <dir_sdi>
 8008016:	4603      	mov	r3, r0
 8008018:	73fb      	strb	r3, [r7, #15]
 800801a:	e01c      	b.n	8008056 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800801c:	2100      	movs	r1, #0
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7fe fd1d 	bl	8006a5e <dir_read>
 8008024:	4603      	mov	r3, r0
 8008026:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8008028:	7bfb      	ldrb	r3, [r7, #15]
 800802a:	2b04      	cmp	r3, #4
 800802c:	d101      	bne.n	8008032 <f_readdir+0x4c>
 800802e:	2300      	movs	r3, #0
 8008030:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8008032:	7bfb      	ldrb	r3, [r7, #15]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10e      	bne.n	8008056 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7fe fe11 	bl	8006c62 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008040:	2100      	movs	r1, #0
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7fe fbc0 	bl	80067c8 <dir_next>
 8008048:	4603      	mov	r3, r0
 800804a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800804c:	7bfb      	ldrb	r3, [r7, #15]
 800804e:	2b04      	cmp	r3, #4
 8008050:	d101      	bne.n	8008056 <f_readdir+0x70>
 8008052:	2300      	movs	r3, #0
 8008054:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	7bfa      	ldrb	r2, [r7, #15]
 800805a:	4611      	mov	r1, r2
 800805c:	4618      	mov	r0, r3
 800805e:	f7fd fdef 	bl	8005c40 <unlock_fs>
 8008062:	7bfb      	ldrb	r3, [r7, #15]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b090      	sub	sp, #64	@ 0x40
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8008076:	f107 010c 	add.w	r1, r7, #12
 800807a:	1d3b      	adds	r3, r7, #4
 800807c:	2200      	movs	r2, #0
 800807e:	4618      	mov	r0, r3
 8008080:	f7fe fff0 	bl	8007064 <find_volume>
 8008084:	4603      	mov	r3, r0
 8008086:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 800808a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800808e:	2b00      	cmp	r3, #0
 8008090:	d11f      	bne.n	80080d2 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	f107 030c 	add.w	r3, r7, #12
 8008098:	4611      	mov	r1, r2
 800809a:	4618      	mov	r0, r3
 800809c:	f7fe fed6 	bl	8006e4c <follow_path>
 80080a0:	4603      	mov	r3, r0
 80080a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 80080a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d111      	bne.n	80080d2 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80080ae:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80080b2:	b25b      	sxtb	r3, r3
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	da03      	bge.n	80080c0 <f_stat+0x54>
				res = FR_INVALID_NAME;
 80080b8:	2306      	movs	r3, #6
 80080ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80080be:	e008      	b.n	80080d2 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d005      	beq.n	80080d2 <f_stat+0x66>
 80080c6:	f107 030c 	add.w	r3, r7, #12
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7fe fdc8 	bl	8006c62 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80080d8:	4611      	mov	r1, r2
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fd fdb0 	bl	8005c40 <unlock_fs>
 80080e0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3740      	adds	r7, #64	@ 0x40
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b09e      	sub	sp, #120	@ 0x78
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80080f4:	2300      	movs	r3, #0
 80080f6:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80080f8:	f107 010c 	add.w	r1, r7, #12
 80080fc:	1d3b      	adds	r3, r7, #4
 80080fe:	2202      	movs	r2, #2
 8008100:	4618      	mov	r0, r3
 8008102:	f7fe ffaf 	bl	8007064 <find_volume>
 8008106:	4603      	mov	r3, r0
 8008108:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 8008110:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008114:	2b00      	cmp	r3, #0
 8008116:	f040 808e 	bne.w	8008236 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008120:	4611      	mov	r1, r2
 8008122:	4618      	mov	r0, r3
 8008124:	f7fe fe92 	bl	8006e4c <follow_path>
 8008128:	4603      	mov	r3, r0
 800812a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800812e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008132:	2b00      	cmp	r3, #0
 8008134:	d108      	bne.n	8008148 <f_unlink+0x5c>
 8008136:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800813a:	2102      	movs	r1, #2
 800813c:	4618      	mov	r0, r3
 800813e:	f7fd fd9b 	bl	8005c78 <chk_lock>
 8008142:	4603      	mov	r3, r0
 8008144:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8008148:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800814c:	2b00      	cmp	r3, #0
 800814e:	d172      	bne.n	8008236 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008150:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8008154:	b25b      	sxtb	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	da03      	bge.n	8008162 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800815a:	2306      	movs	r3, #6
 800815c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8008160:	e008      	b.n	8008174 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8008162:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	2b00      	cmp	r3, #0
 800816c:	d002      	beq.n	8008174 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800816e:	2307      	movs	r3, #7
 8008170:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 8008174:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008178:	2b00      	cmp	r3, #0
 800817a:	d134      	bne.n	80081e6 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008180:	4611      	mov	r1, r2
 8008182:	4618      	mov	r0, r3
 8008184:	f7fe fc2c 	bl	80069e0 <ld_clust>
 8008188:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800818a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800818e:	f003 0310 	and.w	r3, r3, #16
 8008192:	2b00      	cmp	r3, #0
 8008194:	d027      	beq.n	80081e6 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800819a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800819c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800819e:	f107 0310 	add.w	r3, r7, #16
 80081a2:	2100      	movs	r1, #0
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7fe fa94 	bl	80066d2 <dir_sdi>
 80081aa:	4603      	mov	r3, r0
 80081ac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 80081b0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d116      	bne.n	80081e6 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 80081b8:	f107 0310 	add.w	r3, r7, #16
 80081bc:	2100      	movs	r1, #0
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fe fc4d 	bl	8006a5e <dir_read>
 80081c4:	4603      	mov	r3, r0
 80081c6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80081ca:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d102      	bne.n	80081d8 <f_unlink+0xec>
 80081d2:	2307      	movs	r3, #7
 80081d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80081d8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80081dc:	2b04      	cmp	r3, #4
 80081de:	d102      	bne.n	80081e6 <f_unlink+0xfa>
 80081e0:	2300      	movs	r3, #0
 80081e2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80081e6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d123      	bne.n	8008236 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80081ee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7fe fd17 	bl	8006c26 <dir_remove>
 80081f8:	4603      	mov	r3, r0
 80081fa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80081fe:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10c      	bne.n	8008220 <f_unlink+0x134>
 8008206:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008208:	2b00      	cmp	r3, #0
 800820a:	d009      	beq.n	8008220 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800820c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008210:	2200      	movs	r2, #0
 8008212:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8008214:	4618      	mov	r0, r3
 8008216:	f7fe f92b 	bl	8006470 <remove_chain>
 800821a:	4603      	mov	r3, r0
 800821c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8008220:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008224:	2b00      	cmp	r3, #0
 8008226:	d106      	bne.n	8008236 <f_unlink+0x14a>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	4618      	mov	r0, r3
 800822c:	f7fd ff02 	bl	8006034 <sync_fs>
 8008230:	4603      	mov	r3, r0
 8008232:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 800823c:	4611      	mov	r1, r2
 800823e:	4618      	mov	r0, r3
 8008240:	f7fd fcfe 	bl	8005c40 <unlock_fs>
 8008244:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8008248:	4618      	mov	r0, r3
 800824a:	3778      	adds	r7, #120	@ 0x78
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008250:	b480      	push	{r7}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	4613      	mov	r3, r2
 800825c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800825e:	2301      	movs	r3, #1
 8008260:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008262:	2300      	movs	r3, #0
 8008264:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008266:	4b1f      	ldr	r3, [pc, #124]	@ (80082e4 <FATFS_LinkDriverEx+0x94>)
 8008268:	7a5b      	ldrb	r3, [r3, #9]
 800826a:	b2db      	uxtb	r3, r3
 800826c:	2b00      	cmp	r3, #0
 800826e:	d131      	bne.n	80082d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008270:	4b1c      	ldr	r3, [pc, #112]	@ (80082e4 <FATFS_LinkDriverEx+0x94>)
 8008272:	7a5b      	ldrb	r3, [r3, #9]
 8008274:	b2db      	uxtb	r3, r3
 8008276:	461a      	mov	r2, r3
 8008278:	4b1a      	ldr	r3, [pc, #104]	@ (80082e4 <FATFS_LinkDriverEx+0x94>)
 800827a:	2100      	movs	r1, #0
 800827c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800827e:	4b19      	ldr	r3, [pc, #100]	@ (80082e4 <FATFS_LinkDriverEx+0x94>)
 8008280:	7a5b      	ldrb	r3, [r3, #9]
 8008282:	b2db      	uxtb	r3, r3
 8008284:	4a17      	ldr	r2, [pc, #92]	@ (80082e4 <FATFS_LinkDriverEx+0x94>)
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800828e:	4b15      	ldr	r3, [pc, #84]	@ (80082e4 <FATFS_LinkDriverEx+0x94>)
 8008290:	7a5b      	ldrb	r3, [r3, #9]
 8008292:	b2db      	uxtb	r3, r3
 8008294:	461a      	mov	r2, r3
 8008296:	4b13      	ldr	r3, [pc, #76]	@ (80082e4 <FATFS_LinkDriverEx+0x94>)
 8008298:	4413      	add	r3, r2
 800829a:	79fa      	ldrb	r2, [r7, #7]
 800829c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800829e:	4b11      	ldr	r3, [pc, #68]	@ (80082e4 <FATFS_LinkDriverEx+0x94>)
 80082a0:	7a5b      	ldrb	r3, [r3, #9]
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	1c5a      	adds	r2, r3, #1
 80082a6:	b2d1      	uxtb	r1, r2
 80082a8:	4a0e      	ldr	r2, [pc, #56]	@ (80082e4 <FATFS_LinkDriverEx+0x94>)
 80082aa:	7251      	strb	r1, [r2, #9]
 80082ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80082ae:	7dbb      	ldrb	r3, [r7, #22]
 80082b0:	3330      	adds	r3, #48	@ 0x30
 80082b2:	b2da      	uxtb	r2, r3
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	3301      	adds	r3, #1
 80082bc:	223a      	movs	r2, #58	@ 0x3a
 80082be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	3302      	adds	r3, #2
 80082c4:	222f      	movs	r2, #47	@ 0x2f
 80082c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	3303      	adds	r3, #3
 80082cc:	2200      	movs	r2, #0
 80082ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80082d0:	2300      	movs	r3, #0
 80082d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80082d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	371c      	adds	r7, #28
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	20000b08 	.word	0x20000b08

080082e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80082f2:	2200      	movs	r2, #0
 80082f4:	6839      	ldr	r1, [r7, #0]
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7ff ffaa 	bl	8008250 <FATFS_LinkDriverEx>
 80082fc:	4603      	mov	r3, r0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b086      	sub	sp, #24
 800830a:	af00      	add	r7, sp, #0
 800830c:	4603      	mov	r3, r0
 800830e:	6039      	str	r1, [r7, #0]
 8008310:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8008312:	2300      	movs	r3, #0
 8008314:	60fb      	str	r3, [r7, #12]
 8008316:	2300      	movs	r3, #0
 8008318:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800831a:	f107 030c 	add.w	r3, r7, #12
 800831e:	2101      	movs	r1, #1
 8008320:	4618      	mov	r0, r3
 8008322:	f000 f855 	bl	80083d0 <osSemaphoreCreate>
 8008326:	4602      	mov	r2, r0
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	bf14      	ite	ne
 8008334:	2301      	movne	r3, #1
 8008336:	2300      	moveq	r3, #0
 8008338:	b2db      	uxtb	r3, r3
 800833a:	617b      	str	r3, [r7, #20]

    return ret;
 800833c:	697b      	ldr	r3, [r7, #20]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f8f4 	bl	800853c <osSemaphoreDelete>
#endif
    return 1;
 8008354:	2301      	movs	r3, #1
}
 8008356:	4618      	mov	r0, r3
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b084      	sub	sp, #16
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8008366:	2300      	movs	r3, #0
 8008368:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800836a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f860 	bl	8008434 <osSemaphoreWait>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800837a:	2301      	movs	r3, #1
 800837c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800837e:	68fb      	ldr	r3, [r7, #12]
}
 8008380:	4618      	mov	r0, r3
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f89d 	bl	80084d0 <osSemaphoreRelease>
#endif
}
 8008396:	bf00      	nop
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800839e:	b480      	push	{r7}
 80083a0:	b083      	sub	sp, #12
 80083a2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083a4:	f3ef 8305 	mrs	r3, IPSR
 80083a8:	607b      	str	r3, [r7, #4]
  return(result);
 80083aa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	bf14      	ite	ne
 80083b0:	2301      	movne	r3, #1
 80083b2:	2300      	moveq	r3, #0
 80083b4:	b2db      	uxtb	r3, r3
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80083c6:	f001 f943 	bl	8009650 <vTaskStartScheduler>
  
  return osOK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af02      	add	r7, sp, #8
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00f      	beq.n	8008402 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d10a      	bne.n	80083fe <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	2203      	movs	r2, #3
 80083ee:	9200      	str	r2, [sp, #0]
 80083f0:	2200      	movs	r2, #0
 80083f2:	2100      	movs	r1, #0
 80083f4:	2001      	movs	r0, #1
 80083f6:	f000 f9d3 	bl	80087a0 <xQueueGenericCreateStatic>
 80083fa:	4603      	mov	r3, r0
 80083fc:	e016      	b.n	800842c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80083fe:	2300      	movs	r3, #0
 8008400:	e014      	b.n	800842c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d110      	bne.n	800842a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8008408:	2203      	movs	r2, #3
 800840a:	2100      	movs	r1, #0
 800840c:	2001      	movs	r0, #1
 800840e:	f000 fa44 	bl	800889a <xQueueGenericCreate>
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d005      	beq.n	8008426 <osSemaphoreCreate+0x56>
 800841a:	2300      	movs	r3, #0
 800841c:	2200      	movs	r2, #0
 800841e:	2100      	movs	r1, #0
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 fa95 	bl	8008950 <xQueueGenericSend>
      return sema;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	e000      	b.n	800842c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800842a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800842c:	4618      	mov	r0, r3
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800843e:	2300      	movs	r3, #0
 8008440:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d101      	bne.n	800844c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008448:	2380      	movs	r3, #128	@ 0x80
 800844a:	e03a      	b.n	80084c2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800844c:	2300      	movs	r3, #0
 800844e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008456:	d103      	bne.n	8008460 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008458:	f04f 33ff 	mov.w	r3, #4294967295
 800845c:	60fb      	str	r3, [r7, #12]
 800845e:	e009      	b.n	8008474 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d006      	beq.n	8008474 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d101      	bne.n	8008474 <osSemaphoreWait+0x40>
      ticks = 1;
 8008470:	2301      	movs	r3, #1
 8008472:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008474:	f7ff ff93 	bl	800839e <inHandlerMode>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d017      	beq.n	80084ae <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800847e:	f107 0308 	add.w	r3, r7, #8
 8008482:	461a      	mov	r2, r3
 8008484:	2100      	movs	r1, #0
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fd04 	bl	8008e94 <xQueueReceiveFromISR>
 800848c:	4603      	mov	r3, r0
 800848e:	2b01      	cmp	r3, #1
 8008490:	d001      	beq.n	8008496 <osSemaphoreWait+0x62>
      return osErrorOS;
 8008492:	23ff      	movs	r3, #255	@ 0xff
 8008494:	e015      	b.n	80084c2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d011      	beq.n	80084c0 <osSemaphoreWait+0x8c>
 800849c:	4b0b      	ldr	r3, [pc, #44]	@ (80084cc <osSemaphoreWait+0x98>)
 800849e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	e008      	b.n	80084c0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80084ae:	68f9      	ldr	r1, [r7, #12]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fbdf 	bl	8008c74 <xQueueSemaphoreTake>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d001      	beq.n	80084c0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80084bc:	23ff      	movs	r3, #255	@ 0xff
 80084be:	e000      	b.n	80084c2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	e000ed04 	.word	0xe000ed04

080084d0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80084d8:	2300      	movs	r3, #0
 80084da:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80084dc:	2300      	movs	r3, #0
 80084de:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80084e0:	f7ff ff5d 	bl	800839e <inHandlerMode>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d016      	beq.n	8008518 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80084ea:	f107 0308 	add.w	r3, r7, #8
 80084ee:	4619      	mov	r1, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fb2f 	bl	8008b54 <xQueueGiveFromISR>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d001      	beq.n	8008500 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80084fc:	23ff      	movs	r3, #255	@ 0xff
 80084fe:	e017      	b.n	8008530 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d013      	beq.n	800852e <osSemaphoreRelease+0x5e>
 8008506:	4b0c      	ldr	r3, [pc, #48]	@ (8008538 <osSemaphoreRelease+0x68>)
 8008508:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800850c:	601a      	str	r2, [r3, #0]
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	e00a      	b.n	800852e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008518:	2300      	movs	r3, #0
 800851a:	2200      	movs	r2, #0
 800851c:	2100      	movs	r1, #0
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fa16 	bl	8008950 <xQueueGenericSend>
 8008524:	4603      	mov	r3, r0
 8008526:	2b01      	cmp	r3, #1
 8008528:	d001      	beq.n	800852e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800852a:	23ff      	movs	r3, #255	@ 0xff
 800852c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800852e:	68fb      	ldr	r3, [r7, #12]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	e000ed04 	.word	0xe000ed04

0800853c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008544:	f7ff ff2b 	bl	800839e <inHandlerMode>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d001      	beq.n	8008552 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800854e:	2382      	movs	r3, #130	@ 0x82
 8008550:	e003      	b.n	800855a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fd20 	bl	8008f98 <vQueueDelete>

  return osOK; 
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008562:	b480      	push	{r7}
 8008564:	b083      	sub	sp, #12
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f103 0208 	add.w	r2, r3, #8
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f04f 32ff 	mov.w	r2, #4294967295
 800857a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f103 0208 	add.w	r2, r3, #8
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f103 0208 	add.w	r2, r3, #8
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008596:	bf00      	nop
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80085a2:	b480      	push	{r7}
 80085a4:	b083      	sub	sp, #12
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	689a      	ldr	r2, [r3, #8]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	683a      	ldr	r2, [r7, #0]
 80085e0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	683a      	ldr	r2, [r7, #0]
 80085e6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	1c5a      	adds	r2, r3, #1
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	601a      	str	r2, [r3, #0]
}
 80085f8:	bf00      	nop
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861a:	d103      	bne.n	8008624 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	60fb      	str	r3, [r7, #12]
 8008622:	e00c      	b.n	800863e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	3308      	adds	r3, #8
 8008628:	60fb      	str	r3, [r7, #12]
 800862a:	e002      	b.n	8008632 <vListInsert+0x2e>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	60fb      	str	r3, [r7, #12]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68ba      	ldr	r2, [r7, #8]
 800863a:	429a      	cmp	r2, r3
 800863c:	d2f6      	bcs.n	800862c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	685a      	ldr	r2, [r3, #4]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	1c5a      	adds	r2, r3, #1
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	601a      	str	r2, [r3, #0]
}
 800866a:	bf00      	nop
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008676:	b480      	push	{r7}
 8008678:	b085      	sub	sp, #20
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	6892      	ldr	r2, [r2, #8]
 800868c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	6852      	ldr	r2, [r2, #4]
 8008696:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d103      	bne.n	80086aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	689a      	ldr	r2, [r3, #8]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	1e5a      	subs	r2, r3, #1
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3714      	adds	r7, #20
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
	...

080086cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10b      	bne.n	80086f8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80086e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80086f2:	bf00      	nop
 80086f4:	bf00      	nop
 80086f6:	e7fd      	b.n	80086f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80086f8:	f001 ff1e 	bl	800a538 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008704:	68f9      	ldr	r1, [r7, #12]
 8008706:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008708:	fb01 f303 	mul.w	r3, r1, r3
 800870c:	441a      	add	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008728:	3b01      	subs	r3, #1
 800872a:	68f9      	ldr	r1, [r7, #12]
 800872c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800872e:	fb01 f303 	mul.w	r3, r1, r3
 8008732:	441a      	add	r2, r3
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	22ff      	movs	r2, #255	@ 0xff
 800873c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	22ff      	movs	r2, #255	@ 0xff
 8008744:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d114      	bne.n	8008778 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d01a      	beq.n	800878c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	3310      	adds	r3, #16
 800875a:	4618      	mov	r0, r3
 800875c:	f001 f9d2 	bl	8009b04 <xTaskRemoveFromEventList>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d012      	beq.n	800878c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008766:	4b0d      	ldr	r3, [pc, #52]	@ (800879c <xQueueGenericReset+0xd0>)
 8008768:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800876c:	601a      	str	r2, [r3, #0]
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	e009      	b.n	800878c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3310      	adds	r3, #16
 800877c:	4618      	mov	r0, r3
 800877e:	f7ff fef0 	bl	8008562 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	3324      	adds	r3, #36	@ 0x24
 8008786:	4618      	mov	r0, r3
 8008788:	f7ff feeb 	bl	8008562 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800878c:	f001 ff06 	bl	800a59c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008790:	2301      	movs	r3, #1
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	e000ed04 	.word	0xe000ed04

080087a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b08e      	sub	sp, #56	@ 0x38
 80087a4:	af02      	add	r7, sp, #8
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
 80087ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10b      	bne.n	80087cc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80087b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80087c6:	bf00      	nop
 80087c8:	bf00      	nop
 80087ca:	e7fd      	b.n	80087c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10b      	bne.n	80087ea <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80087e4:	bf00      	nop
 80087e6:	bf00      	nop
 80087e8:	e7fd      	b.n	80087e6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <xQueueGenericCreateStatic+0x56>
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d001      	beq.n	80087fa <xQueueGenericCreateStatic+0x5a>
 80087f6:	2301      	movs	r3, #1
 80087f8:	e000      	b.n	80087fc <xQueueGenericCreateStatic+0x5c>
 80087fa:	2300      	movs	r3, #0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d10b      	bne.n	8008818 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	623b      	str	r3, [r7, #32]
}
 8008812:	bf00      	nop
 8008814:	bf00      	nop
 8008816:	e7fd      	b.n	8008814 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d102      	bne.n	8008824 <xQueueGenericCreateStatic+0x84>
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d101      	bne.n	8008828 <xQueueGenericCreateStatic+0x88>
 8008824:	2301      	movs	r3, #1
 8008826:	e000      	b.n	800882a <xQueueGenericCreateStatic+0x8a>
 8008828:	2300      	movs	r3, #0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10b      	bne.n	8008846 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	61fb      	str	r3, [r7, #28]
}
 8008840:	bf00      	nop
 8008842:	bf00      	nop
 8008844:	e7fd      	b.n	8008842 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008846:	2348      	movs	r3, #72	@ 0x48
 8008848:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	2b48      	cmp	r3, #72	@ 0x48
 800884e:	d00b      	beq.n	8008868 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	61bb      	str	r3, [r7, #24]
}
 8008862:	bf00      	nop
 8008864:	bf00      	nop
 8008866:	e7fd      	b.n	8008864 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008868:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800886e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00d      	beq.n	8008890 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800887c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008882:	9300      	str	r3, [sp, #0]
 8008884:	4613      	mov	r3, r2
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	68b9      	ldr	r1, [r7, #8]
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f000 f840 	bl	8008910 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008892:	4618      	mov	r0, r3
 8008894:	3730      	adds	r7, #48	@ 0x30
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800889a:	b580      	push	{r7, lr}
 800889c:	b08a      	sub	sp, #40	@ 0x28
 800889e:	af02      	add	r7, sp, #8
 80088a0:	60f8      	str	r0, [r7, #12]
 80088a2:	60b9      	str	r1, [r7, #8]
 80088a4:	4613      	mov	r3, r2
 80088a6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d10b      	bne.n	80088c6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80088ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b2:	f383 8811 	msr	BASEPRI, r3
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	613b      	str	r3, [r7, #16]
}
 80088c0:	bf00      	nop
 80088c2:	bf00      	nop
 80088c4:	e7fd      	b.n	80088c2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	68ba      	ldr	r2, [r7, #8]
 80088ca:	fb02 f303 	mul.w	r3, r2, r3
 80088ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	3348      	adds	r3, #72	@ 0x48
 80088d4:	4618      	mov	r0, r3
 80088d6:	f001 ff51 	bl	800a77c <pvPortMalloc>
 80088da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d011      	beq.n	8008906 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	3348      	adds	r3, #72	@ 0x48
 80088ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80088f4:	79fa      	ldrb	r2, [r7, #7]
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	4613      	mov	r3, r2
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	68b9      	ldr	r1, [r7, #8]
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f000 f805 	bl	8008910 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008906:	69bb      	ldr	r3, [r7, #24]
	}
 8008908:	4618      	mov	r0, r3
 800890a:	3720      	adds	r7, #32
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
 800891c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d103      	bne.n	800892c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	69ba      	ldr	r2, [r7, #24]
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	e002      	b.n	8008932 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800893e:	2101      	movs	r1, #1
 8008940:	69b8      	ldr	r0, [r7, #24]
 8008942:	f7ff fec3 	bl	80086cc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008946:	bf00      	nop
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
	...

08008950 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b08e      	sub	sp, #56	@ 0x38
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	607a      	str	r2, [r7, #4]
 800895c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800895e:	2300      	movs	r3, #0
 8008960:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008968:	2b00      	cmp	r3, #0
 800896a:	d10b      	bne.n	8008984 <xQueueGenericSend+0x34>
	__asm volatile
 800896c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008970:	f383 8811 	msr	BASEPRI, r3
 8008974:	f3bf 8f6f 	isb	sy
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800897e:	bf00      	nop
 8008980:	bf00      	nop
 8008982:	e7fd      	b.n	8008980 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d103      	bne.n	8008992 <xQueueGenericSend+0x42>
 800898a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800898e:	2b00      	cmp	r3, #0
 8008990:	d101      	bne.n	8008996 <xQueueGenericSend+0x46>
 8008992:	2301      	movs	r3, #1
 8008994:	e000      	b.n	8008998 <xQueueGenericSend+0x48>
 8008996:	2300      	movs	r3, #0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d10b      	bne.n	80089b4 <xQueueGenericSend+0x64>
	__asm volatile
 800899c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a0:	f383 8811 	msr	BASEPRI, r3
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089ae:	bf00      	nop
 80089b0:	bf00      	nop
 80089b2:	e7fd      	b.n	80089b0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d103      	bne.n	80089c2 <xQueueGenericSend+0x72>
 80089ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d101      	bne.n	80089c6 <xQueueGenericSend+0x76>
 80089c2:	2301      	movs	r3, #1
 80089c4:	e000      	b.n	80089c8 <xQueueGenericSend+0x78>
 80089c6:	2300      	movs	r3, #0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10b      	bne.n	80089e4 <xQueueGenericSend+0x94>
	__asm volatile
 80089cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d0:	f383 8811 	msr	BASEPRI, r3
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	623b      	str	r3, [r7, #32]
}
 80089de:	bf00      	nop
 80089e0:	bf00      	nop
 80089e2:	e7fd      	b.n	80089e0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089e4:	f001 fa54 	bl	8009e90 <xTaskGetSchedulerState>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d102      	bne.n	80089f4 <xQueueGenericSend+0xa4>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d101      	bne.n	80089f8 <xQueueGenericSend+0xa8>
 80089f4:	2301      	movs	r3, #1
 80089f6:	e000      	b.n	80089fa <xQueueGenericSend+0xaa>
 80089f8:	2300      	movs	r3, #0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10b      	bne.n	8008a16 <xQueueGenericSend+0xc6>
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	61fb      	str	r3, [r7, #28]
}
 8008a10:	bf00      	nop
 8008a12:	bf00      	nop
 8008a14:	e7fd      	b.n	8008a12 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a16:	f001 fd8f 	bl	800a538 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d302      	bcc.n	8008a2c <xQueueGenericSend+0xdc>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d129      	bne.n	8008a80 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a2c:	683a      	ldr	r2, [r7, #0]
 8008a2e:	68b9      	ldr	r1, [r7, #8]
 8008a30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a32:	f000 faed 	bl	8009010 <prvCopyDataToQueue>
 8008a36:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d010      	beq.n	8008a62 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a42:	3324      	adds	r3, #36	@ 0x24
 8008a44:	4618      	mov	r0, r3
 8008a46:	f001 f85d 	bl	8009b04 <xTaskRemoveFromEventList>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d013      	beq.n	8008a78 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a50:	4b3f      	ldr	r3, [pc, #252]	@ (8008b50 <xQueueGenericSend+0x200>)
 8008a52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a56:	601a      	str	r2, [r3, #0]
 8008a58:	f3bf 8f4f 	dsb	sy
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	e00a      	b.n	8008a78 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d007      	beq.n	8008a78 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008a68:	4b39      	ldr	r3, [pc, #228]	@ (8008b50 <xQueueGenericSend+0x200>)
 8008a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a6e:	601a      	str	r2, [r3, #0]
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008a78:	f001 fd90 	bl	800a59c <vPortExitCritical>
				return pdPASS;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e063      	b.n	8008b48 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d103      	bne.n	8008a8e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a86:	f001 fd89 	bl	800a59c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	e05c      	b.n	8008b48 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d106      	bne.n	8008aa2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a94:	f107 0314 	add.w	r3, r7, #20
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f001 f897 	bl	8009bcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008aa2:	f001 fd7b 	bl	800a59c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008aa6:	f000 fe3d 	bl	8009724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008aaa:	f001 fd45 	bl	800a538 <vPortEnterCritical>
 8008aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ab4:	b25b      	sxtb	r3, r3
 8008ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aba:	d103      	bne.n	8008ac4 <xQueueGenericSend+0x174>
 8008abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008aca:	b25b      	sxtb	r3, r3
 8008acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad0:	d103      	bne.n	8008ada <xQueueGenericSend+0x18a>
 8008ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ada:	f001 fd5f 	bl	800a59c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ade:	1d3a      	adds	r2, r7, #4
 8008ae0:	f107 0314 	add.w	r3, r7, #20
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f001 f886 	bl	8009bf8 <xTaskCheckForTimeOut>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d124      	bne.n	8008b3c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008af2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008af4:	f000 fb84 	bl	8009200 <prvIsQueueFull>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d018      	beq.n	8008b30 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b00:	3310      	adds	r3, #16
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	4611      	mov	r1, r2
 8008b06:	4618      	mov	r0, r3
 8008b08:	f000 ffd6 	bl	8009ab8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b0e:	f000 fb0f 	bl	8009130 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b12:	f000 fe15 	bl	8009740 <xTaskResumeAll>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f47f af7c 	bne.w	8008a16 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8008b50 <xQueueGenericSend+0x200>)
 8008b20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b24:	601a      	str	r2, [r3, #0]
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	e772      	b.n	8008a16 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b32:	f000 fafd 	bl	8009130 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b36:	f000 fe03 	bl	8009740 <xTaskResumeAll>
 8008b3a:	e76c      	b.n	8008a16 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b3e:	f000 faf7 	bl	8009130 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b42:	f000 fdfd 	bl	8009740 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3738      	adds	r7, #56	@ 0x38
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	e000ed04 	.word	0xe000ed04

08008b54 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b08e      	sub	sp, #56	@ 0x38
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10b      	bne.n	8008b80 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b6c:	f383 8811 	msr	BASEPRI, r3
 8008b70:	f3bf 8f6f 	isb	sy
 8008b74:	f3bf 8f4f 	dsb	sy
 8008b78:	623b      	str	r3, [r7, #32]
}
 8008b7a:	bf00      	nop
 8008b7c:	bf00      	nop
 8008b7e:	e7fd      	b.n	8008b7c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00b      	beq.n	8008ba0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8c:	f383 8811 	msr	BASEPRI, r3
 8008b90:	f3bf 8f6f 	isb	sy
 8008b94:	f3bf 8f4f 	dsb	sy
 8008b98:	61fb      	str	r3, [r7, #28]
}
 8008b9a:	bf00      	nop
 8008b9c:	bf00      	nop
 8008b9e:	e7fd      	b.n	8008b9c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d103      	bne.n	8008bb0 <xQueueGiveFromISR+0x5c>
 8008ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d101      	bne.n	8008bb4 <xQueueGiveFromISR+0x60>
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e000      	b.n	8008bb6 <xQueueGiveFromISR+0x62>
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10b      	bne.n	8008bd2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bbe:	f383 8811 	msr	BASEPRI, r3
 8008bc2:	f3bf 8f6f 	isb	sy
 8008bc6:	f3bf 8f4f 	dsb	sy
 8008bca:	61bb      	str	r3, [r7, #24]
}
 8008bcc:	bf00      	nop
 8008bce:	bf00      	nop
 8008bd0:	e7fd      	b.n	8008bce <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008bd2:	f001 fd91 	bl	800a6f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008bd6:	f3ef 8211 	mrs	r2, BASEPRI
 8008bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	617a      	str	r2, [r7, #20]
 8008bec:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008bee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bf6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d22b      	bcs.n	8008c5a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0e:	1c5a      	adds	r2, r3, #1
 8008c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c12:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c14:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c1c:	d112      	bne.n	8008c44 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d016      	beq.n	8008c54 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c28:	3324      	adds	r3, #36	@ 0x24
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 ff6a 	bl	8009b04 <xTaskRemoveFromEventList>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00e      	beq.n	8008c54 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00b      	beq.n	8008c54 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	601a      	str	r2, [r3, #0]
 8008c42:	e007      	b.n	8008c54 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c48:	3301      	adds	r3, #1
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	b25a      	sxtb	r2, r3
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008c54:	2301      	movs	r3, #1
 8008c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c58:	e001      	b.n	8008c5e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c60:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c68:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3738      	adds	r7, #56	@ 0x38
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b08e      	sub	sp, #56	@ 0x38
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008c86:	2300      	movs	r3, #0
 8008c88:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10b      	bne.n	8008ca8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	623b      	str	r3, [r7, #32]
}
 8008ca2:	bf00      	nop
 8008ca4:	bf00      	nop
 8008ca6:	e7fd      	b.n	8008ca4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00b      	beq.n	8008cc8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	61fb      	str	r3, [r7, #28]
}
 8008cc2:	bf00      	nop
 8008cc4:	bf00      	nop
 8008cc6:	e7fd      	b.n	8008cc4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cc8:	f001 f8e2 	bl	8009e90 <xTaskGetSchedulerState>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d102      	bne.n	8008cd8 <xQueueSemaphoreTake+0x64>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d101      	bne.n	8008cdc <xQueueSemaphoreTake+0x68>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e000      	b.n	8008cde <xQueueSemaphoreTake+0x6a>
 8008cdc:	2300      	movs	r3, #0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10b      	bne.n	8008cfa <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	61bb      	str	r3, [r7, #24]
}
 8008cf4:	bf00      	nop
 8008cf6:	bf00      	nop
 8008cf8:	e7fd      	b.n	8008cf6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cfa:	f001 fc1d 	bl	800a538 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d02:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d024      	beq.n	8008d54 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0c:	1e5a      	subs	r2, r3, #1
 8008d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d10:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d104      	bne.n	8008d24 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008d1a:	f001 fa65 	bl	800a1e8 <pvTaskIncrementMutexHeldCount>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d22:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00f      	beq.n	8008d4c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d2e:	3310      	adds	r3, #16
 8008d30:	4618      	mov	r0, r3
 8008d32:	f000 fee7 	bl	8009b04 <xTaskRemoveFromEventList>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d007      	beq.n	8008d4c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d3c:	4b54      	ldr	r3, [pc, #336]	@ (8008e90 <xQueueSemaphoreTake+0x21c>)
 8008d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d4c:	f001 fc26 	bl	800a59c <vPortExitCritical>
				return pdPASS;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e098      	b.n	8008e86 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d112      	bne.n	8008d80 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00b      	beq.n	8008d78 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d64:	f383 8811 	msr	BASEPRI, r3
 8008d68:	f3bf 8f6f 	isb	sy
 8008d6c:	f3bf 8f4f 	dsb	sy
 8008d70:	617b      	str	r3, [r7, #20]
}
 8008d72:	bf00      	nop
 8008d74:	bf00      	nop
 8008d76:	e7fd      	b.n	8008d74 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008d78:	f001 fc10 	bl	800a59c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	e082      	b.n	8008e86 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d106      	bne.n	8008d94 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d86:	f107 030c 	add.w	r3, r7, #12
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f000 ff1e 	bl	8009bcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d90:	2301      	movs	r3, #1
 8008d92:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d94:	f001 fc02 	bl	800a59c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d98:	f000 fcc4 	bl	8009724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d9c:	f001 fbcc 	bl	800a538 <vPortEnterCritical>
 8008da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008da6:	b25b      	sxtb	r3, r3
 8008da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dac:	d103      	bne.n	8008db6 <xQueueSemaphoreTake+0x142>
 8008dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008dbc:	b25b      	sxtb	r3, r3
 8008dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc2:	d103      	bne.n	8008dcc <xQueueSemaphoreTake+0x158>
 8008dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008dcc:	f001 fbe6 	bl	800a59c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008dd0:	463a      	mov	r2, r7
 8008dd2:	f107 030c 	add.w	r3, r7, #12
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 ff0d 	bl	8009bf8 <xTaskCheckForTimeOut>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d132      	bne.n	8008e4a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008de4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008de6:	f000 f9f5 	bl	80091d4 <prvIsQueueEmpty>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d026      	beq.n	8008e3e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d109      	bne.n	8008e0c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008df8:	f001 fb9e 	bl	800a538 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f001 f863 	bl	8009ecc <xTaskPriorityInherit>
 8008e06:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008e08:	f001 fbc8 	bl	800a59c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e0e:	3324      	adds	r3, #36	@ 0x24
 8008e10:	683a      	ldr	r2, [r7, #0]
 8008e12:	4611      	mov	r1, r2
 8008e14:	4618      	mov	r0, r3
 8008e16:	f000 fe4f 	bl	8009ab8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e1c:	f000 f988 	bl	8009130 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e20:	f000 fc8e 	bl	8009740 <xTaskResumeAll>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f47f af67 	bne.w	8008cfa <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008e2c:	4b18      	ldr	r3, [pc, #96]	@ (8008e90 <xQueueSemaphoreTake+0x21c>)
 8008e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	f3bf 8f4f 	dsb	sy
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	e75d      	b.n	8008cfa <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008e3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e40:	f000 f976 	bl	8009130 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e44:	f000 fc7c 	bl	8009740 <xTaskResumeAll>
 8008e48:	e757      	b.n	8008cfa <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008e4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e4c:	f000 f970 	bl	8009130 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e50:	f000 fc76 	bl	8009740 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e56:	f000 f9bd 	bl	80091d4 <prvIsQueueEmpty>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f43f af4c 	beq.w	8008cfa <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00d      	beq.n	8008e84 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008e68:	f001 fb66 	bl	800a538 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008e6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e6e:	f000 f8b7 	bl	8008fe0 <prvGetDisinheritPriorityAfterTimeout>
 8008e72:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f001 f924 	bl	800a0c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008e80:	f001 fb8c 	bl	800a59c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3738      	adds	r7, #56	@ 0x38
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	e000ed04 	.word	0xe000ed04

08008e94 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b08e      	sub	sp, #56	@ 0x38
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d10b      	bne.n	8008ec2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eae:	f383 8811 	msr	BASEPRI, r3
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	623b      	str	r3, [r7, #32]
}
 8008ebc:	bf00      	nop
 8008ebe:	bf00      	nop
 8008ec0:	e7fd      	b.n	8008ebe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d103      	bne.n	8008ed0 <xQueueReceiveFromISR+0x3c>
 8008ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d101      	bne.n	8008ed4 <xQueueReceiveFromISR+0x40>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e000      	b.n	8008ed6 <xQueueReceiveFromISR+0x42>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10b      	bne.n	8008ef2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	61fb      	str	r3, [r7, #28]
}
 8008eec:	bf00      	nop
 8008eee:	bf00      	nop
 8008ef0:	e7fd      	b.n	8008eee <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ef2:	f001 fc01 	bl	800a6f8 <vPortValidateInterruptPriority>
	__asm volatile
 8008ef6:	f3ef 8211 	mrs	r2, BASEPRI
 8008efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008efe:	f383 8811 	msr	BASEPRI, r3
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	61ba      	str	r2, [r7, #24]
 8008f0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008f0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f16:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d02f      	beq.n	8008f7e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f28:	68b9      	ldr	r1, [r7, #8]
 8008f2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f2c:	f000 f8da 	bl	80090e4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f32:	1e5a      	subs	r2, r3, #1
 8008f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f36:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008f38:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f40:	d112      	bne.n	8008f68 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d016      	beq.n	8008f78 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4c:	3310      	adds	r3, #16
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 fdd8 	bl	8009b04 <xTaskRemoveFromEventList>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00e      	beq.n	8008f78 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00b      	beq.n	8008f78 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	e007      	b.n	8008f78 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008f68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	b25a      	sxtb	r2, r3
 8008f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f7c:	e001      	b.n	8008f82 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f84:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	f383 8811 	msr	BASEPRI, r3
}
 8008f8c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3738      	adds	r7, #56	@ 0x38
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d10b      	bne.n	8008fc2 <vQueueDelete+0x2a>
	__asm volatile
 8008faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fae:	f383 8811 	msr	BASEPRI, r3
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	60bb      	str	r3, [r7, #8]
}
 8008fbc:	bf00      	nop
 8008fbe:	bf00      	nop
 8008fc0:	e7fd      	b.n	8008fbe <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f000 f934 	bl	8009230 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d102      	bne.n	8008fd8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f001 fca0 	bl	800a918 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008fd8:	bf00      	nop
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d006      	beq.n	8008ffe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f1c3 0307 	rsb	r3, r3, #7
 8008ffa:	60fb      	str	r3, [r7, #12]
 8008ffc:	e001      	b.n	8009002 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008ffe:	2300      	movs	r3, #0
 8009000:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009002:	68fb      	ldr	r3, [r7, #12]
	}
 8009004:	4618      	mov	r0, r3
 8009006:	3714      	adds	r7, #20
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800901c:	2300      	movs	r3, #0
 800901e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009024:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10d      	bne.n	800904a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d14d      	bne.n	80090d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	4618      	mov	r0, r3
 800903c:	f000 ffbc 	bl	8009fb8 <xTaskPriorityDisinherit>
 8009040:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2200      	movs	r2, #0
 8009046:	609a      	str	r2, [r3, #8]
 8009048:	e043      	b.n	80090d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d119      	bne.n	8009084 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6858      	ldr	r0, [r3, #4]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009058:	461a      	mov	r2, r3
 800905a:	68b9      	ldr	r1, [r7, #8]
 800905c:	f002 fde3 	bl	800bc26 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	685a      	ldr	r2, [r3, #4]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009068:	441a      	add	r2, r3
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	685a      	ldr	r2, [r3, #4]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	429a      	cmp	r2, r3
 8009078:	d32b      	bcc.n	80090d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	605a      	str	r2, [r3, #4]
 8009082:	e026      	b.n	80090d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	68d8      	ldr	r0, [r3, #12]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800908c:	461a      	mov	r2, r3
 800908e:	68b9      	ldr	r1, [r7, #8]
 8009090:	f002 fdc9 	bl	800bc26 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	68da      	ldr	r2, [r3, #12]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800909c:	425b      	negs	r3, r3
 800909e:	441a      	add	r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	68da      	ldr	r2, [r3, #12]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d207      	bcs.n	80090c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	689a      	ldr	r2, [r3, #8]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b8:	425b      	negs	r3, r3
 80090ba:	441a      	add	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d105      	bne.n	80090d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d002      	beq.n	80090d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	3b01      	subs	r3, #1
 80090d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	1c5a      	adds	r2, r3, #1
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80090da:	697b      	ldr	r3, [r7, #20]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3718      	adds	r7, #24
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d018      	beq.n	8009128 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	68da      	ldr	r2, [r3, #12]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090fe:	441a      	add	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	68da      	ldr	r2, [r3, #12]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	429a      	cmp	r2, r3
 800910e:	d303      	bcc.n	8009118 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	68d9      	ldr	r1, [r3, #12]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009120:	461a      	mov	r2, r3
 8009122:	6838      	ldr	r0, [r7, #0]
 8009124:	f002 fd7f 	bl	800bc26 <memcpy>
	}
}
 8009128:	bf00      	nop
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009138:	f001 f9fe 	bl	800a538 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009142:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009144:	e011      	b.n	800916a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800914a:	2b00      	cmp	r3, #0
 800914c:	d012      	beq.n	8009174 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	3324      	adds	r3, #36	@ 0x24
 8009152:	4618      	mov	r0, r3
 8009154:	f000 fcd6 	bl	8009b04 <xTaskRemoveFromEventList>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d001      	beq.n	8009162 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800915e:	f000 fdaf 	bl	8009cc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009162:	7bfb      	ldrb	r3, [r7, #15]
 8009164:	3b01      	subs	r3, #1
 8009166:	b2db      	uxtb	r3, r3
 8009168:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800916a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800916e:	2b00      	cmp	r3, #0
 8009170:	dce9      	bgt.n	8009146 <prvUnlockQueue+0x16>
 8009172:	e000      	b.n	8009176 <prvUnlockQueue+0x46>
					break;
 8009174:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	22ff      	movs	r2, #255	@ 0xff
 800917a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800917e:	f001 fa0d 	bl	800a59c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009182:	f001 f9d9 	bl	800a538 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800918c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800918e:	e011      	b.n	80091b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d012      	beq.n	80091be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	3310      	adds	r3, #16
 800919c:	4618      	mov	r0, r3
 800919e:	f000 fcb1 	bl	8009b04 <xTaskRemoveFromEventList>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d001      	beq.n	80091ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80091a8:	f000 fd8a 	bl	8009cc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80091ac:	7bbb      	ldrb	r3, [r7, #14]
 80091ae:	3b01      	subs	r3, #1
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	dce9      	bgt.n	8009190 <prvUnlockQueue+0x60>
 80091bc:	e000      	b.n	80091c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80091be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	22ff      	movs	r2, #255	@ 0xff
 80091c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80091c8:	f001 f9e8 	bl	800a59c <vPortExitCritical>
}
 80091cc:	bf00      	nop
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091dc:	f001 f9ac 	bl	800a538 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d102      	bne.n	80091ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80091e8:	2301      	movs	r3, #1
 80091ea:	60fb      	str	r3, [r7, #12]
 80091ec:	e001      	b.n	80091f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80091ee:	2300      	movs	r3, #0
 80091f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091f2:	f001 f9d3 	bl	800a59c <vPortExitCritical>

	return xReturn;
 80091f6:	68fb      	ldr	r3, [r7, #12]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009208:	f001 f996 	bl	800a538 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009214:	429a      	cmp	r2, r3
 8009216:	d102      	bne.n	800921e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009218:	2301      	movs	r3, #1
 800921a:	60fb      	str	r3, [r7, #12]
 800921c:	e001      	b.n	8009222 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800921e:	2300      	movs	r3, #0
 8009220:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009222:	f001 f9bb 	bl	800a59c <vPortExitCritical>

	return xReturn;
 8009226:	68fb      	ldr	r3, [r7, #12]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009238:	2300      	movs	r3, #0
 800923a:	60fb      	str	r3, [r7, #12]
 800923c:	e016      	b.n	800926c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800923e:	4a10      	ldr	r2, [pc, #64]	@ (8009280 <vQueueUnregisterQueue+0x50>)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	00db      	lsls	r3, r3, #3
 8009244:	4413      	add	r3, r2
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	429a      	cmp	r2, r3
 800924c:	d10b      	bne.n	8009266 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800924e:	4a0c      	ldr	r2, [pc, #48]	@ (8009280 <vQueueUnregisterQueue+0x50>)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2100      	movs	r1, #0
 8009254:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009258:	4a09      	ldr	r2, [pc, #36]	@ (8009280 <vQueueUnregisterQueue+0x50>)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	00db      	lsls	r3, r3, #3
 800925e:	4413      	add	r3, r2
 8009260:	2200      	movs	r2, #0
 8009262:	605a      	str	r2, [r3, #4]
				break;
 8009264:	e006      	b.n	8009274 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	3301      	adds	r3, #1
 800926a:	60fb      	str	r3, [r7, #12]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2b07      	cmp	r3, #7
 8009270:	d9e5      	bls.n	800923e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009272:	bf00      	nop
 8009274:	bf00      	nop
 8009276:	3714      	adds	r7, #20
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	20000b14 	.word	0x20000b14

08009284 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009284:	b580      	push	{r7, lr}
 8009286:	b08e      	sub	sp, #56	@ 0x38
 8009288:	af04      	add	r7, sp, #16
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	607a      	str	r2, [r7, #4]
 8009290:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009294:	2b00      	cmp	r3, #0
 8009296:	d10b      	bne.n	80092b0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800929c:	f383 8811 	msr	BASEPRI, r3
 80092a0:	f3bf 8f6f 	isb	sy
 80092a4:	f3bf 8f4f 	dsb	sy
 80092a8:	623b      	str	r3, [r7, #32]
}
 80092aa:	bf00      	nop
 80092ac:	bf00      	nop
 80092ae:	e7fd      	b.n	80092ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80092b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10b      	bne.n	80092ce <xTaskCreateStatic+0x4a>
	__asm volatile
 80092b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	61fb      	str	r3, [r7, #28]
}
 80092c8:	bf00      	nop
 80092ca:	bf00      	nop
 80092cc:	e7fd      	b.n	80092ca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80092ce:	23a0      	movs	r3, #160	@ 0xa0
 80092d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	2ba0      	cmp	r3, #160	@ 0xa0
 80092d6:	d00b      	beq.n	80092f0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80092d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092dc:	f383 8811 	msr	BASEPRI, r3
 80092e0:	f3bf 8f6f 	isb	sy
 80092e4:	f3bf 8f4f 	dsb	sy
 80092e8:	61bb      	str	r3, [r7, #24]
}
 80092ea:	bf00      	nop
 80092ec:	bf00      	nop
 80092ee:	e7fd      	b.n	80092ec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80092f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80092f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d01e      	beq.n	8009336 <xTaskCreateStatic+0xb2>
 80092f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d01b      	beq.n	8009336 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009300:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009304:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009306:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800930a:	2202      	movs	r2, #2
 800930c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009310:	2300      	movs	r3, #0
 8009312:	9303      	str	r3, [sp, #12]
 8009314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009316:	9302      	str	r3, [sp, #8]
 8009318:	f107 0314 	add.w	r3, r7, #20
 800931c:	9301      	str	r3, [sp, #4]
 800931e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009320:	9300      	str	r3, [sp, #0]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	68b9      	ldr	r1, [r7, #8]
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 f851 	bl	80093d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800932e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009330:	f000 f8ee 	bl	8009510 <prvAddNewTaskToReadyList>
 8009334:	e001      	b.n	800933a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009336:	2300      	movs	r3, #0
 8009338:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800933a:	697b      	ldr	r3, [r7, #20]
	}
 800933c:	4618      	mov	r0, r3
 800933e:	3728      	adds	r7, #40	@ 0x28
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009344:	b580      	push	{r7, lr}
 8009346:	b08c      	sub	sp, #48	@ 0x30
 8009348:	af04      	add	r7, sp, #16
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	603b      	str	r3, [r7, #0]
 8009350:	4613      	mov	r3, r2
 8009352:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009354:	88fb      	ldrh	r3, [r7, #6]
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4618      	mov	r0, r3
 800935a:	f001 fa0f 	bl	800a77c <pvPortMalloc>
 800935e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00e      	beq.n	8009384 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009366:	20a0      	movs	r0, #160	@ 0xa0
 8009368:	f001 fa08 	bl	800a77c <pvPortMalloc>
 800936c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d003      	beq.n	800937c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	697a      	ldr	r2, [r7, #20]
 8009378:	631a      	str	r2, [r3, #48]	@ 0x30
 800937a:	e005      	b.n	8009388 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800937c:	6978      	ldr	r0, [r7, #20]
 800937e:	f001 facb 	bl	800a918 <vPortFree>
 8009382:	e001      	b.n	8009388 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009384:	2300      	movs	r3, #0
 8009386:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d017      	beq.n	80093be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	2200      	movs	r2, #0
 8009392:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009396:	88fa      	ldrh	r2, [r7, #6]
 8009398:	2300      	movs	r3, #0
 800939a:	9303      	str	r3, [sp, #12]
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	9302      	str	r3, [sp, #8]
 80093a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a2:	9301      	str	r3, [sp, #4]
 80093a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	68b9      	ldr	r1, [r7, #8]
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f000 f80f 	bl	80093d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093b2:	69f8      	ldr	r0, [r7, #28]
 80093b4:	f000 f8ac 	bl	8009510 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80093b8:	2301      	movs	r3, #1
 80093ba:	61bb      	str	r3, [r7, #24]
 80093bc:	e002      	b.n	80093c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80093be:	f04f 33ff 	mov.w	r3, #4294967295
 80093c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80093c4:	69bb      	ldr	r3, [r7, #24]
	}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3720      	adds	r7, #32
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
	...

080093d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b088      	sub	sp, #32
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
 80093dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80093de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80093e8:	3b01      	subs	r3, #1
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	4413      	add	r3, r2
 80093ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	f023 0307 	bic.w	r3, r3, #7
 80093f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	f003 0307 	and.w	r3, r3, #7
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00b      	beq.n	800941a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8009402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009406:	f383 8811 	msr	BASEPRI, r3
 800940a:	f3bf 8f6f 	isb	sy
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	617b      	str	r3, [r7, #20]
}
 8009414:	bf00      	nop
 8009416:	bf00      	nop
 8009418:	e7fd      	b.n	8009416 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d01f      	beq.n	8009460 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009420:	2300      	movs	r3, #0
 8009422:	61fb      	str	r3, [r7, #28]
 8009424:	e012      	b.n	800944c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	4413      	add	r3, r2
 800942c:	7819      	ldrb	r1, [r3, #0]
 800942e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	4413      	add	r3, r2
 8009434:	3334      	adds	r3, #52	@ 0x34
 8009436:	460a      	mov	r2, r1
 8009438:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	4413      	add	r3, r2
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d006      	beq.n	8009454 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	3301      	adds	r3, #1
 800944a:	61fb      	str	r3, [r7, #28]
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	2b0f      	cmp	r3, #15
 8009450:	d9e9      	bls.n	8009426 <prvInitialiseNewTask+0x56>
 8009452:	e000      	b.n	8009456 <prvInitialiseNewTask+0x86>
			{
				break;
 8009454:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009458:	2200      	movs	r2, #0
 800945a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800945e:	e003      	b.n	8009468 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009462:	2200      	movs	r2, #0
 8009464:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946a:	2b06      	cmp	r3, #6
 800946c:	d901      	bls.n	8009472 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800946e:	2306      	movs	r3, #6
 8009470:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009474:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009476:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800947c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800947e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009480:	2200      	movs	r2, #0
 8009482:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009486:	3304      	adds	r3, #4
 8009488:	4618      	mov	r0, r3
 800948a:	f7ff f88a 	bl	80085a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800948e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009490:	3318      	adds	r3, #24
 8009492:	4618      	mov	r0, r3
 8009494:	f7ff f885 	bl	80085a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800949c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800949e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a0:	f1c3 0207 	rsb	r2, r3, #7
 80094a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80094a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094ac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80094ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b0:	2200      	movs	r2, #0
 80094b2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80094b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80094be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c0:	334c      	adds	r3, #76	@ 0x4c
 80094c2:	224c      	movs	r2, #76	@ 0x4c
 80094c4:	2100      	movs	r1, #0
 80094c6:	4618      	mov	r0, r3
 80094c8:	f002 fad7 	bl	800ba7a <memset>
 80094cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ce:	4a0d      	ldr	r2, [pc, #52]	@ (8009504 <prvInitialiseNewTask+0x134>)
 80094d0:	651a      	str	r2, [r3, #80]	@ 0x50
 80094d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d4:	4a0c      	ldr	r2, [pc, #48]	@ (8009508 <prvInitialiseNewTask+0x138>)
 80094d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80094d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094da:	4a0c      	ldr	r2, [pc, #48]	@ (800950c <prvInitialiseNewTask+0x13c>)
 80094dc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80094de:	683a      	ldr	r2, [r7, #0]
 80094e0:	68f9      	ldr	r1, [r7, #12]
 80094e2:	69b8      	ldr	r0, [r7, #24]
 80094e4:	f000 fefa 	bl	800a2dc <pxPortInitialiseStack>
 80094e8:	4602      	mov	r2, r0
 80094ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80094ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d002      	beq.n	80094fa <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80094f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094fa:	bf00      	nop
 80094fc:	3720      	adds	r7, #32
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	200048a8 	.word	0x200048a8
 8009508:	20004910 	.word	0x20004910
 800950c:	20004978 	.word	0x20004978

08009510 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009518:	f001 f80e 	bl	800a538 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800951c:	4b2a      	ldr	r3, [pc, #168]	@ (80095c8 <prvAddNewTaskToReadyList+0xb8>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	3301      	adds	r3, #1
 8009522:	4a29      	ldr	r2, [pc, #164]	@ (80095c8 <prvAddNewTaskToReadyList+0xb8>)
 8009524:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009526:	4b29      	ldr	r3, [pc, #164]	@ (80095cc <prvAddNewTaskToReadyList+0xbc>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d109      	bne.n	8009542 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800952e:	4a27      	ldr	r2, [pc, #156]	@ (80095cc <prvAddNewTaskToReadyList+0xbc>)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009534:	4b24      	ldr	r3, [pc, #144]	@ (80095c8 <prvAddNewTaskToReadyList+0xb8>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d110      	bne.n	800955e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800953c:	f000 fbe4 	bl	8009d08 <prvInitialiseTaskLists>
 8009540:	e00d      	b.n	800955e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009542:	4b23      	ldr	r3, [pc, #140]	@ (80095d0 <prvAddNewTaskToReadyList+0xc0>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d109      	bne.n	800955e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800954a:	4b20      	ldr	r3, [pc, #128]	@ (80095cc <prvAddNewTaskToReadyList+0xbc>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009554:	429a      	cmp	r2, r3
 8009556:	d802      	bhi.n	800955e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009558:	4a1c      	ldr	r2, [pc, #112]	@ (80095cc <prvAddNewTaskToReadyList+0xbc>)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800955e:	4b1d      	ldr	r3, [pc, #116]	@ (80095d4 <prvAddNewTaskToReadyList+0xc4>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	3301      	adds	r3, #1
 8009564:	4a1b      	ldr	r2, [pc, #108]	@ (80095d4 <prvAddNewTaskToReadyList+0xc4>)
 8009566:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800956c:	2201      	movs	r2, #1
 800956e:	409a      	lsls	r2, r3
 8009570:	4b19      	ldr	r3, [pc, #100]	@ (80095d8 <prvAddNewTaskToReadyList+0xc8>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4313      	orrs	r3, r2
 8009576:	4a18      	ldr	r2, [pc, #96]	@ (80095d8 <prvAddNewTaskToReadyList+0xc8>)
 8009578:	6013      	str	r3, [r2, #0]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800957e:	4613      	mov	r3, r2
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	4413      	add	r3, r2
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4a15      	ldr	r2, [pc, #84]	@ (80095dc <prvAddNewTaskToReadyList+0xcc>)
 8009588:	441a      	add	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	3304      	adds	r3, #4
 800958e:	4619      	mov	r1, r3
 8009590:	4610      	mov	r0, r2
 8009592:	f7ff f813 	bl	80085bc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009596:	f001 f801 	bl	800a59c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800959a:	4b0d      	ldr	r3, [pc, #52]	@ (80095d0 <prvAddNewTaskToReadyList+0xc0>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00e      	beq.n	80095c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80095a2:	4b0a      	ldr	r3, [pc, #40]	@ (80095cc <prvAddNewTaskToReadyList+0xbc>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d207      	bcs.n	80095c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80095b0:	4b0b      	ldr	r3, [pc, #44]	@ (80095e0 <prvAddNewTaskToReadyList+0xd0>)
 80095b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095b6:	601a      	str	r2, [r3, #0]
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095c0:	bf00      	nop
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	20000c54 	.word	0x20000c54
 80095cc:	20000b54 	.word	0x20000b54
 80095d0:	20000c60 	.word	0x20000c60
 80095d4:	20000c70 	.word	0x20000c70
 80095d8:	20000c5c 	.word	0x20000c5c
 80095dc:	20000b58 	.word	0x20000b58
 80095e0:	e000ed04 	.word	0xe000ed04

080095e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80095ec:	2300      	movs	r3, #0
 80095ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d018      	beq.n	8009628 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80095f6:	4b14      	ldr	r3, [pc, #80]	@ (8009648 <vTaskDelay+0x64>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00b      	beq.n	8009616 <vTaskDelay+0x32>
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	60bb      	str	r3, [r7, #8]
}
 8009610:	bf00      	nop
 8009612:	bf00      	nop
 8009614:	e7fd      	b.n	8009612 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009616:	f000 f885 	bl	8009724 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800961a:	2100      	movs	r1, #0
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 fdf7 	bl	800a210 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009622:	f000 f88d 	bl	8009740 <xTaskResumeAll>
 8009626:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d107      	bne.n	800963e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800962e:	4b07      	ldr	r3, [pc, #28]	@ (800964c <vTaskDelay+0x68>)
 8009630:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009634:	601a      	str	r2, [r3, #0]
 8009636:	f3bf 8f4f 	dsb	sy
 800963a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800963e:	bf00      	nop
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	20000c7c 	.word	0x20000c7c
 800964c:	e000ed04 	.word	0xe000ed04

08009650 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b08a      	sub	sp, #40	@ 0x28
 8009654:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009656:	2300      	movs	r3, #0
 8009658:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800965a:	2300      	movs	r3, #0
 800965c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800965e:	463a      	mov	r2, r7
 8009660:	1d39      	adds	r1, r7, #4
 8009662:	f107 0308 	add.w	r3, r7, #8
 8009666:	4618      	mov	r0, r3
 8009668:	f7f8 fcda 	bl	8002020 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	9202      	str	r2, [sp, #8]
 8009674:	9301      	str	r3, [sp, #4]
 8009676:	2300      	movs	r3, #0
 8009678:	9300      	str	r3, [sp, #0]
 800967a:	2300      	movs	r3, #0
 800967c:	460a      	mov	r2, r1
 800967e:	4921      	ldr	r1, [pc, #132]	@ (8009704 <vTaskStartScheduler+0xb4>)
 8009680:	4821      	ldr	r0, [pc, #132]	@ (8009708 <vTaskStartScheduler+0xb8>)
 8009682:	f7ff fdff 	bl	8009284 <xTaskCreateStatic>
 8009686:	4603      	mov	r3, r0
 8009688:	4a20      	ldr	r2, [pc, #128]	@ (800970c <vTaskStartScheduler+0xbc>)
 800968a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800968c:	4b1f      	ldr	r3, [pc, #124]	@ (800970c <vTaskStartScheduler+0xbc>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d002      	beq.n	800969a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009694:	2301      	movs	r3, #1
 8009696:	617b      	str	r3, [r7, #20]
 8009698:	e001      	b.n	800969e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800969a:	2300      	movs	r3, #0
 800969c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d11b      	bne.n	80096dc <vTaskStartScheduler+0x8c>
	__asm volatile
 80096a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a8:	f383 8811 	msr	BASEPRI, r3
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	613b      	str	r3, [r7, #16]
}
 80096b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80096b8:	4b15      	ldr	r3, [pc, #84]	@ (8009710 <vTaskStartScheduler+0xc0>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	334c      	adds	r3, #76	@ 0x4c
 80096be:	4a15      	ldr	r2, [pc, #84]	@ (8009714 <vTaskStartScheduler+0xc4>)
 80096c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80096c2:	4b15      	ldr	r3, [pc, #84]	@ (8009718 <vTaskStartScheduler+0xc8>)
 80096c4:	f04f 32ff 	mov.w	r2, #4294967295
 80096c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80096ca:	4b14      	ldr	r3, [pc, #80]	@ (800971c <vTaskStartScheduler+0xcc>)
 80096cc:	2201      	movs	r2, #1
 80096ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80096d0:	4b13      	ldr	r3, [pc, #76]	@ (8009720 <vTaskStartScheduler+0xd0>)
 80096d2:	2200      	movs	r2, #0
 80096d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80096d6:	f000 fe8b 	bl	800a3f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80096da:	e00f      	b.n	80096fc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e2:	d10b      	bne.n	80096fc <vTaskStartScheduler+0xac>
	__asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	60fb      	str	r3, [r7, #12]
}
 80096f6:	bf00      	nop
 80096f8:	bf00      	nop
 80096fa:	e7fd      	b.n	80096f8 <vTaskStartScheduler+0xa8>
}
 80096fc:	bf00      	nop
 80096fe:	3718      	adds	r7, #24
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	0800f6f0 	.word	0x0800f6f0
 8009708:	08009cd9 	.word	0x08009cd9
 800970c:	20000c78 	.word	0x20000c78
 8009710:	20000b54 	.word	0x20000b54
 8009714:	20000034 	.word	0x20000034
 8009718:	20000c74 	.word	0x20000c74
 800971c:	20000c60 	.word	0x20000c60
 8009720:	20000c58 	.word	0x20000c58

08009724 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009724:	b480      	push	{r7}
 8009726:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009728:	4b04      	ldr	r3, [pc, #16]	@ (800973c <vTaskSuspendAll+0x18>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	3301      	adds	r3, #1
 800972e:	4a03      	ldr	r2, [pc, #12]	@ (800973c <vTaskSuspendAll+0x18>)
 8009730:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009732:	bf00      	nop
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	20000c7c 	.word	0x20000c7c

08009740 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009746:	2300      	movs	r3, #0
 8009748:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800974a:	2300      	movs	r3, #0
 800974c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800974e:	4b42      	ldr	r3, [pc, #264]	@ (8009858 <xTaskResumeAll+0x118>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10b      	bne.n	800976e <xTaskResumeAll+0x2e>
	__asm volatile
 8009756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800975a:	f383 8811 	msr	BASEPRI, r3
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	f3bf 8f4f 	dsb	sy
 8009766:	603b      	str	r3, [r7, #0]
}
 8009768:	bf00      	nop
 800976a:	bf00      	nop
 800976c:	e7fd      	b.n	800976a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800976e:	f000 fee3 	bl	800a538 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009772:	4b39      	ldr	r3, [pc, #228]	@ (8009858 <xTaskResumeAll+0x118>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	3b01      	subs	r3, #1
 8009778:	4a37      	ldr	r2, [pc, #220]	@ (8009858 <xTaskResumeAll+0x118>)
 800977a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800977c:	4b36      	ldr	r3, [pc, #216]	@ (8009858 <xTaskResumeAll+0x118>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d161      	bne.n	8009848 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009784:	4b35      	ldr	r3, [pc, #212]	@ (800985c <xTaskResumeAll+0x11c>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d05d      	beq.n	8009848 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800978c:	e02e      	b.n	80097ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800978e:	4b34      	ldr	r3, [pc, #208]	@ (8009860 <xTaskResumeAll+0x120>)
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	3318      	adds	r3, #24
 800979a:	4618      	mov	r0, r3
 800979c:	f7fe ff6b 	bl	8008676 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	3304      	adds	r3, #4
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7fe ff66 	bl	8008676 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ae:	2201      	movs	r2, #1
 80097b0:	409a      	lsls	r2, r3
 80097b2:	4b2c      	ldr	r3, [pc, #176]	@ (8009864 <xTaskResumeAll+0x124>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	4a2a      	ldr	r2, [pc, #168]	@ (8009864 <xTaskResumeAll+0x124>)
 80097ba:	6013      	str	r3, [r2, #0]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097c0:	4613      	mov	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4413      	add	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4a27      	ldr	r2, [pc, #156]	@ (8009868 <xTaskResumeAll+0x128>)
 80097ca:	441a      	add	r2, r3
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	3304      	adds	r3, #4
 80097d0:	4619      	mov	r1, r3
 80097d2:	4610      	mov	r0, r2
 80097d4:	f7fe fef2 	bl	80085bc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097dc:	4b23      	ldr	r3, [pc, #140]	@ (800986c <xTaskResumeAll+0x12c>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d302      	bcc.n	80097ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80097e6:	4b22      	ldr	r3, [pc, #136]	@ (8009870 <xTaskResumeAll+0x130>)
 80097e8:	2201      	movs	r2, #1
 80097ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097ec:	4b1c      	ldr	r3, [pc, #112]	@ (8009860 <xTaskResumeAll+0x120>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1cc      	bne.n	800978e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d001      	beq.n	80097fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80097fa:	f000 fb29 	bl	8009e50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80097fe:	4b1d      	ldr	r3, [pc, #116]	@ (8009874 <xTaskResumeAll+0x134>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d010      	beq.n	800982c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800980a:	f000 f837 	bl	800987c <xTaskIncrementTick>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d002      	beq.n	800981a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009814:	4b16      	ldr	r3, [pc, #88]	@ (8009870 <xTaskResumeAll+0x130>)
 8009816:	2201      	movs	r2, #1
 8009818:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	3b01      	subs	r3, #1
 800981e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1f1      	bne.n	800980a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009826:	4b13      	ldr	r3, [pc, #76]	@ (8009874 <xTaskResumeAll+0x134>)
 8009828:	2200      	movs	r2, #0
 800982a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800982c:	4b10      	ldr	r3, [pc, #64]	@ (8009870 <xTaskResumeAll+0x130>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d009      	beq.n	8009848 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009834:	2301      	movs	r3, #1
 8009836:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009838:	4b0f      	ldr	r3, [pc, #60]	@ (8009878 <xTaskResumeAll+0x138>)
 800983a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800983e:	601a      	str	r2, [r3, #0]
 8009840:	f3bf 8f4f 	dsb	sy
 8009844:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009848:	f000 fea8 	bl	800a59c <vPortExitCritical>

	return xAlreadyYielded;
 800984c:	68bb      	ldr	r3, [r7, #8]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	20000c7c 	.word	0x20000c7c
 800985c:	20000c54 	.word	0x20000c54
 8009860:	20000c14 	.word	0x20000c14
 8009864:	20000c5c 	.word	0x20000c5c
 8009868:	20000b58 	.word	0x20000b58
 800986c:	20000b54 	.word	0x20000b54
 8009870:	20000c68 	.word	0x20000c68
 8009874:	20000c64 	.word	0x20000c64
 8009878:	e000ed04 	.word	0xe000ed04

0800987c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b086      	sub	sp, #24
 8009880:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009882:	2300      	movs	r3, #0
 8009884:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009886:	4b4f      	ldr	r3, [pc, #316]	@ (80099c4 <xTaskIncrementTick+0x148>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	f040 808f 	bne.w	80099ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009890:	4b4d      	ldr	r3, [pc, #308]	@ (80099c8 <xTaskIncrementTick+0x14c>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	3301      	adds	r3, #1
 8009896:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009898:	4a4b      	ldr	r2, [pc, #300]	@ (80099c8 <xTaskIncrementTick+0x14c>)
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d121      	bne.n	80098e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80098a4:	4b49      	ldr	r3, [pc, #292]	@ (80099cc <xTaskIncrementTick+0x150>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00b      	beq.n	80098c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80098ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b2:	f383 8811 	msr	BASEPRI, r3
 80098b6:	f3bf 8f6f 	isb	sy
 80098ba:	f3bf 8f4f 	dsb	sy
 80098be:	603b      	str	r3, [r7, #0]
}
 80098c0:	bf00      	nop
 80098c2:	bf00      	nop
 80098c4:	e7fd      	b.n	80098c2 <xTaskIncrementTick+0x46>
 80098c6:	4b41      	ldr	r3, [pc, #260]	@ (80099cc <xTaskIncrementTick+0x150>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	60fb      	str	r3, [r7, #12]
 80098cc:	4b40      	ldr	r3, [pc, #256]	@ (80099d0 <xTaskIncrementTick+0x154>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a3e      	ldr	r2, [pc, #248]	@ (80099cc <xTaskIncrementTick+0x150>)
 80098d2:	6013      	str	r3, [r2, #0]
 80098d4:	4a3e      	ldr	r2, [pc, #248]	@ (80099d0 <xTaskIncrementTick+0x154>)
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6013      	str	r3, [r2, #0]
 80098da:	4b3e      	ldr	r3, [pc, #248]	@ (80099d4 <xTaskIncrementTick+0x158>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	3301      	adds	r3, #1
 80098e0:	4a3c      	ldr	r2, [pc, #240]	@ (80099d4 <xTaskIncrementTick+0x158>)
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	f000 fab4 	bl	8009e50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80098e8:	4b3b      	ldr	r3, [pc, #236]	@ (80099d8 <xTaskIncrementTick+0x15c>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d348      	bcc.n	8009984 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098f2:	4b36      	ldr	r3, [pc, #216]	@ (80099cc <xTaskIncrementTick+0x150>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d104      	bne.n	8009906 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098fc:	4b36      	ldr	r3, [pc, #216]	@ (80099d8 <xTaskIncrementTick+0x15c>)
 80098fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009902:	601a      	str	r2, [r3, #0]
					break;
 8009904:	e03e      	b.n	8009984 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009906:	4b31      	ldr	r3, [pc, #196]	@ (80099cc <xTaskIncrementTick+0x150>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009916:	693a      	ldr	r2, [r7, #16]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	429a      	cmp	r2, r3
 800991c:	d203      	bcs.n	8009926 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800991e:	4a2e      	ldr	r2, [pc, #184]	@ (80099d8 <xTaskIncrementTick+0x15c>)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009924:	e02e      	b.n	8009984 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	3304      	adds	r3, #4
 800992a:	4618      	mov	r0, r3
 800992c:	f7fe fea3 	bl	8008676 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009934:	2b00      	cmp	r3, #0
 8009936:	d004      	beq.n	8009942 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	3318      	adds	r3, #24
 800993c:	4618      	mov	r0, r3
 800993e:	f7fe fe9a 	bl	8008676 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009946:	2201      	movs	r2, #1
 8009948:	409a      	lsls	r2, r3
 800994a:	4b24      	ldr	r3, [pc, #144]	@ (80099dc <xTaskIncrementTick+0x160>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4313      	orrs	r3, r2
 8009950:	4a22      	ldr	r2, [pc, #136]	@ (80099dc <xTaskIncrementTick+0x160>)
 8009952:	6013      	str	r3, [r2, #0]
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009958:	4613      	mov	r3, r2
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4a1f      	ldr	r2, [pc, #124]	@ (80099e0 <xTaskIncrementTick+0x164>)
 8009962:	441a      	add	r2, r3
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	3304      	adds	r3, #4
 8009968:	4619      	mov	r1, r3
 800996a:	4610      	mov	r0, r2
 800996c:	f7fe fe26 	bl	80085bc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009974:	4b1b      	ldr	r3, [pc, #108]	@ (80099e4 <xTaskIncrementTick+0x168>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800997a:	429a      	cmp	r2, r3
 800997c:	d3b9      	bcc.n	80098f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800997e:	2301      	movs	r3, #1
 8009980:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009982:	e7b6      	b.n	80098f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009984:	4b17      	ldr	r3, [pc, #92]	@ (80099e4 <xTaskIncrementTick+0x168>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800998a:	4915      	ldr	r1, [pc, #84]	@ (80099e0 <xTaskIncrementTick+0x164>)
 800998c:	4613      	mov	r3, r2
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	4413      	add	r3, r2
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	440b      	add	r3, r1
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d901      	bls.n	80099a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800999c:	2301      	movs	r3, #1
 800999e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80099a0:	4b11      	ldr	r3, [pc, #68]	@ (80099e8 <xTaskIncrementTick+0x16c>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d007      	beq.n	80099b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80099a8:	2301      	movs	r3, #1
 80099aa:	617b      	str	r3, [r7, #20]
 80099ac:	e004      	b.n	80099b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80099ae:	4b0f      	ldr	r3, [pc, #60]	@ (80099ec <xTaskIncrementTick+0x170>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	3301      	adds	r3, #1
 80099b4:	4a0d      	ldr	r2, [pc, #52]	@ (80099ec <xTaskIncrementTick+0x170>)
 80099b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80099b8:	697b      	ldr	r3, [r7, #20]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3718      	adds	r7, #24
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	20000c7c 	.word	0x20000c7c
 80099c8:	20000c58 	.word	0x20000c58
 80099cc:	20000c0c 	.word	0x20000c0c
 80099d0:	20000c10 	.word	0x20000c10
 80099d4:	20000c6c 	.word	0x20000c6c
 80099d8:	20000c74 	.word	0x20000c74
 80099dc:	20000c5c 	.word	0x20000c5c
 80099e0:	20000b58 	.word	0x20000b58
 80099e4:	20000b54 	.word	0x20000b54
 80099e8:	20000c68 	.word	0x20000c68
 80099ec:	20000c64 	.word	0x20000c64

080099f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80099f0:	b480      	push	{r7}
 80099f2:	b087      	sub	sp, #28
 80099f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80099f6:	4b2a      	ldr	r3, [pc, #168]	@ (8009aa0 <vTaskSwitchContext+0xb0>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d003      	beq.n	8009a06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80099fe:	4b29      	ldr	r3, [pc, #164]	@ (8009aa4 <vTaskSwitchContext+0xb4>)
 8009a00:	2201      	movs	r2, #1
 8009a02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a04:	e045      	b.n	8009a92 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8009a06:	4b27      	ldr	r3, [pc, #156]	@ (8009aa4 <vTaskSwitchContext+0xb4>)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a0c:	4b26      	ldr	r3, [pc, #152]	@ (8009aa8 <vTaskSwitchContext+0xb8>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	fab3 f383 	clz	r3, r3
 8009a18:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009a1a:	7afb      	ldrb	r3, [r7, #11]
 8009a1c:	f1c3 031f 	rsb	r3, r3, #31
 8009a20:	617b      	str	r3, [r7, #20]
 8009a22:	4922      	ldr	r1, [pc, #136]	@ (8009aac <vTaskSwitchContext+0xbc>)
 8009a24:	697a      	ldr	r2, [r7, #20]
 8009a26:	4613      	mov	r3, r2
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	4413      	add	r3, r2
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	440b      	add	r3, r1
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10b      	bne.n	8009a4e <vTaskSwitchContext+0x5e>
	__asm volatile
 8009a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a3a:	f383 8811 	msr	BASEPRI, r3
 8009a3e:	f3bf 8f6f 	isb	sy
 8009a42:	f3bf 8f4f 	dsb	sy
 8009a46:	607b      	str	r3, [r7, #4]
}
 8009a48:	bf00      	nop
 8009a4a:	bf00      	nop
 8009a4c:	e7fd      	b.n	8009a4a <vTaskSwitchContext+0x5a>
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	4613      	mov	r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	4413      	add	r3, r2
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4a14      	ldr	r2, [pc, #80]	@ (8009aac <vTaskSwitchContext+0xbc>)
 8009a5a:	4413      	add	r3, r2
 8009a5c:	613b      	str	r3, [r7, #16]
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	605a      	str	r2, [r3, #4]
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	685a      	ldr	r2, [r3, #4]
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	3308      	adds	r3, #8
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d104      	bne.n	8009a7e <vTaskSwitchContext+0x8e>
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	685a      	ldr	r2, [r3, #4]
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	605a      	str	r2, [r3, #4]
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	4a0a      	ldr	r2, [pc, #40]	@ (8009ab0 <vTaskSwitchContext+0xc0>)
 8009a86:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009a88:	4b09      	ldr	r3, [pc, #36]	@ (8009ab0 <vTaskSwitchContext+0xc0>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	334c      	adds	r3, #76	@ 0x4c
 8009a8e:	4a09      	ldr	r2, [pc, #36]	@ (8009ab4 <vTaskSwitchContext+0xc4>)
 8009a90:	6013      	str	r3, [r2, #0]
}
 8009a92:	bf00      	nop
 8009a94:	371c      	adds	r7, #28
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr
 8009a9e:	bf00      	nop
 8009aa0:	20000c7c 	.word	0x20000c7c
 8009aa4:	20000c68 	.word	0x20000c68
 8009aa8:	20000c5c 	.word	0x20000c5c
 8009aac:	20000b58 	.word	0x20000b58
 8009ab0:	20000b54 	.word	0x20000b54
 8009ab4:	20000034 	.word	0x20000034

08009ab8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10b      	bne.n	8009ae0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009acc:	f383 8811 	msr	BASEPRI, r3
 8009ad0:	f3bf 8f6f 	isb	sy
 8009ad4:	f3bf 8f4f 	dsb	sy
 8009ad8:	60fb      	str	r3, [r7, #12]
}
 8009ada:	bf00      	nop
 8009adc:	bf00      	nop
 8009ade:	e7fd      	b.n	8009adc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ae0:	4b07      	ldr	r3, [pc, #28]	@ (8009b00 <vTaskPlaceOnEventList+0x48>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	3318      	adds	r3, #24
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f7fe fd8b 	bl	8008604 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009aee:	2101      	movs	r1, #1
 8009af0:	6838      	ldr	r0, [r7, #0]
 8009af2:	f000 fb8d 	bl	800a210 <prvAddCurrentTaskToDelayedList>
}
 8009af6:	bf00      	nop
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	20000b54 	.word	0x20000b54

08009b04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d10b      	bne.n	8009b32 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b1e:	f383 8811 	msr	BASEPRI, r3
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	f3bf 8f4f 	dsb	sy
 8009b2a:	60fb      	str	r3, [r7, #12]
}
 8009b2c:	bf00      	nop
 8009b2e:	bf00      	nop
 8009b30:	e7fd      	b.n	8009b2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	3318      	adds	r3, #24
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7fe fd9d 	bl	8008676 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8009bb4 <xTaskRemoveFromEventList+0xb0>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d11c      	bne.n	8009b7e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	3304      	adds	r3, #4
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7fe fd94 	bl	8008676 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b52:	2201      	movs	r2, #1
 8009b54:	409a      	lsls	r2, r3
 8009b56:	4b18      	ldr	r3, [pc, #96]	@ (8009bb8 <xTaskRemoveFromEventList+0xb4>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	4a16      	ldr	r2, [pc, #88]	@ (8009bb8 <xTaskRemoveFromEventList+0xb4>)
 8009b5e:	6013      	str	r3, [r2, #0]
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b64:	4613      	mov	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4413      	add	r3, r2
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	4a13      	ldr	r2, [pc, #76]	@ (8009bbc <xTaskRemoveFromEventList+0xb8>)
 8009b6e:	441a      	add	r2, r3
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	3304      	adds	r3, #4
 8009b74:	4619      	mov	r1, r3
 8009b76:	4610      	mov	r0, r2
 8009b78:	f7fe fd20 	bl	80085bc <vListInsertEnd>
 8009b7c:	e005      	b.n	8009b8a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	3318      	adds	r3, #24
 8009b82:	4619      	mov	r1, r3
 8009b84:	480e      	ldr	r0, [pc, #56]	@ (8009bc0 <xTaskRemoveFromEventList+0xbc>)
 8009b86:	f7fe fd19 	bl	80085bc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8009bc4 <xTaskRemoveFromEventList+0xc0>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d905      	bls.n	8009ba4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8009bc8 <xTaskRemoveFromEventList+0xc4>)
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	e001      	b.n	8009ba8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009ba8:	697b      	ldr	r3, [r7, #20]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3718      	adds	r7, #24
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	20000c7c 	.word	0x20000c7c
 8009bb8:	20000c5c 	.word	0x20000c5c
 8009bbc:	20000b58 	.word	0x20000b58
 8009bc0:	20000c14 	.word	0x20000c14
 8009bc4:	20000b54 	.word	0x20000b54
 8009bc8:	20000c68 	.word	0x20000c68

08009bcc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009bd4:	4b06      	ldr	r3, [pc, #24]	@ (8009bf0 <vTaskInternalSetTimeOutState+0x24>)
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009bdc:	4b05      	ldr	r3, [pc, #20]	@ (8009bf4 <vTaskInternalSetTimeOutState+0x28>)
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	605a      	str	r2, [r3, #4]
}
 8009be4:	bf00      	nop
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr
 8009bf0:	20000c6c 	.word	0x20000c6c
 8009bf4:	20000c58 	.word	0x20000c58

08009bf8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b088      	sub	sp, #32
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d10b      	bne.n	8009c20 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c0c:	f383 8811 	msr	BASEPRI, r3
 8009c10:	f3bf 8f6f 	isb	sy
 8009c14:	f3bf 8f4f 	dsb	sy
 8009c18:	613b      	str	r3, [r7, #16]
}
 8009c1a:	bf00      	nop
 8009c1c:	bf00      	nop
 8009c1e:	e7fd      	b.n	8009c1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d10b      	bne.n	8009c3e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c2a:	f383 8811 	msr	BASEPRI, r3
 8009c2e:	f3bf 8f6f 	isb	sy
 8009c32:	f3bf 8f4f 	dsb	sy
 8009c36:	60fb      	str	r3, [r7, #12]
}
 8009c38:	bf00      	nop
 8009c3a:	bf00      	nop
 8009c3c:	e7fd      	b.n	8009c3a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009c3e:	f000 fc7b 	bl	800a538 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c42:	4b1d      	ldr	r3, [pc, #116]	@ (8009cb8 <xTaskCheckForTimeOut+0xc0>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	69ba      	ldr	r2, [r7, #24]
 8009c4e:	1ad3      	subs	r3, r2, r3
 8009c50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c5a:	d102      	bne.n	8009c62 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	61fb      	str	r3, [r7, #28]
 8009c60:	e023      	b.n	8009caa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	4b15      	ldr	r3, [pc, #84]	@ (8009cbc <xTaskCheckForTimeOut+0xc4>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d007      	beq.n	8009c7e <xTaskCheckForTimeOut+0x86>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	69ba      	ldr	r2, [r7, #24]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d302      	bcc.n	8009c7e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	61fb      	str	r3, [r7, #28]
 8009c7c:	e015      	b.n	8009caa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	697a      	ldr	r2, [r7, #20]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d20b      	bcs.n	8009ca0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	1ad2      	subs	r2, r2, r3
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f7ff ff99 	bl	8009bcc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	61fb      	str	r3, [r7, #28]
 8009c9e:	e004      	b.n	8009caa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009caa:	f000 fc77 	bl	800a59c <vPortExitCritical>

	return xReturn;
 8009cae:	69fb      	ldr	r3, [r7, #28]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3720      	adds	r7, #32
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	20000c58 	.word	0x20000c58
 8009cbc:	20000c6c 	.word	0x20000c6c

08009cc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009cc4:	4b03      	ldr	r3, [pc, #12]	@ (8009cd4 <vTaskMissedYield+0x14>)
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	601a      	str	r2, [r3, #0]
}
 8009cca:	bf00      	nop
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr
 8009cd4:	20000c68 	.word	0x20000c68

08009cd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009ce0:	f000 f852 	bl	8009d88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ce4:	4b06      	ldr	r3, [pc, #24]	@ (8009d00 <prvIdleTask+0x28>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d9f9      	bls.n	8009ce0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009cec:	4b05      	ldr	r3, [pc, #20]	@ (8009d04 <prvIdleTask+0x2c>)
 8009cee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cf2:	601a      	str	r2, [r3, #0]
 8009cf4:	f3bf 8f4f 	dsb	sy
 8009cf8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009cfc:	e7f0      	b.n	8009ce0 <prvIdleTask+0x8>
 8009cfe:	bf00      	nop
 8009d00:	20000b58 	.word	0x20000b58
 8009d04:	e000ed04 	.word	0xe000ed04

08009d08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d0e:	2300      	movs	r3, #0
 8009d10:	607b      	str	r3, [r7, #4]
 8009d12:	e00c      	b.n	8009d2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	4613      	mov	r3, r2
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	4413      	add	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	4a12      	ldr	r2, [pc, #72]	@ (8009d68 <prvInitialiseTaskLists+0x60>)
 8009d20:	4413      	add	r3, r2
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fe fc1d 	bl	8008562 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	607b      	str	r3, [r7, #4]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2b06      	cmp	r3, #6
 8009d32:	d9ef      	bls.n	8009d14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d34:	480d      	ldr	r0, [pc, #52]	@ (8009d6c <prvInitialiseTaskLists+0x64>)
 8009d36:	f7fe fc14 	bl	8008562 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d3a:	480d      	ldr	r0, [pc, #52]	@ (8009d70 <prvInitialiseTaskLists+0x68>)
 8009d3c:	f7fe fc11 	bl	8008562 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d40:	480c      	ldr	r0, [pc, #48]	@ (8009d74 <prvInitialiseTaskLists+0x6c>)
 8009d42:	f7fe fc0e 	bl	8008562 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d46:	480c      	ldr	r0, [pc, #48]	@ (8009d78 <prvInitialiseTaskLists+0x70>)
 8009d48:	f7fe fc0b 	bl	8008562 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009d4c:	480b      	ldr	r0, [pc, #44]	@ (8009d7c <prvInitialiseTaskLists+0x74>)
 8009d4e:	f7fe fc08 	bl	8008562 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009d52:	4b0b      	ldr	r3, [pc, #44]	@ (8009d80 <prvInitialiseTaskLists+0x78>)
 8009d54:	4a05      	ldr	r2, [pc, #20]	@ (8009d6c <prvInitialiseTaskLists+0x64>)
 8009d56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d58:	4b0a      	ldr	r3, [pc, #40]	@ (8009d84 <prvInitialiseTaskLists+0x7c>)
 8009d5a:	4a05      	ldr	r2, [pc, #20]	@ (8009d70 <prvInitialiseTaskLists+0x68>)
 8009d5c:	601a      	str	r2, [r3, #0]
}
 8009d5e:	bf00      	nop
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	20000b58 	.word	0x20000b58
 8009d6c:	20000be4 	.word	0x20000be4
 8009d70:	20000bf8 	.word	0x20000bf8
 8009d74:	20000c14 	.word	0x20000c14
 8009d78:	20000c28 	.word	0x20000c28
 8009d7c:	20000c40 	.word	0x20000c40
 8009d80:	20000c0c 	.word	0x20000c0c
 8009d84:	20000c10 	.word	0x20000c10

08009d88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d8e:	e019      	b.n	8009dc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d90:	f000 fbd2 	bl	800a538 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d94:	4b10      	ldr	r3, [pc, #64]	@ (8009dd8 <prvCheckTasksWaitingTermination+0x50>)
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	3304      	adds	r3, #4
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7fe fc68 	bl	8008676 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009da6:	4b0d      	ldr	r3, [pc, #52]	@ (8009ddc <prvCheckTasksWaitingTermination+0x54>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	3b01      	subs	r3, #1
 8009dac:	4a0b      	ldr	r2, [pc, #44]	@ (8009ddc <prvCheckTasksWaitingTermination+0x54>)
 8009dae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009db0:	4b0b      	ldr	r3, [pc, #44]	@ (8009de0 <prvCheckTasksWaitingTermination+0x58>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	3b01      	subs	r3, #1
 8009db6:	4a0a      	ldr	r2, [pc, #40]	@ (8009de0 <prvCheckTasksWaitingTermination+0x58>)
 8009db8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009dba:	f000 fbef 	bl	800a59c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 f810 	bl	8009de4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009dc4:	4b06      	ldr	r3, [pc, #24]	@ (8009de0 <prvCheckTasksWaitingTermination+0x58>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1e1      	bne.n	8009d90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009dcc:	bf00      	nop
 8009dce:	bf00      	nop
 8009dd0:	3708      	adds	r7, #8
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	20000c28 	.word	0x20000c28
 8009ddc:	20000c54 	.word	0x20000c54
 8009de0:	20000c3c 	.word	0x20000c3c

08009de4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	334c      	adds	r3, #76	@ 0x4c
 8009df0:	4618      	mov	r0, r3
 8009df2:	f001 fe5f 	bl	800bab4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d108      	bne.n	8009e12 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e04:	4618      	mov	r0, r3
 8009e06:	f000 fd87 	bl	800a918 <vPortFree>
				vPortFree( pxTCB );
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 fd84 	bl	800a918 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e10:	e019      	b.n	8009e46 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d103      	bne.n	8009e24 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 fd7b 	bl	800a918 <vPortFree>
	}
 8009e22:	e010      	b.n	8009e46 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d00b      	beq.n	8009e46 <prvDeleteTCB+0x62>
	__asm volatile
 8009e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e32:	f383 8811 	msr	BASEPRI, r3
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	60fb      	str	r3, [r7, #12]
}
 8009e40:	bf00      	nop
 8009e42:	bf00      	nop
 8009e44:	e7fd      	b.n	8009e42 <prvDeleteTCB+0x5e>
	}
 8009e46:	bf00      	nop
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
	...

08009e50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e56:	4b0c      	ldr	r3, [pc, #48]	@ (8009e88 <prvResetNextTaskUnblockTime+0x38>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d104      	bne.n	8009e6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e60:	4b0a      	ldr	r3, [pc, #40]	@ (8009e8c <prvResetNextTaskUnblockTime+0x3c>)
 8009e62:	f04f 32ff 	mov.w	r2, #4294967295
 8009e66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009e68:	e008      	b.n	8009e7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e6a:	4b07      	ldr	r3, [pc, #28]	@ (8009e88 <prvResetNextTaskUnblockTime+0x38>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	4a04      	ldr	r2, [pc, #16]	@ (8009e8c <prvResetNextTaskUnblockTime+0x3c>)
 8009e7a:	6013      	str	r3, [r2, #0]
}
 8009e7c:	bf00      	nop
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr
 8009e88:	20000c0c 	.word	0x20000c0c
 8009e8c:	20000c74 	.word	0x20000c74

08009e90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e96:	4b0b      	ldr	r3, [pc, #44]	@ (8009ec4 <xTaskGetSchedulerState+0x34>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d102      	bne.n	8009ea4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	607b      	str	r3, [r7, #4]
 8009ea2:	e008      	b.n	8009eb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ea4:	4b08      	ldr	r3, [pc, #32]	@ (8009ec8 <xTaskGetSchedulerState+0x38>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d102      	bne.n	8009eb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009eac:	2302      	movs	r3, #2
 8009eae:	607b      	str	r3, [r7, #4]
 8009eb0:	e001      	b.n	8009eb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009eb6:	687b      	ldr	r3, [r7, #4]
	}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr
 8009ec4:	20000c60 	.word	0x20000c60
 8009ec8:	20000c7c 	.word	0x20000c7c

08009ecc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d05e      	beq.n	8009fa0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ee6:	4b31      	ldr	r3, [pc, #196]	@ (8009fac <xTaskPriorityInherit+0xe0>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d24e      	bcs.n	8009f8e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	699b      	ldr	r3, [r3, #24]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	db06      	blt.n	8009f06 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8009fac <xTaskPriorityInherit+0xe0>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009efe:	f1c3 0207 	rsb	r2, r3, #7
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	6959      	ldr	r1, [r3, #20]
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f0e:	4613      	mov	r3, r2
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	4413      	add	r3, r2
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	4a26      	ldr	r2, [pc, #152]	@ (8009fb0 <xTaskPriorityInherit+0xe4>)
 8009f18:	4413      	add	r3, r2
 8009f1a:	4299      	cmp	r1, r3
 8009f1c:	d12f      	bne.n	8009f7e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	3304      	adds	r3, #4
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fe fba7 	bl	8008676 <uxListRemove>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d10a      	bne.n	8009f44 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f32:	2201      	movs	r2, #1
 8009f34:	fa02 f303 	lsl.w	r3, r2, r3
 8009f38:	43da      	mvns	r2, r3
 8009f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8009fb4 <xTaskPriorityInherit+0xe8>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4013      	ands	r3, r2
 8009f40:	4a1c      	ldr	r2, [pc, #112]	@ (8009fb4 <xTaskPriorityInherit+0xe8>)
 8009f42:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009f44:	4b19      	ldr	r3, [pc, #100]	@ (8009fac <xTaskPriorityInherit+0xe0>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f52:	2201      	movs	r2, #1
 8009f54:	409a      	lsls	r2, r3
 8009f56:	4b17      	ldr	r3, [pc, #92]	@ (8009fb4 <xTaskPriorityInherit+0xe8>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	4a15      	ldr	r2, [pc, #84]	@ (8009fb4 <xTaskPriorityInherit+0xe8>)
 8009f5e:	6013      	str	r3, [r2, #0]
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f64:	4613      	mov	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	4413      	add	r3, r2
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	4a10      	ldr	r2, [pc, #64]	@ (8009fb0 <xTaskPriorityInherit+0xe4>)
 8009f6e:	441a      	add	r2, r3
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	3304      	adds	r3, #4
 8009f74:	4619      	mov	r1, r3
 8009f76:	4610      	mov	r0, r2
 8009f78:	f7fe fb20 	bl	80085bc <vListInsertEnd>
 8009f7c:	e004      	b.n	8009f88 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8009fac <xTaskPriorityInherit+0xe0>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	60fb      	str	r3, [r7, #12]
 8009f8c:	e008      	b.n	8009fa0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f92:	4b06      	ldr	r3, [pc, #24]	@ (8009fac <xTaskPriorityInherit+0xe0>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d201      	bcs.n	8009fa0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
	}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	20000b54 	.word	0x20000b54
 8009fb0:	20000b58 	.word	0x20000b58
 8009fb4:	20000c5c 	.word	0x20000c5c

08009fb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d070      	beq.n	800a0b0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009fce:	4b3b      	ldr	r3, [pc, #236]	@ (800a0bc <xTaskPriorityDisinherit+0x104>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	693a      	ldr	r2, [r7, #16]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d00b      	beq.n	8009ff0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fdc:	f383 8811 	msr	BASEPRI, r3
 8009fe0:	f3bf 8f6f 	isb	sy
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	60fb      	str	r3, [r7, #12]
}
 8009fea:	bf00      	nop
 8009fec:	bf00      	nop
 8009fee:	e7fd      	b.n	8009fec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10b      	bne.n	800a010 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	60bb      	str	r3, [r7, #8]
}
 800a00a:	bf00      	nop
 800a00c:	bf00      	nop
 800a00e:	e7fd      	b.n	800a00c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a014:	1e5a      	subs	r2, r3, #1
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a022:	429a      	cmp	r2, r3
 800a024:	d044      	beq.n	800a0b0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d140      	bne.n	800a0b0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	3304      	adds	r3, #4
 800a032:	4618      	mov	r0, r3
 800a034:	f7fe fb1f 	bl	8008676 <uxListRemove>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d115      	bne.n	800a06a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a042:	491f      	ldr	r1, [pc, #124]	@ (800a0c0 <xTaskPriorityDisinherit+0x108>)
 800a044:	4613      	mov	r3, r2
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	4413      	add	r3, r2
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	440b      	add	r3, r1
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10a      	bne.n	800a06a <xTaskPriorityDisinherit+0xb2>
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a058:	2201      	movs	r2, #1
 800a05a:	fa02 f303 	lsl.w	r3, r2, r3
 800a05e:	43da      	mvns	r2, r3
 800a060:	4b18      	ldr	r3, [pc, #96]	@ (800a0c4 <xTaskPriorityDisinherit+0x10c>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4013      	ands	r3, r2
 800a066:	4a17      	ldr	r2, [pc, #92]	@ (800a0c4 <xTaskPriorityDisinherit+0x10c>)
 800a068:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a076:	f1c3 0207 	rsb	r2, r3, #7
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a082:	2201      	movs	r2, #1
 800a084:	409a      	lsls	r2, r3
 800a086:	4b0f      	ldr	r3, [pc, #60]	@ (800a0c4 <xTaskPriorityDisinherit+0x10c>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	4a0d      	ldr	r2, [pc, #52]	@ (800a0c4 <xTaskPriorityDisinherit+0x10c>)
 800a08e:	6013      	str	r3, [r2, #0]
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a094:	4613      	mov	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4413      	add	r3, r2
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	4a08      	ldr	r2, [pc, #32]	@ (800a0c0 <xTaskPriorityDisinherit+0x108>)
 800a09e:	441a      	add	r2, r3
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	4610      	mov	r0, r2
 800a0a8:	f7fe fa88 	bl	80085bc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0b0:	697b      	ldr	r3, [r7, #20]
	}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	20000b54 	.word	0x20000b54
 800a0c0:	20000b58 	.word	0x20000b58
 800a0c4:	20000c5c 	.word	0x20000c5c

0800a0c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b088      	sub	sp, #32
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d079      	beq.n	800a1d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10b      	bne.n	800a100 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a0e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	60fb      	str	r3, [r7, #12]
}
 800a0fa:	bf00      	nop
 800a0fc:	bf00      	nop
 800a0fe:	e7fd      	b.n	800a0fc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a104:	683a      	ldr	r2, [r7, #0]
 800a106:	429a      	cmp	r2, r3
 800a108:	d902      	bls.n	800a110 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	61fb      	str	r3, [r7, #28]
 800a10e:	e002      	b.n	800a116 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a114:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a11a:	69fa      	ldr	r2, [r7, #28]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d059      	beq.n	800a1d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a120:	69bb      	ldr	r3, [r7, #24]
 800a122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a124:	697a      	ldr	r2, [r7, #20]
 800a126:	429a      	cmp	r2, r3
 800a128:	d154      	bne.n	800a1d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a12a:	4b2c      	ldr	r3, [pc, #176]	@ (800a1dc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	69ba      	ldr	r2, [r7, #24]
 800a130:	429a      	cmp	r2, r3
 800a132:	d10b      	bne.n	800a14c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a138:	f383 8811 	msr	BASEPRI, r3
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	60bb      	str	r3, [r7, #8]
}
 800a146:	bf00      	nop
 800a148:	bf00      	nop
 800a14a:	e7fd      	b.n	800a148 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a150:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	69fa      	ldr	r2, [r7, #28]
 800a156:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	699b      	ldr	r3, [r3, #24]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	db04      	blt.n	800a16a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	f1c3 0207 	rsb	r2, r3, #7
 800a166:	69bb      	ldr	r3, [r7, #24]
 800a168:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	6959      	ldr	r1, [r3, #20]
 800a16e:	693a      	ldr	r2, [r7, #16]
 800a170:	4613      	mov	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	4a19      	ldr	r2, [pc, #100]	@ (800a1e0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a17a:	4413      	add	r3, r2
 800a17c:	4299      	cmp	r1, r3
 800a17e:	d129      	bne.n	800a1d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	3304      	adds	r3, #4
 800a184:	4618      	mov	r0, r3
 800a186:	f7fe fa76 	bl	8008676 <uxListRemove>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10a      	bne.n	800a1a6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a194:	2201      	movs	r2, #1
 800a196:	fa02 f303 	lsl.w	r3, r2, r3
 800a19a:	43da      	mvns	r2, r3
 800a19c:	4b11      	ldr	r3, [pc, #68]	@ (800a1e4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4013      	ands	r3, r2
 800a1a2:	4a10      	ldr	r2, [pc, #64]	@ (800a1e4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a1a4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	409a      	lsls	r2, r3
 800a1ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a1e4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	4a0b      	ldr	r2, [pc, #44]	@ (800a1e4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a1b6:	6013      	str	r3, [r2, #0]
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1bc:	4613      	mov	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4413      	add	r3, r2
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	4a06      	ldr	r2, [pc, #24]	@ (800a1e0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a1c6:	441a      	add	r2, r3
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	3304      	adds	r3, #4
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	4610      	mov	r0, r2
 800a1d0:	f7fe f9f4 	bl	80085bc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a1d4:	bf00      	nop
 800a1d6:	3720      	adds	r7, #32
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	20000b54 	.word	0x20000b54
 800a1e0:	20000b58 	.word	0x20000b58
 800a1e4:	20000c5c 	.word	0x20000c5c

0800a1e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a1e8:	b480      	push	{r7}
 800a1ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a1ec:	4b07      	ldr	r3, [pc, #28]	@ (800a20c <pvTaskIncrementMutexHeldCount+0x24>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d004      	beq.n	800a1fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a1f4:	4b05      	ldr	r3, [pc, #20]	@ (800a20c <pvTaskIncrementMutexHeldCount+0x24>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a1fa:	3201      	adds	r2, #1
 800a1fc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800a1fe:	4b03      	ldr	r3, [pc, #12]	@ (800a20c <pvTaskIncrementMutexHeldCount+0x24>)
 800a200:	681b      	ldr	r3, [r3, #0]
	}
 800a202:	4618      	mov	r0, r3
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	20000b54 	.word	0x20000b54

0800a210 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a21a:	4b29      	ldr	r3, [pc, #164]	@ (800a2c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a220:	4b28      	ldr	r3, [pc, #160]	@ (800a2c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	3304      	adds	r3, #4
 800a226:	4618      	mov	r0, r3
 800a228:	f7fe fa25 	bl	8008676 <uxListRemove>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d10b      	bne.n	800a24a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a232:	4b24      	ldr	r3, [pc, #144]	@ (800a2c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a238:	2201      	movs	r2, #1
 800a23a:	fa02 f303 	lsl.w	r3, r2, r3
 800a23e:	43da      	mvns	r2, r3
 800a240:	4b21      	ldr	r3, [pc, #132]	@ (800a2c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4013      	ands	r3, r2
 800a246:	4a20      	ldr	r2, [pc, #128]	@ (800a2c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a248:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a250:	d10a      	bne.n	800a268 <prvAddCurrentTaskToDelayedList+0x58>
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d007      	beq.n	800a268 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a258:	4b1a      	ldr	r3, [pc, #104]	@ (800a2c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	3304      	adds	r3, #4
 800a25e:	4619      	mov	r1, r3
 800a260:	481a      	ldr	r0, [pc, #104]	@ (800a2cc <prvAddCurrentTaskToDelayedList+0xbc>)
 800a262:	f7fe f9ab 	bl	80085bc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a266:	e026      	b.n	800a2b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4413      	add	r3, r2
 800a26e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a270:	4b14      	ldr	r3, [pc, #80]	@ (800a2c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68ba      	ldr	r2, [r7, #8]
 800a276:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d209      	bcs.n	800a294 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a280:	4b13      	ldr	r3, [pc, #76]	@ (800a2d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	4b0f      	ldr	r3, [pc, #60]	@ (800a2c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	3304      	adds	r3, #4
 800a28a:	4619      	mov	r1, r3
 800a28c:	4610      	mov	r0, r2
 800a28e:	f7fe f9b9 	bl	8008604 <vListInsert>
}
 800a292:	e010      	b.n	800a2b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a294:	4b0f      	ldr	r3, [pc, #60]	@ (800a2d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	4b0a      	ldr	r3, [pc, #40]	@ (800a2c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	3304      	adds	r3, #4
 800a29e:	4619      	mov	r1, r3
 800a2a0:	4610      	mov	r0, r2
 800a2a2:	f7fe f9af 	bl	8008604 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a2a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a2d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68ba      	ldr	r2, [r7, #8]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d202      	bcs.n	800a2b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a2b0:	4a09      	ldr	r2, [pc, #36]	@ (800a2d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	6013      	str	r3, [r2, #0]
}
 800a2b6:	bf00      	nop
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	20000c58 	.word	0x20000c58
 800a2c4:	20000b54 	.word	0x20000b54
 800a2c8:	20000c5c 	.word	0x20000c5c
 800a2cc:	20000c40 	.word	0x20000c40
 800a2d0:	20000c10 	.word	0x20000c10
 800a2d4:	20000c0c 	.word	0x20000c0c
 800a2d8:	20000c74 	.word	0x20000c74

0800a2dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b085      	sub	sp, #20
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	3b04      	subs	r3, #4
 800a2ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a2f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	3b04      	subs	r3, #4
 800a2fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	f023 0201 	bic.w	r2, r3, #1
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	3b04      	subs	r3, #4
 800a30a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a30c:	4a0c      	ldr	r2, [pc, #48]	@ (800a340 <pxPortInitialiseStack+0x64>)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	3b14      	subs	r3, #20
 800a316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	3b04      	subs	r3, #4
 800a322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f06f 0202 	mvn.w	r2, #2
 800a32a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	3b20      	subs	r3, #32
 800a330:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a332:	68fb      	ldr	r3, [r7, #12]
}
 800a334:	4618      	mov	r0, r3
 800a336:	3714      	adds	r7, #20
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr
 800a340:	0800a345 	.word	0x0800a345

0800a344 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a34a:	2300      	movs	r3, #0
 800a34c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a34e:	4b13      	ldr	r3, [pc, #76]	@ (800a39c <prvTaskExitError+0x58>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a356:	d00b      	beq.n	800a370 <prvTaskExitError+0x2c>
	__asm volatile
 800a358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a35c:	f383 8811 	msr	BASEPRI, r3
 800a360:	f3bf 8f6f 	isb	sy
 800a364:	f3bf 8f4f 	dsb	sy
 800a368:	60fb      	str	r3, [r7, #12]
}
 800a36a:	bf00      	nop
 800a36c:	bf00      	nop
 800a36e:	e7fd      	b.n	800a36c <prvTaskExitError+0x28>
	__asm volatile
 800a370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a374:	f383 8811 	msr	BASEPRI, r3
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	60bb      	str	r3, [r7, #8]
}
 800a382:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a384:	bf00      	nop
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d0fc      	beq.n	800a386 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a38c:	bf00      	nop
 800a38e:	bf00      	nop
 800a390:	3714      	adds	r7, #20
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr
 800a39a:	bf00      	nop
 800a39c:	20000024 	.word	0x20000024

0800a3a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a3a0:	4b07      	ldr	r3, [pc, #28]	@ (800a3c0 <pxCurrentTCBConst2>)
 800a3a2:	6819      	ldr	r1, [r3, #0]
 800a3a4:	6808      	ldr	r0, [r1, #0]
 800a3a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3aa:	f380 8809 	msr	PSP, r0
 800a3ae:	f3bf 8f6f 	isb	sy
 800a3b2:	f04f 0000 	mov.w	r0, #0
 800a3b6:	f380 8811 	msr	BASEPRI, r0
 800a3ba:	4770      	bx	lr
 800a3bc:	f3af 8000 	nop.w

0800a3c0 <pxCurrentTCBConst2>:
 800a3c0:	20000b54 	.word	0x20000b54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a3c4:	bf00      	nop
 800a3c6:	bf00      	nop

0800a3c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a3c8:	4808      	ldr	r0, [pc, #32]	@ (800a3ec <prvPortStartFirstTask+0x24>)
 800a3ca:	6800      	ldr	r0, [r0, #0]
 800a3cc:	6800      	ldr	r0, [r0, #0]
 800a3ce:	f380 8808 	msr	MSP, r0
 800a3d2:	f04f 0000 	mov.w	r0, #0
 800a3d6:	f380 8814 	msr	CONTROL, r0
 800a3da:	b662      	cpsie	i
 800a3dc:	b661      	cpsie	f
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	f3bf 8f6f 	isb	sy
 800a3e6:	df00      	svc	0
 800a3e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a3ea:	bf00      	nop
 800a3ec:	e000ed08 	.word	0xe000ed08

0800a3f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b086      	sub	sp, #24
 800a3f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a3f6:	4b47      	ldr	r3, [pc, #284]	@ (800a514 <xPortStartScheduler+0x124>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a47      	ldr	r2, [pc, #284]	@ (800a518 <xPortStartScheduler+0x128>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d10b      	bne.n	800a418 <xPortStartScheduler+0x28>
	__asm volatile
 800a400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a404:	f383 8811 	msr	BASEPRI, r3
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	613b      	str	r3, [r7, #16]
}
 800a412:	bf00      	nop
 800a414:	bf00      	nop
 800a416:	e7fd      	b.n	800a414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a418:	4b3e      	ldr	r3, [pc, #248]	@ (800a514 <xPortStartScheduler+0x124>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a3f      	ldr	r2, [pc, #252]	@ (800a51c <xPortStartScheduler+0x12c>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d10b      	bne.n	800a43a <xPortStartScheduler+0x4a>
	__asm volatile
 800a422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a426:	f383 8811 	msr	BASEPRI, r3
 800a42a:	f3bf 8f6f 	isb	sy
 800a42e:	f3bf 8f4f 	dsb	sy
 800a432:	60fb      	str	r3, [r7, #12]
}
 800a434:	bf00      	nop
 800a436:	bf00      	nop
 800a438:	e7fd      	b.n	800a436 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a43a:	4b39      	ldr	r3, [pc, #228]	@ (800a520 <xPortStartScheduler+0x130>)
 800a43c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	b2db      	uxtb	r3, r3
 800a444:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	22ff      	movs	r2, #255	@ 0xff
 800a44a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	b2db      	uxtb	r3, r3
 800a452:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a454:	78fb      	ldrb	r3, [r7, #3]
 800a456:	b2db      	uxtb	r3, r3
 800a458:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	4b31      	ldr	r3, [pc, #196]	@ (800a524 <xPortStartScheduler+0x134>)
 800a460:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a462:	4b31      	ldr	r3, [pc, #196]	@ (800a528 <xPortStartScheduler+0x138>)
 800a464:	2207      	movs	r2, #7
 800a466:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a468:	e009      	b.n	800a47e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a46a:	4b2f      	ldr	r3, [pc, #188]	@ (800a528 <xPortStartScheduler+0x138>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	3b01      	subs	r3, #1
 800a470:	4a2d      	ldr	r2, [pc, #180]	@ (800a528 <xPortStartScheduler+0x138>)
 800a472:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a474:	78fb      	ldrb	r3, [r7, #3]
 800a476:	b2db      	uxtb	r3, r3
 800a478:	005b      	lsls	r3, r3, #1
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a47e:	78fb      	ldrb	r3, [r7, #3]
 800a480:	b2db      	uxtb	r3, r3
 800a482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a486:	2b80      	cmp	r3, #128	@ 0x80
 800a488:	d0ef      	beq.n	800a46a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a48a:	4b27      	ldr	r3, [pc, #156]	@ (800a528 <xPortStartScheduler+0x138>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f1c3 0307 	rsb	r3, r3, #7
 800a492:	2b04      	cmp	r3, #4
 800a494:	d00b      	beq.n	800a4ae <xPortStartScheduler+0xbe>
	__asm volatile
 800a496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a49a:	f383 8811 	msr	BASEPRI, r3
 800a49e:	f3bf 8f6f 	isb	sy
 800a4a2:	f3bf 8f4f 	dsb	sy
 800a4a6:	60bb      	str	r3, [r7, #8]
}
 800a4a8:	bf00      	nop
 800a4aa:	bf00      	nop
 800a4ac:	e7fd      	b.n	800a4aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a4ae:	4b1e      	ldr	r3, [pc, #120]	@ (800a528 <xPortStartScheduler+0x138>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	021b      	lsls	r3, r3, #8
 800a4b4:	4a1c      	ldr	r2, [pc, #112]	@ (800a528 <xPortStartScheduler+0x138>)
 800a4b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a4b8:	4b1b      	ldr	r3, [pc, #108]	@ (800a528 <xPortStartScheduler+0x138>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a4c0:	4a19      	ldr	r2, [pc, #100]	@ (800a528 <xPortStartScheduler+0x138>)
 800a4c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	b2da      	uxtb	r2, r3
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a4cc:	4b17      	ldr	r3, [pc, #92]	@ (800a52c <xPortStartScheduler+0x13c>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a16      	ldr	r2, [pc, #88]	@ (800a52c <xPortStartScheduler+0x13c>)
 800a4d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a4d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a4d8:	4b14      	ldr	r3, [pc, #80]	@ (800a52c <xPortStartScheduler+0x13c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a13      	ldr	r2, [pc, #76]	@ (800a52c <xPortStartScheduler+0x13c>)
 800a4de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a4e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a4e4:	f000 f8da 	bl	800a69c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a4e8:	4b11      	ldr	r3, [pc, #68]	@ (800a530 <xPortStartScheduler+0x140>)
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a4ee:	f000 f8f9 	bl	800a6e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a4f2:	4b10      	ldr	r3, [pc, #64]	@ (800a534 <xPortStartScheduler+0x144>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4a0f      	ldr	r2, [pc, #60]	@ (800a534 <xPortStartScheduler+0x144>)
 800a4f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a4fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a4fe:	f7ff ff63 	bl	800a3c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a502:	f7ff fa75 	bl	80099f0 <vTaskSwitchContext>
	prvTaskExitError();
 800a506:	f7ff ff1d 	bl	800a344 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3718      	adds	r7, #24
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}
 800a514:	e000ed00 	.word	0xe000ed00
 800a518:	410fc271 	.word	0x410fc271
 800a51c:	410fc270 	.word	0x410fc270
 800a520:	e000e400 	.word	0xe000e400
 800a524:	20000c80 	.word	0x20000c80
 800a528:	20000c84 	.word	0x20000c84
 800a52c:	e000ed20 	.word	0xe000ed20
 800a530:	20000024 	.word	0x20000024
 800a534:	e000ef34 	.word	0xe000ef34

0800a538 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
	__asm volatile
 800a53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	607b      	str	r3, [r7, #4]
}
 800a550:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a552:	4b10      	ldr	r3, [pc, #64]	@ (800a594 <vPortEnterCritical+0x5c>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	3301      	adds	r3, #1
 800a558:	4a0e      	ldr	r2, [pc, #56]	@ (800a594 <vPortEnterCritical+0x5c>)
 800a55a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a55c:	4b0d      	ldr	r3, [pc, #52]	@ (800a594 <vPortEnterCritical+0x5c>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d110      	bne.n	800a586 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a564:	4b0c      	ldr	r3, [pc, #48]	@ (800a598 <vPortEnterCritical+0x60>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00b      	beq.n	800a586 <vPortEnterCritical+0x4e>
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	603b      	str	r3, [r7, #0]
}
 800a580:	bf00      	nop
 800a582:	bf00      	nop
 800a584:	e7fd      	b.n	800a582 <vPortEnterCritical+0x4a>
	}
}
 800a586:	bf00      	nop
 800a588:	370c      	adds	r7, #12
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	20000024 	.word	0x20000024
 800a598:	e000ed04 	.word	0xe000ed04

0800a59c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a5a2:	4b12      	ldr	r3, [pc, #72]	@ (800a5ec <vPortExitCritical+0x50>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d10b      	bne.n	800a5c2 <vPortExitCritical+0x26>
	__asm volatile
 800a5aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ae:	f383 8811 	msr	BASEPRI, r3
 800a5b2:	f3bf 8f6f 	isb	sy
 800a5b6:	f3bf 8f4f 	dsb	sy
 800a5ba:	607b      	str	r3, [r7, #4]
}
 800a5bc:	bf00      	nop
 800a5be:	bf00      	nop
 800a5c0:	e7fd      	b.n	800a5be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a5c2:	4b0a      	ldr	r3, [pc, #40]	@ (800a5ec <vPortExitCritical+0x50>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	4a08      	ldr	r2, [pc, #32]	@ (800a5ec <vPortExitCritical+0x50>)
 800a5ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a5cc:	4b07      	ldr	r3, [pc, #28]	@ (800a5ec <vPortExitCritical+0x50>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d105      	bne.n	800a5e0 <vPortExitCritical+0x44>
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	f383 8811 	msr	BASEPRI, r3
}
 800a5de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr
 800a5ec:	20000024 	.word	0x20000024

0800a5f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a5f0:	f3ef 8009 	mrs	r0, PSP
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	4b15      	ldr	r3, [pc, #84]	@ (800a650 <pxCurrentTCBConst>)
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	f01e 0f10 	tst.w	lr, #16
 800a600:	bf08      	it	eq
 800a602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a60a:	6010      	str	r0, [r2, #0]
 800a60c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a610:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a614:	f380 8811 	msr	BASEPRI, r0
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	f7ff f9e6 	bl	80099f0 <vTaskSwitchContext>
 800a624:	f04f 0000 	mov.w	r0, #0
 800a628:	f380 8811 	msr	BASEPRI, r0
 800a62c:	bc09      	pop	{r0, r3}
 800a62e:	6819      	ldr	r1, [r3, #0]
 800a630:	6808      	ldr	r0, [r1, #0]
 800a632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a636:	f01e 0f10 	tst.w	lr, #16
 800a63a:	bf08      	it	eq
 800a63c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a640:	f380 8809 	msr	PSP, r0
 800a644:	f3bf 8f6f 	isb	sy
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	f3af 8000 	nop.w

0800a650 <pxCurrentTCBConst>:
 800a650:	20000b54 	.word	0x20000b54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a654:	bf00      	nop
 800a656:	bf00      	nop

0800a658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
	__asm volatile
 800a65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a662:	f383 8811 	msr	BASEPRI, r3
 800a666:	f3bf 8f6f 	isb	sy
 800a66a:	f3bf 8f4f 	dsb	sy
 800a66e:	607b      	str	r3, [r7, #4]
}
 800a670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a672:	f7ff f903 	bl	800987c <xTaskIncrementTick>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d003      	beq.n	800a684 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a67c:	4b06      	ldr	r3, [pc, #24]	@ (800a698 <SysTick_Handler+0x40>)
 800a67e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a682:	601a      	str	r2, [r3, #0]
 800a684:	2300      	movs	r3, #0
 800a686:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	f383 8811 	msr	BASEPRI, r3
}
 800a68e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a690:	bf00      	nop
 800a692:	3708      	adds	r7, #8
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	e000ed04 	.word	0xe000ed04

0800a69c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a69c:	b480      	push	{r7}
 800a69e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a6a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a6d0 <vPortSetupTimerInterrupt+0x34>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a6a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a6d4 <vPortSetupTimerInterrupt+0x38>)
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a6ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a6d8 <vPortSetupTimerInterrupt+0x3c>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a0a      	ldr	r2, [pc, #40]	@ (800a6dc <vPortSetupTimerInterrupt+0x40>)
 800a6b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6b6:	099b      	lsrs	r3, r3, #6
 800a6b8:	4a09      	ldr	r2, [pc, #36]	@ (800a6e0 <vPortSetupTimerInterrupt+0x44>)
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a6be:	4b04      	ldr	r3, [pc, #16]	@ (800a6d0 <vPortSetupTimerInterrupt+0x34>)
 800a6c0:	2207      	movs	r2, #7
 800a6c2:	601a      	str	r2, [r3, #0]
}
 800a6c4:	bf00      	nop
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop
 800a6d0:	e000e010 	.word	0xe000e010
 800a6d4:	e000e018 	.word	0xe000e018
 800a6d8:	20000004 	.word	0x20000004
 800a6dc:	10624dd3 	.word	0x10624dd3
 800a6e0:	e000e014 	.word	0xe000e014

0800a6e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a6e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a6f4 <vPortEnableVFP+0x10>
 800a6e8:	6801      	ldr	r1, [r0, #0]
 800a6ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a6ee:	6001      	str	r1, [r0, #0]
 800a6f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a6f2:	bf00      	nop
 800a6f4:	e000ed88 	.word	0xe000ed88

0800a6f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a6fe:	f3ef 8305 	mrs	r3, IPSR
 800a702:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2b0f      	cmp	r3, #15
 800a708:	d915      	bls.n	800a736 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a70a:	4a18      	ldr	r2, [pc, #96]	@ (800a76c <vPortValidateInterruptPriority+0x74>)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	4413      	add	r3, r2
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a714:	4b16      	ldr	r3, [pc, #88]	@ (800a770 <vPortValidateInterruptPriority+0x78>)
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	7afa      	ldrb	r2, [r7, #11]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d20b      	bcs.n	800a736 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	607b      	str	r3, [r7, #4]
}
 800a730:	bf00      	nop
 800a732:	bf00      	nop
 800a734:	e7fd      	b.n	800a732 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a736:	4b0f      	ldr	r3, [pc, #60]	@ (800a774 <vPortValidateInterruptPriority+0x7c>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a73e:	4b0e      	ldr	r3, [pc, #56]	@ (800a778 <vPortValidateInterruptPriority+0x80>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	429a      	cmp	r2, r3
 800a744:	d90b      	bls.n	800a75e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	603b      	str	r3, [r7, #0]
}
 800a758:	bf00      	nop
 800a75a:	bf00      	nop
 800a75c:	e7fd      	b.n	800a75a <vPortValidateInterruptPriority+0x62>
	}
 800a75e:	bf00      	nop
 800a760:	3714      	adds	r7, #20
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	e000e3f0 	.word	0xe000e3f0
 800a770:	20000c80 	.word	0x20000c80
 800a774:	e000ed0c 	.word	0xe000ed0c
 800a778:	20000c84 	.word	0x20000c84

0800a77c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b08a      	sub	sp, #40	@ 0x28
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a784:	2300      	movs	r3, #0
 800a786:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a788:	f7fe ffcc 	bl	8009724 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a78c:	4b5c      	ldr	r3, [pc, #368]	@ (800a900 <pvPortMalloc+0x184>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d101      	bne.n	800a798 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a794:	f000 f924 	bl	800a9e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a798:	4b5a      	ldr	r3, [pc, #360]	@ (800a904 <pvPortMalloc+0x188>)
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4013      	ands	r3, r2
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f040 8095 	bne.w	800a8d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d01e      	beq.n	800a7ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a7ac:	2208      	movs	r2, #8
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f003 0307 	and.w	r3, r3, #7
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d015      	beq.n	800a7ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f023 0307 	bic.w	r3, r3, #7
 800a7c4:	3308      	adds	r3, #8
 800a7c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f003 0307 	and.w	r3, r3, #7
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d00b      	beq.n	800a7ea <pvPortMalloc+0x6e>
	__asm volatile
 800a7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d6:	f383 8811 	msr	BASEPRI, r3
 800a7da:	f3bf 8f6f 	isb	sy
 800a7de:	f3bf 8f4f 	dsb	sy
 800a7e2:	617b      	str	r3, [r7, #20]
}
 800a7e4:	bf00      	nop
 800a7e6:	bf00      	nop
 800a7e8:	e7fd      	b.n	800a7e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d06f      	beq.n	800a8d0 <pvPortMalloc+0x154>
 800a7f0:	4b45      	ldr	r3, [pc, #276]	@ (800a908 <pvPortMalloc+0x18c>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d86a      	bhi.n	800a8d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a7fa:	4b44      	ldr	r3, [pc, #272]	@ (800a90c <pvPortMalloc+0x190>)
 800a7fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a7fe:	4b43      	ldr	r3, [pc, #268]	@ (800a90c <pvPortMalloc+0x190>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a804:	e004      	b.n	800a810 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a808:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	429a      	cmp	r2, r3
 800a818:	d903      	bls.n	800a822 <pvPortMalloc+0xa6>
 800a81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d1f1      	bne.n	800a806 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a822:	4b37      	ldr	r3, [pc, #220]	@ (800a900 <pvPortMalloc+0x184>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a828:	429a      	cmp	r2, r3
 800a82a:	d051      	beq.n	800a8d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a82c:	6a3b      	ldr	r3, [r7, #32]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2208      	movs	r2, #8
 800a832:	4413      	add	r3, r2
 800a834:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	6a3b      	ldr	r3, [r7, #32]
 800a83c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a840:	685a      	ldr	r2, [r3, #4]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	1ad2      	subs	r2, r2, r3
 800a846:	2308      	movs	r3, #8
 800a848:	005b      	lsls	r3, r3, #1
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d920      	bls.n	800a890 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a84e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4413      	add	r3, r2
 800a854:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	f003 0307 	and.w	r3, r3, #7
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d00b      	beq.n	800a878 <pvPortMalloc+0xfc>
	__asm volatile
 800a860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a864:	f383 8811 	msr	BASEPRI, r3
 800a868:	f3bf 8f6f 	isb	sy
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	613b      	str	r3, [r7, #16]
}
 800a872:	bf00      	nop
 800a874:	bf00      	nop
 800a876:	e7fd      	b.n	800a874 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87a:	685a      	ldr	r2, [r3, #4]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	1ad2      	subs	r2, r2, r3
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a88a:	69b8      	ldr	r0, [r7, #24]
 800a88c:	f000 f90a 	bl	800aaa4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a890:	4b1d      	ldr	r3, [pc, #116]	@ (800a908 <pvPortMalloc+0x18c>)
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	1ad3      	subs	r3, r2, r3
 800a89a:	4a1b      	ldr	r2, [pc, #108]	@ (800a908 <pvPortMalloc+0x18c>)
 800a89c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a89e:	4b1a      	ldr	r3, [pc, #104]	@ (800a908 <pvPortMalloc+0x18c>)
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a910 <pvPortMalloc+0x194>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d203      	bcs.n	800a8b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a8aa:	4b17      	ldr	r3, [pc, #92]	@ (800a908 <pvPortMalloc+0x18c>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a18      	ldr	r2, [pc, #96]	@ (800a910 <pvPortMalloc+0x194>)
 800a8b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b4:	685a      	ldr	r2, [r3, #4]
 800a8b6:	4b13      	ldr	r3, [pc, #76]	@ (800a904 <pvPortMalloc+0x188>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	431a      	orrs	r2, r3
 800a8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a8c6:	4b13      	ldr	r3, [pc, #76]	@ (800a914 <pvPortMalloc+0x198>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	4a11      	ldr	r2, [pc, #68]	@ (800a914 <pvPortMalloc+0x198>)
 800a8ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a8d0:	f7fe ff36 	bl	8009740 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	f003 0307 	and.w	r3, r3, #7
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00b      	beq.n	800a8f6 <pvPortMalloc+0x17a>
	__asm volatile
 800a8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e2:	f383 8811 	msr	BASEPRI, r3
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	60fb      	str	r3, [r7, #12]
}
 800a8f0:	bf00      	nop
 800a8f2:	bf00      	nop
 800a8f4:	e7fd      	b.n	800a8f2 <pvPortMalloc+0x176>
	return pvReturn;
 800a8f6:	69fb      	ldr	r3, [r7, #28]
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3728      	adds	r7, #40	@ 0x28
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	20004890 	.word	0x20004890
 800a904:	200048a4 	.word	0x200048a4
 800a908:	20004894 	.word	0x20004894
 800a90c:	20004888 	.word	0x20004888
 800a910:	20004898 	.word	0x20004898
 800a914:	2000489c 	.word	0x2000489c

0800a918 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b086      	sub	sp, #24
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d04f      	beq.n	800a9ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a92a:	2308      	movs	r3, #8
 800a92c:	425b      	negs	r3, r3
 800a92e:	697a      	ldr	r2, [r7, #20]
 800a930:	4413      	add	r3, r2
 800a932:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	685a      	ldr	r2, [r3, #4]
 800a93c:	4b25      	ldr	r3, [pc, #148]	@ (800a9d4 <vPortFree+0xbc>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4013      	ands	r3, r2
 800a942:	2b00      	cmp	r3, #0
 800a944:	d10b      	bne.n	800a95e <vPortFree+0x46>
	__asm volatile
 800a946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a94a:	f383 8811 	msr	BASEPRI, r3
 800a94e:	f3bf 8f6f 	isb	sy
 800a952:	f3bf 8f4f 	dsb	sy
 800a956:	60fb      	str	r3, [r7, #12]
}
 800a958:	bf00      	nop
 800a95a:	bf00      	nop
 800a95c:	e7fd      	b.n	800a95a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d00b      	beq.n	800a97e <vPortFree+0x66>
	__asm volatile
 800a966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a96a:	f383 8811 	msr	BASEPRI, r3
 800a96e:	f3bf 8f6f 	isb	sy
 800a972:	f3bf 8f4f 	dsb	sy
 800a976:	60bb      	str	r3, [r7, #8]
}
 800a978:	bf00      	nop
 800a97a:	bf00      	nop
 800a97c:	e7fd      	b.n	800a97a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	685a      	ldr	r2, [r3, #4]
 800a982:	4b14      	ldr	r3, [pc, #80]	@ (800a9d4 <vPortFree+0xbc>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4013      	ands	r3, r2
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d01e      	beq.n	800a9ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d11a      	bne.n	800a9ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	685a      	ldr	r2, [r3, #4]
 800a998:	4b0e      	ldr	r3, [pc, #56]	@ (800a9d4 <vPortFree+0xbc>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	43db      	mvns	r3, r3
 800a99e:	401a      	ands	r2, r3
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a9a4:	f7fe febe 	bl	8009724 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a9d8 <vPortFree+0xc0>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	4a09      	ldr	r2, [pc, #36]	@ (800a9d8 <vPortFree+0xc0>)
 800a9b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a9b6:	6938      	ldr	r0, [r7, #16]
 800a9b8:	f000 f874 	bl	800aaa4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a9bc:	4b07      	ldr	r3, [pc, #28]	@ (800a9dc <vPortFree+0xc4>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	4a06      	ldr	r2, [pc, #24]	@ (800a9dc <vPortFree+0xc4>)
 800a9c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a9c6:	f7fe febb 	bl	8009740 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a9ca:	bf00      	nop
 800a9cc:	3718      	adds	r7, #24
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	200048a4 	.word	0x200048a4
 800a9d8:	20004894 	.word	0x20004894
 800a9dc:	200048a0 	.word	0x200048a0

0800a9e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b085      	sub	sp, #20
 800a9e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a9e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a9ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a9ec:	4b27      	ldr	r3, [pc, #156]	@ (800aa8c <prvHeapInit+0xac>)
 800a9ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f003 0307 	and.w	r3, r3, #7
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00c      	beq.n	800aa14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	3307      	adds	r3, #7
 800a9fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f023 0307 	bic.w	r3, r3, #7
 800aa06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aa08:	68ba      	ldr	r2, [r7, #8]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	1ad3      	subs	r3, r2, r3
 800aa0e:	4a1f      	ldr	r2, [pc, #124]	@ (800aa8c <prvHeapInit+0xac>)
 800aa10:	4413      	add	r3, r2
 800aa12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa18:	4a1d      	ldr	r2, [pc, #116]	@ (800aa90 <prvHeapInit+0xb0>)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa1e:	4b1c      	ldr	r3, [pc, #112]	@ (800aa90 <prvHeapInit+0xb0>)
 800aa20:	2200      	movs	r2, #0
 800aa22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	68ba      	ldr	r2, [r7, #8]
 800aa28:	4413      	add	r3, r2
 800aa2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa2c:	2208      	movs	r2, #8
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	1a9b      	subs	r3, r3, r2
 800aa32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f023 0307 	bic.w	r3, r3, #7
 800aa3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	4a15      	ldr	r2, [pc, #84]	@ (800aa94 <prvHeapInit+0xb4>)
 800aa40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aa42:	4b14      	ldr	r3, [pc, #80]	@ (800aa94 <prvHeapInit+0xb4>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	2200      	movs	r2, #0
 800aa48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa4a:	4b12      	ldr	r3, [pc, #72]	@ (800aa94 <prvHeapInit+0xb4>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	1ad2      	subs	r2, r2, r3
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa60:	4b0c      	ldr	r3, [pc, #48]	@ (800aa94 <prvHeapInit+0xb4>)
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	4a0a      	ldr	r2, [pc, #40]	@ (800aa98 <prvHeapInit+0xb8>)
 800aa6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	4a09      	ldr	r2, [pc, #36]	@ (800aa9c <prvHeapInit+0xbc>)
 800aa76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa78:	4b09      	ldr	r3, [pc, #36]	@ (800aaa0 <prvHeapInit+0xc0>)
 800aa7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800aa7e:	601a      	str	r2, [r3, #0]
}
 800aa80:	bf00      	nop
 800aa82:	3714      	adds	r7, #20
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr
 800aa8c:	20000c88 	.word	0x20000c88
 800aa90:	20004888 	.word	0x20004888
 800aa94:	20004890 	.word	0x20004890
 800aa98:	20004898 	.word	0x20004898
 800aa9c:	20004894 	.word	0x20004894
 800aaa0:	200048a4 	.word	0x200048a4

0800aaa4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aaac:	4b28      	ldr	r3, [pc, #160]	@ (800ab50 <prvInsertBlockIntoFreeList+0xac>)
 800aaae:	60fb      	str	r3, [r7, #12]
 800aab0:	e002      	b.n	800aab8 <prvInsertBlockIntoFreeList+0x14>
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	60fb      	str	r3, [r7, #12]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d8f7      	bhi.n	800aab2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	68ba      	ldr	r2, [r7, #8]
 800aacc:	4413      	add	r3, r2
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d108      	bne.n	800aae6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	685a      	ldr	r2, [r3, #4]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	441a      	add	r2, r3
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	68ba      	ldr	r2, [r7, #8]
 800aaf0:	441a      	add	r2, r3
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d118      	bne.n	800ab2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	4b15      	ldr	r3, [pc, #84]	@ (800ab54 <prvInsertBlockIntoFreeList+0xb0>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d00d      	beq.n	800ab22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	685a      	ldr	r2, [r3, #4]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	441a      	add	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	601a      	str	r2, [r3, #0]
 800ab20:	e008      	b.n	800ab34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab22:	4b0c      	ldr	r3, [pc, #48]	@ (800ab54 <prvInsertBlockIntoFreeList+0xb0>)
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	601a      	str	r2, [r3, #0]
 800ab2a:	e003      	b.n	800ab34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d002      	beq.n	800ab42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab42:	bf00      	nop
 800ab44:	3714      	adds	r7, #20
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	20004888 	.word	0x20004888
 800ab54:	20004890 	.word	0x20004890

0800ab58 <__cvt>:
 800ab58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab5c:	ec57 6b10 	vmov	r6, r7, d0
 800ab60:	2f00      	cmp	r7, #0
 800ab62:	460c      	mov	r4, r1
 800ab64:	4619      	mov	r1, r3
 800ab66:	463b      	mov	r3, r7
 800ab68:	bfbb      	ittet	lt
 800ab6a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ab6e:	461f      	movlt	r7, r3
 800ab70:	2300      	movge	r3, #0
 800ab72:	232d      	movlt	r3, #45	@ 0x2d
 800ab74:	700b      	strb	r3, [r1, #0]
 800ab76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab78:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ab7c:	4691      	mov	r9, r2
 800ab7e:	f023 0820 	bic.w	r8, r3, #32
 800ab82:	bfbc      	itt	lt
 800ab84:	4632      	movlt	r2, r6
 800ab86:	4616      	movlt	r6, r2
 800ab88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ab8c:	d005      	beq.n	800ab9a <__cvt+0x42>
 800ab8e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ab92:	d100      	bne.n	800ab96 <__cvt+0x3e>
 800ab94:	3401      	adds	r4, #1
 800ab96:	2102      	movs	r1, #2
 800ab98:	e000      	b.n	800ab9c <__cvt+0x44>
 800ab9a:	2103      	movs	r1, #3
 800ab9c:	ab03      	add	r3, sp, #12
 800ab9e:	9301      	str	r3, [sp, #4]
 800aba0:	ab02      	add	r3, sp, #8
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	ec47 6b10 	vmov	d0, r6, r7
 800aba8:	4653      	mov	r3, sl
 800abaa:	4622      	mov	r2, r4
 800abac:	f001 f8d8 	bl	800bd60 <_dtoa_r>
 800abb0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800abb4:	4605      	mov	r5, r0
 800abb6:	d119      	bne.n	800abec <__cvt+0x94>
 800abb8:	f019 0f01 	tst.w	r9, #1
 800abbc:	d00e      	beq.n	800abdc <__cvt+0x84>
 800abbe:	eb00 0904 	add.w	r9, r0, r4
 800abc2:	2200      	movs	r2, #0
 800abc4:	2300      	movs	r3, #0
 800abc6:	4630      	mov	r0, r6
 800abc8:	4639      	mov	r1, r7
 800abca:	f7f5 ffad 	bl	8000b28 <__aeabi_dcmpeq>
 800abce:	b108      	cbz	r0, 800abd4 <__cvt+0x7c>
 800abd0:	f8cd 900c 	str.w	r9, [sp, #12]
 800abd4:	2230      	movs	r2, #48	@ 0x30
 800abd6:	9b03      	ldr	r3, [sp, #12]
 800abd8:	454b      	cmp	r3, r9
 800abda:	d31e      	bcc.n	800ac1a <__cvt+0xc2>
 800abdc:	9b03      	ldr	r3, [sp, #12]
 800abde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abe0:	1b5b      	subs	r3, r3, r5
 800abe2:	4628      	mov	r0, r5
 800abe4:	6013      	str	r3, [r2, #0]
 800abe6:	b004      	add	sp, #16
 800abe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800abf0:	eb00 0904 	add.w	r9, r0, r4
 800abf4:	d1e5      	bne.n	800abc2 <__cvt+0x6a>
 800abf6:	7803      	ldrb	r3, [r0, #0]
 800abf8:	2b30      	cmp	r3, #48	@ 0x30
 800abfa:	d10a      	bne.n	800ac12 <__cvt+0xba>
 800abfc:	2200      	movs	r2, #0
 800abfe:	2300      	movs	r3, #0
 800ac00:	4630      	mov	r0, r6
 800ac02:	4639      	mov	r1, r7
 800ac04:	f7f5 ff90 	bl	8000b28 <__aeabi_dcmpeq>
 800ac08:	b918      	cbnz	r0, 800ac12 <__cvt+0xba>
 800ac0a:	f1c4 0401 	rsb	r4, r4, #1
 800ac0e:	f8ca 4000 	str.w	r4, [sl]
 800ac12:	f8da 3000 	ldr.w	r3, [sl]
 800ac16:	4499      	add	r9, r3
 800ac18:	e7d3      	b.n	800abc2 <__cvt+0x6a>
 800ac1a:	1c59      	adds	r1, r3, #1
 800ac1c:	9103      	str	r1, [sp, #12]
 800ac1e:	701a      	strb	r2, [r3, #0]
 800ac20:	e7d9      	b.n	800abd6 <__cvt+0x7e>

0800ac22 <__exponent>:
 800ac22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac24:	2900      	cmp	r1, #0
 800ac26:	bfba      	itte	lt
 800ac28:	4249      	neglt	r1, r1
 800ac2a:	232d      	movlt	r3, #45	@ 0x2d
 800ac2c:	232b      	movge	r3, #43	@ 0x2b
 800ac2e:	2909      	cmp	r1, #9
 800ac30:	7002      	strb	r2, [r0, #0]
 800ac32:	7043      	strb	r3, [r0, #1]
 800ac34:	dd29      	ble.n	800ac8a <__exponent+0x68>
 800ac36:	f10d 0307 	add.w	r3, sp, #7
 800ac3a:	461d      	mov	r5, r3
 800ac3c:	270a      	movs	r7, #10
 800ac3e:	461a      	mov	r2, r3
 800ac40:	fbb1 f6f7 	udiv	r6, r1, r7
 800ac44:	fb07 1416 	mls	r4, r7, r6, r1
 800ac48:	3430      	adds	r4, #48	@ 0x30
 800ac4a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ac4e:	460c      	mov	r4, r1
 800ac50:	2c63      	cmp	r4, #99	@ 0x63
 800ac52:	f103 33ff 	add.w	r3, r3, #4294967295
 800ac56:	4631      	mov	r1, r6
 800ac58:	dcf1      	bgt.n	800ac3e <__exponent+0x1c>
 800ac5a:	3130      	adds	r1, #48	@ 0x30
 800ac5c:	1e94      	subs	r4, r2, #2
 800ac5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ac62:	1c41      	adds	r1, r0, #1
 800ac64:	4623      	mov	r3, r4
 800ac66:	42ab      	cmp	r3, r5
 800ac68:	d30a      	bcc.n	800ac80 <__exponent+0x5e>
 800ac6a:	f10d 0309 	add.w	r3, sp, #9
 800ac6e:	1a9b      	subs	r3, r3, r2
 800ac70:	42ac      	cmp	r4, r5
 800ac72:	bf88      	it	hi
 800ac74:	2300      	movhi	r3, #0
 800ac76:	3302      	adds	r3, #2
 800ac78:	4403      	add	r3, r0
 800ac7a:	1a18      	subs	r0, r3, r0
 800ac7c:	b003      	add	sp, #12
 800ac7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac80:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ac84:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ac88:	e7ed      	b.n	800ac66 <__exponent+0x44>
 800ac8a:	2330      	movs	r3, #48	@ 0x30
 800ac8c:	3130      	adds	r1, #48	@ 0x30
 800ac8e:	7083      	strb	r3, [r0, #2]
 800ac90:	70c1      	strb	r1, [r0, #3]
 800ac92:	1d03      	adds	r3, r0, #4
 800ac94:	e7f1      	b.n	800ac7a <__exponent+0x58>
	...

0800ac98 <_printf_float>:
 800ac98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac9c:	b08d      	sub	sp, #52	@ 0x34
 800ac9e:	460c      	mov	r4, r1
 800aca0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800aca4:	4616      	mov	r6, r2
 800aca6:	461f      	mov	r7, r3
 800aca8:	4605      	mov	r5, r0
 800acaa:	f000 feef 	bl	800ba8c <_localeconv_r>
 800acae:	6803      	ldr	r3, [r0, #0]
 800acb0:	9304      	str	r3, [sp, #16]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7f5 fb0c 	bl	80002d0 <strlen>
 800acb8:	2300      	movs	r3, #0
 800acba:	930a      	str	r3, [sp, #40]	@ 0x28
 800acbc:	f8d8 3000 	ldr.w	r3, [r8]
 800acc0:	9005      	str	r0, [sp, #20]
 800acc2:	3307      	adds	r3, #7
 800acc4:	f023 0307 	bic.w	r3, r3, #7
 800acc8:	f103 0208 	add.w	r2, r3, #8
 800accc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800acd0:	f8d4 b000 	ldr.w	fp, [r4]
 800acd4:	f8c8 2000 	str.w	r2, [r8]
 800acd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800acdc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ace0:	9307      	str	r3, [sp, #28]
 800ace2:	f8cd 8018 	str.w	r8, [sp, #24]
 800ace6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800acea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acee:	4b9c      	ldr	r3, [pc, #624]	@ (800af60 <_printf_float+0x2c8>)
 800acf0:	f04f 32ff 	mov.w	r2, #4294967295
 800acf4:	f7f5 ff4a 	bl	8000b8c <__aeabi_dcmpun>
 800acf8:	bb70      	cbnz	r0, 800ad58 <_printf_float+0xc0>
 800acfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acfe:	4b98      	ldr	r3, [pc, #608]	@ (800af60 <_printf_float+0x2c8>)
 800ad00:	f04f 32ff 	mov.w	r2, #4294967295
 800ad04:	f7f5 ff24 	bl	8000b50 <__aeabi_dcmple>
 800ad08:	bb30      	cbnz	r0, 800ad58 <_printf_float+0xc0>
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	4640      	mov	r0, r8
 800ad10:	4649      	mov	r1, r9
 800ad12:	f7f5 ff13 	bl	8000b3c <__aeabi_dcmplt>
 800ad16:	b110      	cbz	r0, 800ad1e <_printf_float+0x86>
 800ad18:	232d      	movs	r3, #45	@ 0x2d
 800ad1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad1e:	4a91      	ldr	r2, [pc, #580]	@ (800af64 <_printf_float+0x2cc>)
 800ad20:	4b91      	ldr	r3, [pc, #580]	@ (800af68 <_printf_float+0x2d0>)
 800ad22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ad26:	bf94      	ite	ls
 800ad28:	4690      	movls	r8, r2
 800ad2a:	4698      	movhi	r8, r3
 800ad2c:	2303      	movs	r3, #3
 800ad2e:	6123      	str	r3, [r4, #16]
 800ad30:	f02b 0304 	bic.w	r3, fp, #4
 800ad34:	6023      	str	r3, [r4, #0]
 800ad36:	f04f 0900 	mov.w	r9, #0
 800ad3a:	9700      	str	r7, [sp, #0]
 800ad3c:	4633      	mov	r3, r6
 800ad3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ad40:	4621      	mov	r1, r4
 800ad42:	4628      	mov	r0, r5
 800ad44:	f000 f9d2 	bl	800b0ec <_printf_common>
 800ad48:	3001      	adds	r0, #1
 800ad4a:	f040 808d 	bne.w	800ae68 <_printf_float+0x1d0>
 800ad4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad52:	b00d      	add	sp, #52	@ 0x34
 800ad54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad58:	4642      	mov	r2, r8
 800ad5a:	464b      	mov	r3, r9
 800ad5c:	4640      	mov	r0, r8
 800ad5e:	4649      	mov	r1, r9
 800ad60:	f7f5 ff14 	bl	8000b8c <__aeabi_dcmpun>
 800ad64:	b140      	cbz	r0, 800ad78 <_printf_float+0xe0>
 800ad66:	464b      	mov	r3, r9
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	bfbc      	itt	lt
 800ad6c:	232d      	movlt	r3, #45	@ 0x2d
 800ad6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ad72:	4a7e      	ldr	r2, [pc, #504]	@ (800af6c <_printf_float+0x2d4>)
 800ad74:	4b7e      	ldr	r3, [pc, #504]	@ (800af70 <_printf_float+0x2d8>)
 800ad76:	e7d4      	b.n	800ad22 <_printf_float+0x8a>
 800ad78:	6863      	ldr	r3, [r4, #4]
 800ad7a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ad7e:	9206      	str	r2, [sp, #24]
 800ad80:	1c5a      	adds	r2, r3, #1
 800ad82:	d13b      	bne.n	800adfc <_printf_float+0x164>
 800ad84:	2306      	movs	r3, #6
 800ad86:	6063      	str	r3, [r4, #4]
 800ad88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	6022      	str	r2, [r4, #0]
 800ad90:	9303      	str	r3, [sp, #12]
 800ad92:	ab0a      	add	r3, sp, #40	@ 0x28
 800ad94:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ad98:	ab09      	add	r3, sp, #36	@ 0x24
 800ad9a:	9300      	str	r3, [sp, #0]
 800ad9c:	6861      	ldr	r1, [r4, #4]
 800ad9e:	ec49 8b10 	vmov	d0, r8, r9
 800ada2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ada6:	4628      	mov	r0, r5
 800ada8:	f7ff fed6 	bl	800ab58 <__cvt>
 800adac:	9b06      	ldr	r3, [sp, #24]
 800adae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800adb0:	2b47      	cmp	r3, #71	@ 0x47
 800adb2:	4680      	mov	r8, r0
 800adb4:	d129      	bne.n	800ae0a <_printf_float+0x172>
 800adb6:	1cc8      	adds	r0, r1, #3
 800adb8:	db02      	blt.n	800adc0 <_printf_float+0x128>
 800adba:	6863      	ldr	r3, [r4, #4]
 800adbc:	4299      	cmp	r1, r3
 800adbe:	dd41      	ble.n	800ae44 <_printf_float+0x1ac>
 800adc0:	f1aa 0a02 	sub.w	sl, sl, #2
 800adc4:	fa5f fa8a 	uxtb.w	sl, sl
 800adc8:	3901      	subs	r1, #1
 800adca:	4652      	mov	r2, sl
 800adcc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800add0:	9109      	str	r1, [sp, #36]	@ 0x24
 800add2:	f7ff ff26 	bl	800ac22 <__exponent>
 800add6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800add8:	1813      	adds	r3, r2, r0
 800adda:	2a01      	cmp	r2, #1
 800addc:	4681      	mov	r9, r0
 800adde:	6123      	str	r3, [r4, #16]
 800ade0:	dc02      	bgt.n	800ade8 <_printf_float+0x150>
 800ade2:	6822      	ldr	r2, [r4, #0]
 800ade4:	07d2      	lsls	r2, r2, #31
 800ade6:	d501      	bpl.n	800adec <_printf_float+0x154>
 800ade8:	3301      	adds	r3, #1
 800adea:	6123      	str	r3, [r4, #16]
 800adec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d0a2      	beq.n	800ad3a <_printf_float+0xa2>
 800adf4:	232d      	movs	r3, #45	@ 0x2d
 800adf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adfa:	e79e      	b.n	800ad3a <_printf_float+0xa2>
 800adfc:	9a06      	ldr	r2, [sp, #24]
 800adfe:	2a47      	cmp	r2, #71	@ 0x47
 800ae00:	d1c2      	bne.n	800ad88 <_printf_float+0xf0>
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1c0      	bne.n	800ad88 <_printf_float+0xf0>
 800ae06:	2301      	movs	r3, #1
 800ae08:	e7bd      	b.n	800ad86 <_printf_float+0xee>
 800ae0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ae0e:	d9db      	bls.n	800adc8 <_printf_float+0x130>
 800ae10:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ae14:	d118      	bne.n	800ae48 <_printf_float+0x1b0>
 800ae16:	2900      	cmp	r1, #0
 800ae18:	6863      	ldr	r3, [r4, #4]
 800ae1a:	dd0b      	ble.n	800ae34 <_printf_float+0x19c>
 800ae1c:	6121      	str	r1, [r4, #16]
 800ae1e:	b913      	cbnz	r3, 800ae26 <_printf_float+0x18e>
 800ae20:	6822      	ldr	r2, [r4, #0]
 800ae22:	07d0      	lsls	r0, r2, #31
 800ae24:	d502      	bpl.n	800ae2c <_printf_float+0x194>
 800ae26:	3301      	adds	r3, #1
 800ae28:	440b      	add	r3, r1
 800ae2a:	6123      	str	r3, [r4, #16]
 800ae2c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ae2e:	f04f 0900 	mov.w	r9, #0
 800ae32:	e7db      	b.n	800adec <_printf_float+0x154>
 800ae34:	b913      	cbnz	r3, 800ae3c <_printf_float+0x1a4>
 800ae36:	6822      	ldr	r2, [r4, #0]
 800ae38:	07d2      	lsls	r2, r2, #31
 800ae3a:	d501      	bpl.n	800ae40 <_printf_float+0x1a8>
 800ae3c:	3302      	adds	r3, #2
 800ae3e:	e7f4      	b.n	800ae2a <_printf_float+0x192>
 800ae40:	2301      	movs	r3, #1
 800ae42:	e7f2      	b.n	800ae2a <_printf_float+0x192>
 800ae44:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ae48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae4a:	4299      	cmp	r1, r3
 800ae4c:	db05      	blt.n	800ae5a <_printf_float+0x1c2>
 800ae4e:	6823      	ldr	r3, [r4, #0]
 800ae50:	6121      	str	r1, [r4, #16]
 800ae52:	07d8      	lsls	r0, r3, #31
 800ae54:	d5ea      	bpl.n	800ae2c <_printf_float+0x194>
 800ae56:	1c4b      	adds	r3, r1, #1
 800ae58:	e7e7      	b.n	800ae2a <_printf_float+0x192>
 800ae5a:	2900      	cmp	r1, #0
 800ae5c:	bfd4      	ite	le
 800ae5e:	f1c1 0202 	rsble	r2, r1, #2
 800ae62:	2201      	movgt	r2, #1
 800ae64:	4413      	add	r3, r2
 800ae66:	e7e0      	b.n	800ae2a <_printf_float+0x192>
 800ae68:	6823      	ldr	r3, [r4, #0]
 800ae6a:	055a      	lsls	r2, r3, #21
 800ae6c:	d407      	bmi.n	800ae7e <_printf_float+0x1e6>
 800ae6e:	6923      	ldr	r3, [r4, #16]
 800ae70:	4642      	mov	r2, r8
 800ae72:	4631      	mov	r1, r6
 800ae74:	4628      	mov	r0, r5
 800ae76:	47b8      	blx	r7
 800ae78:	3001      	adds	r0, #1
 800ae7a:	d12b      	bne.n	800aed4 <_printf_float+0x23c>
 800ae7c:	e767      	b.n	800ad4e <_printf_float+0xb6>
 800ae7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ae82:	f240 80dd 	bls.w	800b040 <_printf_float+0x3a8>
 800ae86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	f7f5 fe4b 	bl	8000b28 <__aeabi_dcmpeq>
 800ae92:	2800      	cmp	r0, #0
 800ae94:	d033      	beq.n	800aefe <_printf_float+0x266>
 800ae96:	4a37      	ldr	r2, [pc, #220]	@ (800af74 <_printf_float+0x2dc>)
 800ae98:	2301      	movs	r3, #1
 800ae9a:	4631      	mov	r1, r6
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	47b8      	blx	r7
 800aea0:	3001      	adds	r0, #1
 800aea2:	f43f af54 	beq.w	800ad4e <_printf_float+0xb6>
 800aea6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800aeaa:	4543      	cmp	r3, r8
 800aeac:	db02      	blt.n	800aeb4 <_printf_float+0x21c>
 800aeae:	6823      	ldr	r3, [r4, #0]
 800aeb0:	07d8      	lsls	r0, r3, #31
 800aeb2:	d50f      	bpl.n	800aed4 <_printf_float+0x23c>
 800aeb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aeb8:	4631      	mov	r1, r6
 800aeba:	4628      	mov	r0, r5
 800aebc:	47b8      	blx	r7
 800aebe:	3001      	adds	r0, #1
 800aec0:	f43f af45 	beq.w	800ad4e <_printf_float+0xb6>
 800aec4:	f04f 0900 	mov.w	r9, #0
 800aec8:	f108 38ff 	add.w	r8, r8, #4294967295
 800aecc:	f104 0a1a 	add.w	sl, r4, #26
 800aed0:	45c8      	cmp	r8, r9
 800aed2:	dc09      	bgt.n	800aee8 <_printf_float+0x250>
 800aed4:	6823      	ldr	r3, [r4, #0]
 800aed6:	079b      	lsls	r3, r3, #30
 800aed8:	f100 8103 	bmi.w	800b0e2 <_printf_float+0x44a>
 800aedc:	68e0      	ldr	r0, [r4, #12]
 800aede:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aee0:	4298      	cmp	r0, r3
 800aee2:	bfb8      	it	lt
 800aee4:	4618      	movlt	r0, r3
 800aee6:	e734      	b.n	800ad52 <_printf_float+0xba>
 800aee8:	2301      	movs	r3, #1
 800aeea:	4652      	mov	r2, sl
 800aeec:	4631      	mov	r1, r6
 800aeee:	4628      	mov	r0, r5
 800aef0:	47b8      	blx	r7
 800aef2:	3001      	adds	r0, #1
 800aef4:	f43f af2b 	beq.w	800ad4e <_printf_float+0xb6>
 800aef8:	f109 0901 	add.w	r9, r9, #1
 800aefc:	e7e8      	b.n	800aed0 <_printf_float+0x238>
 800aefe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af00:	2b00      	cmp	r3, #0
 800af02:	dc39      	bgt.n	800af78 <_printf_float+0x2e0>
 800af04:	4a1b      	ldr	r2, [pc, #108]	@ (800af74 <_printf_float+0x2dc>)
 800af06:	2301      	movs	r3, #1
 800af08:	4631      	mov	r1, r6
 800af0a:	4628      	mov	r0, r5
 800af0c:	47b8      	blx	r7
 800af0e:	3001      	adds	r0, #1
 800af10:	f43f af1d 	beq.w	800ad4e <_printf_float+0xb6>
 800af14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800af18:	ea59 0303 	orrs.w	r3, r9, r3
 800af1c:	d102      	bne.n	800af24 <_printf_float+0x28c>
 800af1e:	6823      	ldr	r3, [r4, #0]
 800af20:	07d9      	lsls	r1, r3, #31
 800af22:	d5d7      	bpl.n	800aed4 <_printf_float+0x23c>
 800af24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af28:	4631      	mov	r1, r6
 800af2a:	4628      	mov	r0, r5
 800af2c:	47b8      	blx	r7
 800af2e:	3001      	adds	r0, #1
 800af30:	f43f af0d 	beq.w	800ad4e <_printf_float+0xb6>
 800af34:	f04f 0a00 	mov.w	sl, #0
 800af38:	f104 0b1a 	add.w	fp, r4, #26
 800af3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af3e:	425b      	negs	r3, r3
 800af40:	4553      	cmp	r3, sl
 800af42:	dc01      	bgt.n	800af48 <_printf_float+0x2b0>
 800af44:	464b      	mov	r3, r9
 800af46:	e793      	b.n	800ae70 <_printf_float+0x1d8>
 800af48:	2301      	movs	r3, #1
 800af4a:	465a      	mov	r2, fp
 800af4c:	4631      	mov	r1, r6
 800af4e:	4628      	mov	r0, r5
 800af50:	47b8      	blx	r7
 800af52:	3001      	adds	r0, #1
 800af54:	f43f aefb 	beq.w	800ad4e <_printf_float+0xb6>
 800af58:	f10a 0a01 	add.w	sl, sl, #1
 800af5c:	e7ee      	b.n	800af3c <_printf_float+0x2a4>
 800af5e:	bf00      	nop
 800af60:	7fefffff 	.word	0x7fefffff
 800af64:	0800f790 	.word	0x0800f790
 800af68:	0800f794 	.word	0x0800f794
 800af6c:	0800f798 	.word	0x0800f798
 800af70:	0800f79c 	.word	0x0800f79c
 800af74:	0800f7a0 	.word	0x0800f7a0
 800af78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af7a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800af7e:	4553      	cmp	r3, sl
 800af80:	bfa8      	it	ge
 800af82:	4653      	movge	r3, sl
 800af84:	2b00      	cmp	r3, #0
 800af86:	4699      	mov	r9, r3
 800af88:	dc36      	bgt.n	800aff8 <_printf_float+0x360>
 800af8a:	f04f 0b00 	mov.w	fp, #0
 800af8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af92:	f104 021a 	add.w	r2, r4, #26
 800af96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af98:	9306      	str	r3, [sp, #24]
 800af9a:	eba3 0309 	sub.w	r3, r3, r9
 800af9e:	455b      	cmp	r3, fp
 800afa0:	dc31      	bgt.n	800b006 <_printf_float+0x36e>
 800afa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afa4:	459a      	cmp	sl, r3
 800afa6:	dc3a      	bgt.n	800b01e <_printf_float+0x386>
 800afa8:	6823      	ldr	r3, [r4, #0]
 800afaa:	07da      	lsls	r2, r3, #31
 800afac:	d437      	bmi.n	800b01e <_printf_float+0x386>
 800afae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afb0:	ebaa 0903 	sub.w	r9, sl, r3
 800afb4:	9b06      	ldr	r3, [sp, #24]
 800afb6:	ebaa 0303 	sub.w	r3, sl, r3
 800afba:	4599      	cmp	r9, r3
 800afbc:	bfa8      	it	ge
 800afbe:	4699      	movge	r9, r3
 800afc0:	f1b9 0f00 	cmp.w	r9, #0
 800afc4:	dc33      	bgt.n	800b02e <_printf_float+0x396>
 800afc6:	f04f 0800 	mov.w	r8, #0
 800afca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afce:	f104 0b1a 	add.w	fp, r4, #26
 800afd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afd4:	ebaa 0303 	sub.w	r3, sl, r3
 800afd8:	eba3 0309 	sub.w	r3, r3, r9
 800afdc:	4543      	cmp	r3, r8
 800afde:	f77f af79 	ble.w	800aed4 <_printf_float+0x23c>
 800afe2:	2301      	movs	r3, #1
 800afe4:	465a      	mov	r2, fp
 800afe6:	4631      	mov	r1, r6
 800afe8:	4628      	mov	r0, r5
 800afea:	47b8      	blx	r7
 800afec:	3001      	adds	r0, #1
 800afee:	f43f aeae 	beq.w	800ad4e <_printf_float+0xb6>
 800aff2:	f108 0801 	add.w	r8, r8, #1
 800aff6:	e7ec      	b.n	800afd2 <_printf_float+0x33a>
 800aff8:	4642      	mov	r2, r8
 800affa:	4631      	mov	r1, r6
 800affc:	4628      	mov	r0, r5
 800affe:	47b8      	blx	r7
 800b000:	3001      	adds	r0, #1
 800b002:	d1c2      	bne.n	800af8a <_printf_float+0x2f2>
 800b004:	e6a3      	b.n	800ad4e <_printf_float+0xb6>
 800b006:	2301      	movs	r3, #1
 800b008:	4631      	mov	r1, r6
 800b00a:	4628      	mov	r0, r5
 800b00c:	9206      	str	r2, [sp, #24]
 800b00e:	47b8      	blx	r7
 800b010:	3001      	adds	r0, #1
 800b012:	f43f ae9c 	beq.w	800ad4e <_printf_float+0xb6>
 800b016:	9a06      	ldr	r2, [sp, #24]
 800b018:	f10b 0b01 	add.w	fp, fp, #1
 800b01c:	e7bb      	b.n	800af96 <_printf_float+0x2fe>
 800b01e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b022:	4631      	mov	r1, r6
 800b024:	4628      	mov	r0, r5
 800b026:	47b8      	blx	r7
 800b028:	3001      	adds	r0, #1
 800b02a:	d1c0      	bne.n	800afae <_printf_float+0x316>
 800b02c:	e68f      	b.n	800ad4e <_printf_float+0xb6>
 800b02e:	9a06      	ldr	r2, [sp, #24]
 800b030:	464b      	mov	r3, r9
 800b032:	4442      	add	r2, r8
 800b034:	4631      	mov	r1, r6
 800b036:	4628      	mov	r0, r5
 800b038:	47b8      	blx	r7
 800b03a:	3001      	adds	r0, #1
 800b03c:	d1c3      	bne.n	800afc6 <_printf_float+0x32e>
 800b03e:	e686      	b.n	800ad4e <_printf_float+0xb6>
 800b040:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b044:	f1ba 0f01 	cmp.w	sl, #1
 800b048:	dc01      	bgt.n	800b04e <_printf_float+0x3b6>
 800b04a:	07db      	lsls	r3, r3, #31
 800b04c:	d536      	bpl.n	800b0bc <_printf_float+0x424>
 800b04e:	2301      	movs	r3, #1
 800b050:	4642      	mov	r2, r8
 800b052:	4631      	mov	r1, r6
 800b054:	4628      	mov	r0, r5
 800b056:	47b8      	blx	r7
 800b058:	3001      	adds	r0, #1
 800b05a:	f43f ae78 	beq.w	800ad4e <_printf_float+0xb6>
 800b05e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b062:	4631      	mov	r1, r6
 800b064:	4628      	mov	r0, r5
 800b066:	47b8      	blx	r7
 800b068:	3001      	adds	r0, #1
 800b06a:	f43f ae70 	beq.w	800ad4e <_printf_float+0xb6>
 800b06e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b072:	2200      	movs	r2, #0
 800b074:	2300      	movs	r3, #0
 800b076:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b07a:	f7f5 fd55 	bl	8000b28 <__aeabi_dcmpeq>
 800b07e:	b9c0      	cbnz	r0, 800b0b2 <_printf_float+0x41a>
 800b080:	4653      	mov	r3, sl
 800b082:	f108 0201 	add.w	r2, r8, #1
 800b086:	4631      	mov	r1, r6
 800b088:	4628      	mov	r0, r5
 800b08a:	47b8      	blx	r7
 800b08c:	3001      	adds	r0, #1
 800b08e:	d10c      	bne.n	800b0aa <_printf_float+0x412>
 800b090:	e65d      	b.n	800ad4e <_printf_float+0xb6>
 800b092:	2301      	movs	r3, #1
 800b094:	465a      	mov	r2, fp
 800b096:	4631      	mov	r1, r6
 800b098:	4628      	mov	r0, r5
 800b09a:	47b8      	blx	r7
 800b09c:	3001      	adds	r0, #1
 800b09e:	f43f ae56 	beq.w	800ad4e <_printf_float+0xb6>
 800b0a2:	f108 0801 	add.w	r8, r8, #1
 800b0a6:	45d0      	cmp	r8, sl
 800b0a8:	dbf3      	blt.n	800b092 <_printf_float+0x3fa>
 800b0aa:	464b      	mov	r3, r9
 800b0ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b0b0:	e6df      	b.n	800ae72 <_printf_float+0x1da>
 800b0b2:	f04f 0800 	mov.w	r8, #0
 800b0b6:	f104 0b1a 	add.w	fp, r4, #26
 800b0ba:	e7f4      	b.n	800b0a6 <_printf_float+0x40e>
 800b0bc:	2301      	movs	r3, #1
 800b0be:	4642      	mov	r2, r8
 800b0c0:	e7e1      	b.n	800b086 <_printf_float+0x3ee>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	464a      	mov	r2, r9
 800b0c6:	4631      	mov	r1, r6
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	47b8      	blx	r7
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	f43f ae3e 	beq.w	800ad4e <_printf_float+0xb6>
 800b0d2:	f108 0801 	add.w	r8, r8, #1
 800b0d6:	68e3      	ldr	r3, [r4, #12]
 800b0d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b0da:	1a5b      	subs	r3, r3, r1
 800b0dc:	4543      	cmp	r3, r8
 800b0de:	dcf0      	bgt.n	800b0c2 <_printf_float+0x42a>
 800b0e0:	e6fc      	b.n	800aedc <_printf_float+0x244>
 800b0e2:	f04f 0800 	mov.w	r8, #0
 800b0e6:	f104 0919 	add.w	r9, r4, #25
 800b0ea:	e7f4      	b.n	800b0d6 <_printf_float+0x43e>

0800b0ec <_printf_common>:
 800b0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0f0:	4616      	mov	r6, r2
 800b0f2:	4698      	mov	r8, r3
 800b0f4:	688a      	ldr	r2, [r1, #8]
 800b0f6:	690b      	ldr	r3, [r1, #16]
 800b0f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	bfb8      	it	lt
 800b100:	4613      	movlt	r3, r2
 800b102:	6033      	str	r3, [r6, #0]
 800b104:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b108:	4607      	mov	r7, r0
 800b10a:	460c      	mov	r4, r1
 800b10c:	b10a      	cbz	r2, 800b112 <_printf_common+0x26>
 800b10e:	3301      	adds	r3, #1
 800b110:	6033      	str	r3, [r6, #0]
 800b112:	6823      	ldr	r3, [r4, #0]
 800b114:	0699      	lsls	r1, r3, #26
 800b116:	bf42      	ittt	mi
 800b118:	6833      	ldrmi	r3, [r6, #0]
 800b11a:	3302      	addmi	r3, #2
 800b11c:	6033      	strmi	r3, [r6, #0]
 800b11e:	6825      	ldr	r5, [r4, #0]
 800b120:	f015 0506 	ands.w	r5, r5, #6
 800b124:	d106      	bne.n	800b134 <_printf_common+0x48>
 800b126:	f104 0a19 	add.w	sl, r4, #25
 800b12a:	68e3      	ldr	r3, [r4, #12]
 800b12c:	6832      	ldr	r2, [r6, #0]
 800b12e:	1a9b      	subs	r3, r3, r2
 800b130:	42ab      	cmp	r3, r5
 800b132:	dc26      	bgt.n	800b182 <_printf_common+0x96>
 800b134:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b138:	6822      	ldr	r2, [r4, #0]
 800b13a:	3b00      	subs	r3, #0
 800b13c:	bf18      	it	ne
 800b13e:	2301      	movne	r3, #1
 800b140:	0692      	lsls	r2, r2, #26
 800b142:	d42b      	bmi.n	800b19c <_printf_common+0xb0>
 800b144:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b148:	4641      	mov	r1, r8
 800b14a:	4638      	mov	r0, r7
 800b14c:	47c8      	blx	r9
 800b14e:	3001      	adds	r0, #1
 800b150:	d01e      	beq.n	800b190 <_printf_common+0xa4>
 800b152:	6823      	ldr	r3, [r4, #0]
 800b154:	6922      	ldr	r2, [r4, #16]
 800b156:	f003 0306 	and.w	r3, r3, #6
 800b15a:	2b04      	cmp	r3, #4
 800b15c:	bf02      	ittt	eq
 800b15e:	68e5      	ldreq	r5, [r4, #12]
 800b160:	6833      	ldreq	r3, [r6, #0]
 800b162:	1aed      	subeq	r5, r5, r3
 800b164:	68a3      	ldr	r3, [r4, #8]
 800b166:	bf0c      	ite	eq
 800b168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b16c:	2500      	movne	r5, #0
 800b16e:	4293      	cmp	r3, r2
 800b170:	bfc4      	itt	gt
 800b172:	1a9b      	subgt	r3, r3, r2
 800b174:	18ed      	addgt	r5, r5, r3
 800b176:	2600      	movs	r6, #0
 800b178:	341a      	adds	r4, #26
 800b17a:	42b5      	cmp	r5, r6
 800b17c:	d11a      	bne.n	800b1b4 <_printf_common+0xc8>
 800b17e:	2000      	movs	r0, #0
 800b180:	e008      	b.n	800b194 <_printf_common+0xa8>
 800b182:	2301      	movs	r3, #1
 800b184:	4652      	mov	r2, sl
 800b186:	4641      	mov	r1, r8
 800b188:	4638      	mov	r0, r7
 800b18a:	47c8      	blx	r9
 800b18c:	3001      	adds	r0, #1
 800b18e:	d103      	bne.n	800b198 <_printf_common+0xac>
 800b190:	f04f 30ff 	mov.w	r0, #4294967295
 800b194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b198:	3501      	adds	r5, #1
 800b19a:	e7c6      	b.n	800b12a <_printf_common+0x3e>
 800b19c:	18e1      	adds	r1, r4, r3
 800b19e:	1c5a      	adds	r2, r3, #1
 800b1a0:	2030      	movs	r0, #48	@ 0x30
 800b1a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b1a6:	4422      	add	r2, r4
 800b1a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b1ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b1b0:	3302      	adds	r3, #2
 800b1b2:	e7c7      	b.n	800b144 <_printf_common+0x58>
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	4622      	mov	r2, r4
 800b1b8:	4641      	mov	r1, r8
 800b1ba:	4638      	mov	r0, r7
 800b1bc:	47c8      	blx	r9
 800b1be:	3001      	adds	r0, #1
 800b1c0:	d0e6      	beq.n	800b190 <_printf_common+0xa4>
 800b1c2:	3601      	adds	r6, #1
 800b1c4:	e7d9      	b.n	800b17a <_printf_common+0x8e>
	...

0800b1c8 <_printf_i>:
 800b1c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1cc:	7e0f      	ldrb	r7, [r1, #24]
 800b1ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b1d0:	2f78      	cmp	r7, #120	@ 0x78
 800b1d2:	4691      	mov	r9, r2
 800b1d4:	4680      	mov	r8, r0
 800b1d6:	460c      	mov	r4, r1
 800b1d8:	469a      	mov	sl, r3
 800b1da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b1de:	d807      	bhi.n	800b1f0 <_printf_i+0x28>
 800b1e0:	2f62      	cmp	r7, #98	@ 0x62
 800b1e2:	d80a      	bhi.n	800b1fa <_printf_i+0x32>
 800b1e4:	2f00      	cmp	r7, #0
 800b1e6:	f000 80d2 	beq.w	800b38e <_printf_i+0x1c6>
 800b1ea:	2f58      	cmp	r7, #88	@ 0x58
 800b1ec:	f000 80b9 	beq.w	800b362 <_printf_i+0x19a>
 800b1f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b1f8:	e03a      	b.n	800b270 <_printf_i+0xa8>
 800b1fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b1fe:	2b15      	cmp	r3, #21
 800b200:	d8f6      	bhi.n	800b1f0 <_printf_i+0x28>
 800b202:	a101      	add	r1, pc, #4	@ (adr r1, 800b208 <_printf_i+0x40>)
 800b204:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b208:	0800b261 	.word	0x0800b261
 800b20c:	0800b275 	.word	0x0800b275
 800b210:	0800b1f1 	.word	0x0800b1f1
 800b214:	0800b1f1 	.word	0x0800b1f1
 800b218:	0800b1f1 	.word	0x0800b1f1
 800b21c:	0800b1f1 	.word	0x0800b1f1
 800b220:	0800b275 	.word	0x0800b275
 800b224:	0800b1f1 	.word	0x0800b1f1
 800b228:	0800b1f1 	.word	0x0800b1f1
 800b22c:	0800b1f1 	.word	0x0800b1f1
 800b230:	0800b1f1 	.word	0x0800b1f1
 800b234:	0800b375 	.word	0x0800b375
 800b238:	0800b29f 	.word	0x0800b29f
 800b23c:	0800b32f 	.word	0x0800b32f
 800b240:	0800b1f1 	.word	0x0800b1f1
 800b244:	0800b1f1 	.word	0x0800b1f1
 800b248:	0800b397 	.word	0x0800b397
 800b24c:	0800b1f1 	.word	0x0800b1f1
 800b250:	0800b29f 	.word	0x0800b29f
 800b254:	0800b1f1 	.word	0x0800b1f1
 800b258:	0800b1f1 	.word	0x0800b1f1
 800b25c:	0800b337 	.word	0x0800b337
 800b260:	6833      	ldr	r3, [r6, #0]
 800b262:	1d1a      	adds	r2, r3, #4
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	6032      	str	r2, [r6, #0]
 800b268:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b26c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b270:	2301      	movs	r3, #1
 800b272:	e09d      	b.n	800b3b0 <_printf_i+0x1e8>
 800b274:	6833      	ldr	r3, [r6, #0]
 800b276:	6820      	ldr	r0, [r4, #0]
 800b278:	1d19      	adds	r1, r3, #4
 800b27a:	6031      	str	r1, [r6, #0]
 800b27c:	0606      	lsls	r6, r0, #24
 800b27e:	d501      	bpl.n	800b284 <_printf_i+0xbc>
 800b280:	681d      	ldr	r5, [r3, #0]
 800b282:	e003      	b.n	800b28c <_printf_i+0xc4>
 800b284:	0645      	lsls	r5, r0, #25
 800b286:	d5fb      	bpl.n	800b280 <_printf_i+0xb8>
 800b288:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b28c:	2d00      	cmp	r5, #0
 800b28e:	da03      	bge.n	800b298 <_printf_i+0xd0>
 800b290:	232d      	movs	r3, #45	@ 0x2d
 800b292:	426d      	negs	r5, r5
 800b294:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b298:	4859      	ldr	r0, [pc, #356]	@ (800b400 <_printf_i+0x238>)
 800b29a:	230a      	movs	r3, #10
 800b29c:	e011      	b.n	800b2c2 <_printf_i+0xfa>
 800b29e:	6821      	ldr	r1, [r4, #0]
 800b2a0:	6833      	ldr	r3, [r6, #0]
 800b2a2:	0608      	lsls	r0, r1, #24
 800b2a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b2a8:	d402      	bmi.n	800b2b0 <_printf_i+0xe8>
 800b2aa:	0649      	lsls	r1, r1, #25
 800b2ac:	bf48      	it	mi
 800b2ae:	b2ad      	uxthmi	r5, r5
 800b2b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b2b2:	4853      	ldr	r0, [pc, #332]	@ (800b400 <_printf_i+0x238>)
 800b2b4:	6033      	str	r3, [r6, #0]
 800b2b6:	bf14      	ite	ne
 800b2b8:	230a      	movne	r3, #10
 800b2ba:	2308      	moveq	r3, #8
 800b2bc:	2100      	movs	r1, #0
 800b2be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b2c2:	6866      	ldr	r6, [r4, #4]
 800b2c4:	60a6      	str	r6, [r4, #8]
 800b2c6:	2e00      	cmp	r6, #0
 800b2c8:	bfa2      	ittt	ge
 800b2ca:	6821      	ldrge	r1, [r4, #0]
 800b2cc:	f021 0104 	bicge.w	r1, r1, #4
 800b2d0:	6021      	strge	r1, [r4, #0]
 800b2d2:	b90d      	cbnz	r5, 800b2d8 <_printf_i+0x110>
 800b2d4:	2e00      	cmp	r6, #0
 800b2d6:	d04b      	beq.n	800b370 <_printf_i+0x1a8>
 800b2d8:	4616      	mov	r6, r2
 800b2da:	fbb5 f1f3 	udiv	r1, r5, r3
 800b2de:	fb03 5711 	mls	r7, r3, r1, r5
 800b2e2:	5dc7      	ldrb	r7, [r0, r7]
 800b2e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b2e8:	462f      	mov	r7, r5
 800b2ea:	42bb      	cmp	r3, r7
 800b2ec:	460d      	mov	r5, r1
 800b2ee:	d9f4      	bls.n	800b2da <_printf_i+0x112>
 800b2f0:	2b08      	cmp	r3, #8
 800b2f2:	d10b      	bne.n	800b30c <_printf_i+0x144>
 800b2f4:	6823      	ldr	r3, [r4, #0]
 800b2f6:	07df      	lsls	r7, r3, #31
 800b2f8:	d508      	bpl.n	800b30c <_printf_i+0x144>
 800b2fa:	6923      	ldr	r3, [r4, #16]
 800b2fc:	6861      	ldr	r1, [r4, #4]
 800b2fe:	4299      	cmp	r1, r3
 800b300:	bfde      	ittt	le
 800b302:	2330      	movle	r3, #48	@ 0x30
 800b304:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b308:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b30c:	1b92      	subs	r2, r2, r6
 800b30e:	6122      	str	r2, [r4, #16]
 800b310:	f8cd a000 	str.w	sl, [sp]
 800b314:	464b      	mov	r3, r9
 800b316:	aa03      	add	r2, sp, #12
 800b318:	4621      	mov	r1, r4
 800b31a:	4640      	mov	r0, r8
 800b31c:	f7ff fee6 	bl	800b0ec <_printf_common>
 800b320:	3001      	adds	r0, #1
 800b322:	d14a      	bne.n	800b3ba <_printf_i+0x1f2>
 800b324:	f04f 30ff 	mov.w	r0, #4294967295
 800b328:	b004      	add	sp, #16
 800b32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b32e:	6823      	ldr	r3, [r4, #0]
 800b330:	f043 0320 	orr.w	r3, r3, #32
 800b334:	6023      	str	r3, [r4, #0]
 800b336:	4833      	ldr	r0, [pc, #204]	@ (800b404 <_printf_i+0x23c>)
 800b338:	2778      	movs	r7, #120	@ 0x78
 800b33a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	6831      	ldr	r1, [r6, #0]
 800b342:	061f      	lsls	r7, r3, #24
 800b344:	f851 5b04 	ldr.w	r5, [r1], #4
 800b348:	d402      	bmi.n	800b350 <_printf_i+0x188>
 800b34a:	065f      	lsls	r7, r3, #25
 800b34c:	bf48      	it	mi
 800b34e:	b2ad      	uxthmi	r5, r5
 800b350:	6031      	str	r1, [r6, #0]
 800b352:	07d9      	lsls	r1, r3, #31
 800b354:	bf44      	itt	mi
 800b356:	f043 0320 	orrmi.w	r3, r3, #32
 800b35a:	6023      	strmi	r3, [r4, #0]
 800b35c:	b11d      	cbz	r5, 800b366 <_printf_i+0x19e>
 800b35e:	2310      	movs	r3, #16
 800b360:	e7ac      	b.n	800b2bc <_printf_i+0xf4>
 800b362:	4827      	ldr	r0, [pc, #156]	@ (800b400 <_printf_i+0x238>)
 800b364:	e7e9      	b.n	800b33a <_printf_i+0x172>
 800b366:	6823      	ldr	r3, [r4, #0]
 800b368:	f023 0320 	bic.w	r3, r3, #32
 800b36c:	6023      	str	r3, [r4, #0]
 800b36e:	e7f6      	b.n	800b35e <_printf_i+0x196>
 800b370:	4616      	mov	r6, r2
 800b372:	e7bd      	b.n	800b2f0 <_printf_i+0x128>
 800b374:	6833      	ldr	r3, [r6, #0]
 800b376:	6825      	ldr	r5, [r4, #0]
 800b378:	6961      	ldr	r1, [r4, #20]
 800b37a:	1d18      	adds	r0, r3, #4
 800b37c:	6030      	str	r0, [r6, #0]
 800b37e:	062e      	lsls	r6, r5, #24
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	d501      	bpl.n	800b388 <_printf_i+0x1c0>
 800b384:	6019      	str	r1, [r3, #0]
 800b386:	e002      	b.n	800b38e <_printf_i+0x1c6>
 800b388:	0668      	lsls	r0, r5, #25
 800b38a:	d5fb      	bpl.n	800b384 <_printf_i+0x1bc>
 800b38c:	8019      	strh	r1, [r3, #0]
 800b38e:	2300      	movs	r3, #0
 800b390:	6123      	str	r3, [r4, #16]
 800b392:	4616      	mov	r6, r2
 800b394:	e7bc      	b.n	800b310 <_printf_i+0x148>
 800b396:	6833      	ldr	r3, [r6, #0]
 800b398:	1d1a      	adds	r2, r3, #4
 800b39a:	6032      	str	r2, [r6, #0]
 800b39c:	681e      	ldr	r6, [r3, #0]
 800b39e:	6862      	ldr	r2, [r4, #4]
 800b3a0:	2100      	movs	r1, #0
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	f7f4 ff44 	bl	8000230 <memchr>
 800b3a8:	b108      	cbz	r0, 800b3ae <_printf_i+0x1e6>
 800b3aa:	1b80      	subs	r0, r0, r6
 800b3ac:	6060      	str	r0, [r4, #4]
 800b3ae:	6863      	ldr	r3, [r4, #4]
 800b3b0:	6123      	str	r3, [r4, #16]
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3b8:	e7aa      	b.n	800b310 <_printf_i+0x148>
 800b3ba:	6923      	ldr	r3, [r4, #16]
 800b3bc:	4632      	mov	r2, r6
 800b3be:	4649      	mov	r1, r9
 800b3c0:	4640      	mov	r0, r8
 800b3c2:	47d0      	blx	sl
 800b3c4:	3001      	adds	r0, #1
 800b3c6:	d0ad      	beq.n	800b324 <_printf_i+0x15c>
 800b3c8:	6823      	ldr	r3, [r4, #0]
 800b3ca:	079b      	lsls	r3, r3, #30
 800b3cc:	d413      	bmi.n	800b3f6 <_printf_i+0x22e>
 800b3ce:	68e0      	ldr	r0, [r4, #12]
 800b3d0:	9b03      	ldr	r3, [sp, #12]
 800b3d2:	4298      	cmp	r0, r3
 800b3d4:	bfb8      	it	lt
 800b3d6:	4618      	movlt	r0, r3
 800b3d8:	e7a6      	b.n	800b328 <_printf_i+0x160>
 800b3da:	2301      	movs	r3, #1
 800b3dc:	4632      	mov	r2, r6
 800b3de:	4649      	mov	r1, r9
 800b3e0:	4640      	mov	r0, r8
 800b3e2:	47d0      	blx	sl
 800b3e4:	3001      	adds	r0, #1
 800b3e6:	d09d      	beq.n	800b324 <_printf_i+0x15c>
 800b3e8:	3501      	adds	r5, #1
 800b3ea:	68e3      	ldr	r3, [r4, #12]
 800b3ec:	9903      	ldr	r1, [sp, #12]
 800b3ee:	1a5b      	subs	r3, r3, r1
 800b3f0:	42ab      	cmp	r3, r5
 800b3f2:	dcf2      	bgt.n	800b3da <_printf_i+0x212>
 800b3f4:	e7eb      	b.n	800b3ce <_printf_i+0x206>
 800b3f6:	2500      	movs	r5, #0
 800b3f8:	f104 0619 	add.w	r6, r4, #25
 800b3fc:	e7f5      	b.n	800b3ea <_printf_i+0x222>
 800b3fe:	bf00      	nop
 800b400:	0800f7a2 	.word	0x0800f7a2
 800b404:	0800f7b3 	.word	0x0800f7b3

0800b408 <_scanf_float>:
 800b408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b40c:	b087      	sub	sp, #28
 800b40e:	4617      	mov	r7, r2
 800b410:	9303      	str	r3, [sp, #12]
 800b412:	688b      	ldr	r3, [r1, #8]
 800b414:	1e5a      	subs	r2, r3, #1
 800b416:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b41a:	bf81      	itttt	hi
 800b41c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b420:	eb03 0b05 	addhi.w	fp, r3, r5
 800b424:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b428:	608b      	strhi	r3, [r1, #8]
 800b42a:	680b      	ldr	r3, [r1, #0]
 800b42c:	460a      	mov	r2, r1
 800b42e:	f04f 0500 	mov.w	r5, #0
 800b432:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b436:	f842 3b1c 	str.w	r3, [r2], #28
 800b43a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b43e:	4680      	mov	r8, r0
 800b440:	460c      	mov	r4, r1
 800b442:	bf98      	it	ls
 800b444:	f04f 0b00 	movls.w	fp, #0
 800b448:	9201      	str	r2, [sp, #4]
 800b44a:	4616      	mov	r6, r2
 800b44c:	46aa      	mov	sl, r5
 800b44e:	46a9      	mov	r9, r5
 800b450:	9502      	str	r5, [sp, #8]
 800b452:	68a2      	ldr	r2, [r4, #8]
 800b454:	b152      	cbz	r2, 800b46c <_scanf_float+0x64>
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	2b4e      	cmp	r3, #78	@ 0x4e
 800b45c:	d864      	bhi.n	800b528 <_scanf_float+0x120>
 800b45e:	2b40      	cmp	r3, #64	@ 0x40
 800b460:	d83c      	bhi.n	800b4dc <_scanf_float+0xd4>
 800b462:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b466:	b2c8      	uxtb	r0, r1
 800b468:	280e      	cmp	r0, #14
 800b46a:	d93a      	bls.n	800b4e2 <_scanf_float+0xda>
 800b46c:	f1b9 0f00 	cmp.w	r9, #0
 800b470:	d003      	beq.n	800b47a <_scanf_float+0x72>
 800b472:	6823      	ldr	r3, [r4, #0]
 800b474:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b478:	6023      	str	r3, [r4, #0]
 800b47a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b47e:	f1ba 0f01 	cmp.w	sl, #1
 800b482:	f200 8117 	bhi.w	800b6b4 <_scanf_float+0x2ac>
 800b486:	9b01      	ldr	r3, [sp, #4]
 800b488:	429e      	cmp	r6, r3
 800b48a:	f200 8108 	bhi.w	800b69e <_scanf_float+0x296>
 800b48e:	2001      	movs	r0, #1
 800b490:	b007      	add	sp, #28
 800b492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b496:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b49a:	2a0d      	cmp	r2, #13
 800b49c:	d8e6      	bhi.n	800b46c <_scanf_float+0x64>
 800b49e:	a101      	add	r1, pc, #4	@ (adr r1, 800b4a4 <_scanf_float+0x9c>)
 800b4a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b4a4:	0800b5eb 	.word	0x0800b5eb
 800b4a8:	0800b46d 	.word	0x0800b46d
 800b4ac:	0800b46d 	.word	0x0800b46d
 800b4b0:	0800b46d 	.word	0x0800b46d
 800b4b4:	0800b64b 	.word	0x0800b64b
 800b4b8:	0800b623 	.word	0x0800b623
 800b4bc:	0800b46d 	.word	0x0800b46d
 800b4c0:	0800b46d 	.word	0x0800b46d
 800b4c4:	0800b5f9 	.word	0x0800b5f9
 800b4c8:	0800b46d 	.word	0x0800b46d
 800b4cc:	0800b46d 	.word	0x0800b46d
 800b4d0:	0800b46d 	.word	0x0800b46d
 800b4d4:	0800b46d 	.word	0x0800b46d
 800b4d8:	0800b5b1 	.word	0x0800b5b1
 800b4dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b4e0:	e7db      	b.n	800b49a <_scanf_float+0x92>
 800b4e2:	290e      	cmp	r1, #14
 800b4e4:	d8c2      	bhi.n	800b46c <_scanf_float+0x64>
 800b4e6:	a001      	add	r0, pc, #4	@ (adr r0, 800b4ec <_scanf_float+0xe4>)
 800b4e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b4ec:	0800b5a1 	.word	0x0800b5a1
 800b4f0:	0800b46d 	.word	0x0800b46d
 800b4f4:	0800b5a1 	.word	0x0800b5a1
 800b4f8:	0800b637 	.word	0x0800b637
 800b4fc:	0800b46d 	.word	0x0800b46d
 800b500:	0800b549 	.word	0x0800b549
 800b504:	0800b587 	.word	0x0800b587
 800b508:	0800b587 	.word	0x0800b587
 800b50c:	0800b587 	.word	0x0800b587
 800b510:	0800b587 	.word	0x0800b587
 800b514:	0800b587 	.word	0x0800b587
 800b518:	0800b587 	.word	0x0800b587
 800b51c:	0800b587 	.word	0x0800b587
 800b520:	0800b587 	.word	0x0800b587
 800b524:	0800b587 	.word	0x0800b587
 800b528:	2b6e      	cmp	r3, #110	@ 0x6e
 800b52a:	d809      	bhi.n	800b540 <_scanf_float+0x138>
 800b52c:	2b60      	cmp	r3, #96	@ 0x60
 800b52e:	d8b2      	bhi.n	800b496 <_scanf_float+0x8e>
 800b530:	2b54      	cmp	r3, #84	@ 0x54
 800b532:	d07b      	beq.n	800b62c <_scanf_float+0x224>
 800b534:	2b59      	cmp	r3, #89	@ 0x59
 800b536:	d199      	bne.n	800b46c <_scanf_float+0x64>
 800b538:	2d07      	cmp	r5, #7
 800b53a:	d197      	bne.n	800b46c <_scanf_float+0x64>
 800b53c:	2508      	movs	r5, #8
 800b53e:	e02c      	b.n	800b59a <_scanf_float+0x192>
 800b540:	2b74      	cmp	r3, #116	@ 0x74
 800b542:	d073      	beq.n	800b62c <_scanf_float+0x224>
 800b544:	2b79      	cmp	r3, #121	@ 0x79
 800b546:	e7f6      	b.n	800b536 <_scanf_float+0x12e>
 800b548:	6821      	ldr	r1, [r4, #0]
 800b54a:	05c8      	lsls	r0, r1, #23
 800b54c:	d51b      	bpl.n	800b586 <_scanf_float+0x17e>
 800b54e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b552:	6021      	str	r1, [r4, #0]
 800b554:	f109 0901 	add.w	r9, r9, #1
 800b558:	f1bb 0f00 	cmp.w	fp, #0
 800b55c:	d003      	beq.n	800b566 <_scanf_float+0x15e>
 800b55e:	3201      	adds	r2, #1
 800b560:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b564:	60a2      	str	r2, [r4, #8]
 800b566:	68a3      	ldr	r3, [r4, #8]
 800b568:	3b01      	subs	r3, #1
 800b56a:	60a3      	str	r3, [r4, #8]
 800b56c:	6923      	ldr	r3, [r4, #16]
 800b56e:	3301      	adds	r3, #1
 800b570:	6123      	str	r3, [r4, #16]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	3b01      	subs	r3, #1
 800b576:	2b00      	cmp	r3, #0
 800b578:	607b      	str	r3, [r7, #4]
 800b57a:	f340 8087 	ble.w	800b68c <_scanf_float+0x284>
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	3301      	adds	r3, #1
 800b582:	603b      	str	r3, [r7, #0]
 800b584:	e765      	b.n	800b452 <_scanf_float+0x4a>
 800b586:	eb1a 0105 	adds.w	r1, sl, r5
 800b58a:	f47f af6f 	bne.w	800b46c <_scanf_float+0x64>
 800b58e:	6822      	ldr	r2, [r4, #0]
 800b590:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b594:	6022      	str	r2, [r4, #0]
 800b596:	460d      	mov	r5, r1
 800b598:	468a      	mov	sl, r1
 800b59a:	f806 3b01 	strb.w	r3, [r6], #1
 800b59e:	e7e2      	b.n	800b566 <_scanf_float+0x15e>
 800b5a0:	6822      	ldr	r2, [r4, #0]
 800b5a2:	0610      	lsls	r0, r2, #24
 800b5a4:	f57f af62 	bpl.w	800b46c <_scanf_float+0x64>
 800b5a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b5ac:	6022      	str	r2, [r4, #0]
 800b5ae:	e7f4      	b.n	800b59a <_scanf_float+0x192>
 800b5b0:	f1ba 0f00 	cmp.w	sl, #0
 800b5b4:	d10e      	bne.n	800b5d4 <_scanf_float+0x1cc>
 800b5b6:	f1b9 0f00 	cmp.w	r9, #0
 800b5ba:	d10e      	bne.n	800b5da <_scanf_float+0x1d2>
 800b5bc:	6822      	ldr	r2, [r4, #0]
 800b5be:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b5c2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b5c6:	d108      	bne.n	800b5da <_scanf_float+0x1d2>
 800b5c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b5cc:	6022      	str	r2, [r4, #0]
 800b5ce:	f04f 0a01 	mov.w	sl, #1
 800b5d2:	e7e2      	b.n	800b59a <_scanf_float+0x192>
 800b5d4:	f1ba 0f02 	cmp.w	sl, #2
 800b5d8:	d055      	beq.n	800b686 <_scanf_float+0x27e>
 800b5da:	2d01      	cmp	r5, #1
 800b5dc:	d002      	beq.n	800b5e4 <_scanf_float+0x1dc>
 800b5de:	2d04      	cmp	r5, #4
 800b5e0:	f47f af44 	bne.w	800b46c <_scanf_float+0x64>
 800b5e4:	3501      	adds	r5, #1
 800b5e6:	b2ed      	uxtb	r5, r5
 800b5e8:	e7d7      	b.n	800b59a <_scanf_float+0x192>
 800b5ea:	f1ba 0f01 	cmp.w	sl, #1
 800b5ee:	f47f af3d 	bne.w	800b46c <_scanf_float+0x64>
 800b5f2:	f04f 0a02 	mov.w	sl, #2
 800b5f6:	e7d0      	b.n	800b59a <_scanf_float+0x192>
 800b5f8:	b97d      	cbnz	r5, 800b61a <_scanf_float+0x212>
 800b5fa:	f1b9 0f00 	cmp.w	r9, #0
 800b5fe:	f47f af38 	bne.w	800b472 <_scanf_float+0x6a>
 800b602:	6822      	ldr	r2, [r4, #0]
 800b604:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b608:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b60c:	f040 8108 	bne.w	800b820 <_scanf_float+0x418>
 800b610:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b614:	6022      	str	r2, [r4, #0]
 800b616:	2501      	movs	r5, #1
 800b618:	e7bf      	b.n	800b59a <_scanf_float+0x192>
 800b61a:	2d03      	cmp	r5, #3
 800b61c:	d0e2      	beq.n	800b5e4 <_scanf_float+0x1dc>
 800b61e:	2d05      	cmp	r5, #5
 800b620:	e7de      	b.n	800b5e0 <_scanf_float+0x1d8>
 800b622:	2d02      	cmp	r5, #2
 800b624:	f47f af22 	bne.w	800b46c <_scanf_float+0x64>
 800b628:	2503      	movs	r5, #3
 800b62a:	e7b6      	b.n	800b59a <_scanf_float+0x192>
 800b62c:	2d06      	cmp	r5, #6
 800b62e:	f47f af1d 	bne.w	800b46c <_scanf_float+0x64>
 800b632:	2507      	movs	r5, #7
 800b634:	e7b1      	b.n	800b59a <_scanf_float+0x192>
 800b636:	6822      	ldr	r2, [r4, #0]
 800b638:	0591      	lsls	r1, r2, #22
 800b63a:	f57f af17 	bpl.w	800b46c <_scanf_float+0x64>
 800b63e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b642:	6022      	str	r2, [r4, #0]
 800b644:	f8cd 9008 	str.w	r9, [sp, #8]
 800b648:	e7a7      	b.n	800b59a <_scanf_float+0x192>
 800b64a:	6822      	ldr	r2, [r4, #0]
 800b64c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b650:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b654:	d006      	beq.n	800b664 <_scanf_float+0x25c>
 800b656:	0550      	lsls	r0, r2, #21
 800b658:	f57f af08 	bpl.w	800b46c <_scanf_float+0x64>
 800b65c:	f1b9 0f00 	cmp.w	r9, #0
 800b660:	f000 80de 	beq.w	800b820 <_scanf_float+0x418>
 800b664:	0591      	lsls	r1, r2, #22
 800b666:	bf58      	it	pl
 800b668:	9902      	ldrpl	r1, [sp, #8]
 800b66a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b66e:	bf58      	it	pl
 800b670:	eba9 0101 	subpl.w	r1, r9, r1
 800b674:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b678:	bf58      	it	pl
 800b67a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b67e:	6022      	str	r2, [r4, #0]
 800b680:	f04f 0900 	mov.w	r9, #0
 800b684:	e789      	b.n	800b59a <_scanf_float+0x192>
 800b686:	f04f 0a03 	mov.w	sl, #3
 800b68a:	e786      	b.n	800b59a <_scanf_float+0x192>
 800b68c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b690:	4639      	mov	r1, r7
 800b692:	4640      	mov	r0, r8
 800b694:	4798      	blx	r3
 800b696:	2800      	cmp	r0, #0
 800b698:	f43f aedb 	beq.w	800b452 <_scanf_float+0x4a>
 800b69c:	e6e6      	b.n	800b46c <_scanf_float+0x64>
 800b69e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b6a6:	463a      	mov	r2, r7
 800b6a8:	4640      	mov	r0, r8
 800b6aa:	4798      	blx	r3
 800b6ac:	6923      	ldr	r3, [r4, #16]
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	6123      	str	r3, [r4, #16]
 800b6b2:	e6e8      	b.n	800b486 <_scanf_float+0x7e>
 800b6b4:	1e6b      	subs	r3, r5, #1
 800b6b6:	2b06      	cmp	r3, #6
 800b6b8:	d824      	bhi.n	800b704 <_scanf_float+0x2fc>
 800b6ba:	2d02      	cmp	r5, #2
 800b6bc:	d836      	bhi.n	800b72c <_scanf_float+0x324>
 800b6be:	9b01      	ldr	r3, [sp, #4]
 800b6c0:	429e      	cmp	r6, r3
 800b6c2:	f67f aee4 	bls.w	800b48e <_scanf_float+0x86>
 800b6c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b6ce:	463a      	mov	r2, r7
 800b6d0:	4640      	mov	r0, r8
 800b6d2:	4798      	blx	r3
 800b6d4:	6923      	ldr	r3, [r4, #16]
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	6123      	str	r3, [r4, #16]
 800b6da:	e7f0      	b.n	800b6be <_scanf_float+0x2b6>
 800b6dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6e0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b6e4:	463a      	mov	r2, r7
 800b6e6:	4640      	mov	r0, r8
 800b6e8:	4798      	blx	r3
 800b6ea:	6923      	ldr	r3, [r4, #16]
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	6123      	str	r3, [r4, #16]
 800b6f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6f4:	fa5f fa8a 	uxtb.w	sl, sl
 800b6f8:	f1ba 0f02 	cmp.w	sl, #2
 800b6fc:	d1ee      	bne.n	800b6dc <_scanf_float+0x2d4>
 800b6fe:	3d03      	subs	r5, #3
 800b700:	b2ed      	uxtb	r5, r5
 800b702:	1b76      	subs	r6, r6, r5
 800b704:	6823      	ldr	r3, [r4, #0]
 800b706:	05da      	lsls	r2, r3, #23
 800b708:	d530      	bpl.n	800b76c <_scanf_float+0x364>
 800b70a:	055b      	lsls	r3, r3, #21
 800b70c:	d511      	bpl.n	800b732 <_scanf_float+0x32a>
 800b70e:	9b01      	ldr	r3, [sp, #4]
 800b710:	429e      	cmp	r6, r3
 800b712:	f67f aebc 	bls.w	800b48e <_scanf_float+0x86>
 800b716:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b71a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b71e:	463a      	mov	r2, r7
 800b720:	4640      	mov	r0, r8
 800b722:	4798      	blx	r3
 800b724:	6923      	ldr	r3, [r4, #16]
 800b726:	3b01      	subs	r3, #1
 800b728:	6123      	str	r3, [r4, #16]
 800b72a:	e7f0      	b.n	800b70e <_scanf_float+0x306>
 800b72c:	46aa      	mov	sl, r5
 800b72e:	46b3      	mov	fp, r6
 800b730:	e7de      	b.n	800b6f0 <_scanf_float+0x2e8>
 800b732:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b736:	6923      	ldr	r3, [r4, #16]
 800b738:	2965      	cmp	r1, #101	@ 0x65
 800b73a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b73e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b742:	6123      	str	r3, [r4, #16]
 800b744:	d00c      	beq.n	800b760 <_scanf_float+0x358>
 800b746:	2945      	cmp	r1, #69	@ 0x45
 800b748:	d00a      	beq.n	800b760 <_scanf_float+0x358>
 800b74a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b74e:	463a      	mov	r2, r7
 800b750:	4640      	mov	r0, r8
 800b752:	4798      	blx	r3
 800b754:	6923      	ldr	r3, [r4, #16]
 800b756:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b75a:	3b01      	subs	r3, #1
 800b75c:	1eb5      	subs	r5, r6, #2
 800b75e:	6123      	str	r3, [r4, #16]
 800b760:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b764:	463a      	mov	r2, r7
 800b766:	4640      	mov	r0, r8
 800b768:	4798      	blx	r3
 800b76a:	462e      	mov	r6, r5
 800b76c:	6822      	ldr	r2, [r4, #0]
 800b76e:	f012 0210 	ands.w	r2, r2, #16
 800b772:	d001      	beq.n	800b778 <_scanf_float+0x370>
 800b774:	2000      	movs	r0, #0
 800b776:	e68b      	b.n	800b490 <_scanf_float+0x88>
 800b778:	7032      	strb	r2, [r6, #0]
 800b77a:	6823      	ldr	r3, [r4, #0]
 800b77c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b780:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b784:	d11c      	bne.n	800b7c0 <_scanf_float+0x3b8>
 800b786:	9b02      	ldr	r3, [sp, #8]
 800b788:	454b      	cmp	r3, r9
 800b78a:	eba3 0209 	sub.w	r2, r3, r9
 800b78e:	d123      	bne.n	800b7d8 <_scanf_float+0x3d0>
 800b790:	9901      	ldr	r1, [sp, #4]
 800b792:	2200      	movs	r2, #0
 800b794:	4640      	mov	r0, r8
 800b796:	f002 fc5b 	bl	800e050 <_strtod_r>
 800b79a:	9b03      	ldr	r3, [sp, #12]
 800b79c:	6821      	ldr	r1, [r4, #0]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f011 0f02 	tst.w	r1, #2
 800b7a4:	ec57 6b10 	vmov	r6, r7, d0
 800b7a8:	f103 0204 	add.w	r2, r3, #4
 800b7ac:	d01f      	beq.n	800b7ee <_scanf_float+0x3e6>
 800b7ae:	9903      	ldr	r1, [sp, #12]
 800b7b0:	600a      	str	r2, [r1, #0]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	e9c3 6700 	strd	r6, r7, [r3]
 800b7b8:	68e3      	ldr	r3, [r4, #12]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	60e3      	str	r3, [r4, #12]
 800b7be:	e7d9      	b.n	800b774 <_scanf_float+0x36c>
 800b7c0:	9b04      	ldr	r3, [sp, #16]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d0e4      	beq.n	800b790 <_scanf_float+0x388>
 800b7c6:	9905      	ldr	r1, [sp, #20]
 800b7c8:	230a      	movs	r3, #10
 800b7ca:	3101      	adds	r1, #1
 800b7cc:	4640      	mov	r0, r8
 800b7ce:	f002 fcbf 	bl	800e150 <_strtol_r>
 800b7d2:	9b04      	ldr	r3, [sp, #16]
 800b7d4:	9e05      	ldr	r6, [sp, #20]
 800b7d6:	1ac2      	subs	r2, r0, r3
 800b7d8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b7dc:	429e      	cmp	r6, r3
 800b7de:	bf28      	it	cs
 800b7e0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b7e4:	4910      	ldr	r1, [pc, #64]	@ (800b828 <_scanf_float+0x420>)
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	f000 f8e4 	bl	800b9b4 <siprintf>
 800b7ec:	e7d0      	b.n	800b790 <_scanf_float+0x388>
 800b7ee:	f011 0f04 	tst.w	r1, #4
 800b7f2:	9903      	ldr	r1, [sp, #12]
 800b7f4:	600a      	str	r2, [r1, #0]
 800b7f6:	d1dc      	bne.n	800b7b2 <_scanf_float+0x3aa>
 800b7f8:	681d      	ldr	r5, [r3, #0]
 800b7fa:	4632      	mov	r2, r6
 800b7fc:	463b      	mov	r3, r7
 800b7fe:	4630      	mov	r0, r6
 800b800:	4639      	mov	r1, r7
 800b802:	f7f5 f9c3 	bl	8000b8c <__aeabi_dcmpun>
 800b806:	b128      	cbz	r0, 800b814 <_scanf_float+0x40c>
 800b808:	4808      	ldr	r0, [pc, #32]	@ (800b82c <_scanf_float+0x424>)
 800b80a:	f000 fa1b 	bl	800bc44 <nanf>
 800b80e:	ed85 0a00 	vstr	s0, [r5]
 800b812:	e7d1      	b.n	800b7b8 <_scanf_float+0x3b0>
 800b814:	4630      	mov	r0, r6
 800b816:	4639      	mov	r1, r7
 800b818:	f7f5 fa16 	bl	8000c48 <__aeabi_d2f>
 800b81c:	6028      	str	r0, [r5, #0]
 800b81e:	e7cb      	b.n	800b7b8 <_scanf_float+0x3b0>
 800b820:	f04f 0900 	mov.w	r9, #0
 800b824:	e629      	b.n	800b47a <_scanf_float+0x72>
 800b826:	bf00      	nop
 800b828:	0800f7c4 	.word	0x0800f7c4
 800b82c:	0800fb5d 	.word	0x0800fb5d

0800b830 <std>:
 800b830:	2300      	movs	r3, #0
 800b832:	b510      	push	{r4, lr}
 800b834:	4604      	mov	r4, r0
 800b836:	e9c0 3300 	strd	r3, r3, [r0]
 800b83a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b83e:	6083      	str	r3, [r0, #8]
 800b840:	8181      	strh	r1, [r0, #12]
 800b842:	6643      	str	r3, [r0, #100]	@ 0x64
 800b844:	81c2      	strh	r2, [r0, #14]
 800b846:	6183      	str	r3, [r0, #24]
 800b848:	4619      	mov	r1, r3
 800b84a:	2208      	movs	r2, #8
 800b84c:	305c      	adds	r0, #92	@ 0x5c
 800b84e:	f000 f914 	bl	800ba7a <memset>
 800b852:	4b0d      	ldr	r3, [pc, #52]	@ (800b888 <std+0x58>)
 800b854:	6263      	str	r3, [r4, #36]	@ 0x24
 800b856:	4b0d      	ldr	r3, [pc, #52]	@ (800b88c <std+0x5c>)
 800b858:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b85a:	4b0d      	ldr	r3, [pc, #52]	@ (800b890 <std+0x60>)
 800b85c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b85e:	4b0d      	ldr	r3, [pc, #52]	@ (800b894 <std+0x64>)
 800b860:	6323      	str	r3, [r4, #48]	@ 0x30
 800b862:	4b0d      	ldr	r3, [pc, #52]	@ (800b898 <std+0x68>)
 800b864:	6224      	str	r4, [r4, #32]
 800b866:	429c      	cmp	r4, r3
 800b868:	d006      	beq.n	800b878 <std+0x48>
 800b86a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b86e:	4294      	cmp	r4, r2
 800b870:	d002      	beq.n	800b878 <std+0x48>
 800b872:	33d0      	adds	r3, #208	@ 0xd0
 800b874:	429c      	cmp	r4, r3
 800b876:	d105      	bne.n	800b884 <std+0x54>
 800b878:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b880:	f000 b9ce 	b.w	800bc20 <__retarget_lock_init_recursive>
 800b884:	bd10      	pop	{r4, pc}
 800b886:	bf00      	nop
 800b888:	0800b9f5 	.word	0x0800b9f5
 800b88c:	0800ba17 	.word	0x0800ba17
 800b890:	0800ba4f 	.word	0x0800ba4f
 800b894:	0800ba73 	.word	0x0800ba73
 800b898:	200048a8 	.word	0x200048a8

0800b89c <stdio_exit_handler>:
 800b89c:	4a02      	ldr	r2, [pc, #8]	@ (800b8a8 <stdio_exit_handler+0xc>)
 800b89e:	4903      	ldr	r1, [pc, #12]	@ (800b8ac <stdio_exit_handler+0x10>)
 800b8a0:	4803      	ldr	r0, [pc, #12]	@ (800b8b0 <stdio_exit_handler+0x14>)
 800b8a2:	f000 b869 	b.w	800b978 <_fwalk_sglue>
 800b8a6:	bf00      	nop
 800b8a8:	20000028 	.word	0x20000028
 800b8ac:	0800e50d 	.word	0x0800e50d
 800b8b0:	20000038 	.word	0x20000038

0800b8b4 <cleanup_stdio>:
 800b8b4:	6841      	ldr	r1, [r0, #4]
 800b8b6:	4b0c      	ldr	r3, [pc, #48]	@ (800b8e8 <cleanup_stdio+0x34>)
 800b8b8:	4299      	cmp	r1, r3
 800b8ba:	b510      	push	{r4, lr}
 800b8bc:	4604      	mov	r4, r0
 800b8be:	d001      	beq.n	800b8c4 <cleanup_stdio+0x10>
 800b8c0:	f002 fe24 	bl	800e50c <_fflush_r>
 800b8c4:	68a1      	ldr	r1, [r4, #8]
 800b8c6:	4b09      	ldr	r3, [pc, #36]	@ (800b8ec <cleanup_stdio+0x38>)
 800b8c8:	4299      	cmp	r1, r3
 800b8ca:	d002      	beq.n	800b8d2 <cleanup_stdio+0x1e>
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	f002 fe1d 	bl	800e50c <_fflush_r>
 800b8d2:	68e1      	ldr	r1, [r4, #12]
 800b8d4:	4b06      	ldr	r3, [pc, #24]	@ (800b8f0 <cleanup_stdio+0x3c>)
 800b8d6:	4299      	cmp	r1, r3
 800b8d8:	d004      	beq.n	800b8e4 <cleanup_stdio+0x30>
 800b8da:	4620      	mov	r0, r4
 800b8dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8e0:	f002 be14 	b.w	800e50c <_fflush_r>
 800b8e4:	bd10      	pop	{r4, pc}
 800b8e6:	bf00      	nop
 800b8e8:	200048a8 	.word	0x200048a8
 800b8ec:	20004910 	.word	0x20004910
 800b8f0:	20004978 	.word	0x20004978

0800b8f4 <global_stdio_init.part.0>:
 800b8f4:	b510      	push	{r4, lr}
 800b8f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b924 <global_stdio_init.part.0+0x30>)
 800b8f8:	4c0b      	ldr	r4, [pc, #44]	@ (800b928 <global_stdio_init.part.0+0x34>)
 800b8fa:	4a0c      	ldr	r2, [pc, #48]	@ (800b92c <global_stdio_init.part.0+0x38>)
 800b8fc:	601a      	str	r2, [r3, #0]
 800b8fe:	4620      	mov	r0, r4
 800b900:	2200      	movs	r2, #0
 800b902:	2104      	movs	r1, #4
 800b904:	f7ff ff94 	bl	800b830 <std>
 800b908:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b90c:	2201      	movs	r2, #1
 800b90e:	2109      	movs	r1, #9
 800b910:	f7ff ff8e 	bl	800b830 <std>
 800b914:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b918:	2202      	movs	r2, #2
 800b91a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b91e:	2112      	movs	r1, #18
 800b920:	f7ff bf86 	b.w	800b830 <std>
 800b924:	200049e0 	.word	0x200049e0
 800b928:	200048a8 	.word	0x200048a8
 800b92c:	0800b89d 	.word	0x0800b89d

0800b930 <__sfp_lock_acquire>:
 800b930:	4801      	ldr	r0, [pc, #4]	@ (800b938 <__sfp_lock_acquire+0x8>)
 800b932:	f000 b976 	b.w	800bc22 <__retarget_lock_acquire_recursive>
 800b936:	bf00      	nop
 800b938:	200049e9 	.word	0x200049e9

0800b93c <__sfp_lock_release>:
 800b93c:	4801      	ldr	r0, [pc, #4]	@ (800b944 <__sfp_lock_release+0x8>)
 800b93e:	f000 b971 	b.w	800bc24 <__retarget_lock_release_recursive>
 800b942:	bf00      	nop
 800b944:	200049e9 	.word	0x200049e9

0800b948 <__sinit>:
 800b948:	b510      	push	{r4, lr}
 800b94a:	4604      	mov	r4, r0
 800b94c:	f7ff fff0 	bl	800b930 <__sfp_lock_acquire>
 800b950:	6a23      	ldr	r3, [r4, #32]
 800b952:	b11b      	cbz	r3, 800b95c <__sinit+0x14>
 800b954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b958:	f7ff bff0 	b.w	800b93c <__sfp_lock_release>
 800b95c:	4b04      	ldr	r3, [pc, #16]	@ (800b970 <__sinit+0x28>)
 800b95e:	6223      	str	r3, [r4, #32]
 800b960:	4b04      	ldr	r3, [pc, #16]	@ (800b974 <__sinit+0x2c>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d1f5      	bne.n	800b954 <__sinit+0xc>
 800b968:	f7ff ffc4 	bl	800b8f4 <global_stdio_init.part.0>
 800b96c:	e7f2      	b.n	800b954 <__sinit+0xc>
 800b96e:	bf00      	nop
 800b970:	0800b8b5 	.word	0x0800b8b5
 800b974:	200049e0 	.word	0x200049e0

0800b978 <_fwalk_sglue>:
 800b978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b97c:	4607      	mov	r7, r0
 800b97e:	4688      	mov	r8, r1
 800b980:	4614      	mov	r4, r2
 800b982:	2600      	movs	r6, #0
 800b984:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b988:	f1b9 0901 	subs.w	r9, r9, #1
 800b98c:	d505      	bpl.n	800b99a <_fwalk_sglue+0x22>
 800b98e:	6824      	ldr	r4, [r4, #0]
 800b990:	2c00      	cmp	r4, #0
 800b992:	d1f7      	bne.n	800b984 <_fwalk_sglue+0xc>
 800b994:	4630      	mov	r0, r6
 800b996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b99a:	89ab      	ldrh	r3, [r5, #12]
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d907      	bls.n	800b9b0 <_fwalk_sglue+0x38>
 800b9a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	d003      	beq.n	800b9b0 <_fwalk_sglue+0x38>
 800b9a8:	4629      	mov	r1, r5
 800b9aa:	4638      	mov	r0, r7
 800b9ac:	47c0      	blx	r8
 800b9ae:	4306      	orrs	r6, r0
 800b9b0:	3568      	adds	r5, #104	@ 0x68
 800b9b2:	e7e9      	b.n	800b988 <_fwalk_sglue+0x10>

0800b9b4 <siprintf>:
 800b9b4:	b40e      	push	{r1, r2, r3}
 800b9b6:	b500      	push	{lr}
 800b9b8:	b09c      	sub	sp, #112	@ 0x70
 800b9ba:	ab1d      	add	r3, sp, #116	@ 0x74
 800b9bc:	9002      	str	r0, [sp, #8]
 800b9be:	9006      	str	r0, [sp, #24]
 800b9c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b9c4:	4809      	ldr	r0, [pc, #36]	@ (800b9ec <siprintf+0x38>)
 800b9c6:	9107      	str	r1, [sp, #28]
 800b9c8:	9104      	str	r1, [sp, #16]
 800b9ca:	4909      	ldr	r1, [pc, #36]	@ (800b9f0 <siprintf+0x3c>)
 800b9cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9d0:	9105      	str	r1, [sp, #20]
 800b9d2:	6800      	ldr	r0, [r0, #0]
 800b9d4:	9301      	str	r3, [sp, #4]
 800b9d6:	a902      	add	r1, sp, #8
 800b9d8:	f002 fc18 	bl	800e20c <_svfiprintf_r>
 800b9dc:	9b02      	ldr	r3, [sp, #8]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	701a      	strb	r2, [r3, #0]
 800b9e2:	b01c      	add	sp, #112	@ 0x70
 800b9e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9e8:	b003      	add	sp, #12
 800b9ea:	4770      	bx	lr
 800b9ec:	20000034 	.word	0x20000034
 800b9f0:	ffff0208 	.word	0xffff0208

0800b9f4 <__sread>:
 800b9f4:	b510      	push	{r4, lr}
 800b9f6:	460c      	mov	r4, r1
 800b9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9fc:	f000 f8c2 	bl	800bb84 <_read_r>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	bfab      	itete	ge
 800ba04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ba06:	89a3      	ldrhlt	r3, [r4, #12]
 800ba08:	181b      	addge	r3, r3, r0
 800ba0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ba0e:	bfac      	ite	ge
 800ba10:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ba12:	81a3      	strhlt	r3, [r4, #12]
 800ba14:	bd10      	pop	{r4, pc}

0800ba16 <__swrite>:
 800ba16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba1a:	461f      	mov	r7, r3
 800ba1c:	898b      	ldrh	r3, [r1, #12]
 800ba1e:	05db      	lsls	r3, r3, #23
 800ba20:	4605      	mov	r5, r0
 800ba22:	460c      	mov	r4, r1
 800ba24:	4616      	mov	r6, r2
 800ba26:	d505      	bpl.n	800ba34 <__swrite+0x1e>
 800ba28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba2c:	2302      	movs	r3, #2
 800ba2e:	2200      	movs	r2, #0
 800ba30:	f000 f896 	bl	800bb60 <_lseek_r>
 800ba34:	89a3      	ldrh	r3, [r4, #12]
 800ba36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba3e:	81a3      	strh	r3, [r4, #12]
 800ba40:	4632      	mov	r2, r6
 800ba42:	463b      	mov	r3, r7
 800ba44:	4628      	mov	r0, r5
 800ba46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba4a:	f000 b8ad 	b.w	800bba8 <_write_r>

0800ba4e <__sseek>:
 800ba4e:	b510      	push	{r4, lr}
 800ba50:	460c      	mov	r4, r1
 800ba52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba56:	f000 f883 	bl	800bb60 <_lseek_r>
 800ba5a:	1c43      	adds	r3, r0, #1
 800ba5c:	89a3      	ldrh	r3, [r4, #12]
 800ba5e:	bf15      	itete	ne
 800ba60:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ba62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ba66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ba6a:	81a3      	strheq	r3, [r4, #12]
 800ba6c:	bf18      	it	ne
 800ba6e:	81a3      	strhne	r3, [r4, #12]
 800ba70:	bd10      	pop	{r4, pc}

0800ba72 <__sclose>:
 800ba72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba76:	f000 b80d 	b.w	800ba94 <_close_r>

0800ba7a <memset>:
 800ba7a:	4402      	add	r2, r0
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d100      	bne.n	800ba84 <memset+0xa>
 800ba82:	4770      	bx	lr
 800ba84:	f803 1b01 	strb.w	r1, [r3], #1
 800ba88:	e7f9      	b.n	800ba7e <memset+0x4>
	...

0800ba8c <_localeconv_r>:
 800ba8c:	4800      	ldr	r0, [pc, #0]	@ (800ba90 <_localeconv_r+0x4>)
 800ba8e:	4770      	bx	lr
 800ba90:	20000174 	.word	0x20000174

0800ba94 <_close_r>:
 800ba94:	b538      	push	{r3, r4, r5, lr}
 800ba96:	4d06      	ldr	r5, [pc, #24]	@ (800bab0 <_close_r+0x1c>)
 800ba98:	2300      	movs	r3, #0
 800ba9a:	4604      	mov	r4, r0
 800ba9c:	4608      	mov	r0, r1
 800ba9e:	602b      	str	r3, [r5, #0]
 800baa0:	f7f6 ffb4 	bl	8002a0c <_close>
 800baa4:	1c43      	adds	r3, r0, #1
 800baa6:	d102      	bne.n	800baae <_close_r+0x1a>
 800baa8:	682b      	ldr	r3, [r5, #0]
 800baaa:	b103      	cbz	r3, 800baae <_close_r+0x1a>
 800baac:	6023      	str	r3, [r4, #0]
 800baae:	bd38      	pop	{r3, r4, r5, pc}
 800bab0:	200049e4 	.word	0x200049e4

0800bab4 <_reclaim_reent>:
 800bab4:	4b29      	ldr	r3, [pc, #164]	@ (800bb5c <_reclaim_reent+0xa8>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4283      	cmp	r3, r0
 800baba:	b570      	push	{r4, r5, r6, lr}
 800babc:	4604      	mov	r4, r0
 800babe:	d04b      	beq.n	800bb58 <_reclaim_reent+0xa4>
 800bac0:	69c3      	ldr	r3, [r0, #28]
 800bac2:	b1ab      	cbz	r3, 800baf0 <_reclaim_reent+0x3c>
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	b16b      	cbz	r3, 800bae4 <_reclaim_reent+0x30>
 800bac8:	2500      	movs	r5, #0
 800baca:	69e3      	ldr	r3, [r4, #28]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	5959      	ldr	r1, [r3, r5]
 800bad0:	2900      	cmp	r1, #0
 800bad2:	d13b      	bne.n	800bb4c <_reclaim_reent+0x98>
 800bad4:	3504      	adds	r5, #4
 800bad6:	2d80      	cmp	r5, #128	@ 0x80
 800bad8:	d1f7      	bne.n	800baca <_reclaim_reent+0x16>
 800bada:	69e3      	ldr	r3, [r4, #28]
 800badc:	4620      	mov	r0, r4
 800bade:	68d9      	ldr	r1, [r3, #12]
 800bae0:	f000 ff02 	bl	800c8e8 <_free_r>
 800bae4:	69e3      	ldr	r3, [r4, #28]
 800bae6:	6819      	ldr	r1, [r3, #0]
 800bae8:	b111      	cbz	r1, 800baf0 <_reclaim_reent+0x3c>
 800baea:	4620      	mov	r0, r4
 800baec:	f000 fefc 	bl	800c8e8 <_free_r>
 800baf0:	6961      	ldr	r1, [r4, #20]
 800baf2:	b111      	cbz	r1, 800bafa <_reclaim_reent+0x46>
 800baf4:	4620      	mov	r0, r4
 800baf6:	f000 fef7 	bl	800c8e8 <_free_r>
 800bafa:	69e1      	ldr	r1, [r4, #28]
 800bafc:	b111      	cbz	r1, 800bb04 <_reclaim_reent+0x50>
 800bafe:	4620      	mov	r0, r4
 800bb00:	f000 fef2 	bl	800c8e8 <_free_r>
 800bb04:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bb06:	b111      	cbz	r1, 800bb0e <_reclaim_reent+0x5a>
 800bb08:	4620      	mov	r0, r4
 800bb0a:	f000 feed 	bl	800c8e8 <_free_r>
 800bb0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb10:	b111      	cbz	r1, 800bb18 <_reclaim_reent+0x64>
 800bb12:	4620      	mov	r0, r4
 800bb14:	f000 fee8 	bl	800c8e8 <_free_r>
 800bb18:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bb1a:	b111      	cbz	r1, 800bb22 <_reclaim_reent+0x6e>
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	f000 fee3 	bl	800c8e8 <_free_r>
 800bb22:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bb24:	b111      	cbz	r1, 800bb2c <_reclaim_reent+0x78>
 800bb26:	4620      	mov	r0, r4
 800bb28:	f000 fede 	bl	800c8e8 <_free_r>
 800bb2c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bb2e:	b111      	cbz	r1, 800bb36 <_reclaim_reent+0x82>
 800bb30:	4620      	mov	r0, r4
 800bb32:	f000 fed9 	bl	800c8e8 <_free_r>
 800bb36:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bb38:	b111      	cbz	r1, 800bb40 <_reclaim_reent+0x8c>
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	f000 fed4 	bl	800c8e8 <_free_r>
 800bb40:	6a23      	ldr	r3, [r4, #32]
 800bb42:	b14b      	cbz	r3, 800bb58 <_reclaim_reent+0xa4>
 800bb44:	4620      	mov	r0, r4
 800bb46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb4a:	4718      	bx	r3
 800bb4c:	680e      	ldr	r6, [r1, #0]
 800bb4e:	4620      	mov	r0, r4
 800bb50:	f000 feca 	bl	800c8e8 <_free_r>
 800bb54:	4631      	mov	r1, r6
 800bb56:	e7bb      	b.n	800bad0 <_reclaim_reent+0x1c>
 800bb58:	bd70      	pop	{r4, r5, r6, pc}
 800bb5a:	bf00      	nop
 800bb5c:	20000034 	.word	0x20000034

0800bb60 <_lseek_r>:
 800bb60:	b538      	push	{r3, r4, r5, lr}
 800bb62:	4d07      	ldr	r5, [pc, #28]	@ (800bb80 <_lseek_r+0x20>)
 800bb64:	4604      	mov	r4, r0
 800bb66:	4608      	mov	r0, r1
 800bb68:	4611      	mov	r1, r2
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	602a      	str	r2, [r5, #0]
 800bb6e:	461a      	mov	r2, r3
 800bb70:	f7f6 ff73 	bl	8002a5a <_lseek>
 800bb74:	1c43      	adds	r3, r0, #1
 800bb76:	d102      	bne.n	800bb7e <_lseek_r+0x1e>
 800bb78:	682b      	ldr	r3, [r5, #0]
 800bb7a:	b103      	cbz	r3, 800bb7e <_lseek_r+0x1e>
 800bb7c:	6023      	str	r3, [r4, #0]
 800bb7e:	bd38      	pop	{r3, r4, r5, pc}
 800bb80:	200049e4 	.word	0x200049e4

0800bb84 <_read_r>:
 800bb84:	b538      	push	{r3, r4, r5, lr}
 800bb86:	4d07      	ldr	r5, [pc, #28]	@ (800bba4 <_read_r+0x20>)
 800bb88:	4604      	mov	r4, r0
 800bb8a:	4608      	mov	r0, r1
 800bb8c:	4611      	mov	r1, r2
 800bb8e:	2200      	movs	r2, #0
 800bb90:	602a      	str	r2, [r5, #0]
 800bb92:	461a      	mov	r2, r3
 800bb94:	f7f6 ff01 	bl	800299a <_read>
 800bb98:	1c43      	adds	r3, r0, #1
 800bb9a:	d102      	bne.n	800bba2 <_read_r+0x1e>
 800bb9c:	682b      	ldr	r3, [r5, #0]
 800bb9e:	b103      	cbz	r3, 800bba2 <_read_r+0x1e>
 800bba0:	6023      	str	r3, [r4, #0]
 800bba2:	bd38      	pop	{r3, r4, r5, pc}
 800bba4:	200049e4 	.word	0x200049e4

0800bba8 <_write_r>:
 800bba8:	b538      	push	{r3, r4, r5, lr}
 800bbaa:	4d07      	ldr	r5, [pc, #28]	@ (800bbc8 <_write_r+0x20>)
 800bbac:	4604      	mov	r4, r0
 800bbae:	4608      	mov	r0, r1
 800bbb0:	4611      	mov	r1, r2
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	602a      	str	r2, [r5, #0]
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	f7f6 ff0c 	bl	80029d4 <_write>
 800bbbc:	1c43      	adds	r3, r0, #1
 800bbbe:	d102      	bne.n	800bbc6 <_write_r+0x1e>
 800bbc0:	682b      	ldr	r3, [r5, #0]
 800bbc2:	b103      	cbz	r3, 800bbc6 <_write_r+0x1e>
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	bd38      	pop	{r3, r4, r5, pc}
 800bbc8:	200049e4 	.word	0x200049e4

0800bbcc <__errno>:
 800bbcc:	4b01      	ldr	r3, [pc, #4]	@ (800bbd4 <__errno+0x8>)
 800bbce:	6818      	ldr	r0, [r3, #0]
 800bbd0:	4770      	bx	lr
 800bbd2:	bf00      	nop
 800bbd4:	20000034 	.word	0x20000034

0800bbd8 <__libc_init_array>:
 800bbd8:	b570      	push	{r4, r5, r6, lr}
 800bbda:	4d0d      	ldr	r5, [pc, #52]	@ (800bc10 <__libc_init_array+0x38>)
 800bbdc:	4c0d      	ldr	r4, [pc, #52]	@ (800bc14 <__libc_init_array+0x3c>)
 800bbde:	1b64      	subs	r4, r4, r5
 800bbe0:	10a4      	asrs	r4, r4, #2
 800bbe2:	2600      	movs	r6, #0
 800bbe4:	42a6      	cmp	r6, r4
 800bbe6:	d109      	bne.n	800bbfc <__libc_init_array+0x24>
 800bbe8:	4d0b      	ldr	r5, [pc, #44]	@ (800bc18 <__libc_init_array+0x40>)
 800bbea:	4c0c      	ldr	r4, [pc, #48]	@ (800bc1c <__libc_init_array+0x44>)
 800bbec:	f003 fb72 	bl	800f2d4 <_init>
 800bbf0:	1b64      	subs	r4, r4, r5
 800bbf2:	10a4      	asrs	r4, r4, #2
 800bbf4:	2600      	movs	r6, #0
 800bbf6:	42a6      	cmp	r6, r4
 800bbf8:	d105      	bne.n	800bc06 <__libc_init_array+0x2e>
 800bbfa:	bd70      	pop	{r4, r5, r6, pc}
 800bbfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc00:	4798      	blx	r3
 800bc02:	3601      	adds	r6, #1
 800bc04:	e7ee      	b.n	800bbe4 <__libc_init_array+0xc>
 800bc06:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc0a:	4798      	blx	r3
 800bc0c:	3601      	adds	r6, #1
 800bc0e:	e7f2      	b.n	800bbf6 <__libc_init_array+0x1e>
 800bc10:	0800fbc8 	.word	0x0800fbc8
 800bc14:	0800fbc8 	.word	0x0800fbc8
 800bc18:	0800fbc8 	.word	0x0800fbc8
 800bc1c:	0800fbcc 	.word	0x0800fbcc

0800bc20 <__retarget_lock_init_recursive>:
 800bc20:	4770      	bx	lr

0800bc22 <__retarget_lock_acquire_recursive>:
 800bc22:	4770      	bx	lr

0800bc24 <__retarget_lock_release_recursive>:
 800bc24:	4770      	bx	lr

0800bc26 <memcpy>:
 800bc26:	440a      	add	r2, r1
 800bc28:	4291      	cmp	r1, r2
 800bc2a:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc2e:	d100      	bne.n	800bc32 <memcpy+0xc>
 800bc30:	4770      	bx	lr
 800bc32:	b510      	push	{r4, lr}
 800bc34:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc38:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc3c:	4291      	cmp	r1, r2
 800bc3e:	d1f9      	bne.n	800bc34 <memcpy+0xe>
 800bc40:	bd10      	pop	{r4, pc}
	...

0800bc44 <nanf>:
 800bc44:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bc4c <nanf+0x8>
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	7fc00000 	.word	0x7fc00000

0800bc50 <quorem>:
 800bc50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc54:	6903      	ldr	r3, [r0, #16]
 800bc56:	690c      	ldr	r4, [r1, #16]
 800bc58:	42a3      	cmp	r3, r4
 800bc5a:	4607      	mov	r7, r0
 800bc5c:	db7e      	blt.n	800bd5c <quorem+0x10c>
 800bc5e:	3c01      	subs	r4, #1
 800bc60:	f101 0814 	add.w	r8, r1, #20
 800bc64:	00a3      	lsls	r3, r4, #2
 800bc66:	f100 0514 	add.w	r5, r0, #20
 800bc6a:	9300      	str	r3, [sp, #0]
 800bc6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc70:	9301      	str	r3, [sp, #4]
 800bc72:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc82:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc86:	d32e      	bcc.n	800bce6 <quorem+0x96>
 800bc88:	f04f 0a00 	mov.w	sl, #0
 800bc8c:	46c4      	mov	ip, r8
 800bc8e:	46ae      	mov	lr, r5
 800bc90:	46d3      	mov	fp, sl
 800bc92:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bc96:	b298      	uxth	r0, r3
 800bc98:	fb06 a000 	mla	r0, r6, r0, sl
 800bc9c:	0c02      	lsrs	r2, r0, #16
 800bc9e:	0c1b      	lsrs	r3, r3, #16
 800bca0:	fb06 2303 	mla	r3, r6, r3, r2
 800bca4:	f8de 2000 	ldr.w	r2, [lr]
 800bca8:	b280      	uxth	r0, r0
 800bcaa:	b292      	uxth	r2, r2
 800bcac:	1a12      	subs	r2, r2, r0
 800bcae:	445a      	add	r2, fp
 800bcb0:	f8de 0000 	ldr.w	r0, [lr]
 800bcb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bcbe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bcc2:	b292      	uxth	r2, r2
 800bcc4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bcc8:	45e1      	cmp	r9, ip
 800bcca:	f84e 2b04 	str.w	r2, [lr], #4
 800bcce:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bcd2:	d2de      	bcs.n	800bc92 <quorem+0x42>
 800bcd4:	9b00      	ldr	r3, [sp, #0]
 800bcd6:	58eb      	ldr	r3, [r5, r3]
 800bcd8:	b92b      	cbnz	r3, 800bce6 <quorem+0x96>
 800bcda:	9b01      	ldr	r3, [sp, #4]
 800bcdc:	3b04      	subs	r3, #4
 800bcde:	429d      	cmp	r5, r3
 800bce0:	461a      	mov	r2, r3
 800bce2:	d32f      	bcc.n	800bd44 <quorem+0xf4>
 800bce4:	613c      	str	r4, [r7, #16]
 800bce6:	4638      	mov	r0, r7
 800bce8:	f001 f9c2 	bl	800d070 <__mcmp>
 800bcec:	2800      	cmp	r0, #0
 800bcee:	db25      	blt.n	800bd3c <quorem+0xec>
 800bcf0:	4629      	mov	r1, r5
 800bcf2:	2000      	movs	r0, #0
 800bcf4:	f858 2b04 	ldr.w	r2, [r8], #4
 800bcf8:	f8d1 c000 	ldr.w	ip, [r1]
 800bcfc:	fa1f fe82 	uxth.w	lr, r2
 800bd00:	fa1f f38c 	uxth.w	r3, ip
 800bd04:	eba3 030e 	sub.w	r3, r3, lr
 800bd08:	4403      	add	r3, r0
 800bd0a:	0c12      	lsrs	r2, r2, #16
 800bd0c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bd10:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd1a:	45c1      	cmp	r9, r8
 800bd1c:	f841 3b04 	str.w	r3, [r1], #4
 800bd20:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bd24:	d2e6      	bcs.n	800bcf4 <quorem+0xa4>
 800bd26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd2e:	b922      	cbnz	r2, 800bd3a <quorem+0xea>
 800bd30:	3b04      	subs	r3, #4
 800bd32:	429d      	cmp	r5, r3
 800bd34:	461a      	mov	r2, r3
 800bd36:	d30b      	bcc.n	800bd50 <quorem+0x100>
 800bd38:	613c      	str	r4, [r7, #16]
 800bd3a:	3601      	adds	r6, #1
 800bd3c:	4630      	mov	r0, r6
 800bd3e:	b003      	add	sp, #12
 800bd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd44:	6812      	ldr	r2, [r2, #0]
 800bd46:	3b04      	subs	r3, #4
 800bd48:	2a00      	cmp	r2, #0
 800bd4a:	d1cb      	bne.n	800bce4 <quorem+0x94>
 800bd4c:	3c01      	subs	r4, #1
 800bd4e:	e7c6      	b.n	800bcde <quorem+0x8e>
 800bd50:	6812      	ldr	r2, [r2, #0]
 800bd52:	3b04      	subs	r3, #4
 800bd54:	2a00      	cmp	r2, #0
 800bd56:	d1ef      	bne.n	800bd38 <quorem+0xe8>
 800bd58:	3c01      	subs	r4, #1
 800bd5a:	e7ea      	b.n	800bd32 <quorem+0xe2>
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	e7ee      	b.n	800bd3e <quorem+0xee>

0800bd60 <_dtoa_r>:
 800bd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd64:	69c7      	ldr	r7, [r0, #28]
 800bd66:	b099      	sub	sp, #100	@ 0x64
 800bd68:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bd6c:	ec55 4b10 	vmov	r4, r5, d0
 800bd70:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bd72:	9109      	str	r1, [sp, #36]	@ 0x24
 800bd74:	4683      	mov	fp, r0
 800bd76:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd78:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd7a:	b97f      	cbnz	r7, 800bd9c <_dtoa_r+0x3c>
 800bd7c:	2010      	movs	r0, #16
 800bd7e:	f000 fdfd 	bl	800c97c <malloc>
 800bd82:	4602      	mov	r2, r0
 800bd84:	f8cb 001c 	str.w	r0, [fp, #28]
 800bd88:	b920      	cbnz	r0, 800bd94 <_dtoa_r+0x34>
 800bd8a:	4ba7      	ldr	r3, [pc, #668]	@ (800c028 <_dtoa_r+0x2c8>)
 800bd8c:	21ef      	movs	r1, #239	@ 0xef
 800bd8e:	48a7      	ldr	r0, [pc, #668]	@ (800c02c <_dtoa_r+0x2cc>)
 800bd90:	f002 fc2a 	bl	800e5e8 <__assert_func>
 800bd94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bd98:	6007      	str	r7, [r0, #0]
 800bd9a:	60c7      	str	r7, [r0, #12]
 800bd9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bda0:	6819      	ldr	r1, [r3, #0]
 800bda2:	b159      	cbz	r1, 800bdbc <_dtoa_r+0x5c>
 800bda4:	685a      	ldr	r2, [r3, #4]
 800bda6:	604a      	str	r2, [r1, #4]
 800bda8:	2301      	movs	r3, #1
 800bdaa:	4093      	lsls	r3, r2
 800bdac:	608b      	str	r3, [r1, #8]
 800bdae:	4658      	mov	r0, fp
 800bdb0:	f000 feda 	bl	800cb68 <_Bfree>
 800bdb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	601a      	str	r2, [r3, #0]
 800bdbc:	1e2b      	subs	r3, r5, #0
 800bdbe:	bfb9      	ittee	lt
 800bdc0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bdc4:	9303      	strlt	r3, [sp, #12]
 800bdc6:	2300      	movge	r3, #0
 800bdc8:	6033      	strge	r3, [r6, #0]
 800bdca:	9f03      	ldr	r7, [sp, #12]
 800bdcc:	4b98      	ldr	r3, [pc, #608]	@ (800c030 <_dtoa_r+0x2d0>)
 800bdce:	bfbc      	itt	lt
 800bdd0:	2201      	movlt	r2, #1
 800bdd2:	6032      	strlt	r2, [r6, #0]
 800bdd4:	43bb      	bics	r3, r7
 800bdd6:	d112      	bne.n	800bdfe <_dtoa_r+0x9e>
 800bdd8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bdda:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bdde:	6013      	str	r3, [r2, #0]
 800bde0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bde4:	4323      	orrs	r3, r4
 800bde6:	f000 854d 	beq.w	800c884 <_dtoa_r+0xb24>
 800bdea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bdec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c044 <_dtoa_r+0x2e4>
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f000 854f 	beq.w	800c894 <_dtoa_r+0xb34>
 800bdf6:	f10a 0303 	add.w	r3, sl, #3
 800bdfa:	f000 bd49 	b.w	800c890 <_dtoa_r+0xb30>
 800bdfe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be02:	2200      	movs	r2, #0
 800be04:	ec51 0b17 	vmov	r0, r1, d7
 800be08:	2300      	movs	r3, #0
 800be0a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800be0e:	f7f4 fe8b 	bl	8000b28 <__aeabi_dcmpeq>
 800be12:	4680      	mov	r8, r0
 800be14:	b158      	cbz	r0, 800be2e <_dtoa_r+0xce>
 800be16:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800be18:	2301      	movs	r3, #1
 800be1a:	6013      	str	r3, [r2, #0]
 800be1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800be1e:	b113      	cbz	r3, 800be26 <_dtoa_r+0xc6>
 800be20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800be22:	4b84      	ldr	r3, [pc, #528]	@ (800c034 <_dtoa_r+0x2d4>)
 800be24:	6013      	str	r3, [r2, #0]
 800be26:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c048 <_dtoa_r+0x2e8>
 800be2a:	f000 bd33 	b.w	800c894 <_dtoa_r+0xb34>
 800be2e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800be32:	aa16      	add	r2, sp, #88	@ 0x58
 800be34:	a917      	add	r1, sp, #92	@ 0x5c
 800be36:	4658      	mov	r0, fp
 800be38:	f001 fa3a 	bl	800d2b0 <__d2b>
 800be3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800be40:	4681      	mov	r9, r0
 800be42:	2e00      	cmp	r6, #0
 800be44:	d077      	beq.n	800bf36 <_dtoa_r+0x1d6>
 800be46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be48:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800be4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800be58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800be5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800be60:	4619      	mov	r1, r3
 800be62:	2200      	movs	r2, #0
 800be64:	4b74      	ldr	r3, [pc, #464]	@ (800c038 <_dtoa_r+0x2d8>)
 800be66:	f7f4 fa3f 	bl	80002e8 <__aeabi_dsub>
 800be6a:	a369      	add	r3, pc, #420	@ (adr r3, 800c010 <_dtoa_r+0x2b0>)
 800be6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be70:	f7f4 fbf2 	bl	8000658 <__aeabi_dmul>
 800be74:	a368      	add	r3, pc, #416	@ (adr r3, 800c018 <_dtoa_r+0x2b8>)
 800be76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7a:	f7f4 fa37 	bl	80002ec <__adddf3>
 800be7e:	4604      	mov	r4, r0
 800be80:	4630      	mov	r0, r6
 800be82:	460d      	mov	r5, r1
 800be84:	f7f4 fb7e 	bl	8000584 <__aeabi_i2d>
 800be88:	a365      	add	r3, pc, #404	@ (adr r3, 800c020 <_dtoa_r+0x2c0>)
 800be8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8e:	f7f4 fbe3 	bl	8000658 <__aeabi_dmul>
 800be92:	4602      	mov	r2, r0
 800be94:	460b      	mov	r3, r1
 800be96:	4620      	mov	r0, r4
 800be98:	4629      	mov	r1, r5
 800be9a:	f7f4 fa27 	bl	80002ec <__adddf3>
 800be9e:	4604      	mov	r4, r0
 800bea0:	460d      	mov	r5, r1
 800bea2:	f7f4 fe89 	bl	8000bb8 <__aeabi_d2iz>
 800bea6:	2200      	movs	r2, #0
 800bea8:	4607      	mov	r7, r0
 800beaa:	2300      	movs	r3, #0
 800beac:	4620      	mov	r0, r4
 800beae:	4629      	mov	r1, r5
 800beb0:	f7f4 fe44 	bl	8000b3c <__aeabi_dcmplt>
 800beb4:	b140      	cbz	r0, 800bec8 <_dtoa_r+0x168>
 800beb6:	4638      	mov	r0, r7
 800beb8:	f7f4 fb64 	bl	8000584 <__aeabi_i2d>
 800bebc:	4622      	mov	r2, r4
 800bebe:	462b      	mov	r3, r5
 800bec0:	f7f4 fe32 	bl	8000b28 <__aeabi_dcmpeq>
 800bec4:	b900      	cbnz	r0, 800bec8 <_dtoa_r+0x168>
 800bec6:	3f01      	subs	r7, #1
 800bec8:	2f16      	cmp	r7, #22
 800beca:	d851      	bhi.n	800bf70 <_dtoa_r+0x210>
 800becc:	4b5b      	ldr	r3, [pc, #364]	@ (800c03c <_dtoa_r+0x2dc>)
 800bece:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800beda:	f7f4 fe2f 	bl	8000b3c <__aeabi_dcmplt>
 800bede:	2800      	cmp	r0, #0
 800bee0:	d048      	beq.n	800bf74 <_dtoa_r+0x214>
 800bee2:	3f01      	subs	r7, #1
 800bee4:	2300      	movs	r3, #0
 800bee6:	9312      	str	r3, [sp, #72]	@ 0x48
 800bee8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800beea:	1b9b      	subs	r3, r3, r6
 800beec:	1e5a      	subs	r2, r3, #1
 800beee:	bf44      	itt	mi
 800bef0:	f1c3 0801 	rsbmi	r8, r3, #1
 800bef4:	2300      	movmi	r3, #0
 800bef6:	9208      	str	r2, [sp, #32]
 800bef8:	bf54      	ite	pl
 800befa:	f04f 0800 	movpl.w	r8, #0
 800befe:	9308      	strmi	r3, [sp, #32]
 800bf00:	2f00      	cmp	r7, #0
 800bf02:	db39      	blt.n	800bf78 <_dtoa_r+0x218>
 800bf04:	9b08      	ldr	r3, [sp, #32]
 800bf06:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bf08:	443b      	add	r3, r7
 800bf0a:	9308      	str	r3, [sp, #32]
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf12:	2b09      	cmp	r3, #9
 800bf14:	d864      	bhi.n	800bfe0 <_dtoa_r+0x280>
 800bf16:	2b05      	cmp	r3, #5
 800bf18:	bfc4      	itt	gt
 800bf1a:	3b04      	subgt	r3, #4
 800bf1c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bf1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf20:	f1a3 0302 	sub.w	r3, r3, #2
 800bf24:	bfcc      	ite	gt
 800bf26:	2400      	movgt	r4, #0
 800bf28:	2401      	movle	r4, #1
 800bf2a:	2b03      	cmp	r3, #3
 800bf2c:	d863      	bhi.n	800bff6 <_dtoa_r+0x296>
 800bf2e:	e8df f003 	tbb	[pc, r3]
 800bf32:	372a      	.short	0x372a
 800bf34:	5535      	.short	0x5535
 800bf36:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bf3a:	441e      	add	r6, r3
 800bf3c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bf40:	2b20      	cmp	r3, #32
 800bf42:	bfc1      	itttt	gt
 800bf44:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bf48:	409f      	lslgt	r7, r3
 800bf4a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bf4e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bf52:	bfd6      	itet	le
 800bf54:	f1c3 0320 	rsble	r3, r3, #32
 800bf58:	ea47 0003 	orrgt.w	r0, r7, r3
 800bf5c:	fa04 f003 	lslle.w	r0, r4, r3
 800bf60:	f7f4 fb00 	bl	8000564 <__aeabi_ui2d>
 800bf64:	2201      	movs	r2, #1
 800bf66:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bf6a:	3e01      	subs	r6, #1
 800bf6c:	9214      	str	r2, [sp, #80]	@ 0x50
 800bf6e:	e777      	b.n	800be60 <_dtoa_r+0x100>
 800bf70:	2301      	movs	r3, #1
 800bf72:	e7b8      	b.n	800bee6 <_dtoa_r+0x186>
 800bf74:	9012      	str	r0, [sp, #72]	@ 0x48
 800bf76:	e7b7      	b.n	800bee8 <_dtoa_r+0x188>
 800bf78:	427b      	negs	r3, r7
 800bf7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	eba8 0807 	sub.w	r8, r8, r7
 800bf82:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bf84:	e7c4      	b.n	800bf10 <_dtoa_r+0x1b0>
 800bf86:	2300      	movs	r3, #0
 800bf88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	dc35      	bgt.n	800bffc <_dtoa_r+0x29c>
 800bf90:	2301      	movs	r3, #1
 800bf92:	9300      	str	r3, [sp, #0]
 800bf94:	9307      	str	r3, [sp, #28]
 800bf96:	461a      	mov	r2, r3
 800bf98:	920e      	str	r2, [sp, #56]	@ 0x38
 800bf9a:	e00b      	b.n	800bfb4 <_dtoa_r+0x254>
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	e7f3      	b.n	800bf88 <_dtoa_r+0x228>
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bfa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfa6:	18fb      	adds	r3, r7, r3
 800bfa8:	9300      	str	r3, [sp, #0]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	9307      	str	r3, [sp, #28]
 800bfb0:	bfb8      	it	lt
 800bfb2:	2301      	movlt	r3, #1
 800bfb4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bfb8:	2100      	movs	r1, #0
 800bfba:	2204      	movs	r2, #4
 800bfbc:	f102 0514 	add.w	r5, r2, #20
 800bfc0:	429d      	cmp	r5, r3
 800bfc2:	d91f      	bls.n	800c004 <_dtoa_r+0x2a4>
 800bfc4:	6041      	str	r1, [r0, #4]
 800bfc6:	4658      	mov	r0, fp
 800bfc8:	f000 fd8e 	bl	800cae8 <_Balloc>
 800bfcc:	4682      	mov	sl, r0
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	d13c      	bne.n	800c04c <_dtoa_r+0x2ec>
 800bfd2:	4b1b      	ldr	r3, [pc, #108]	@ (800c040 <_dtoa_r+0x2e0>)
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	f240 11af 	movw	r1, #431	@ 0x1af
 800bfda:	e6d8      	b.n	800bd8e <_dtoa_r+0x2e>
 800bfdc:	2301      	movs	r3, #1
 800bfde:	e7e0      	b.n	800bfa2 <_dtoa_r+0x242>
 800bfe0:	2401      	movs	r4, #1
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfe6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bfe8:	f04f 33ff 	mov.w	r3, #4294967295
 800bfec:	9300      	str	r3, [sp, #0]
 800bfee:	9307      	str	r3, [sp, #28]
 800bff0:	2200      	movs	r2, #0
 800bff2:	2312      	movs	r3, #18
 800bff4:	e7d0      	b.n	800bf98 <_dtoa_r+0x238>
 800bff6:	2301      	movs	r3, #1
 800bff8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bffa:	e7f5      	b.n	800bfe8 <_dtoa_r+0x288>
 800bffc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bffe:	9300      	str	r3, [sp, #0]
 800c000:	9307      	str	r3, [sp, #28]
 800c002:	e7d7      	b.n	800bfb4 <_dtoa_r+0x254>
 800c004:	3101      	adds	r1, #1
 800c006:	0052      	lsls	r2, r2, #1
 800c008:	e7d8      	b.n	800bfbc <_dtoa_r+0x25c>
 800c00a:	bf00      	nop
 800c00c:	f3af 8000 	nop.w
 800c010:	636f4361 	.word	0x636f4361
 800c014:	3fd287a7 	.word	0x3fd287a7
 800c018:	8b60c8b3 	.word	0x8b60c8b3
 800c01c:	3fc68a28 	.word	0x3fc68a28
 800c020:	509f79fb 	.word	0x509f79fb
 800c024:	3fd34413 	.word	0x3fd34413
 800c028:	0800f7d6 	.word	0x0800f7d6
 800c02c:	0800f7ed 	.word	0x0800f7ed
 800c030:	7ff00000 	.word	0x7ff00000
 800c034:	0800f7a1 	.word	0x0800f7a1
 800c038:	3ff80000 	.word	0x3ff80000
 800c03c:	0800f8e8 	.word	0x0800f8e8
 800c040:	0800f845 	.word	0x0800f845
 800c044:	0800f7d2 	.word	0x0800f7d2
 800c048:	0800f7a0 	.word	0x0800f7a0
 800c04c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c050:	6018      	str	r0, [r3, #0]
 800c052:	9b07      	ldr	r3, [sp, #28]
 800c054:	2b0e      	cmp	r3, #14
 800c056:	f200 80a4 	bhi.w	800c1a2 <_dtoa_r+0x442>
 800c05a:	2c00      	cmp	r4, #0
 800c05c:	f000 80a1 	beq.w	800c1a2 <_dtoa_r+0x442>
 800c060:	2f00      	cmp	r7, #0
 800c062:	dd33      	ble.n	800c0cc <_dtoa_r+0x36c>
 800c064:	4bad      	ldr	r3, [pc, #692]	@ (800c31c <_dtoa_r+0x5bc>)
 800c066:	f007 020f 	and.w	r2, r7, #15
 800c06a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c06e:	ed93 7b00 	vldr	d7, [r3]
 800c072:	05f8      	lsls	r0, r7, #23
 800c074:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c078:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c07c:	d516      	bpl.n	800c0ac <_dtoa_r+0x34c>
 800c07e:	4ba8      	ldr	r3, [pc, #672]	@ (800c320 <_dtoa_r+0x5c0>)
 800c080:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c084:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c088:	f7f4 fc10 	bl	80008ac <__aeabi_ddiv>
 800c08c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c090:	f004 040f 	and.w	r4, r4, #15
 800c094:	2603      	movs	r6, #3
 800c096:	4da2      	ldr	r5, [pc, #648]	@ (800c320 <_dtoa_r+0x5c0>)
 800c098:	b954      	cbnz	r4, 800c0b0 <_dtoa_r+0x350>
 800c09a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c09e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0a2:	f7f4 fc03 	bl	80008ac <__aeabi_ddiv>
 800c0a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0aa:	e028      	b.n	800c0fe <_dtoa_r+0x39e>
 800c0ac:	2602      	movs	r6, #2
 800c0ae:	e7f2      	b.n	800c096 <_dtoa_r+0x336>
 800c0b0:	07e1      	lsls	r1, r4, #31
 800c0b2:	d508      	bpl.n	800c0c6 <_dtoa_r+0x366>
 800c0b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c0bc:	f7f4 facc 	bl	8000658 <__aeabi_dmul>
 800c0c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0c4:	3601      	adds	r6, #1
 800c0c6:	1064      	asrs	r4, r4, #1
 800c0c8:	3508      	adds	r5, #8
 800c0ca:	e7e5      	b.n	800c098 <_dtoa_r+0x338>
 800c0cc:	f000 80d2 	beq.w	800c274 <_dtoa_r+0x514>
 800c0d0:	427c      	negs	r4, r7
 800c0d2:	4b92      	ldr	r3, [pc, #584]	@ (800c31c <_dtoa_r+0x5bc>)
 800c0d4:	4d92      	ldr	r5, [pc, #584]	@ (800c320 <_dtoa_r+0x5c0>)
 800c0d6:	f004 020f 	and.w	r2, r4, #15
 800c0da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c0e6:	f7f4 fab7 	bl	8000658 <__aeabi_dmul>
 800c0ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0ee:	1124      	asrs	r4, r4, #4
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	2602      	movs	r6, #2
 800c0f4:	2c00      	cmp	r4, #0
 800c0f6:	f040 80b2 	bne.w	800c25e <_dtoa_r+0x4fe>
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d1d3      	bne.n	800c0a6 <_dtoa_r+0x346>
 800c0fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c100:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c104:	2b00      	cmp	r3, #0
 800c106:	f000 80b7 	beq.w	800c278 <_dtoa_r+0x518>
 800c10a:	4b86      	ldr	r3, [pc, #536]	@ (800c324 <_dtoa_r+0x5c4>)
 800c10c:	2200      	movs	r2, #0
 800c10e:	4620      	mov	r0, r4
 800c110:	4629      	mov	r1, r5
 800c112:	f7f4 fd13 	bl	8000b3c <__aeabi_dcmplt>
 800c116:	2800      	cmp	r0, #0
 800c118:	f000 80ae 	beq.w	800c278 <_dtoa_r+0x518>
 800c11c:	9b07      	ldr	r3, [sp, #28]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	f000 80aa 	beq.w	800c278 <_dtoa_r+0x518>
 800c124:	9b00      	ldr	r3, [sp, #0]
 800c126:	2b00      	cmp	r3, #0
 800c128:	dd37      	ble.n	800c19a <_dtoa_r+0x43a>
 800c12a:	1e7b      	subs	r3, r7, #1
 800c12c:	9304      	str	r3, [sp, #16]
 800c12e:	4620      	mov	r0, r4
 800c130:	4b7d      	ldr	r3, [pc, #500]	@ (800c328 <_dtoa_r+0x5c8>)
 800c132:	2200      	movs	r2, #0
 800c134:	4629      	mov	r1, r5
 800c136:	f7f4 fa8f 	bl	8000658 <__aeabi_dmul>
 800c13a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c13e:	9c00      	ldr	r4, [sp, #0]
 800c140:	3601      	adds	r6, #1
 800c142:	4630      	mov	r0, r6
 800c144:	f7f4 fa1e 	bl	8000584 <__aeabi_i2d>
 800c148:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c14c:	f7f4 fa84 	bl	8000658 <__aeabi_dmul>
 800c150:	4b76      	ldr	r3, [pc, #472]	@ (800c32c <_dtoa_r+0x5cc>)
 800c152:	2200      	movs	r2, #0
 800c154:	f7f4 f8ca 	bl	80002ec <__adddf3>
 800c158:	4605      	mov	r5, r0
 800c15a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c15e:	2c00      	cmp	r4, #0
 800c160:	f040 808d 	bne.w	800c27e <_dtoa_r+0x51e>
 800c164:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c168:	4b71      	ldr	r3, [pc, #452]	@ (800c330 <_dtoa_r+0x5d0>)
 800c16a:	2200      	movs	r2, #0
 800c16c:	f7f4 f8bc 	bl	80002e8 <__aeabi_dsub>
 800c170:	4602      	mov	r2, r0
 800c172:	460b      	mov	r3, r1
 800c174:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c178:	462a      	mov	r2, r5
 800c17a:	4633      	mov	r3, r6
 800c17c:	f7f4 fcfc 	bl	8000b78 <__aeabi_dcmpgt>
 800c180:	2800      	cmp	r0, #0
 800c182:	f040 828b 	bne.w	800c69c <_dtoa_r+0x93c>
 800c186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c18a:	462a      	mov	r2, r5
 800c18c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c190:	f7f4 fcd4 	bl	8000b3c <__aeabi_dcmplt>
 800c194:	2800      	cmp	r0, #0
 800c196:	f040 8128 	bne.w	800c3ea <_dtoa_r+0x68a>
 800c19a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c19e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c1a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	f2c0 815a 	blt.w	800c45e <_dtoa_r+0x6fe>
 800c1aa:	2f0e      	cmp	r7, #14
 800c1ac:	f300 8157 	bgt.w	800c45e <_dtoa_r+0x6fe>
 800c1b0:	4b5a      	ldr	r3, [pc, #360]	@ (800c31c <_dtoa_r+0x5bc>)
 800c1b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c1b6:	ed93 7b00 	vldr	d7, [r3]
 800c1ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	ed8d 7b00 	vstr	d7, [sp]
 800c1c2:	da03      	bge.n	800c1cc <_dtoa_r+0x46c>
 800c1c4:	9b07      	ldr	r3, [sp, #28]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	f340 8101 	ble.w	800c3ce <_dtoa_r+0x66e>
 800c1cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c1d0:	4656      	mov	r6, sl
 800c1d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	4629      	mov	r1, r5
 800c1da:	f7f4 fb67 	bl	80008ac <__aeabi_ddiv>
 800c1de:	f7f4 fceb 	bl	8000bb8 <__aeabi_d2iz>
 800c1e2:	4680      	mov	r8, r0
 800c1e4:	f7f4 f9ce 	bl	8000584 <__aeabi_i2d>
 800c1e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1ec:	f7f4 fa34 	bl	8000658 <__aeabi_dmul>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	4629      	mov	r1, r5
 800c1f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c1fc:	f7f4 f874 	bl	80002e8 <__aeabi_dsub>
 800c200:	f806 4b01 	strb.w	r4, [r6], #1
 800c204:	9d07      	ldr	r5, [sp, #28]
 800c206:	eba6 040a 	sub.w	r4, r6, sl
 800c20a:	42a5      	cmp	r5, r4
 800c20c:	4602      	mov	r2, r0
 800c20e:	460b      	mov	r3, r1
 800c210:	f040 8117 	bne.w	800c442 <_dtoa_r+0x6e2>
 800c214:	f7f4 f86a 	bl	80002ec <__adddf3>
 800c218:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c21c:	4604      	mov	r4, r0
 800c21e:	460d      	mov	r5, r1
 800c220:	f7f4 fcaa 	bl	8000b78 <__aeabi_dcmpgt>
 800c224:	2800      	cmp	r0, #0
 800c226:	f040 80f9 	bne.w	800c41c <_dtoa_r+0x6bc>
 800c22a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c22e:	4620      	mov	r0, r4
 800c230:	4629      	mov	r1, r5
 800c232:	f7f4 fc79 	bl	8000b28 <__aeabi_dcmpeq>
 800c236:	b118      	cbz	r0, 800c240 <_dtoa_r+0x4e0>
 800c238:	f018 0f01 	tst.w	r8, #1
 800c23c:	f040 80ee 	bne.w	800c41c <_dtoa_r+0x6bc>
 800c240:	4649      	mov	r1, r9
 800c242:	4658      	mov	r0, fp
 800c244:	f000 fc90 	bl	800cb68 <_Bfree>
 800c248:	2300      	movs	r3, #0
 800c24a:	7033      	strb	r3, [r6, #0]
 800c24c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c24e:	3701      	adds	r7, #1
 800c250:	601f      	str	r7, [r3, #0]
 800c252:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c254:	2b00      	cmp	r3, #0
 800c256:	f000 831d 	beq.w	800c894 <_dtoa_r+0xb34>
 800c25a:	601e      	str	r6, [r3, #0]
 800c25c:	e31a      	b.n	800c894 <_dtoa_r+0xb34>
 800c25e:	07e2      	lsls	r2, r4, #31
 800c260:	d505      	bpl.n	800c26e <_dtoa_r+0x50e>
 800c262:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c266:	f7f4 f9f7 	bl	8000658 <__aeabi_dmul>
 800c26a:	3601      	adds	r6, #1
 800c26c:	2301      	movs	r3, #1
 800c26e:	1064      	asrs	r4, r4, #1
 800c270:	3508      	adds	r5, #8
 800c272:	e73f      	b.n	800c0f4 <_dtoa_r+0x394>
 800c274:	2602      	movs	r6, #2
 800c276:	e742      	b.n	800c0fe <_dtoa_r+0x39e>
 800c278:	9c07      	ldr	r4, [sp, #28]
 800c27a:	9704      	str	r7, [sp, #16]
 800c27c:	e761      	b.n	800c142 <_dtoa_r+0x3e2>
 800c27e:	4b27      	ldr	r3, [pc, #156]	@ (800c31c <_dtoa_r+0x5bc>)
 800c280:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c282:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c286:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c28a:	4454      	add	r4, sl
 800c28c:	2900      	cmp	r1, #0
 800c28e:	d053      	beq.n	800c338 <_dtoa_r+0x5d8>
 800c290:	4928      	ldr	r1, [pc, #160]	@ (800c334 <_dtoa_r+0x5d4>)
 800c292:	2000      	movs	r0, #0
 800c294:	f7f4 fb0a 	bl	80008ac <__aeabi_ddiv>
 800c298:	4633      	mov	r3, r6
 800c29a:	462a      	mov	r2, r5
 800c29c:	f7f4 f824 	bl	80002e8 <__aeabi_dsub>
 800c2a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c2a4:	4656      	mov	r6, sl
 800c2a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2aa:	f7f4 fc85 	bl	8000bb8 <__aeabi_d2iz>
 800c2ae:	4605      	mov	r5, r0
 800c2b0:	f7f4 f968 	bl	8000584 <__aeabi_i2d>
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	460b      	mov	r3, r1
 800c2b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2bc:	f7f4 f814 	bl	80002e8 <__aeabi_dsub>
 800c2c0:	3530      	adds	r5, #48	@ 0x30
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c2ca:	f806 5b01 	strb.w	r5, [r6], #1
 800c2ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c2d2:	f7f4 fc33 	bl	8000b3c <__aeabi_dcmplt>
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	d171      	bne.n	800c3be <_dtoa_r+0x65e>
 800c2da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2de:	4911      	ldr	r1, [pc, #68]	@ (800c324 <_dtoa_r+0x5c4>)
 800c2e0:	2000      	movs	r0, #0
 800c2e2:	f7f4 f801 	bl	80002e8 <__aeabi_dsub>
 800c2e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c2ea:	f7f4 fc27 	bl	8000b3c <__aeabi_dcmplt>
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	f040 8095 	bne.w	800c41e <_dtoa_r+0x6be>
 800c2f4:	42a6      	cmp	r6, r4
 800c2f6:	f43f af50 	beq.w	800c19a <_dtoa_r+0x43a>
 800c2fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c2fe:	4b0a      	ldr	r3, [pc, #40]	@ (800c328 <_dtoa_r+0x5c8>)
 800c300:	2200      	movs	r2, #0
 800c302:	f7f4 f9a9 	bl	8000658 <__aeabi_dmul>
 800c306:	4b08      	ldr	r3, [pc, #32]	@ (800c328 <_dtoa_r+0x5c8>)
 800c308:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c30c:	2200      	movs	r2, #0
 800c30e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c312:	f7f4 f9a1 	bl	8000658 <__aeabi_dmul>
 800c316:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c31a:	e7c4      	b.n	800c2a6 <_dtoa_r+0x546>
 800c31c:	0800f8e8 	.word	0x0800f8e8
 800c320:	0800f8c0 	.word	0x0800f8c0
 800c324:	3ff00000 	.word	0x3ff00000
 800c328:	40240000 	.word	0x40240000
 800c32c:	401c0000 	.word	0x401c0000
 800c330:	40140000 	.word	0x40140000
 800c334:	3fe00000 	.word	0x3fe00000
 800c338:	4631      	mov	r1, r6
 800c33a:	4628      	mov	r0, r5
 800c33c:	f7f4 f98c 	bl	8000658 <__aeabi_dmul>
 800c340:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c344:	9415      	str	r4, [sp, #84]	@ 0x54
 800c346:	4656      	mov	r6, sl
 800c348:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c34c:	f7f4 fc34 	bl	8000bb8 <__aeabi_d2iz>
 800c350:	4605      	mov	r5, r0
 800c352:	f7f4 f917 	bl	8000584 <__aeabi_i2d>
 800c356:	4602      	mov	r2, r0
 800c358:	460b      	mov	r3, r1
 800c35a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c35e:	f7f3 ffc3 	bl	80002e8 <__aeabi_dsub>
 800c362:	3530      	adds	r5, #48	@ 0x30
 800c364:	f806 5b01 	strb.w	r5, [r6], #1
 800c368:	4602      	mov	r2, r0
 800c36a:	460b      	mov	r3, r1
 800c36c:	42a6      	cmp	r6, r4
 800c36e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c372:	f04f 0200 	mov.w	r2, #0
 800c376:	d124      	bne.n	800c3c2 <_dtoa_r+0x662>
 800c378:	4bac      	ldr	r3, [pc, #688]	@ (800c62c <_dtoa_r+0x8cc>)
 800c37a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c37e:	f7f3 ffb5 	bl	80002ec <__adddf3>
 800c382:	4602      	mov	r2, r0
 800c384:	460b      	mov	r3, r1
 800c386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c38a:	f7f4 fbf5 	bl	8000b78 <__aeabi_dcmpgt>
 800c38e:	2800      	cmp	r0, #0
 800c390:	d145      	bne.n	800c41e <_dtoa_r+0x6be>
 800c392:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c396:	49a5      	ldr	r1, [pc, #660]	@ (800c62c <_dtoa_r+0x8cc>)
 800c398:	2000      	movs	r0, #0
 800c39a:	f7f3 ffa5 	bl	80002e8 <__aeabi_dsub>
 800c39e:	4602      	mov	r2, r0
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3a6:	f7f4 fbc9 	bl	8000b3c <__aeabi_dcmplt>
 800c3aa:	2800      	cmp	r0, #0
 800c3ac:	f43f aef5 	beq.w	800c19a <_dtoa_r+0x43a>
 800c3b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c3b2:	1e73      	subs	r3, r6, #1
 800c3b4:	9315      	str	r3, [sp, #84]	@ 0x54
 800c3b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c3ba:	2b30      	cmp	r3, #48	@ 0x30
 800c3bc:	d0f8      	beq.n	800c3b0 <_dtoa_r+0x650>
 800c3be:	9f04      	ldr	r7, [sp, #16]
 800c3c0:	e73e      	b.n	800c240 <_dtoa_r+0x4e0>
 800c3c2:	4b9b      	ldr	r3, [pc, #620]	@ (800c630 <_dtoa_r+0x8d0>)
 800c3c4:	f7f4 f948 	bl	8000658 <__aeabi_dmul>
 800c3c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3cc:	e7bc      	b.n	800c348 <_dtoa_r+0x5e8>
 800c3ce:	d10c      	bne.n	800c3ea <_dtoa_r+0x68a>
 800c3d0:	4b98      	ldr	r3, [pc, #608]	@ (800c634 <_dtoa_r+0x8d4>)
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3d8:	f7f4 f93e 	bl	8000658 <__aeabi_dmul>
 800c3dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3e0:	f7f4 fbc0 	bl	8000b64 <__aeabi_dcmpge>
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	f000 8157 	beq.w	800c698 <_dtoa_r+0x938>
 800c3ea:	2400      	movs	r4, #0
 800c3ec:	4625      	mov	r5, r4
 800c3ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3f0:	43db      	mvns	r3, r3
 800c3f2:	9304      	str	r3, [sp, #16]
 800c3f4:	4656      	mov	r6, sl
 800c3f6:	2700      	movs	r7, #0
 800c3f8:	4621      	mov	r1, r4
 800c3fa:	4658      	mov	r0, fp
 800c3fc:	f000 fbb4 	bl	800cb68 <_Bfree>
 800c400:	2d00      	cmp	r5, #0
 800c402:	d0dc      	beq.n	800c3be <_dtoa_r+0x65e>
 800c404:	b12f      	cbz	r7, 800c412 <_dtoa_r+0x6b2>
 800c406:	42af      	cmp	r7, r5
 800c408:	d003      	beq.n	800c412 <_dtoa_r+0x6b2>
 800c40a:	4639      	mov	r1, r7
 800c40c:	4658      	mov	r0, fp
 800c40e:	f000 fbab 	bl	800cb68 <_Bfree>
 800c412:	4629      	mov	r1, r5
 800c414:	4658      	mov	r0, fp
 800c416:	f000 fba7 	bl	800cb68 <_Bfree>
 800c41a:	e7d0      	b.n	800c3be <_dtoa_r+0x65e>
 800c41c:	9704      	str	r7, [sp, #16]
 800c41e:	4633      	mov	r3, r6
 800c420:	461e      	mov	r6, r3
 800c422:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c426:	2a39      	cmp	r2, #57	@ 0x39
 800c428:	d107      	bne.n	800c43a <_dtoa_r+0x6da>
 800c42a:	459a      	cmp	sl, r3
 800c42c:	d1f8      	bne.n	800c420 <_dtoa_r+0x6c0>
 800c42e:	9a04      	ldr	r2, [sp, #16]
 800c430:	3201      	adds	r2, #1
 800c432:	9204      	str	r2, [sp, #16]
 800c434:	2230      	movs	r2, #48	@ 0x30
 800c436:	f88a 2000 	strb.w	r2, [sl]
 800c43a:	781a      	ldrb	r2, [r3, #0]
 800c43c:	3201      	adds	r2, #1
 800c43e:	701a      	strb	r2, [r3, #0]
 800c440:	e7bd      	b.n	800c3be <_dtoa_r+0x65e>
 800c442:	4b7b      	ldr	r3, [pc, #492]	@ (800c630 <_dtoa_r+0x8d0>)
 800c444:	2200      	movs	r2, #0
 800c446:	f7f4 f907 	bl	8000658 <__aeabi_dmul>
 800c44a:	2200      	movs	r2, #0
 800c44c:	2300      	movs	r3, #0
 800c44e:	4604      	mov	r4, r0
 800c450:	460d      	mov	r5, r1
 800c452:	f7f4 fb69 	bl	8000b28 <__aeabi_dcmpeq>
 800c456:	2800      	cmp	r0, #0
 800c458:	f43f aebb 	beq.w	800c1d2 <_dtoa_r+0x472>
 800c45c:	e6f0      	b.n	800c240 <_dtoa_r+0x4e0>
 800c45e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c460:	2a00      	cmp	r2, #0
 800c462:	f000 80db 	beq.w	800c61c <_dtoa_r+0x8bc>
 800c466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c468:	2a01      	cmp	r2, #1
 800c46a:	f300 80bf 	bgt.w	800c5ec <_dtoa_r+0x88c>
 800c46e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c470:	2a00      	cmp	r2, #0
 800c472:	f000 80b7 	beq.w	800c5e4 <_dtoa_r+0x884>
 800c476:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c47a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c47c:	4646      	mov	r6, r8
 800c47e:	9a08      	ldr	r2, [sp, #32]
 800c480:	2101      	movs	r1, #1
 800c482:	441a      	add	r2, r3
 800c484:	4658      	mov	r0, fp
 800c486:	4498      	add	r8, r3
 800c488:	9208      	str	r2, [sp, #32]
 800c48a:	f000 fc6b 	bl	800cd64 <__i2b>
 800c48e:	4605      	mov	r5, r0
 800c490:	b15e      	cbz	r6, 800c4aa <_dtoa_r+0x74a>
 800c492:	9b08      	ldr	r3, [sp, #32]
 800c494:	2b00      	cmp	r3, #0
 800c496:	dd08      	ble.n	800c4aa <_dtoa_r+0x74a>
 800c498:	42b3      	cmp	r3, r6
 800c49a:	9a08      	ldr	r2, [sp, #32]
 800c49c:	bfa8      	it	ge
 800c49e:	4633      	movge	r3, r6
 800c4a0:	eba8 0803 	sub.w	r8, r8, r3
 800c4a4:	1af6      	subs	r6, r6, r3
 800c4a6:	1ad3      	subs	r3, r2, r3
 800c4a8:	9308      	str	r3, [sp, #32]
 800c4aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4ac:	b1f3      	cbz	r3, 800c4ec <_dtoa_r+0x78c>
 800c4ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f000 80b7 	beq.w	800c624 <_dtoa_r+0x8c4>
 800c4b6:	b18c      	cbz	r4, 800c4dc <_dtoa_r+0x77c>
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	4622      	mov	r2, r4
 800c4bc:	4658      	mov	r0, fp
 800c4be:	f000 fd11 	bl	800cee4 <__pow5mult>
 800c4c2:	464a      	mov	r2, r9
 800c4c4:	4601      	mov	r1, r0
 800c4c6:	4605      	mov	r5, r0
 800c4c8:	4658      	mov	r0, fp
 800c4ca:	f000 fc61 	bl	800cd90 <__multiply>
 800c4ce:	4649      	mov	r1, r9
 800c4d0:	9004      	str	r0, [sp, #16]
 800c4d2:	4658      	mov	r0, fp
 800c4d4:	f000 fb48 	bl	800cb68 <_Bfree>
 800c4d8:	9b04      	ldr	r3, [sp, #16]
 800c4da:	4699      	mov	r9, r3
 800c4dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4de:	1b1a      	subs	r2, r3, r4
 800c4e0:	d004      	beq.n	800c4ec <_dtoa_r+0x78c>
 800c4e2:	4649      	mov	r1, r9
 800c4e4:	4658      	mov	r0, fp
 800c4e6:	f000 fcfd 	bl	800cee4 <__pow5mult>
 800c4ea:	4681      	mov	r9, r0
 800c4ec:	2101      	movs	r1, #1
 800c4ee:	4658      	mov	r0, fp
 800c4f0:	f000 fc38 	bl	800cd64 <__i2b>
 800c4f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	f000 81cf 	beq.w	800c89c <_dtoa_r+0xb3c>
 800c4fe:	461a      	mov	r2, r3
 800c500:	4601      	mov	r1, r0
 800c502:	4658      	mov	r0, fp
 800c504:	f000 fcee 	bl	800cee4 <__pow5mult>
 800c508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	4604      	mov	r4, r0
 800c50e:	f300 8095 	bgt.w	800c63c <_dtoa_r+0x8dc>
 800c512:	9b02      	ldr	r3, [sp, #8]
 800c514:	2b00      	cmp	r3, #0
 800c516:	f040 8087 	bne.w	800c628 <_dtoa_r+0x8c8>
 800c51a:	9b03      	ldr	r3, [sp, #12]
 800c51c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c520:	2b00      	cmp	r3, #0
 800c522:	f040 8089 	bne.w	800c638 <_dtoa_r+0x8d8>
 800c526:	9b03      	ldr	r3, [sp, #12]
 800c528:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c52c:	0d1b      	lsrs	r3, r3, #20
 800c52e:	051b      	lsls	r3, r3, #20
 800c530:	b12b      	cbz	r3, 800c53e <_dtoa_r+0x7de>
 800c532:	9b08      	ldr	r3, [sp, #32]
 800c534:	3301      	adds	r3, #1
 800c536:	9308      	str	r3, [sp, #32]
 800c538:	f108 0801 	add.w	r8, r8, #1
 800c53c:	2301      	movs	r3, #1
 800c53e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c540:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c542:	2b00      	cmp	r3, #0
 800c544:	f000 81b0 	beq.w	800c8a8 <_dtoa_r+0xb48>
 800c548:	6923      	ldr	r3, [r4, #16]
 800c54a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c54e:	6918      	ldr	r0, [r3, #16]
 800c550:	f000 fbbc 	bl	800cccc <__hi0bits>
 800c554:	f1c0 0020 	rsb	r0, r0, #32
 800c558:	9b08      	ldr	r3, [sp, #32]
 800c55a:	4418      	add	r0, r3
 800c55c:	f010 001f 	ands.w	r0, r0, #31
 800c560:	d077      	beq.n	800c652 <_dtoa_r+0x8f2>
 800c562:	f1c0 0320 	rsb	r3, r0, #32
 800c566:	2b04      	cmp	r3, #4
 800c568:	dd6b      	ble.n	800c642 <_dtoa_r+0x8e2>
 800c56a:	9b08      	ldr	r3, [sp, #32]
 800c56c:	f1c0 001c 	rsb	r0, r0, #28
 800c570:	4403      	add	r3, r0
 800c572:	4480      	add	r8, r0
 800c574:	4406      	add	r6, r0
 800c576:	9308      	str	r3, [sp, #32]
 800c578:	f1b8 0f00 	cmp.w	r8, #0
 800c57c:	dd05      	ble.n	800c58a <_dtoa_r+0x82a>
 800c57e:	4649      	mov	r1, r9
 800c580:	4642      	mov	r2, r8
 800c582:	4658      	mov	r0, fp
 800c584:	f000 fd08 	bl	800cf98 <__lshift>
 800c588:	4681      	mov	r9, r0
 800c58a:	9b08      	ldr	r3, [sp, #32]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	dd05      	ble.n	800c59c <_dtoa_r+0x83c>
 800c590:	4621      	mov	r1, r4
 800c592:	461a      	mov	r2, r3
 800c594:	4658      	mov	r0, fp
 800c596:	f000 fcff 	bl	800cf98 <__lshift>
 800c59a:	4604      	mov	r4, r0
 800c59c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d059      	beq.n	800c656 <_dtoa_r+0x8f6>
 800c5a2:	4621      	mov	r1, r4
 800c5a4:	4648      	mov	r0, r9
 800c5a6:	f000 fd63 	bl	800d070 <__mcmp>
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	da53      	bge.n	800c656 <_dtoa_r+0x8f6>
 800c5ae:	1e7b      	subs	r3, r7, #1
 800c5b0:	9304      	str	r3, [sp, #16]
 800c5b2:	4649      	mov	r1, r9
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	220a      	movs	r2, #10
 800c5b8:	4658      	mov	r0, fp
 800c5ba:	f000 faf7 	bl	800cbac <__multadd>
 800c5be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5c0:	4681      	mov	r9, r0
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	f000 8172 	beq.w	800c8ac <_dtoa_r+0xb4c>
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	4629      	mov	r1, r5
 800c5cc:	220a      	movs	r2, #10
 800c5ce:	4658      	mov	r0, fp
 800c5d0:	f000 faec 	bl	800cbac <__multadd>
 800c5d4:	9b00      	ldr	r3, [sp, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	4605      	mov	r5, r0
 800c5da:	dc67      	bgt.n	800c6ac <_dtoa_r+0x94c>
 800c5dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5de:	2b02      	cmp	r3, #2
 800c5e0:	dc41      	bgt.n	800c666 <_dtoa_r+0x906>
 800c5e2:	e063      	b.n	800c6ac <_dtoa_r+0x94c>
 800c5e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c5e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c5ea:	e746      	b.n	800c47a <_dtoa_r+0x71a>
 800c5ec:	9b07      	ldr	r3, [sp, #28]
 800c5ee:	1e5c      	subs	r4, r3, #1
 800c5f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5f2:	42a3      	cmp	r3, r4
 800c5f4:	bfbf      	itttt	lt
 800c5f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c5f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c5fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c5fc:	1ae3      	sublt	r3, r4, r3
 800c5fe:	bfb4      	ite	lt
 800c600:	18d2      	addlt	r2, r2, r3
 800c602:	1b1c      	subge	r4, r3, r4
 800c604:	9b07      	ldr	r3, [sp, #28]
 800c606:	bfbc      	itt	lt
 800c608:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c60a:	2400      	movlt	r4, #0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	bfb5      	itete	lt
 800c610:	eba8 0603 	sublt.w	r6, r8, r3
 800c614:	9b07      	ldrge	r3, [sp, #28]
 800c616:	2300      	movlt	r3, #0
 800c618:	4646      	movge	r6, r8
 800c61a:	e730      	b.n	800c47e <_dtoa_r+0x71e>
 800c61c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c61e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c620:	4646      	mov	r6, r8
 800c622:	e735      	b.n	800c490 <_dtoa_r+0x730>
 800c624:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c626:	e75c      	b.n	800c4e2 <_dtoa_r+0x782>
 800c628:	2300      	movs	r3, #0
 800c62a:	e788      	b.n	800c53e <_dtoa_r+0x7de>
 800c62c:	3fe00000 	.word	0x3fe00000
 800c630:	40240000 	.word	0x40240000
 800c634:	40140000 	.word	0x40140000
 800c638:	9b02      	ldr	r3, [sp, #8]
 800c63a:	e780      	b.n	800c53e <_dtoa_r+0x7de>
 800c63c:	2300      	movs	r3, #0
 800c63e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c640:	e782      	b.n	800c548 <_dtoa_r+0x7e8>
 800c642:	d099      	beq.n	800c578 <_dtoa_r+0x818>
 800c644:	9a08      	ldr	r2, [sp, #32]
 800c646:	331c      	adds	r3, #28
 800c648:	441a      	add	r2, r3
 800c64a:	4498      	add	r8, r3
 800c64c:	441e      	add	r6, r3
 800c64e:	9208      	str	r2, [sp, #32]
 800c650:	e792      	b.n	800c578 <_dtoa_r+0x818>
 800c652:	4603      	mov	r3, r0
 800c654:	e7f6      	b.n	800c644 <_dtoa_r+0x8e4>
 800c656:	9b07      	ldr	r3, [sp, #28]
 800c658:	9704      	str	r7, [sp, #16]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	dc20      	bgt.n	800c6a0 <_dtoa_r+0x940>
 800c65e:	9300      	str	r3, [sp, #0]
 800c660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c662:	2b02      	cmp	r3, #2
 800c664:	dd1e      	ble.n	800c6a4 <_dtoa_r+0x944>
 800c666:	9b00      	ldr	r3, [sp, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	f47f aec0 	bne.w	800c3ee <_dtoa_r+0x68e>
 800c66e:	4621      	mov	r1, r4
 800c670:	2205      	movs	r2, #5
 800c672:	4658      	mov	r0, fp
 800c674:	f000 fa9a 	bl	800cbac <__multadd>
 800c678:	4601      	mov	r1, r0
 800c67a:	4604      	mov	r4, r0
 800c67c:	4648      	mov	r0, r9
 800c67e:	f000 fcf7 	bl	800d070 <__mcmp>
 800c682:	2800      	cmp	r0, #0
 800c684:	f77f aeb3 	ble.w	800c3ee <_dtoa_r+0x68e>
 800c688:	4656      	mov	r6, sl
 800c68a:	2331      	movs	r3, #49	@ 0x31
 800c68c:	f806 3b01 	strb.w	r3, [r6], #1
 800c690:	9b04      	ldr	r3, [sp, #16]
 800c692:	3301      	adds	r3, #1
 800c694:	9304      	str	r3, [sp, #16]
 800c696:	e6ae      	b.n	800c3f6 <_dtoa_r+0x696>
 800c698:	9c07      	ldr	r4, [sp, #28]
 800c69a:	9704      	str	r7, [sp, #16]
 800c69c:	4625      	mov	r5, r4
 800c69e:	e7f3      	b.n	800c688 <_dtoa_r+0x928>
 800c6a0:	9b07      	ldr	r3, [sp, #28]
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	f000 8104 	beq.w	800c8b4 <_dtoa_r+0xb54>
 800c6ac:	2e00      	cmp	r6, #0
 800c6ae:	dd05      	ble.n	800c6bc <_dtoa_r+0x95c>
 800c6b0:	4629      	mov	r1, r5
 800c6b2:	4632      	mov	r2, r6
 800c6b4:	4658      	mov	r0, fp
 800c6b6:	f000 fc6f 	bl	800cf98 <__lshift>
 800c6ba:	4605      	mov	r5, r0
 800c6bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d05a      	beq.n	800c778 <_dtoa_r+0xa18>
 800c6c2:	6869      	ldr	r1, [r5, #4]
 800c6c4:	4658      	mov	r0, fp
 800c6c6:	f000 fa0f 	bl	800cae8 <_Balloc>
 800c6ca:	4606      	mov	r6, r0
 800c6cc:	b928      	cbnz	r0, 800c6da <_dtoa_r+0x97a>
 800c6ce:	4b84      	ldr	r3, [pc, #528]	@ (800c8e0 <_dtoa_r+0xb80>)
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c6d6:	f7ff bb5a 	b.w	800bd8e <_dtoa_r+0x2e>
 800c6da:	692a      	ldr	r2, [r5, #16]
 800c6dc:	3202      	adds	r2, #2
 800c6de:	0092      	lsls	r2, r2, #2
 800c6e0:	f105 010c 	add.w	r1, r5, #12
 800c6e4:	300c      	adds	r0, #12
 800c6e6:	f7ff fa9e 	bl	800bc26 <memcpy>
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	4631      	mov	r1, r6
 800c6ee:	4658      	mov	r0, fp
 800c6f0:	f000 fc52 	bl	800cf98 <__lshift>
 800c6f4:	f10a 0301 	add.w	r3, sl, #1
 800c6f8:	9307      	str	r3, [sp, #28]
 800c6fa:	9b00      	ldr	r3, [sp, #0]
 800c6fc:	4453      	add	r3, sl
 800c6fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c700:	9b02      	ldr	r3, [sp, #8]
 800c702:	f003 0301 	and.w	r3, r3, #1
 800c706:	462f      	mov	r7, r5
 800c708:	930a      	str	r3, [sp, #40]	@ 0x28
 800c70a:	4605      	mov	r5, r0
 800c70c:	9b07      	ldr	r3, [sp, #28]
 800c70e:	4621      	mov	r1, r4
 800c710:	3b01      	subs	r3, #1
 800c712:	4648      	mov	r0, r9
 800c714:	9300      	str	r3, [sp, #0]
 800c716:	f7ff fa9b 	bl	800bc50 <quorem>
 800c71a:	4639      	mov	r1, r7
 800c71c:	9002      	str	r0, [sp, #8]
 800c71e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c722:	4648      	mov	r0, r9
 800c724:	f000 fca4 	bl	800d070 <__mcmp>
 800c728:	462a      	mov	r2, r5
 800c72a:	9008      	str	r0, [sp, #32]
 800c72c:	4621      	mov	r1, r4
 800c72e:	4658      	mov	r0, fp
 800c730:	f000 fcba 	bl	800d0a8 <__mdiff>
 800c734:	68c2      	ldr	r2, [r0, #12]
 800c736:	4606      	mov	r6, r0
 800c738:	bb02      	cbnz	r2, 800c77c <_dtoa_r+0xa1c>
 800c73a:	4601      	mov	r1, r0
 800c73c:	4648      	mov	r0, r9
 800c73e:	f000 fc97 	bl	800d070 <__mcmp>
 800c742:	4602      	mov	r2, r0
 800c744:	4631      	mov	r1, r6
 800c746:	4658      	mov	r0, fp
 800c748:	920e      	str	r2, [sp, #56]	@ 0x38
 800c74a:	f000 fa0d 	bl	800cb68 <_Bfree>
 800c74e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c750:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c752:	9e07      	ldr	r6, [sp, #28]
 800c754:	ea43 0102 	orr.w	r1, r3, r2
 800c758:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c75a:	4319      	orrs	r1, r3
 800c75c:	d110      	bne.n	800c780 <_dtoa_r+0xa20>
 800c75e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c762:	d029      	beq.n	800c7b8 <_dtoa_r+0xa58>
 800c764:	9b08      	ldr	r3, [sp, #32]
 800c766:	2b00      	cmp	r3, #0
 800c768:	dd02      	ble.n	800c770 <_dtoa_r+0xa10>
 800c76a:	9b02      	ldr	r3, [sp, #8]
 800c76c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c770:	9b00      	ldr	r3, [sp, #0]
 800c772:	f883 8000 	strb.w	r8, [r3]
 800c776:	e63f      	b.n	800c3f8 <_dtoa_r+0x698>
 800c778:	4628      	mov	r0, r5
 800c77a:	e7bb      	b.n	800c6f4 <_dtoa_r+0x994>
 800c77c:	2201      	movs	r2, #1
 800c77e:	e7e1      	b.n	800c744 <_dtoa_r+0x9e4>
 800c780:	9b08      	ldr	r3, [sp, #32]
 800c782:	2b00      	cmp	r3, #0
 800c784:	db04      	blt.n	800c790 <_dtoa_r+0xa30>
 800c786:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c788:	430b      	orrs	r3, r1
 800c78a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c78c:	430b      	orrs	r3, r1
 800c78e:	d120      	bne.n	800c7d2 <_dtoa_r+0xa72>
 800c790:	2a00      	cmp	r2, #0
 800c792:	dded      	ble.n	800c770 <_dtoa_r+0xa10>
 800c794:	4649      	mov	r1, r9
 800c796:	2201      	movs	r2, #1
 800c798:	4658      	mov	r0, fp
 800c79a:	f000 fbfd 	bl	800cf98 <__lshift>
 800c79e:	4621      	mov	r1, r4
 800c7a0:	4681      	mov	r9, r0
 800c7a2:	f000 fc65 	bl	800d070 <__mcmp>
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	dc03      	bgt.n	800c7b2 <_dtoa_r+0xa52>
 800c7aa:	d1e1      	bne.n	800c770 <_dtoa_r+0xa10>
 800c7ac:	f018 0f01 	tst.w	r8, #1
 800c7b0:	d0de      	beq.n	800c770 <_dtoa_r+0xa10>
 800c7b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c7b6:	d1d8      	bne.n	800c76a <_dtoa_r+0xa0a>
 800c7b8:	9a00      	ldr	r2, [sp, #0]
 800c7ba:	2339      	movs	r3, #57	@ 0x39
 800c7bc:	7013      	strb	r3, [r2, #0]
 800c7be:	4633      	mov	r3, r6
 800c7c0:	461e      	mov	r6, r3
 800c7c2:	3b01      	subs	r3, #1
 800c7c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c7c8:	2a39      	cmp	r2, #57	@ 0x39
 800c7ca:	d052      	beq.n	800c872 <_dtoa_r+0xb12>
 800c7cc:	3201      	adds	r2, #1
 800c7ce:	701a      	strb	r2, [r3, #0]
 800c7d0:	e612      	b.n	800c3f8 <_dtoa_r+0x698>
 800c7d2:	2a00      	cmp	r2, #0
 800c7d4:	dd07      	ble.n	800c7e6 <_dtoa_r+0xa86>
 800c7d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c7da:	d0ed      	beq.n	800c7b8 <_dtoa_r+0xa58>
 800c7dc:	9a00      	ldr	r2, [sp, #0]
 800c7de:	f108 0301 	add.w	r3, r8, #1
 800c7e2:	7013      	strb	r3, [r2, #0]
 800c7e4:	e608      	b.n	800c3f8 <_dtoa_r+0x698>
 800c7e6:	9b07      	ldr	r3, [sp, #28]
 800c7e8:	9a07      	ldr	r2, [sp, #28]
 800c7ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c7ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d028      	beq.n	800c846 <_dtoa_r+0xae6>
 800c7f4:	4649      	mov	r1, r9
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	220a      	movs	r2, #10
 800c7fa:	4658      	mov	r0, fp
 800c7fc:	f000 f9d6 	bl	800cbac <__multadd>
 800c800:	42af      	cmp	r7, r5
 800c802:	4681      	mov	r9, r0
 800c804:	f04f 0300 	mov.w	r3, #0
 800c808:	f04f 020a 	mov.w	r2, #10
 800c80c:	4639      	mov	r1, r7
 800c80e:	4658      	mov	r0, fp
 800c810:	d107      	bne.n	800c822 <_dtoa_r+0xac2>
 800c812:	f000 f9cb 	bl	800cbac <__multadd>
 800c816:	4607      	mov	r7, r0
 800c818:	4605      	mov	r5, r0
 800c81a:	9b07      	ldr	r3, [sp, #28]
 800c81c:	3301      	adds	r3, #1
 800c81e:	9307      	str	r3, [sp, #28]
 800c820:	e774      	b.n	800c70c <_dtoa_r+0x9ac>
 800c822:	f000 f9c3 	bl	800cbac <__multadd>
 800c826:	4629      	mov	r1, r5
 800c828:	4607      	mov	r7, r0
 800c82a:	2300      	movs	r3, #0
 800c82c:	220a      	movs	r2, #10
 800c82e:	4658      	mov	r0, fp
 800c830:	f000 f9bc 	bl	800cbac <__multadd>
 800c834:	4605      	mov	r5, r0
 800c836:	e7f0      	b.n	800c81a <_dtoa_r+0xaba>
 800c838:	9b00      	ldr	r3, [sp, #0]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	bfcc      	ite	gt
 800c83e:	461e      	movgt	r6, r3
 800c840:	2601      	movle	r6, #1
 800c842:	4456      	add	r6, sl
 800c844:	2700      	movs	r7, #0
 800c846:	4649      	mov	r1, r9
 800c848:	2201      	movs	r2, #1
 800c84a:	4658      	mov	r0, fp
 800c84c:	f000 fba4 	bl	800cf98 <__lshift>
 800c850:	4621      	mov	r1, r4
 800c852:	4681      	mov	r9, r0
 800c854:	f000 fc0c 	bl	800d070 <__mcmp>
 800c858:	2800      	cmp	r0, #0
 800c85a:	dcb0      	bgt.n	800c7be <_dtoa_r+0xa5e>
 800c85c:	d102      	bne.n	800c864 <_dtoa_r+0xb04>
 800c85e:	f018 0f01 	tst.w	r8, #1
 800c862:	d1ac      	bne.n	800c7be <_dtoa_r+0xa5e>
 800c864:	4633      	mov	r3, r6
 800c866:	461e      	mov	r6, r3
 800c868:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c86c:	2a30      	cmp	r2, #48	@ 0x30
 800c86e:	d0fa      	beq.n	800c866 <_dtoa_r+0xb06>
 800c870:	e5c2      	b.n	800c3f8 <_dtoa_r+0x698>
 800c872:	459a      	cmp	sl, r3
 800c874:	d1a4      	bne.n	800c7c0 <_dtoa_r+0xa60>
 800c876:	9b04      	ldr	r3, [sp, #16]
 800c878:	3301      	adds	r3, #1
 800c87a:	9304      	str	r3, [sp, #16]
 800c87c:	2331      	movs	r3, #49	@ 0x31
 800c87e:	f88a 3000 	strb.w	r3, [sl]
 800c882:	e5b9      	b.n	800c3f8 <_dtoa_r+0x698>
 800c884:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c886:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c8e4 <_dtoa_r+0xb84>
 800c88a:	b11b      	cbz	r3, 800c894 <_dtoa_r+0xb34>
 800c88c:	f10a 0308 	add.w	r3, sl, #8
 800c890:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c892:	6013      	str	r3, [r2, #0]
 800c894:	4650      	mov	r0, sl
 800c896:	b019      	add	sp, #100	@ 0x64
 800c898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c89c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	f77f ae37 	ble.w	800c512 <_dtoa_r+0x7b2>
 800c8a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8a8:	2001      	movs	r0, #1
 800c8aa:	e655      	b.n	800c558 <_dtoa_r+0x7f8>
 800c8ac:	9b00      	ldr	r3, [sp, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	f77f aed6 	ble.w	800c660 <_dtoa_r+0x900>
 800c8b4:	4656      	mov	r6, sl
 800c8b6:	4621      	mov	r1, r4
 800c8b8:	4648      	mov	r0, r9
 800c8ba:	f7ff f9c9 	bl	800bc50 <quorem>
 800c8be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c8c2:	f806 8b01 	strb.w	r8, [r6], #1
 800c8c6:	9b00      	ldr	r3, [sp, #0]
 800c8c8:	eba6 020a 	sub.w	r2, r6, sl
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	ddb3      	ble.n	800c838 <_dtoa_r+0xad8>
 800c8d0:	4649      	mov	r1, r9
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	220a      	movs	r2, #10
 800c8d6:	4658      	mov	r0, fp
 800c8d8:	f000 f968 	bl	800cbac <__multadd>
 800c8dc:	4681      	mov	r9, r0
 800c8de:	e7ea      	b.n	800c8b6 <_dtoa_r+0xb56>
 800c8e0:	0800f845 	.word	0x0800f845
 800c8e4:	0800f7c9 	.word	0x0800f7c9

0800c8e8 <_free_r>:
 800c8e8:	b538      	push	{r3, r4, r5, lr}
 800c8ea:	4605      	mov	r5, r0
 800c8ec:	2900      	cmp	r1, #0
 800c8ee:	d041      	beq.n	800c974 <_free_r+0x8c>
 800c8f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8f4:	1f0c      	subs	r4, r1, #4
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	bfb8      	it	lt
 800c8fa:	18e4      	addlt	r4, r4, r3
 800c8fc:	f000 f8e8 	bl	800cad0 <__malloc_lock>
 800c900:	4a1d      	ldr	r2, [pc, #116]	@ (800c978 <_free_r+0x90>)
 800c902:	6813      	ldr	r3, [r2, #0]
 800c904:	b933      	cbnz	r3, 800c914 <_free_r+0x2c>
 800c906:	6063      	str	r3, [r4, #4]
 800c908:	6014      	str	r4, [r2, #0]
 800c90a:	4628      	mov	r0, r5
 800c90c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c910:	f000 b8e4 	b.w	800cadc <__malloc_unlock>
 800c914:	42a3      	cmp	r3, r4
 800c916:	d908      	bls.n	800c92a <_free_r+0x42>
 800c918:	6820      	ldr	r0, [r4, #0]
 800c91a:	1821      	adds	r1, r4, r0
 800c91c:	428b      	cmp	r3, r1
 800c91e:	bf01      	itttt	eq
 800c920:	6819      	ldreq	r1, [r3, #0]
 800c922:	685b      	ldreq	r3, [r3, #4]
 800c924:	1809      	addeq	r1, r1, r0
 800c926:	6021      	streq	r1, [r4, #0]
 800c928:	e7ed      	b.n	800c906 <_free_r+0x1e>
 800c92a:	461a      	mov	r2, r3
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	b10b      	cbz	r3, 800c934 <_free_r+0x4c>
 800c930:	42a3      	cmp	r3, r4
 800c932:	d9fa      	bls.n	800c92a <_free_r+0x42>
 800c934:	6811      	ldr	r1, [r2, #0]
 800c936:	1850      	adds	r0, r2, r1
 800c938:	42a0      	cmp	r0, r4
 800c93a:	d10b      	bne.n	800c954 <_free_r+0x6c>
 800c93c:	6820      	ldr	r0, [r4, #0]
 800c93e:	4401      	add	r1, r0
 800c940:	1850      	adds	r0, r2, r1
 800c942:	4283      	cmp	r3, r0
 800c944:	6011      	str	r1, [r2, #0]
 800c946:	d1e0      	bne.n	800c90a <_free_r+0x22>
 800c948:	6818      	ldr	r0, [r3, #0]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	6053      	str	r3, [r2, #4]
 800c94e:	4408      	add	r0, r1
 800c950:	6010      	str	r0, [r2, #0]
 800c952:	e7da      	b.n	800c90a <_free_r+0x22>
 800c954:	d902      	bls.n	800c95c <_free_r+0x74>
 800c956:	230c      	movs	r3, #12
 800c958:	602b      	str	r3, [r5, #0]
 800c95a:	e7d6      	b.n	800c90a <_free_r+0x22>
 800c95c:	6820      	ldr	r0, [r4, #0]
 800c95e:	1821      	adds	r1, r4, r0
 800c960:	428b      	cmp	r3, r1
 800c962:	bf04      	itt	eq
 800c964:	6819      	ldreq	r1, [r3, #0]
 800c966:	685b      	ldreq	r3, [r3, #4]
 800c968:	6063      	str	r3, [r4, #4]
 800c96a:	bf04      	itt	eq
 800c96c:	1809      	addeq	r1, r1, r0
 800c96e:	6021      	streq	r1, [r4, #0]
 800c970:	6054      	str	r4, [r2, #4]
 800c972:	e7ca      	b.n	800c90a <_free_r+0x22>
 800c974:	bd38      	pop	{r3, r4, r5, pc}
 800c976:	bf00      	nop
 800c978:	200049f0 	.word	0x200049f0

0800c97c <malloc>:
 800c97c:	4b02      	ldr	r3, [pc, #8]	@ (800c988 <malloc+0xc>)
 800c97e:	4601      	mov	r1, r0
 800c980:	6818      	ldr	r0, [r3, #0]
 800c982:	f000 b825 	b.w	800c9d0 <_malloc_r>
 800c986:	bf00      	nop
 800c988:	20000034 	.word	0x20000034

0800c98c <sbrk_aligned>:
 800c98c:	b570      	push	{r4, r5, r6, lr}
 800c98e:	4e0f      	ldr	r6, [pc, #60]	@ (800c9cc <sbrk_aligned+0x40>)
 800c990:	460c      	mov	r4, r1
 800c992:	6831      	ldr	r1, [r6, #0]
 800c994:	4605      	mov	r5, r0
 800c996:	b911      	cbnz	r1, 800c99e <sbrk_aligned+0x12>
 800c998:	f001 fe0c 	bl	800e5b4 <_sbrk_r>
 800c99c:	6030      	str	r0, [r6, #0]
 800c99e:	4621      	mov	r1, r4
 800c9a0:	4628      	mov	r0, r5
 800c9a2:	f001 fe07 	bl	800e5b4 <_sbrk_r>
 800c9a6:	1c43      	adds	r3, r0, #1
 800c9a8:	d103      	bne.n	800c9b2 <sbrk_aligned+0x26>
 800c9aa:	f04f 34ff 	mov.w	r4, #4294967295
 800c9ae:	4620      	mov	r0, r4
 800c9b0:	bd70      	pop	{r4, r5, r6, pc}
 800c9b2:	1cc4      	adds	r4, r0, #3
 800c9b4:	f024 0403 	bic.w	r4, r4, #3
 800c9b8:	42a0      	cmp	r0, r4
 800c9ba:	d0f8      	beq.n	800c9ae <sbrk_aligned+0x22>
 800c9bc:	1a21      	subs	r1, r4, r0
 800c9be:	4628      	mov	r0, r5
 800c9c0:	f001 fdf8 	bl	800e5b4 <_sbrk_r>
 800c9c4:	3001      	adds	r0, #1
 800c9c6:	d1f2      	bne.n	800c9ae <sbrk_aligned+0x22>
 800c9c8:	e7ef      	b.n	800c9aa <sbrk_aligned+0x1e>
 800c9ca:	bf00      	nop
 800c9cc:	200049ec 	.word	0x200049ec

0800c9d0 <_malloc_r>:
 800c9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9d4:	1ccd      	adds	r5, r1, #3
 800c9d6:	f025 0503 	bic.w	r5, r5, #3
 800c9da:	3508      	adds	r5, #8
 800c9dc:	2d0c      	cmp	r5, #12
 800c9de:	bf38      	it	cc
 800c9e0:	250c      	movcc	r5, #12
 800c9e2:	2d00      	cmp	r5, #0
 800c9e4:	4606      	mov	r6, r0
 800c9e6:	db01      	blt.n	800c9ec <_malloc_r+0x1c>
 800c9e8:	42a9      	cmp	r1, r5
 800c9ea:	d904      	bls.n	800c9f6 <_malloc_r+0x26>
 800c9ec:	230c      	movs	r3, #12
 800c9ee:	6033      	str	r3, [r6, #0]
 800c9f0:	2000      	movs	r0, #0
 800c9f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cacc <_malloc_r+0xfc>
 800c9fa:	f000 f869 	bl	800cad0 <__malloc_lock>
 800c9fe:	f8d8 3000 	ldr.w	r3, [r8]
 800ca02:	461c      	mov	r4, r3
 800ca04:	bb44      	cbnz	r4, 800ca58 <_malloc_r+0x88>
 800ca06:	4629      	mov	r1, r5
 800ca08:	4630      	mov	r0, r6
 800ca0a:	f7ff ffbf 	bl	800c98c <sbrk_aligned>
 800ca0e:	1c43      	adds	r3, r0, #1
 800ca10:	4604      	mov	r4, r0
 800ca12:	d158      	bne.n	800cac6 <_malloc_r+0xf6>
 800ca14:	f8d8 4000 	ldr.w	r4, [r8]
 800ca18:	4627      	mov	r7, r4
 800ca1a:	2f00      	cmp	r7, #0
 800ca1c:	d143      	bne.n	800caa6 <_malloc_r+0xd6>
 800ca1e:	2c00      	cmp	r4, #0
 800ca20:	d04b      	beq.n	800caba <_malloc_r+0xea>
 800ca22:	6823      	ldr	r3, [r4, #0]
 800ca24:	4639      	mov	r1, r7
 800ca26:	4630      	mov	r0, r6
 800ca28:	eb04 0903 	add.w	r9, r4, r3
 800ca2c:	f001 fdc2 	bl	800e5b4 <_sbrk_r>
 800ca30:	4581      	cmp	r9, r0
 800ca32:	d142      	bne.n	800caba <_malloc_r+0xea>
 800ca34:	6821      	ldr	r1, [r4, #0]
 800ca36:	1a6d      	subs	r5, r5, r1
 800ca38:	4629      	mov	r1, r5
 800ca3a:	4630      	mov	r0, r6
 800ca3c:	f7ff ffa6 	bl	800c98c <sbrk_aligned>
 800ca40:	3001      	adds	r0, #1
 800ca42:	d03a      	beq.n	800caba <_malloc_r+0xea>
 800ca44:	6823      	ldr	r3, [r4, #0]
 800ca46:	442b      	add	r3, r5
 800ca48:	6023      	str	r3, [r4, #0]
 800ca4a:	f8d8 3000 	ldr.w	r3, [r8]
 800ca4e:	685a      	ldr	r2, [r3, #4]
 800ca50:	bb62      	cbnz	r2, 800caac <_malloc_r+0xdc>
 800ca52:	f8c8 7000 	str.w	r7, [r8]
 800ca56:	e00f      	b.n	800ca78 <_malloc_r+0xa8>
 800ca58:	6822      	ldr	r2, [r4, #0]
 800ca5a:	1b52      	subs	r2, r2, r5
 800ca5c:	d420      	bmi.n	800caa0 <_malloc_r+0xd0>
 800ca5e:	2a0b      	cmp	r2, #11
 800ca60:	d917      	bls.n	800ca92 <_malloc_r+0xc2>
 800ca62:	1961      	adds	r1, r4, r5
 800ca64:	42a3      	cmp	r3, r4
 800ca66:	6025      	str	r5, [r4, #0]
 800ca68:	bf18      	it	ne
 800ca6a:	6059      	strne	r1, [r3, #4]
 800ca6c:	6863      	ldr	r3, [r4, #4]
 800ca6e:	bf08      	it	eq
 800ca70:	f8c8 1000 	streq.w	r1, [r8]
 800ca74:	5162      	str	r2, [r4, r5]
 800ca76:	604b      	str	r3, [r1, #4]
 800ca78:	4630      	mov	r0, r6
 800ca7a:	f000 f82f 	bl	800cadc <__malloc_unlock>
 800ca7e:	f104 000b 	add.w	r0, r4, #11
 800ca82:	1d23      	adds	r3, r4, #4
 800ca84:	f020 0007 	bic.w	r0, r0, #7
 800ca88:	1ac2      	subs	r2, r0, r3
 800ca8a:	bf1c      	itt	ne
 800ca8c:	1a1b      	subne	r3, r3, r0
 800ca8e:	50a3      	strne	r3, [r4, r2]
 800ca90:	e7af      	b.n	800c9f2 <_malloc_r+0x22>
 800ca92:	6862      	ldr	r2, [r4, #4]
 800ca94:	42a3      	cmp	r3, r4
 800ca96:	bf0c      	ite	eq
 800ca98:	f8c8 2000 	streq.w	r2, [r8]
 800ca9c:	605a      	strne	r2, [r3, #4]
 800ca9e:	e7eb      	b.n	800ca78 <_malloc_r+0xa8>
 800caa0:	4623      	mov	r3, r4
 800caa2:	6864      	ldr	r4, [r4, #4]
 800caa4:	e7ae      	b.n	800ca04 <_malloc_r+0x34>
 800caa6:	463c      	mov	r4, r7
 800caa8:	687f      	ldr	r7, [r7, #4]
 800caaa:	e7b6      	b.n	800ca1a <_malloc_r+0x4a>
 800caac:	461a      	mov	r2, r3
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	42a3      	cmp	r3, r4
 800cab2:	d1fb      	bne.n	800caac <_malloc_r+0xdc>
 800cab4:	2300      	movs	r3, #0
 800cab6:	6053      	str	r3, [r2, #4]
 800cab8:	e7de      	b.n	800ca78 <_malloc_r+0xa8>
 800caba:	230c      	movs	r3, #12
 800cabc:	6033      	str	r3, [r6, #0]
 800cabe:	4630      	mov	r0, r6
 800cac0:	f000 f80c 	bl	800cadc <__malloc_unlock>
 800cac4:	e794      	b.n	800c9f0 <_malloc_r+0x20>
 800cac6:	6005      	str	r5, [r0, #0]
 800cac8:	e7d6      	b.n	800ca78 <_malloc_r+0xa8>
 800caca:	bf00      	nop
 800cacc:	200049f0 	.word	0x200049f0

0800cad0 <__malloc_lock>:
 800cad0:	4801      	ldr	r0, [pc, #4]	@ (800cad8 <__malloc_lock+0x8>)
 800cad2:	f7ff b8a6 	b.w	800bc22 <__retarget_lock_acquire_recursive>
 800cad6:	bf00      	nop
 800cad8:	200049e8 	.word	0x200049e8

0800cadc <__malloc_unlock>:
 800cadc:	4801      	ldr	r0, [pc, #4]	@ (800cae4 <__malloc_unlock+0x8>)
 800cade:	f7ff b8a1 	b.w	800bc24 <__retarget_lock_release_recursive>
 800cae2:	bf00      	nop
 800cae4:	200049e8 	.word	0x200049e8

0800cae8 <_Balloc>:
 800cae8:	b570      	push	{r4, r5, r6, lr}
 800caea:	69c6      	ldr	r6, [r0, #28]
 800caec:	4604      	mov	r4, r0
 800caee:	460d      	mov	r5, r1
 800caf0:	b976      	cbnz	r6, 800cb10 <_Balloc+0x28>
 800caf2:	2010      	movs	r0, #16
 800caf4:	f7ff ff42 	bl	800c97c <malloc>
 800caf8:	4602      	mov	r2, r0
 800cafa:	61e0      	str	r0, [r4, #28]
 800cafc:	b920      	cbnz	r0, 800cb08 <_Balloc+0x20>
 800cafe:	4b18      	ldr	r3, [pc, #96]	@ (800cb60 <_Balloc+0x78>)
 800cb00:	4818      	ldr	r0, [pc, #96]	@ (800cb64 <_Balloc+0x7c>)
 800cb02:	216b      	movs	r1, #107	@ 0x6b
 800cb04:	f001 fd70 	bl	800e5e8 <__assert_func>
 800cb08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb0c:	6006      	str	r6, [r0, #0]
 800cb0e:	60c6      	str	r6, [r0, #12]
 800cb10:	69e6      	ldr	r6, [r4, #28]
 800cb12:	68f3      	ldr	r3, [r6, #12]
 800cb14:	b183      	cbz	r3, 800cb38 <_Balloc+0x50>
 800cb16:	69e3      	ldr	r3, [r4, #28]
 800cb18:	68db      	ldr	r3, [r3, #12]
 800cb1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb1e:	b9b8      	cbnz	r0, 800cb50 <_Balloc+0x68>
 800cb20:	2101      	movs	r1, #1
 800cb22:	fa01 f605 	lsl.w	r6, r1, r5
 800cb26:	1d72      	adds	r2, r6, #5
 800cb28:	0092      	lsls	r2, r2, #2
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	f001 fd7a 	bl	800e624 <_calloc_r>
 800cb30:	b160      	cbz	r0, 800cb4c <_Balloc+0x64>
 800cb32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb36:	e00e      	b.n	800cb56 <_Balloc+0x6e>
 800cb38:	2221      	movs	r2, #33	@ 0x21
 800cb3a:	2104      	movs	r1, #4
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	f001 fd71 	bl	800e624 <_calloc_r>
 800cb42:	69e3      	ldr	r3, [r4, #28]
 800cb44:	60f0      	str	r0, [r6, #12]
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d1e4      	bne.n	800cb16 <_Balloc+0x2e>
 800cb4c:	2000      	movs	r0, #0
 800cb4e:	bd70      	pop	{r4, r5, r6, pc}
 800cb50:	6802      	ldr	r2, [r0, #0]
 800cb52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb56:	2300      	movs	r3, #0
 800cb58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb5c:	e7f7      	b.n	800cb4e <_Balloc+0x66>
 800cb5e:	bf00      	nop
 800cb60:	0800f7d6 	.word	0x0800f7d6
 800cb64:	0800f856 	.word	0x0800f856

0800cb68 <_Bfree>:
 800cb68:	b570      	push	{r4, r5, r6, lr}
 800cb6a:	69c6      	ldr	r6, [r0, #28]
 800cb6c:	4605      	mov	r5, r0
 800cb6e:	460c      	mov	r4, r1
 800cb70:	b976      	cbnz	r6, 800cb90 <_Bfree+0x28>
 800cb72:	2010      	movs	r0, #16
 800cb74:	f7ff ff02 	bl	800c97c <malloc>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	61e8      	str	r0, [r5, #28]
 800cb7c:	b920      	cbnz	r0, 800cb88 <_Bfree+0x20>
 800cb7e:	4b09      	ldr	r3, [pc, #36]	@ (800cba4 <_Bfree+0x3c>)
 800cb80:	4809      	ldr	r0, [pc, #36]	@ (800cba8 <_Bfree+0x40>)
 800cb82:	218f      	movs	r1, #143	@ 0x8f
 800cb84:	f001 fd30 	bl	800e5e8 <__assert_func>
 800cb88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb8c:	6006      	str	r6, [r0, #0]
 800cb8e:	60c6      	str	r6, [r0, #12]
 800cb90:	b13c      	cbz	r4, 800cba2 <_Bfree+0x3a>
 800cb92:	69eb      	ldr	r3, [r5, #28]
 800cb94:	6862      	ldr	r2, [r4, #4]
 800cb96:	68db      	ldr	r3, [r3, #12]
 800cb98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb9c:	6021      	str	r1, [r4, #0]
 800cb9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cba2:	bd70      	pop	{r4, r5, r6, pc}
 800cba4:	0800f7d6 	.word	0x0800f7d6
 800cba8:	0800f856 	.word	0x0800f856

0800cbac <__multadd>:
 800cbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb0:	690d      	ldr	r5, [r1, #16]
 800cbb2:	4607      	mov	r7, r0
 800cbb4:	460c      	mov	r4, r1
 800cbb6:	461e      	mov	r6, r3
 800cbb8:	f101 0c14 	add.w	ip, r1, #20
 800cbbc:	2000      	movs	r0, #0
 800cbbe:	f8dc 3000 	ldr.w	r3, [ip]
 800cbc2:	b299      	uxth	r1, r3
 800cbc4:	fb02 6101 	mla	r1, r2, r1, r6
 800cbc8:	0c1e      	lsrs	r6, r3, #16
 800cbca:	0c0b      	lsrs	r3, r1, #16
 800cbcc:	fb02 3306 	mla	r3, r2, r6, r3
 800cbd0:	b289      	uxth	r1, r1
 800cbd2:	3001      	adds	r0, #1
 800cbd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cbd8:	4285      	cmp	r5, r0
 800cbda:	f84c 1b04 	str.w	r1, [ip], #4
 800cbde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cbe2:	dcec      	bgt.n	800cbbe <__multadd+0x12>
 800cbe4:	b30e      	cbz	r6, 800cc2a <__multadd+0x7e>
 800cbe6:	68a3      	ldr	r3, [r4, #8]
 800cbe8:	42ab      	cmp	r3, r5
 800cbea:	dc19      	bgt.n	800cc20 <__multadd+0x74>
 800cbec:	6861      	ldr	r1, [r4, #4]
 800cbee:	4638      	mov	r0, r7
 800cbf0:	3101      	adds	r1, #1
 800cbf2:	f7ff ff79 	bl	800cae8 <_Balloc>
 800cbf6:	4680      	mov	r8, r0
 800cbf8:	b928      	cbnz	r0, 800cc06 <__multadd+0x5a>
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	4b0c      	ldr	r3, [pc, #48]	@ (800cc30 <__multadd+0x84>)
 800cbfe:	480d      	ldr	r0, [pc, #52]	@ (800cc34 <__multadd+0x88>)
 800cc00:	21ba      	movs	r1, #186	@ 0xba
 800cc02:	f001 fcf1 	bl	800e5e8 <__assert_func>
 800cc06:	6922      	ldr	r2, [r4, #16]
 800cc08:	3202      	adds	r2, #2
 800cc0a:	f104 010c 	add.w	r1, r4, #12
 800cc0e:	0092      	lsls	r2, r2, #2
 800cc10:	300c      	adds	r0, #12
 800cc12:	f7ff f808 	bl	800bc26 <memcpy>
 800cc16:	4621      	mov	r1, r4
 800cc18:	4638      	mov	r0, r7
 800cc1a:	f7ff ffa5 	bl	800cb68 <_Bfree>
 800cc1e:	4644      	mov	r4, r8
 800cc20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc24:	3501      	adds	r5, #1
 800cc26:	615e      	str	r6, [r3, #20]
 800cc28:	6125      	str	r5, [r4, #16]
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc30:	0800f845 	.word	0x0800f845
 800cc34:	0800f856 	.word	0x0800f856

0800cc38 <__s2b>:
 800cc38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc3c:	460c      	mov	r4, r1
 800cc3e:	4615      	mov	r5, r2
 800cc40:	461f      	mov	r7, r3
 800cc42:	2209      	movs	r2, #9
 800cc44:	3308      	adds	r3, #8
 800cc46:	4606      	mov	r6, r0
 800cc48:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc4c:	2100      	movs	r1, #0
 800cc4e:	2201      	movs	r2, #1
 800cc50:	429a      	cmp	r2, r3
 800cc52:	db09      	blt.n	800cc68 <__s2b+0x30>
 800cc54:	4630      	mov	r0, r6
 800cc56:	f7ff ff47 	bl	800cae8 <_Balloc>
 800cc5a:	b940      	cbnz	r0, 800cc6e <__s2b+0x36>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	4b19      	ldr	r3, [pc, #100]	@ (800ccc4 <__s2b+0x8c>)
 800cc60:	4819      	ldr	r0, [pc, #100]	@ (800ccc8 <__s2b+0x90>)
 800cc62:	21d3      	movs	r1, #211	@ 0xd3
 800cc64:	f001 fcc0 	bl	800e5e8 <__assert_func>
 800cc68:	0052      	lsls	r2, r2, #1
 800cc6a:	3101      	adds	r1, #1
 800cc6c:	e7f0      	b.n	800cc50 <__s2b+0x18>
 800cc6e:	9b08      	ldr	r3, [sp, #32]
 800cc70:	6143      	str	r3, [r0, #20]
 800cc72:	2d09      	cmp	r5, #9
 800cc74:	f04f 0301 	mov.w	r3, #1
 800cc78:	6103      	str	r3, [r0, #16]
 800cc7a:	dd16      	ble.n	800ccaa <__s2b+0x72>
 800cc7c:	f104 0909 	add.w	r9, r4, #9
 800cc80:	46c8      	mov	r8, r9
 800cc82:	442c      	add	r4, r5
 800cc84:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cc88:	4601      	mov	r1, r0
 800cc8a:	3b30      	subs	r3, #48	@ 0x30
 800cc8c:	220a      	movs	r2, #10
 800cc8e:	4630      	mov	r0, r6
 800cc90:	f7ff ff8c 	bl	800cbac <__multadd>
 800cc94:	45a0      	cmp	r8, r4
 800cc96:	d1f5      	bne.n	800cc84 <__s2b+0x4c>
 800cc98:	f1a5 0408 	sub.w	r4, r5, #8
 800cc9c:	444c      	add	r4, r9
 800cc9e:	1b2d      	subs	r5, r5, r4
 800cca0:	1963      	adds	r3, r4, r5
 800cca2:	42bb      	cmp	r3, r7
 800cca4:	db04      	blt.n	800ccb0 <__s2b+0x78>
 800cca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccaa:	340a      	adds	r4, #10
 800ccac:	2509      	movs	r5, #9
 800ccae:	e7f6      	b.n	800cc9e <__s2b+0x66>
 800ccb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ccb4:	4601      	mov	r1, r0
 800ccb6:	3b30      	subs	r3, #48	@ 0x30
 800ccb8:	220a      	movs	r2, #10
 800ccba:	4630      	mov	r0, r6
 800ccbc:	f7ff ff76 	bl	800cbac <__multadd>
 800ccc0:	e7ee      	b.n	800cca0 <__s2b+0x68>
 800ccc2:	bf00      	nop
 800ccc4:	0800f845 	.word	0x0800f845
 800ccc8:	0800f856 	.word	0x0800f856

0800cccc <__hi0bits>:
 800cccc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	bf36      	itet	cc
 800ccd4:	0403      	lslcc	r3, r0, #16
 800ccd6:	2000      	movcs	r0, #0
 800ccd8:	2010      	movcc	r0, #16
 800ccda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ccde:	bf3c      	itt	cc
 800cce0:	021b      	lslcc	r3, r3, #8
 800cce2:	3008      	addcc	r0, #8
 800cce4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cce8:	bf3c      	itt	cc
 800ccea:	011b      	lslcc	r3, r3, #4
 800ccec:	3004      	addcc	r0, #4
 800ccee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccf2:	bf3c      	itt	cc
 800ccf4:	009b      	lslcc	r3, r3, #2
 800ccf6:	3002      	addcc	r0, #2
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	db05      	blt.n	800cd08 <__hi0bits+0x3c>
 800ccfc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cd00:	f100 0001 	add.w	r0, r0, #1
 800cd04:	bf08      	it	eq
 800cd06:	2020      	moveq	r0, #32
 800cd08:	4770      	bx	lr

0800cd0a <__lo0bits>:
 800cd0a:	6803      	ldr	r3, [r0, #0]
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	f013 0007 	ands.w	r0, r3, #7
 800cd12:	d00b      	beq.n	800cd2c <__lo0bits+0x22>
 800cd14:	07d9      	lsls	r1, r3, #31
 800cd16:	d421      	bmi.n	800cd5c <__lo0bits+0x52>
 800cd18:	0798      	lsls	r0, r3, #30
 800cd1a:	bf49      	itett	mi
 800cd1c:	085b      	lsrmi	r3, r3, #1
 800cd1e:	089b      	lsrpl	r3, r3, #2
 800cd20:	2001      	movmi	r0, #1
 800cd22:	6013      	strmi	r3, [r2, #0]
 800cd24:	bf5c      	itt	pl
 800cd26:	6013      	strpl	r3, [r2, #0]
 800cd28:	2002      	movpl	r0, #2
 800cd2a:	4770      	bx	lr
 800cd2c:	b299      	uxth	r1, r3
 800cd2e:	b909      	cbnz	r1, 800cd34 <__lo0bits+0x2a>
 800cd30:	0c1b      	lsrs	r3, r3, #16
 800cd32:	2010      	movs	r0, #16
 800cd34:	b2d9      	uxtb	r1, r3
 800cd36:	b909      	cbnz	r1, 800cd3c <__lo0bits+0x32>
 800cd38:	3008      	adds	r0, #8
 800cd3a:	0a1b      	lsrs	r3, r3, #8
 800cd3c:	0719      	lsls	r1, r3, #28
 800cd3e:	bf04      	itt	eq
 800cd40:	091b      	lsreq	r3, r3, #4
 800cd42:	3004      	addeq	r0, #4
 800cd44:	0799      	lsls	r1, r3, #30
 800cd46:	bf04      	itt	eq
 800cd48:	089b      	lsreq	r3, r3, #2
 800cd4a:	3002      	addeq	r0, #2
 800cd4c:	07d9      	lsls	r1, r3, #31
 800cd4e:	d403      	bmi.n	800cd58 <__lo0bits+0x4e>
 800cd50:	085b      	lsrs	r3, r3, #1
 800cd52:	f100 0001 	add.w	r0, r0, #1
 800cd56:	d003      	beq.n	800cd60 <__lo0bits+0x56>
 800cd58:	6013      	str	r3, [r2, #0]
 800cd5a:	4770      	bx	lr
 800cd5c:	2000      	movs	r0, #0
 800cd5e:	4770      	bx	lr
 800cd60:	2020      	movs	r0, #32
 800cd62:	4770      	bx	lr

0800cd64 <__i2b>:
 800cd64:	b510      	push	{r4, lr}
 800cd66:	460c      	mov	r4, r1
 800cd68:	2101      	movs	r1, #1
 800cd6a:	f7ff febd 	bl	800cae8 <_Balloc>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	b928      	cbnz	r0, 800cd7e <__i2b+0x1a>
 800cd72:	4b05      	ldr	r3, [pc, #20]	@ (800cd88 <__i2b+0x24>)
 800cd74:	4805      	ldr	r0, [pc, #20]	@ (800cd8c <__i2b+0x28>)
 800cd76:	f240 1145 	movw	r1, #325	@ 0x145
 800cd7a:	f001 fc35 	bl	800e5e8 <__assert_func>
 800cd7e:	2301      	movs	r3, #1
 800cd80:	6144      	str	r4, [r0, #20]
 800cd82:	6103      	str	r3, [r0, #16]
 800cd84:	bd10      	pop	{r4, pc}
 800cd86:	bf00      	nop
 800cd88:	0800f845 	.word	0x0800f845
 800cd8c:	0800f856 	.word	0x0800f856

0800cd90 <__multiply>:
 800cd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd94:	4614      	mov	r4, r2
 800cd96:	690a      	ldr	r2, [r1, #16]
 800cd98:	6923      	ldr	r3, [r4, #16]
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	bfa8      	it	ge
 800cd9e:	4623      	movge	r3, r4
 800cda0:	460f      	mov	r7, r1
 800cda2:	bfa4      	itt	ge
 800cda4:	460c      	movge	r4, r1
 800cda6:	461f      	movge	r7, r3
 800cda8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cdac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cdb0:	68a3      	ldr	r3, [r4, #8]
 800cdb2:	6861      	ldr	r1, [r4, #4]
 800cdb4:	eb0a 0609 	add.w	r6, sl, r9
 800cdb8:	42b3      	cmp	r3, r6
 800cdba:	b085      	sub	sp, #20
 800cdbc:	bfb8      	it	lt
 800cdbe:	3101      	addlt	r1, #1
 800cdc0:	f7ff fe92 	bl	800cae8 <_Balloc>
 800cdc4:	b930      	cbnz	r0, 800cdd4 <__multiply+0x44>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	4b44      	ldr	r3, [pc, #272]	@ (800cedc <__multiply+0x14c>)
 800cdca:	4845      	ldr	r0, [pc, #276]	@ (800cee0 <__multiply+0x150>)
 800cdcc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cdd0:	f001 fc0a 	bl	800e5e8 <__assert_func>
 800cdd4:	f100 0514 	add.w	r5, r0, #20
 800cdd8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cddc:	462b      	mov	r3, r5
 800cdde:	2200      	movs	r2, #0
 800cde0:	4543      	cmp	r3, r8
 800cde2:	d321      	bcc.n	800ce28 <__multiply+0x98>
 800cde4:	f107 0114 	add.w	r1, r7, #20
 800cde8:	f104 0214 	add.w	r2, r4, #20
 800cdec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cdf0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cdf4:	9302      	str	r3, [sp, #8]
 800cdf6:	1b13      	subs	r3, r2, r4
 800cdf8:	3b15      	subs	r3, #21
 800cdfa:	f023 0303 	bic.w	r3, r3, #3
 800cdfe:	3304      	adds	r3, #4
 800ce00:	f104 0715 	add.w	r7, r4, #21
 800ce04:	42ba      	cmp	r2, r7
 800ce06:	bf38      	it	cc
 800ce08:	2304      	movcc	r3, #4
 800ce0a:	9301      	str	r3, [sp, #4]
 800ce0c:	9b02      	ldr	r3, [sp, #8]
 800ce0e:	9103      	str	r1, [sp, #12]
 800ce10:	428b      	cmp	r3, r1
 800ce12:	d80c      	bhi.n	800ce2e <__multiply+0x9e>
 800ce14:	2e00      	cmp	r6, #0
 800ce16:	dd03      	ble.n	800ce20 <__multiply+0x90>
 800ce18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d05b      	beq.n	800ced8 <__multiply+0x148>
 800ce20:	6106      	str	r6, [r0, #16]
 800ce22:	b005      	add	sp, #20
 800ce24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce28:	f843 2b04 	str.w	r2, [r3], #4
 800ce2c:	e7d8      	b.n	800cde0 <__multiply+0x50>
 800ce2e:	f8b1 a000 	ldrh.w	sl, [r1]
 800ce32:	f1ba 0f00 	cmp.w	sl, #0
 800ce36:	d024      	beq.n	800ce82 <__multiply+0xf2>
 800ce38:	f104 0e14 	add.w	lr, r4, #20
 800ce3c:	46a9      	mov	r9, r5
 800ce3e:	f04f 0c00 	mov.w	ip, #0
 800ce42:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce46:	f8d9 3000 	ldr.w	r3, [r9]
 800ce4a:	fa1f fb87 	uxth.w	fp, r7
 800ce4e:	b29b      	uxth	r3, r3
 800ce50:	fb0a 330b 	mla	r3, sl, fp, r3
 800ce54:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ce58:	f8d9 7000 	ldr.w	r7, [r9]
 800ce5c:	4463      	add	r3, ip
 800ce5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ce62:	fb0a c70b 	mla	r7, sl, fp, ip
 800ce66:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ce6a:	b29b      	uxth	r3, r3
 800ce6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ce70:	4572      	cmp	r2, lr
 800ce72:	f849 3b04 	str.w	r3, [r9], #4
 800ce76:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ce7a:	d8e2      	bhi.n	800ce42 <__multiply+0xb2>
 800ce7c:	9b01      	ldr	r3, [sp, #4]
 800ce7e:	f845 c003 	str.w	ip, [r5, r3]
 800ce82:	9b03      	ldr	r3, [sp, #12]
 800ce84:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ce88:	3104      	adds	r1, #4
 800ce8a:	f1b9 0f00 	cmp.w	r9, #0
 800ce8e:	d021      	beq.n	800ced4 <__multiply+0x144>
 800ce90:	682b      	ldr	r3, [r5, #0]
 800ce92:	f104 0c14 	add.w	ip, r4, #20
 800ce96:	46ae      	mov	lr, r5
 800ce98:	f04f 0a00 	mov.w	sl, #0
 800ce9c:	f8bc b000 	ldrh.w	fp, [ip]
 800cea0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cea4:	fb09 770b 	mla	r7, r9, fp, r7
 800cea8:	4457      	add	r7, sl
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ceb0:	f84e 3b04 	str.w	r3, [lr], #4
 800ceb4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ceb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cebc:	f8be 3000 	ldrh.w	r3, [lr]
 800cec0:	fb09 330a 	mla	r3, r9, sl, r3
 800cec4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cec8:	4562      	cmp	r2, ip
 800ceca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cece:	d8e5      	bhi.n	800ce9c <__multiply+0x10c>
 800ced0:	9f01      	ldr	r7, [sp, #4]
 800ced2:	51eb      	str	r3, [r5, r7]
 800ced4:	3504      	adds	r5, #4
 800ced6:	e799      	b.n	800ce0c <__multiply+0x7c>
 800ced8:	3e01      	subs	r6, #1
 800ceda:	e79b      	b.n	800ce14 <__multiply+0x84>
 800cedc:	0800f845 	.word	0x0800f845
 800cee0:	0800f856 	.word	0x0800f856

0800cee4 <__pow5mult>:
 800cee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cee8:	4615      	mov	r5, r2
 800ceea:	f012 0203 	ands.w	r2, r2, #3
 800ceee:	4607      	mov	r7, r0
 800cef0:	460e      	mov	r6, r1
 800cef2:	d007      	beq.n	800cf04 <__pow5mult+0x20>
 800cef4:	4c25      	ldr	r4, [pc, #148]	@ (800cf8c <__pow5mult+0xa8>)
 800cef6:	3a01      	subs	r2, #1
 800cef8:	2300      	movs	r3, #0
 800cefa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cefe:	f7ff fe55 	bl	800cbac <__multadd>
 800cf02:	4606      	mov	r6, r0
 800cf04:	10ad      	asrs	r5, r5, #2
 800cf06:	d03d      	beq.n	800cf84 <__pow5mult+0xa0>
 800cf08:	69fc      	ldr	r4, [r7, #28]
 800cf0a:	b97c      	cbnz	r4, 800cf2c <__pow5mult+0x48>
 800cf0c:	2010      	movs	r0, #16
 800cf0e:	f7ff fd35 	bl	800c97c <malloc>
 800cf12:	4602      	mov	r2, r0
 800cf14:	61f8      	str	r0, [r7, #28]
 800cf16:	b928      	cbnz	r0, 800cf24 <__pow5mult+0x40>
 800cf18:	4b1d      	ldr	r3, [pc, #116]	@ (800cf90 <__pow5mult+0xac>)
 800cf1a:	481e      	ldr	r0, [pc, #120]	@ (800cf94 <__pow5mult+0xb0>)
 800cf1c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cf20:	f001 fb62 	bl	800e5e8 <__assert_func>
 800cf24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf28:	6004      	str	r4, [r0, #0]
 800cf2a:	60c4      	str	r4, [r0, #12]
 800cf2c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cf30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf34:	b94c      	cbnz	r4, 800cf4a <__pow5mult+0x66>
 800cf36:	f240 2171 	movw	r1, #625	@ 0x271
 800cf3a:	4638      	mov	r0, r7
 800cf3c:	f7ff ff12 	bl	800cd64 <__i2b>
 800cf40:	2300      	movs	r3, #0
 800cf42:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf46:	4604      	mov	r4, r0
 800cf48:	6003      	str	r3, [r0, #0]
 800cf4a:	f04f 0900 	mov.w	r9, #0
 800cf4e:	07eb      	lsls	r3, r5, #31
 800cf50:	d50a      	bpl.n	800cf68 <__pow5mult+0x84>
 800cf52:	4631      	mov	r1, r6
 800cf54:	4622      	mov	r2, r4
 800cf56:	4638      	mov	r0, r7
 800cf58:	f7ff ff1a 	bl	800cd90 <__multiply>
 800cf5c:	4631      	mov	r1, r6
 800cf5e:	4680      	mov	r8, r0
 800cf60:	4638      	mov	r0, r7
 800cf62:	f7ff fe01 	bl	800cb68 <_Bfree>
 800cf66:	4646      	mov	r6, r8
 800cf68:	106d      	asrs	r5, r5, #1
 800cf6a:	d00b      	beq.n	800cf84 <__pow5mult+0xa0>
 800cf6c:	6820      	ldr	r0, [r4, #0]
 800cf6e:	b938      	cbnz	r0, 800cf80 <__pow5mult+0x9c>
 800cf70:	4622      	mov	r2, r4
 800cf72:	4621      	mov	r1, r4
 800cf74:	4638      	mov	r0, r7
 800cf76:	f7ff ff0b 	bl	800cd90 <__multiply>
 800cf7a:	6020      	str	r0, [r4, #0]
 800cf7c:	f8c0 9000 	str.w	r9, [r0]
 800cf80:	4604      	mov	r4, r0
 800cf82:	e7e4      	b.n	800cf4e <__pow5mult+0x6a>
 800cf84:	4630      	mov	r0, r6
 800cf86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf8a:	bf00      	nop
 800cf8c:	0800f8b0 	.word	0x0800f8b0
 800cf90:	0800f7d6 	.word	0x0800f7d6
 800cf94:	0800f856 	.word	0x0800f856

0800cf98 <__lshift>:
 800cf98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf9c:	460c      	mov	r4, r1
 800cf9e:	6849      	ldr	r1, [r1, #4]
 800cfa0:	6923      	ldr	r3, [r4, #16]
 800cfa2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cfa6:	68a3      	ldr	r3, [r4, #8]
 800cfa8:	4607      	mov	r7, r0
 800cfaa:	4691      	mov	r9, r2
 800cfac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cfb0:	f108 0601 	add.w	r6, r8, #1
 800cfb4:	42b3      	cmp	r3, r6
 800cfb6:	db0b      	blt.n	800cfd0 <__lshift+0x38>
 800cfb8:	4638      	mov	r0, r7
 800cfba:	f7ff fd95 	bl	800cae8 <_Balloc>
 800cfbe:	4605      	mov	r5, r0
 800cfc0:	b948      	cbnz	r0, 800cfd6 <__lshift+0x3e>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	4b28      	ldr	r3, [pc, #160]	@ (800d068 <__lshift+0xd0>)
 800cfc6:	4829      	ldr	r0, [pc, #164]	@ (800d06c <__lshift+0xd4>)
 800cfc8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cfcc:	f001 fb0c 	bl	800e5e8 <__assert_func>
 800cfd0:	3101      	adds	r1, #1
 800cfd2:	005b      	lsls	r3, r3, #1
 800cfd4:	e7ee      	b.n	800cfb4 <__lshift+0x1c>
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	f100 0114 	add.w	r1, r0, #20
 800cfdc:	f100 0210 	add.w	r2, r0, #16
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	4553      	cmp	r3, sl
 800cfe4:	db33      	blt.n	800d04e <__lshift+0xb6>
 800cfe6:	6920      	ldr	r0, [r4, #16]
 800cfe8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cfec:	f104 0314 	add.w	r3, r4, #20
 800cff0:	f019 091f 	ands.w	r9, r9, #31
 800cff4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cff8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cffc:	d02b      	beq.n	800d056 <__lshift+0xbe>
 800cffe:	f1c9 0e20 	rsb	lr, r9, #32
 800d002:	468a      	mov	sl, r1
 800d004:	2200      	movs	r2, #0
 800d006:	6818      	ldr	r0, [r3, #0]
 800d008:	fa00 f009 	lsl.w	r0, r0, r9
 800d00c:	4310      	orrs	r0, r2
 800d00e:	f84a 0b04 	str.w	r0, [sl], #4
 800d012:	f853 2b04 	ldr.w	r2, [r3], #4
 800d016:	459c      	cmp	ip, r3
 800d018:	fa22 f20e 	lsr.w	r2, r2, lr
 800d01c:	d8f3      	bhi.n	800d006 <__lshift+0x6e>
 800d01e:	ebac 0304 	sub.w	r3, ip, r4
 800d022:	3b15      	subs	r3, #21
 800d024:	f023 0303 	bic.w	r3, r3, #3
 800d028:	3304      	adds	r3, #4
 800d02a:	f104 0015 	add.w	r0, r4, #21
 800d02e:	4584      	cmp	ip, r0
 800d030:	bf38      	it	cc
 800d032:	2304      	movcc	r3, #4
 800d034:	50ca      	str	r2, [r1, r3]
 800d036:	b10a      	cbz	r2, 800d03c <__lshift+0xa4>
 800d038:	f108 0602 	add.w	r6, r8, #2
 800d03c:	3e01      	subs	r6, #1
 800d03e:	4638      	mov	r0, r7
 800d040:	612e      	str	r6, [r5, #16]
 800d042:	4621      	mov	r1, r4
 800d044:	f7ff fd90 	bl	800cb68 <_Bfree>
 800d048:	4628      	mov	r0, r5
 800d04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d04e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d052:	3301      	adds	r3, #1
 800d054:	e7c5      	b.n	800cfe2 <__lshift+0x4a>
 800d056:	3904      	subs	r1, #4
 800d058:	f853 2b04 	ldr.w	r2, [r3], #4
 800d05c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d060:	459c      	cmp	ip, r3
 800d062:	d8f9      	bhi.n	800d058 <__lshift+0xc0>
 800d064:	e7ea      	b.n	800d03c <__lshift+0xa4>
 800d066:	bf00      	nop
 800d068:	0800f845 	.word	0x0800f845
 800d06c:	0800f856 	.word	0x0800f856

0800d070 <__mcmp>:
 800d070:	690a      	ldr	r2, [r1, #16]
 800d072:	4603      	mov	r3, r0
 800d074:	6900      	ldr	r0, [r0, #16]
 800d076:	1a80      	subs	r0, r0, r2
 800d078:	b530      	push	{r4, r5, lr}
 800d07a:	d10e      	bne.n	800d09a <__mcmp+0x2a>
 800d07c:	3314      	adds	r3, #20
 800d07e:	3114      	adds	r1, #20
 800d080:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d084:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d088:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d08c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d090:	4295      	cmp	r5, r2
 800d092:	d003      	beq.n	800d09c <__mcmp+0x2c>
 800d094:	d205      	bcs.n	800d0a2 <__mcmp+0x32>
 800d096:	f04f 30ff 	mov.w	r0, #4294967295
 800d09a:	bd30      	pop	{r4, r5, pc}
 800d09c:	42a3      	cmp	r3, r4
 800d09e:	d3f3      	bcc.n	800d088 <__mcmp+0x18>
 800d0a0:	e7fb      	b.n	800d09a <__mcmp+0x2a>
 800d0a2:	2001      	movs	r0, #1
 800d0a4:	e7f9      	b.n	800d09a <__mcmp+0x2a>
	...

0800d0a8 <__mdiff>:
 800d0a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ac:	4689      	mov	r9, r1
 800d0ae:	4606      	mov	r6, r0
 800d0b0:	4611      	mov	r1, r2
 800d0b2:	4648      	mov	r0, r9
 800d0b4:	4614      	mov	r4, r2
 800d0b6:	f7ff ffdb 	bl	800d070 <__mcmp>
 800d0ba:	1e05      	subs	r5, r0, #0
 800d0bc:	d112      	bne.n	800d0e4 <__mdiff+0x3c>
 800d0be:	4629      	mov	r1, r5
 800d0c0:	4630      	mov	r0, r6
 800d0c2:	f7ff fd11 	bl	800cae8 <_Balloc>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	b928      	cbnz	r0, 800d0d6 <__mdiff+0x2e>
 800d0ca:	4b3f      	ldr	r3, [pc, #252]	@ (800d1c8 <__mdiff+0x120>)
 800d0cc:	f240 2137 	movw	r1, #567	@ 0x237
 800d0d0:	483e      	ldr	r0, [pc, #248]	@ (800d1cc <__mdiff+0x124>)
 800d0d2:	f001 fa89 	bl	800e5e8 <__assert_func>
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d0dc:	4610      	mov	r0, r2
 800d0de:	b003      	add	sp, #12
 800d0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0e4:	bfbc      	itt	lt
 800d0e6:	464b      	movlt	r3, r9
 800d0e8:	46a1      	movlt	r9, r4
 800d0ea:	4630      	mov	r0, r6
 800d0ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d0f0:	bfba      	itte	lt
 800d0f2:	461c      	movlt	r4, r3
 800d0f4:	2501      	movlt	r5, #1
 800d0f6:	2500      	movge	r5, #0
 800d0f8:	f7ff fcf6 	bl	800cae8 <_Balloc>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	b918      	cbnz	r0, 800d108 <__mdiff+0x60>
 800d100:	4b31      	ldr	r3, [pc, #196]	@ (800d1c8 <__mdiff+0x120>)
 800d102:	f240 2145 	movw	r1, #581	@ 0x245
 800d106:	e7e3      	b.n	800d0d0 <__mdiff+0x28>
 800d108:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d10c:	6926      	ldr	r6, [r4, #16]
 800d10e:	60c5      	str	r5, [r0, #12]
 800d110:	f109 0310 	add.w	r3, r9, #16
 800d114:	f109 0514 	add.w	r5, r9, #20
 800d118:	f104 0e14 	add.w	lr, r4, #20
 800d11c:	f100 0b14 	add.w	fp, r0, #20
 800d120:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d124:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d128:	9301      	str	r3, [sp, #4]
 800d12a:	46d9      	mov	r9, fp
 800d12c:	f04f 0c00 	mov.w	ip, #0
 800d130:	9b01      	ldr	r3, [sp, #4]
 800d132:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d136:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d13a:	9301      	str	r3, [sp, #4]
 800d13c:	fa1f f38a 	uxth.w	r3, sl
 800d140:	4619      	mov	r1, r3
 800d142:	b283      	uxth	r3, r0
 800d144:	1acb      	subs	r3, r1, r3
 800d146:	0c00      	lsrs	r0, r0, #16
 800d148:	4463      	add	r3, ip
 800d14a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d14e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d152:	b29b      	uxth	r3, r3
 800d154:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d158:	4576      	cmp	r6, lr
 800d15a:	f849 3b04 	str.w	r3, [r9], #4
 800d15e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d162:	d8e5      	bhi.n	800d130 <__mdiff+0x88>
 800d164:	1b33      	subs	r3, r6, r4
 800d166:	3b15      	subs	r3, #21
 800d168:	f023 0303 	bic.w	r3, r3, #3
 800d16c:	3415      	adds	r4, #21
 800d16e:	3304      	adds	r3, #4
 800d170:	42a6      	cmp	r6, r4
 800d172:	bf38      	it	cc
 800d174:	2304      	movcc	r3, #4
 800d176:	441d      	add	r5, r3
 800d178:	445b      	add	r3, fp
 800d17a:	461e      	mov	r6, r3
 800d17c:	462c      	mov	r4, r5
 800d17e:	4544      	cmp	r4, r8
 800d180:	d30e      	bcc.n	800d1a0 <__mdiff+0xf8>
 800d182:	f108 0103 	add.w	r1, r8, #3
 800d186:	1b49      	subs	r1, r1, r5
 800d188:	f021 0103 	bic.w	r1, r1, #3
 800d18c:	3d03      	subs	r5, #3
 800d18e:	45a8      	cmp	r8, r5
 800d190:	bf38      	it	cc
 800d192:	2100      	movcc	r1, #0
 800d194:	440b      	add	r3, r1
 800d196:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d19a:	b191      	cbz	r1, 800d1c2 <__mdiff+0x11a>
 800d19c:	6117      	str	r7, [r2, #16]
 800d19e:	e79d      	b.n	800d0dc <__mdiff+0x34>
 800d1a0:	f854 1b04 	ldr.w	r1, [r4], #4
 800d1a4:	46e6      	mov	lr, ip
 800d1a6:	0c08      	lsrs	r0, r1, #16
 800d1a8:	fa1c fc81 	uxtah	ip, ip, r1
 800d1ac:	4471      	add	r1, lr
 800d1ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d1b2:	b289      	uxth	r1, r1
 800d1b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d1b8:	f846 1b04 	str.w	r1, [r6], #4
 800d1bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1c0:	e7dd      	b.n	800d17e <__mdiff+0xd6>
 800d1c2:	3f01      	subs	r7, #1
 800d1c4:	e7e7      	b.n	800d196 <__mdiff+0xee>
 800d1c6:	bf00      	nop
 800d1c8:	0800f845 	.word	0x0800f845
 800d1cc:	0800f856 	.word	0x0800f856

0800d1d0 <__ulp>:
 800d1d0:	b082      	sub	sp, #8
 800d1d2:	ed8d 0b00 	vstr	d0, [sp]
 800d1d6:	9a01      	ldr	r2, [sp, #4]
 800d1d8:	4b0f      	ldr	r3, [pc, #60]	@ (800d218 <__ulp+0x48>)
 800d1da:	4013      	ands	r3, r2
 800d1dc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	dc08      	bgt.n	800d1f6 <__ulp+0x26>
 800d1e4:	425b      	negs	r3, r3
 800d1e6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d1ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d1ee:	da04      	bge.n	800d1fa <__ulp+0x2a>
 800d1f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d1f4:	4113      	asrs	r3, r2
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	e008      	b.n	800d20c <__ulp+0x3c>
 800d1fa:	f1a2 0314 	sub.w	r3, r2, #20
 800d1fe:	2b1e      	cmp	r3, #30
 800d200:	bfda      	itte	le
 800d202:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d206:	40da      	lsrle	r2, r3
 800d208:	2201      	movgt	r2, #1
 800d20a:	2300      	movs	r3, #0
 800d20c:	4619      	mov	r1, r3
 800d20e:	4610      	mov	r0, r2
 800d210:	ec41 0b10 	vmov	d0, r0, r1
 800d214:	b002      	add	sp, #8
 800d216:	4770      	bx	lr
 800d218:	7ff00000 	.word	0x7ff00000

0800d21c <__b2d>:
 800d21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d220:	6906      	ldr	r6, [r0, #16]
 800d222:	f100 0814 	add.w	r8, r0, #20
 800d226:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d22a:	1f37      	subs	r7, r6, #4
 800d22c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d230:	4610      	mov	r0, r2
 800d232:	f7ff fd4b 	bl	800cccc <__hi0bits>
 800d236:	f1c0 0320 	rsb	r3, r0, #32
 800d23a:	280a      	cmp	r0, #10
 800d23c:	600b      	str	r3, [r1, #0]
 800d23e:	491b      	ldr	r1, [pc, #108]	@ (800d2ac <__b2d+0x90>)
 800d240:	dc15      	bgt.n	800d26e <__b2d+0x52>
 800d242:	f1c0 0c0b 	rsb	ip, r0, #11
 800d246:	fa22 f30c 	lsr.w	r3, r2, ip
 800d24a:	45b8      	cmp	r8, r7
 800d24c:	ea43 0501 	orr.w	r5, r3, r1
 800d250:	bf34      	ite	cc
 800d252:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d256:	2300      	movcs	r3, #0
 800d258:	3015      	adds	r0, #21
 800d25a:	fa02 f000 	lsl.w	r0, r2, r0
 800d25e:	fa23 f30c 	lsr.w	r3, r3, ip
 800d262:	4303      	orrs	r3, r0
 800d264:	461c      	mov	r4, r3
 800d266:	ec45 4b10 	vmov	d0, r4, r5
 800d26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d26e:	45b8      	cmp	r8, r7
 800d270:	bf3a      	itte	cc
 800d272:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d276:	f1a6 0708 	subcc.w	r7, r6, #8
 800d27a:	2300      	movcs	r3, #0
 800d27c:	380b      	subs	r0, #11
 800d27e:	d012      	beq.n	800d2a6 <__b2d+0x8a>
 800d280:	f1c0 0120 	rsb	r1, r0, #32
 800d284:	fa23 f401 	lsr.w	r4, r3, r1
 800d288:	4082      	lsls	r2, r0
 800d28a:	4322      	orrs	r2, r4
 800d28c:	4547      	cmp	r7, r8
 800d28e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d292:	bf8c      	ite	hi
 800d294:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d298:	2200      	movls	r2, #0
 800d29a:	4083      	lsls	r3, r0
 800d29c:	40ca      	lsrs	r2, r1
 800d29e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	e7de      	b.n	800d264 <__b2d+0x48>
 800d2a6:	ea42 0501 	orr.w	r5, r2, r1
 800d2aa:	e7db      	b.n	800d264 <__b2d+0x48>
 800d2ac:	3ff00000 	.word	0x3ff00000

0800d2b0 <__d2b>:
 800d2b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d2b4:	460f      	mov	r7, r1
 800d2b6:	2101      	movs	r1, #1
 800d2b8:	ec59 8b10 	vmov	r8, r9, d0
 800d2bc:	4616      	mov	r6, r2
 800d2be:	f7ff fc13 	bl	800cae8 <_Balloc>
 800d2c2:	4604      	mov	r4, r0
 800d2c4:	b930      	cbnz	r0, 800d2d4 <__d2b+0x24>
 800d2c6:	4602      	mov	r2, r0
 800d2c8:	4b23      	ldr	r3, [pc, #140]	@ (800d358 <__d2b+0xa8>)
 800d2ca:	4824      	ldr	r0, [pc, #144]	@ (800d35c <__d2b+0xac>)
 800d2cc:	f240 310f 	movw	r1, #783	@ 0x30f
 800d2d0:	f001 f98a 	bl	800e5e8 <__assert_func>
 800d2d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d2d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d2dc:	b10d      	cbz	r5, 800d2e2 <__d2b+0x32>
 800d2de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d2e2:	9301      	str	r3, [sp, #4]
 800d2e4:	f1b8 0300 	subs.w	r3, r8, #0
 800d2e8:	d023      	beq.n	800d332 <__d2b+0x82>
 800d2ea:	4668      	mov	r0, sp
 800d2ec:	9300      	str	r3, [sp, #0]
 800d2ee:	f7ff fd0c 	bl	800cd0a <__lo0bits>
 800d2f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d2f6:	b1d0      	cbz	r0, 800d32e <__d2b+0x7e>
 800d2f8:	f1c0 0320 	rsb	r3, r0, #32
 800d2fc:	fa02 f303 	lsl.w	r3, r2, r3
 800d300:	430b      	orrs	r3, r1
 800d302:	40c2      	lsrs	r2, r0
 800d304:	6163      	str	r3, [r4, #20]
 800d306:	9201      	str	r2, [sp, #4]
 800d308:	9b01      	ldr	r3, [sp, #4]
 800d30a:	61a3      	str	r3, [r4, #24]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	bf0c      	ite	eq
 800d310:	2201      	moveq	r2, #1
 800d312:	2202      	movne	r2, #2
 800d314:	6122      	str	r2, [r4, #16]
 800d316:	b1a5      	cbz	r5, 800d342 <__d2b+0x92>
 800d318:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d31c:	4405      	add	r5, r0
 800d31e:	603d      	str	r5, [r7, #0]
 800d320:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d324:	6030      	str	r0, [r6, #0]
 800d326:	4620      	mov	r0, r4
 800d328:	b003      	add	sp, #12
 800d32a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d32e:	6161      	str	r1, [r4, #20]
 800d330:	e7ea      	b.n	800d308 <__d2b+0x58>
 800d332:	a801      	add	r0, sp, #4
 800d334:	f7ff fce9 	bl	800cd0a <__lo0bits>
 800d338:	9b01      	ldr	r3, [sp, #4]
 800d33a:	6163      	str	r3, [r4, #20]
 800d33c:	3020      	adds	r0, #32
 800d33e:	2201      	movs	r2, #1
 800d340:	e7e8      	b.n	800d314 <__d2b+0x64>
 800d342:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d346:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d34a:	6038      	str	r0, [r7, #0]
 800d34c:	6918      	ldr	r0, [r3, #16]
 800d34e:	f7ff fcbd 	bl	800cccc <__hi0bits>
 800d352:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d356:	e7e5      	b.n	800d324 <__d2b+0x74>
 800d358:	0800f845 	.word	0x0800f845
 800d35c:	0800f856 	.word	0x0800f856

0800d360 <__ratio>:
 800d360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d364:	b085      	sub	sp, #20
 800d366:	e9cd 1000 	strd	r1, r0, [sp]
 800d36a:	a902      	add	r1, sp, #8
 800d36c:	f7ff ff56 	bl	800d21c <__b2d>
 800d370:	9800      	ldr	r0, [sp, #0]
 800d372:	a903      	add	r1, sp, #12
 800d374:	ec55 4b10 	vmov	r4, r5, d0
 800d378:	f7ff ff50 	bl	800d21c <__b2d>
 800d37c:	9b01      	ldr	r3, [sp, #4]
 800d37e:	6919      	ldr	r1, [r3, #16]
 800d380:	9b00      	ldr	r3, [sp, #0]
 800d382:	691b      	ldr	r3, [r3, #16]
 800d384:	1ac9      	subs	r1, r1, r3
 800d386:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d38a:	1a9b      	subs	r3, r3, r2
 800d38c:	ec5b ab10 	vmov	sl, fp, d0
 800d390:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d394:	2b00      	cmp	r3, #0
 800d396:	bfce      	itee	gt
 800d398:	462a      	movgt	r2, r5
 800d39a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d39e:	465a      	movle	r2, fp
 800d3a0:	462f      	mov	r7, r5
 800d3a2:	46d9      	mov	r9, fp
 800d3a4:	bfcc      	ite	gt
 800d3a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d3aa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d3ae:	464b      	mov	r3, r9
 800d3b0:	4652      	mov	r2, sl
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	4639      	mov	r1, r7
 800d3b6:	f7f3 fa79 	bl	80008ac <__aeabi_ddiv>
 800d3ba:	ec41 0b10 	vmov	d0, r0, r1
 800d3be:	b005      	add	sp, #20
 800d3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d3c4 <__copybits>:
 800d3c4:	3901      	subs	r1, #1
 800d3c6:	b570      	push	{r4, r5, r6, lr}
 800d3c8:	1149      	asrs	r1, r1, #5
 800d3ca:	6914      	ldr	r4, [r2, #16]
 800d3cc:	3101      	adds	r1, #1
 800d3ce:	f102 0314 	add.w	r3, r2, #20
 800d3d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d3d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d3da:	1f05      	subs	r5, r0, #4
 800d3dc:	42a3      	cmp	r3, r4
 800d3de:	d30c      	bcc.n	800d3fa <__copybits+0x36>
 800d3e0:	1aa3      	subs	r3, r4, r2
 800d3e2:	3b11      	subs	r3, #17
 800d3e4:	f023 0303 	bic.w	r3, r3, #3
 800d3e8:	3211      	adds	r2, #17
 800d3ea:	42a2      	cmp	r2, r4
 800d3ec:	bf88      	it	hi
 800d3ee:	2300      	movhi	r3, #0
 800d3f0:	4418      	add	r0, r3
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	4288      	cmp	r0, r1
 800d3f6:	d305      	bcc.n	800d404 <__copybits+0x40>
 800d3f8:	bd70      	pop	{r4, r5, r6, pc}
 800d3fa:	f853 6b04 	ldr.w	r6, [r3], #4
 800d3fe:	f845 6f04 	str.w	r6, [r5, #4]!
 800d402:	e7eb      	b.n	800d3dc <__copybits+0x18>
 800d404:	f840 3b04 	str.w	r3, [r0], #4
 800d408:	e7f4      	b.n	800d3f4 <__copybits+0x30>

0800d40a <__any_on>:
 800d40a:	f100 0214 	add.w	r2, r0, #20
 800d40e:	6900      	ldr	r0, [r0, #16]
 800d410:	114b      	asrs	r3, r1, #5
 800d412:	4298      	cmp	r0, r3
 800d414:	b510      	push	{r4, lr}
 800d416:	db11      	blt.n	800d43c <__any_on+0x32>
 800d418:	dd0a      	ble.n	800d430 <__any_on+0x26>
 800d41a:	f011 011f 	ands.w	r1, r1, #31
 800d41e:	d007      	beq.n	800d430 <__any_on+0x26>
 800d420:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d424:	fa24 f001 	lsr.w	r0, r4, r1
 800d428:	fa00 f101 	lsl.w	r1, r0, r1
 800d42c:	428c      	cmp	r4, r1
 800d42e:	d10b      	bne.n	800d448 <__any_on+0x3e>
 800d430:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d434:	4293      	cmp	r3, r2
 800d436:	d803      	bhi.n	800d440 <__any_on+0x36>
 800d438:	2000      	movs	r0, #0
 800d43a:	bd10      	pop	{r4, pc}
 800d43c:	4603      	mov	r3, r0
 800d43e:	e7f7      	b.n	800d430 <__any_on+0x26>
 800d440:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d444:	2900      	cmp	r1, #0
 800d446:	d0f5      	beq.n	800d434 <__any_on+0x2a>
 800d448:	2001      	movs	r0, #1
 800d44a:	e7f6      	b.n	800d43a <__any_on+0x30>

0800d44c <sulp>:
 800d44c:	b570      	push	{r4, r5, r6, lr}
 800d44e:	4604      	mov	r4, r0
 800d450:	460d      	mov	r5, r1
 800d452:	ec45 4b10 	vmov	d0, r4, r5
 800d456:	4616      	mov	r6, r2
 800d458:	f7ff feba 	bl	800d1d0 <__ulp>
 800d45c:	ec51 0b10 	vmov	r0, r1, d0
 800d460:	b17e      	cbz	r6, 800d482 <sulp+0x36>
 800d462:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d466:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	dd09      	ble.n	800d482 <sulp+0x36>
 800d46e:	051b      	lsls	r3, r3, #20
 800d470:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d474:	2400      	movs	r4, #0
 800d476:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d47a:	4622      	mov	r2, r4
 800d47c:	462b      	mov	r3, r5
 800d47e:	f7f3 f8eb 	bl	8000658 <__aeabi_dmul>
 800d482:	ec41 0b10 	vmov	d0, r0, r1
 800d486:	bd70      	pop	{r4, r5, r6, pc}

0800d488 <_strtod_l>:
 800d488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d48c:	b09f      	sub	sp, #124	@ 0x7c
 800d48e:	460c      	mov	r4, r1
 800d490:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d492:	2200      	movs	r2, #0
 800d494:	921a      	str	r2, [sp, #104]	@ 0x68
 800d496:	9005      	str	r0, [sp, #20]
 800d498:	f04f 0a00 	mov.w	sl, #0
 800d49c:	f04f 0b00 	mov.w	fp, #0
 800d4a0:	460a      	mov	r2, r1
 800d4a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d4a4:	7811      	ldrb	r1, [r2, #0]
 800d4a6:	292b      	cmp	r1, #43	@ 0x2b
 800d4a8:	d04a      	beq.n	800d540 <_strtod_l+0xb8>
 800d4aa:	d838      	bhi.n	800d51e <_strtod_l+0x96>
 800d4ac:	290d      	cmp	r1, #13
 800d4ae:	d832      	bhi.n	800d516 <_strtod_l+0x8e>
 800d4b0:	2908      	cmp	r1, #8
 800d4b2:	d832      	bhi.n	800d51a <_strtod_l+0x92>
 800d4b4:	2900      	cmp	r1, #0
 800d4b6:	d03b      	beq.n	800d530 <_strtod_l+0xa8>
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d4bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d4be:	782a      	ldrb	r2, [r5, #0]
 800d4c0:	2a30      	cmp	r2, #48	@ 0x30
 800d4c2:	f040 80b3 	bne.w	800d62c <_strtod_l+0x1a4>
 800d4c6:	786a      	ldrb	r2, [r5, #1]
 800d4c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d4cc:	2a58      	cmp	r2, #88	@ 0x58
 800d4ce:	d16e      	bne.n	800d5ae <_strtod_l+0x126>
 800d4d0:	9302      	str	r3, [sp, #8]
 800d4d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d4d4:	9301      	str	r3, [sp, #4]
 800d4d6:	ab1a      	add	r3, sp, #104	@ 0x68
 800d4d8:	9300      	str	r3, [sp, #0]
 800d4da:	4a8e      	ldr	r2, [pc, #568]	@ (800d714 <_strtod_l+0x28c>)
 800d4dc:	9805      	ldr	r0, [sp, #20]
 800d4de:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d4e0:	a919      	add	r1, sp, #100	@ 0x64
 800d4e2:	f001 f91b 	bl	800e71c <__gethex>
 800d4e6:	f010 060f 	ands.w	r6, r0, #15
 800d4ea:	4604      	mov	r4, r0
 800d4ec:	d005      	beq.n	800d4fa <_strtod_l+0x72>
 800d4ee:	2e06      	cmp	r6, #6
 800d4f0:	d128      	bne.n	800d544 <_strtod_l+0xbc>
 800d4f2:	3501      	adds	r5, #1
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	9519      	str	r5, [sp, #100]	@ 0x64
 800d4f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	f040 858e 	bne.w	800e01e <_strtod_l+0xb96>
 800d502:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d504:	b1cb      	cbz	r3, 800d53a <_strtod_l+0xb2>
 800d506:	4652      	mov	r2, sl
 800d508:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d50c:	ec43 2b10 	vmov	d0, r2, r3
 800d510:	b01f      	add	sp, #124	@ 0x7c
 800d512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d516:	2920      	cmp	r1, #32
 800d518:	d1ce      	bne.n	800d4b8 <_strtod_l+0x30>
 800d51a:	3201      	adds	r2, #1
 800d51c:	e7c1      	b.n	800d4a2 <_strtod_l+0x1a>
 800d51e:	292d      	cmp	r1, #45	@ 0x2d
 800d520:	d1ca      	bne.n	800d4b8 <_strtod_l+0x30>
 800d522:	2101      	movs	r1, #1
 800d524:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d526:	1c51      	adds	r1, r2, #1
 800d528:	9119      	str	r1, [sp, #100]	@ 0x64
 800d52a:	7852      	ldrb	r2, [r2, #1]
 800d52c:	2a00      	cmp	r2, #0
 800d52e:	d1c5      	bne.n	800d4bc <_strtod_l+0x34>
 800d530:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d532:	9419      	str	r4, [sp, #100]	@ 0x64
 800d534:	2b00      	cmp	r3, #0
 800d536:	f040 8570 	bne.w	800e01a <_strtod_l+0xb92>
 800d53a:	4652      	mov	r2, sl
 800d53c:	465b      	mov	r3, fp
 800d53e:	e7e5      	b.n	800d50c <_strtod_l+0x84>
 800d540:	2100      	movs	r1, #0
 800d542:	e7ef      	b.n	800d524 <_strtod_l+0x9c>
 800d544:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d546:	b13a      	cbz	r2, 800d558 <_strtod_l+0xd0>
 800d548:	2135      	movs	r1, #53	@ 0x35
 800d54a:	a81c      	add	r0, sp, #112	@ 0x70
 800d54c:	f7ff ff3a 	bl	800d3c4 <__copybits>
 800d550:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d552:	9805      	ldr	r0, [sp, #20]
 800d554:	f7ff fb08 	bl	800cb68 <_Bfree>
 800d558:	3e01      	subs	r6, #1
 800d55a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d55c:	2e04      	cmp	r6, #4
 800d55e:	d806      	bhi.n	800d56e <_strtod_l+0xe6>
 800d560:	e8df f006 	tbb	[pc, r6]
 800d564:	201d0314 	.word	0x201d0314
 800d568:	14          	.byte	0x14
 800d569:	00          	.byte	0x00
 800d56a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d56e:	05e1      	lsls	r1, r4, #23
 800d570:	bf48      	it	mi
 800d572:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d576:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d57a:	0d1b      	lsrs	r3, r3, #20
 800d57c:	051b      	lsls	r3, r3, #20
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d1bb      	bne.n	800d4fa <_strtod_l+0x72>
 800d582:	f7fe fb23 	bl	800bbcc <__errno>
 800d586:	2322      	movs	r3, #34	@ 0x22
 800d588:	6003      	str	r3, [r0, #0]
 800d58a:	e7b6      	b.n	800d4fa <_strtod_l+0x72>
 800d58c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d590:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d594:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d598:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d59c:	e7e7      	b.n	800d56e <_strtod_l+0xe6>
 800d59e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d71c <_strtod_l+0x294>
 800d5a2:	e7e4      	b.n	800d56e <_strtod_l+0xe6>
 800d5a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d5a8:	f04f 3aff 	mov.w	sl, #4294967295
 800d5ac:	e7df      	b.n	800d56e <_strtod_l+0xe6>
 800d5ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5b0:	1c5a      	adds	r2, r3, #1
 800d5b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d5b4:	785b      	ldrb	r3, [r3, #1]
 800d5b6:	2b30      	cmp	r3, #48	@ 0x30
 800d5b8:	d0f9      	beq.n	800d5ae <_strtod_l+0x126>
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d09d      	beq.n	800d4fa <_strtod_l+0x72>
 800d5be:	2301      	movs	r3, #1
 800d5c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5c4:	930c      	str	r3, [sp, #48]	@ 0x30
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	9308      	str	r3, [sp, #32]
 800d5ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5cc:	461f      	mov	r7, r3
 800d5ce:	220a      	movs	r2, #10
 800d5d0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d5d2:	7805      	ldrb	r5, [r0, #0]
 800d5d4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d5d8:	b2d9      	uxtb	r1, r3
 800d5da:	2909      	cmp	r1, #9
 800d5dc:	d928      	bls.n	800d630 <_strtod_l+0x1a8>
 800d5de:	494e      	ldr	r1, [pc, #312]	@ (800d718 <_strtod_l+0x290>)
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	f000 ffd5 	bl	800e590 <strncmp>
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	d032      	beq.n	800d650 <_strtod_l+0x1c8>
 800d5ea:	2000      	movs	r0, #0
 800d5ec:	462a      	mov	r2, r5
 800d5ee:	4681      	mov	r9, r0
 800d5f0:	463d      	mov	r5, r7
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2a65      	cmp	r2, #101	@ 0x65
 800d5f6:	d001      	beq.n	800d5fc <_strtod_l+0x174>
 800d5f8:	2a45      	cmp	r2, #69	@ 0x45
 800d5fa:	d114      	bne.n	800d626 <_strtod_l+0x19e>
 800d5fc:	b91d      	cbnz	r5, 800d606 <_strtod_l+0x17e>
 800d5fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d600:	4302      	orrs	r2, r0
 800d602:	d095      	beq.n	800d530 <_strtod_l+0xa8>
 800d604:	2500      	movs	r5, #0
 800d606:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d608:	1c62      	adds	r2, r4, #1
 800d60a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d60c:	7862      	ldrb	r2, [r4, #1]
 800d60e:	2a2b      	cmp	r2, #43	@ 0x2b
 800d610:	d077      	beq.n	800d702 <_strtod_l+0x27a>
 800d612:	2a2d      	cmp	r2, #45	@ 0x2d
 800d614:	d07b      	beq.n	800d70e <_strtod_l+0x286>
 800d616:	f04f 0c00 	mov.w	ip, #0
 800d61a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d61e:	2909      	cmp	r1, #9
 800d620:	f240 8082 	bls.w	800d728 <_strtod_l+0x2a0>
 800d624:	9419      	str	r4, [sp, #100]	@ 0x64
 800d626:	f04f 0800 	mov.w	r8, #0
 800d62a:	e0a2      	b.n	800d772 <_strtod_l+0x2ea>
 800d62c:	2300      	movs	r3, #0
 800d62e:	e7c7      	b.n	800d5c0 <_strtod_l+0x138>
 800d630:	2f08      	cmp	r7, #8
 800d632:	bfd5      	itete	le
 800d634:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d636:	9908      	ldrgt	r1, [sp, #32]
 800d638:	fb02 3301 	mlale	r3, r2, r1, r3
 800d63c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d640:	f100 0001 	add.w	r0, r0, #1
 800d644:	bfd4      	ite	le
 800d646:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d648:	9308      	strgt	r3, [sp, #32]
 800d64a:	3701      	adds	r7, #1
 800d64c:	9019      	str	r0, [sp, #100]	@ 0x64
 800d64e:	e7bf      	b.n	800d5d0 <_strtod_l+0x148>
 800d650:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d652:	1c5a      	adds	r2, r3, #1
 800d654:	9219      	str	r2, [sp, #100]	@ 0x64
 800d656:	785a      	ldrb	r2, [r3, #1]
 800d658:	b37f      	cbz	r7, 800d6ba <_strtod_l+0x232>
 800d65a:	4681      	mov	r9, r0
 800d65c:	463d      	mov	r5, r7
 800d65e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d662:	2b09      	cmp	r3, #9
 800d664:	d912      	bls.n	800d68c <_strtod_l+0x204>
 800d666:	2301      	movs	r3, #1
 800d668:	e7c4      	b.n	800d5f4 <_strtod_l+0x16c>
 800d66a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d66c:	1c5a      	adds	r2, r3, #1
 800d66e:	9219      	str	r2, [sp, #100]	@ 0x64
 800d670:	785a      	ldrb	r2, [r3, #1]
 800d672:	3001      	adds	r0, #1
 800d674:	2a30      	cmp	r2, #48	@ 0x30
 800d676:	d0f8      	beq.n	800d66a <_strtod_l+0x1e2>
 800d678:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d67c:	2b08      	cmp	r3, #8
 800d67e:	f200 84d3 	bhi.w	800e028 <_strtod_l+0xba0>
 800d682:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d684:	930c      	str	r3, [sp, #48]	@ 0x30
 800d686:	4681      	mov	r9, r0
 800d688:	2000      	movs	r0, #0
 800d68a:	4605      	mov	r5, r0
 800d68c:	3a30      	subs	r2, #48	@ 0x30
 800d68e:	f100 0301 	add.w	r3, r0, #1
 800d692:	d02a      	beq.n	800d6ea <_strtod_l+0x262>
 800d694:	4499      	add	r9, r3
 800d696:	eb00 0c05 	add.w	ip, r0, r5
 800d69a:	462b      	mov	r3, r5
 800d69c:	210a      	movs	r1, #10
 800d69e:	4563      	cmp	r3, ip
 800d6a0:	d10d      	bne.n	800d6be <_strtod_l+0x236>
 800d6a2:	1c69      	adds	r1, r5, #1
 800d6a4:	4401      	add	r1, r0
 800d6a6:	4428      	add	r0, r5
 800d6a8:	2808      	cmp	r0, #8
 800d6aa:	dc16      	bgt.n	800d6da <_strtod_l+0x252>
 800d6ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d6ae:	230a      	movs	r3, #10
 800d6b0:	fb03 2300 	mla	r3, r3, r0, r2
 800d6b4:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	e018      	b.n	800d6ec <_strtod_l+0x264>
 800d6ba:	4638      	mov	r0, r7
 800d6bc:	e7da      	b.n	800d674 <_strtod_l+0x1ec>
 800d6be:	2b08      	cmp	r3, #8
 800d6c0:	f103 0301 	add.w	r3, r3, #1
 800d6c4:	dc03      	bgt.n	800d6ce <_strtod_l+0x246>
 800d6c6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d6c8:	434e      	muls	r6, r1
 800d6ca:	960a      	str	r6, [sp, #40]	@ 0x28
 800d6cc:	e7e7      	b.n	800d69e <_strtod_l+0x216>
 800d6ce:	2b10      	cmp	r3, #16
 800d6d0:	bfde      	ittt	le
 800d6d2:	9e08      	ldrle	r6, [sp, #32]
 800d6d4:	434e      	mulle	r6, r1
 800d6d6:	9608      	strle	r6, [sp, #32]
 800d6d8:	e7e1      	b.n	800d69e <_strtod_l+0x216>
 800d6da:	280f      	cmp	r0, #15
 800d6dc:	dceb      	bgt.n	800d6b6 <_strtod_l+0x22e>
 800d6de:	9808      	ldr	r0, [sp, #32]
 800d6e0:	230a      	movs	r3, #10
 800d6e2:	fb03 2300 	mla	r3, r3, r0, r2
 800d6e6:	9308      	str	r3, [sp, #32]
 800d6e8:	e7e5      	b.n	800d6b6 <_strtod_l+0x22e>
 800d6ea:	4629      	mov	r1, r5
 800d6ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d6ee:	1c50      	adds	r0, r2, #1
 800d6f0:	9019      	str	r0, [sp, #100]	@ 0x64
 800d6f2:	7852      	ldrb	r2, [r2, #1]
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	460d      	mov	r5, r1
 800d6f8:	e7b1      	b.n	800d65e <_strtod_l+0x1d6>
 800d6fa:	f04f 0900 	mov.w	r9, #0
 800d6fe:	2301      	movs	r3, #1
 800d700:	e77d      	b.n	800d5fe <_strtod_l+0x176>
 800d702:	f04f 0c00 	mov.w	ip, #0
 800d706:	1ca2      	adds	r2, r4, #2
 800d708:	9219      	str	r2, [sp, #100]	@ 0x64
 800d70a:	78a2      	ldrb	r2, [r4, #2]
 800d70c:	e785      	b.n	800d61a <_strtod_l+0x192>
 800d70e:	f04f 0c01 	mov.w	ip, #1
 800d712:	e7f8      	b.n	800d706 <_strtod_l+0x27e>
 800d714:	0800f9c8 	.word	0x0800f9c8
 800d718:	0800f9b0 	.word	0x0800f9b0
 800d71c:	7ff00000 	.word	0x7ff00000
 800d720:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d722:	1c51      	adds	r1, r2, #1
 800d724:	9119      	str	r1, [sp, #100]	@ 0x64
 800d726:	7852      	ldrb	r2, [r2, #1]
 800d728:	2a30      	cmp	r2, #48	@ 0x30
 800d72a:	d0f9      	beq.n	800d720 <_strtod_l+0x298>
 800d72c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d730:	2908      	cmp	r1, #8
 800d732:	f63f af78 	bhi.w	800d626 <_strtod_l+0x19e>
 800d736:	3a30      	subs	r2, #48	@ 0x30
 800d738:	920e      	str	r2, [sp, #56]	@ 0x38
 800d73a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d73c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d73e:	f04f 080a 	mov.w	r8, #10
 800d742:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d744:	1c56      	adds	r6, r2, #1
 800d746:	9619      	str	r6, [sp, #100]	@ 0x64
 800d748:	7852      	ldrb	r2, [r2, #1]
 800d74a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d74e:	f1be 0f09 	cmp.w	lr, #9
 800d752:	d939      	bls.n	800d7c8 <_strtod_l+0x340>
 800d754:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d756:	1a76      	subs	r6, r6, r1
 800d758:	2e08      	cmp	r6, #8
 800d75a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d75e:	dc03      	bgt.n	800d768 <_strtod_l+0x2e0>
 800d760:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d762:	4588      	cmp	r8, r1
 800d764:	bfa8      	it	ge
 800d766:	4688      	movge	r8, r1
 800d768:	f1bc 0f00 	cmp.w	ip, #0
 800d76c:	d001      	beq.n	800d772 <_strtod_l+0x2ea>
 800d76e:	f1c8 0800 	rsb	r8, r8, #0
 800d772:	2d00      	cmp	r5, #0
 800d774:	d14e      	bne.n	800d814 <_strtod_l+0x38c>
 800d776:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d778:	4308      	orrs	r0, r1
 800d77a:	f47f aebe 	bne.w	800d4fa <_strtod_l+0x72>
 800d77e:	2b00      	cmp	r3, #0
 800d780:	f47f aed6 	bne.w	800d530 <_strtod_l+0xa8>
 800d784:	2a69      	cmp	r2, #105	@ 0x69
 800d786:	d028      	beq.n	800d7da <_strtod_l+0x352>
 800d788:	dc25      	bgt.n	800d7d6 <_strtod_l+0x34e>
 800d78a:	2a49      	cmp	r2, #73	@ 0x49
 800d78c:	d025      	beq.n	800d7da <_strtod_l+0x352>
 800d78e:	2a4e      	cmp	r2, #78	@ 0x4e
 800d790:	f47f aece 	bne.w	800d530 <_strtod_l+0xa8>
 800d794:	499b      	ldr	r1, [pc, #620]	@ (800da04 <_strtod_l+0x57c>)
 800d796:	a819      	add	r0, sp, #100	@ 0x64
 800d798:	f001 f9e2 	bl	800eb60 <__match>
 800d79c:	2800      	cmp	r0, #0
 800d79e:	f43f aec7 	beq.w	800d530 <_strtod_l+0xa8>
 800d7a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d7a4:	781b      	ldrb	r3, [r3, #0]
 800d7a6:	2b28      	cmp	r3, #40	@ 0x28
 800d7a8:	d12e      	bne.n	800d808 <_strtod_l+0x380>
 800d7aa:	4997      	ldr	r1, [pc, #604]	@ (800da08 <_strtod_l+0x580>)
 800d7ac:	aa1c      	add	r2, sp, #112	@ 0x70
 800d7ae:	a819      	add	r0, sp, #100	@ 0x64
 800d7b0:	f001 f9ea 	bl	800eb88 <__hexnan>
 800d7b4:	2805      	cmp	r0, #5
 800d7b6:	d127      	bne.n	800d808 <_strtod_l+0x380>
 800d7b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d7ba:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d7be:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d7c2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d7c6:	e698      	b.n	800d4fa <_strtod_l+0x72>
 800d7c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d7ca:	fb08 2101 	mla	r1, r8, r1, r2
 800d7ce:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d7d2:	920e      	str	r2, [sp, #56]	@ 0x38
 800d7d4:	e7b5      	b.n	800d742 <_strtod_l+0x2ba>
 800d7d6:	2a6e      	cmp	r2, #110	@ 0x6e
 800d7d8:	e7da      	b.n	800d790 <_strtod_l+0x308>
 800d7da:	498c      	ldr	r1, [pc, #560]	@ (800da0c <_strtod_l+0x584>)
 800d7dc:	a819      	add	r0, sp, #100	@ 0x64
 800d7de:	f001 f9bf 	bl	800eb60 <__match>
 800d7e2:	2800      	cmp	r0, #0
 800d7e4:	f43f aea4 	beq.w	800d530 <_strtod_l+0xa8>
 800d7e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d7ea:	4989      	ldr	r1, [pc, #548]	@ (800da10 <_strtod_l+0x588>)
 800d7ec:	3b01      	subs	r3, #1
 800d7ee:	a819      	add	r0, sp, #100	@ 0x64
 800d7f0:	9319      	str	r3, [sp, #100]	@ 0x64
 800d7f2:	f001 f9b5 	bl	800eb60 <__match>
 800d7f6:	b910      	cbnz	r0, 800d7fe <_strtod_l+0x376>
 800d7f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	9319      	str	r3, [sp, #100]	@ 0x64
 800d7fe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800da20 <_strtod_l+0x598>
 800d802:	f04f 0a00 	mov.w	sl, #0
 800d806:	e678      	b.n	800d4fa <_strtod_l+0x72>
 800d808:	4882      	ldr	r0, [pc, #520]	@ (800da14 <_strtod_l+0x58c>)
 800d80a:	f000 fee5 	bl	800e5d8 <nan>
 800d80e:	ec5b ab10 	vmov	sl, fp, d0
 800d812:	e672      	b.n	800d4fa <_strtod_l+0x72>
 800d814:	eba8 0309 	sub.w	r3, r8, r9
 800d818:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d81a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d81c:	2f00      	cmp	r7, #0
 800d81e:	bf08      	it	eq
 800d820:	462f      	moveq	r7, r5
 800d822:	2d10      	cmp	r5, #16
 800d824:	462c      	mov	r4, r5
 800d826:	bfa8      	it	ge
 800d828:	2410      	movge	r4, #16
 800d82a:	f7f2 fe9b 	bl	8000564 <__aeabi_ui2d>
 800d82e:	2d09      	cmp	r5, #9
 800d830:	4682      	mov	sl, r0
 800d832:	468b      	mov	fp, r1
 800d834:	dc13      	bgt.n	800d85e <_strtod_l+0x3d6>
 800d836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d838:	2b00      	cmp	r3, #0
 800d83a:	f43f ae5e 	beq.w	800d4fa <_strtod_l+0x72>
 800d83e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d840:	dd78      	ble.n	800d934 <_strtod_l+0x4ac>
 800d842:	2b16      	cmp	r3, #22
 800d844:	dc5f      	bgt.n	800d906 <_strtod_l+0x47e>
 800d846:	4974      	ldr	r1, [pc, #464]	@ (800da18 <_strtod_l+0x590>)
 800d848:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d84c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d850:	4652      	mov	r2, sl
 800d852:	465b      	mov	r3, fp
 800d854:	f7f2 ff00 	bl	8000658 <__aeabi_dmul>
 800d858:	4682      	mov	sl, r0
 800d85a:	468b      	mov	fp, r1
 800d85c:	e64d      	b.n	800d4fa <_strtod_l+0x72>
 800d85e:	4b6e      	ldr	r3, [pc, #440]	@ (800da18 <_strtod_l+0x590>)
 800d860:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d864:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d868:	f7f2 fef6 	bl	8000658 <__aeabi_dmul>
 800d86c:	4682      	mov	sl, r0
 800d86e:	9808      	ldr	r0, [sp, #32]
 800d870:	468b      	mov	fp, r1
 800d872:	f7f2 fe77 	bl	8000564 <__aeabi_ui2d>
 800d876:	4602      	mov	r2, r0
 800d878:	460b      	mov	r3, r1
 800d87a:	4650      	mov	r0, sl
 800d87c:	4659      	mov	r1, fp
 800d87e:	f7f2 fd35 	bl	80002ec <__adddf3>
 800d882:	2d0f      	cmp	r5, #15
 800d884:	4682      	mov	sl, r0
 800d886:	468b      	mov	fp, r1
 800d888:	ddd5      	ble.n	800d836 <_strtod_l+0x3ae>
 800d88a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d88c:	1b2c      	subs	r4, r5, r4
 800d88e:	441c      	add	r4, r3
 800d890:	2c00      	cmp	r4, #0
 800d892:	f340 8096 	ble.w	800d9c2 <_strtod_l+0x53a>
 800d896:	f014 030f 	ands.w	r3, r4, #15
 800d89a:	d00a      	beq.n	800d8b2 <_strtod_l+0x42a>
 800d89c:	495e      	ldr	r1, [pc, #376]	@ (800da18 <_strtod_l+0x590>)
 800d89e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d8a2:	4652      	mov	r2, sl
 800d8a4:	465b      	mov	r3, fp
 800d8a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8aa:	f7f2 fed5 	bl	8000658 <__aeabi_dmul>
 800d8ae:	4682      	mov	sl, r0
 800d8b0:	468b      	mov	fp, r1
 800d8b2:	f034 040f 	bics.w	r4, r4, #15
 800d8b6:	d073      	beq.n	800d9a0 <_strtod_l+0x518>
 800d8b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d8bc:	dd48      	ble.n	800d950 <_strtod_l+0x4c8>
 800d8be:	2400      	movs	r4, #0
 800d8c0:	46a0      	mov	r8, r4
 800d8c2:	940a      	str	r4, [sp, #40]	@ 0x28
 800d8c4:	46a1      	mov	r9, r4
 800d8c6:	9a05      	ldr	r2, [sp, #20]
 800d8c8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800da20 <_strtod_l+0x598>
 800d8cc:	2322      	movs	r3, #34	@ 0x22
 800d8ce:	6013      	str	r3, [r2, #0]
 800d8d0:	f04f 0a00 	mov.w	sl, #0
 800d8d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	f43f ae0f 	beq.w	800d4fa <_strtod_l+0x72>
 800d8dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d8de:	9805      	ldr	r0, [sp, #20]
 800d8e0:	f7ff f942 	bl	800cb68 <_Bfree>
 800d8e4:	9805      	ldr	r0, [sp, #20]
 800d8e6:	4649      	mov	r1, r9
 800d8e8:	f7ff f93e 	bl	800cb68 <_Bfree>
 800d8ec:	9805      	ldr	r0, [sp, #20]
 800d8ee:	4641      	mov	r1, r8
 800d8f0:	f7ff f93a 	bl	800cb68 <_Bfree>
 800d8f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d8f6:	9805      	ldr	r0, [sp, #20]
 800d8f8:	f7ff f936 	bl	800cb68 <_Bfree>
 800d8fc:	9805      	ldr	r0, [sp, #20]
 800d8fe:	4621      	mov	r1, r4
 800d900:	f7ff f932 	bl	800cb68 <_Bfree>
 800d904:	e5f9      	b.n	800d4fa <_strtod_l+0x72>
 800d906:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d908:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d90c:	4293      	cmp	r3, r2
 800d90e:	dbbc      	blt.n	800d88a <_strtod_l+0x402>
 800d910:	4c41      	ldr	r4, [pc, #260]	@ (800da18 <_strtod_l+0x590>)
 800d912:	f1c5 050f 	rsb	r5, r5, #15
 800d916:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d91a:	4652      	mov	r2, sl
 800d91c:	465b      	mov	r3, fp
 800d91e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d922:	f7f2 fe99 	bl	8000658 <__aeabi_dmul>
 800d926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d928:	1b5d      	subs	r5, r3, r5
 800d92a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d92e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d932:	e78f      	b.n	800d854 <_strtod_l+0x3cc>
 800d934:	3316      	adds	r3, #22
 800d936:	dba8      	blt.n	800d88a <_strtod_l+0x402>
 800d938:	4b37      	ldr	r3, [pc, #220]	@ (800da18 <_strtod_l+0x590>)
 800d93a:	eba9 0808 	sub.w	r8, r9, r8
 800d93e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d942:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d946:	4650      	mov	r0, sl
 800d948:	4659      	mov	r1, fp
 800d94a:	f7f2 ffaf 	bl	80008ac <__aeabi_ddiv>
 800d94e:	e783      	b.n	800d858 <_strtod_l+0x3d0>
 800d950:	4b32      	ldr	r3, [pc, #200]	@ (800da1c <_strtod_l+0x594>)
 800d952:	9308      	str	r3, [sp, #32]
 800d954:	2300      	movs	r3, #0
 800d956:	1124      	asrs	r4, r4, #4
 800d958:	4650      	mov	r0, sl
 800d95a:	4659      	mov	r1, fp
 800d95c:	461e      	mov	r6, r3
 800d95e:	2c01      	cmp	r4, #1
 800d960:	dc21      	bgt.n	800d9a6 <_strtod_l+0x51e>
 800d962:	b10b      	cbz	r3, 800d968 <_strtod_l+0x4e0>
 800d964:	4682      	mov	sl, r0
 800d966:	468b      	mov	fp, r1
 800d968:	492c      	ldr	r1, [pc, #176]	@ (800da1c <_strtod_l+0x594>)
 800d96a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d96e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d972:	4652      	mov	r2, sl
 800d974:	465b      	mov	r3, fp
 800d976:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d97a:	f7f2 fe6d 	bl	8000658 <__aeabi_dmul>
 800d97e:	4b28      	ldr	r3, [pc, #160]	@ (800da20 <_strtod_l+0x598>)
 800d980:	460a      	mov	r2, r1
 800d982:	400b      	ands	r3, r1
 800d984:	4927      	ldr	r1, [pc, #156]	@ (800da24 <_strtod_l+0x59c>)
 800d986:	428b      	cmp	r3, r1
 800d988:	4682      	mov	sl, r0
 800d98a:	d898      	bhi.n	800d8be <_strtod_l+0x436>
 800d98c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d990:	428b      	cmp	r3, r1
 800d992:	bf86      	itte	hi
 800d994:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800da28 <_strtod_l+0x5a0>
 800d998:	f04f 3aff 	movhi.w	sl, #4294967295
 800d99c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	9308      	str	r3, [sp, #32]
 800d9a4:	e07a      	b.n	800da9c <_strtod_l+0x614>
 800d9a6:	07e2      	lsls	r2, r4, #31
 800d9a8:	d505      	bpl.n	800d9b6 <_strtod_l+0x52e>
 800d9aa:	9b08      	ldr	r3, [sp, #32]
 800d9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b0:	f7f2 fe52 	bl	8000658 <__aeabi_dmul>
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	9a08      	ldr	r2, [sp, #32]
 800d9b8:	3208      	adds	r2, #8
 800d9ba:	3601      	adds	r6, #1
 800d9bc:	1064      	asrs	r4, r4, #1
 800d9be:	9208      	str	r2, [sp, #32]
 800d9c0:	e7cd      	b.n	800d95e <_strtod_l+0x4d6>
 800d9c2:	d0ed      	beq.n	800d9a0 <_strtod_l+0x518>
 800d9c4:	4264      	negs	r4, r4
 800d9c6:	f014 020f 	ands.w	r2, r4, #15
 800d9ca:	d00a      	beq.n	800d9e2 <_strtod_l+0x55a>
 800d9cc:	4b12      	ldr	r3, [pc, #72]	@ (800da18 <_strtod_l+0x590>)
 800d9ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9d2:	4650      	mov	r0, sl
 800d9d4:	4659      	mov	r1, fp
 800d9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9da:	f7f2 ff67 	bl	80008ac <__aeabi_ddiv>
 800d9de:	4682      	mov	sl, r0
 800d9e0:	468b      	mov	fp, r1
 800d9e2:	1124      	asrs	r4, r4, #4
 800d9e4:	d0dc      	beq.n	800d9a0 <_strtod_l+0x518>
 800d9e6:	2c1f      	cmp	r4, #31
 800d9e8:	dd20      	ble.n	800da2c <_strtod_l+0x5a4>
 800d9ea:	2400      	movs	r4, #0
 800d9ec:	46a0      	mov	r8, r4
 800d9ee:	940a      	str	r4, [sp, #40]	@ 0x28
 800d9f0:	46a1      	mov	r9, r4
 800d9f2:	9a05      	ldr	r2, [sp, #20]
 800d9f4:	2322      	movs	r3, #34	@ 0x22
 800d9f6:	f04f 0a00 	mov.w	sl, #0
 800d9fa:	f04f 0b00 	mov.w	fp, #0
 800d9fe:	6013      	str	r3, [r2, #0]
 800da00:	e768      	b.n	800d8d4 <_strtod_l+0x44c>
 800da02:	bf00      	nop
 800da04:	0800f79d 	.word	0x0800f79d
 800da08:	0800f9b4 	.word	0x0800f9b4
 800da0c:	0800f795 	.word	0x0800f795
 800da10:	0800f7cc 	.word	0x0800f7cc
 800da14:	0800fb5d 	.word	0x0800fb5d
 800da18:	0800f8e8 	.word	0x0800f8e8
 800da1c:	0800f8c0 	.word	0x0800f8c0
 800da20:	7ff00000 	.word	0x7ff00000
 800da24:	7ca00000 	.word	0x7ca00000
 800da28:	7fefffff 	.word	0x7fefffff
 800da2c:	f014 0310 	ands.w	r3, r4, #16
 800da30:	bf18      	it	ne
 800da32:	236a      	movne	r3, #106	@ 0x6a
 800da34:	4ea9      	ldr	r6, [pc, #676]	@ (800dcdc <_strtod_l+0x854>)
 800da36:	9308      	str	r3, [sp, #32]
 800da38:	4650      	mov	r0, sl
 800da3a:	4659      	mov	r1, fp
 800da3c:	2300      	movs	r3, #0
 800da3e:	07e2      	lsls	r2, r4, #31
 800da40:	d504      	bpl.n	800da4c <_strtod_l+0x5c4>
 800da42:	e9d6 2300 	ldrd	r2, r3, [r6]
 800da46:	f7f2 fe07 	bl	8000658 <__aeabi_dmul>
 800da4a:	2301      	movs	r3, #1
 800da4c:	1064      	asrs	r4, r4, #1
 800da4e:	f106 0608 	add.w	r6, r6, #8
 800da52:	d1f4      	bne.n	800da3e <_strtod_l+0x5b6>
 800da54:	b10b      	cbz	r3, 800da5a <_strtod_l+0x5d2>
 800da56:	4682      	mov	sl, r0
 800da58:	468b      	mov	fp, r1
 800da5a:	9b08      	ldr	r3, [sp, #32]
 800da5c:	b1b3      	cbz	r3, 800da8c <_strtod_l+0x604>
 800da5e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800da62:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800da66:	2b00      	cmp	r3, #0
 800da68:	4659      	mov	r1, fp
 800da6a:	dd0f      	ble.n	800da8c <_strtod_l+0x604>
 800da6c:	2b1f      	cmp	r3, #31
 800da6e:	dd55      	ble.n	800db1c <_strtod_l+0x694>
 800da70:	2b34      	cmp	r3, #52	@ 0x34
 800da72:	bfde      	ittt	le
 800da74:	f04f 33ff 	movle.w	r3, #4294967295
 800da78:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800da7c:	4093      	lslle	r3, r2
 800da7e:	f04f 0a00 	mov.w	sl, #0
 800da82:	bfcc      	ite	gt
 800da84:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800da88:	ea03 0b01 	andle.w	fp, r3, r1
 800da8c:	2200      	movs	r2, #0
 800da8e:	2300      	movs	r3, #0
 800da90:	4650      	mov	r0, sl
 800da92:	4659      	mov	r1, fp
 800da94:	f7f3 f848 	bl	8000b28 <__aeabi_dcmpeq>
 800da98:	2800      	cmp	r0, #0
 800da9a:	d1a6      	bne.n	800d9ea <_strtod_l+0x562>
 800da9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da9e:	9300      	str	r3, [sp, #0]
 800daa0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800daa2:	9805      	ldr	r0, [sp, #20]
 800daa4:	462b      	mov	r3, r5
 800daa6:	463a      	mov	r2, r7
 800daa8:	f7ff f8c6 	bl	800cc38 <__s2b>
 800daac:	900a      	str	r0, [sp, #40]	@ 0x28
 800daae:	2800      	cmp	r0, #0
 800dab0:	f43f af05 	beq.w	800d8be <_strtod_l+0x436>
 800dab4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dab6:	2a00      	cmp	r2, #0
 800dab8:	eba9 0308 	sub.w	r3, r9, r8
 800dabc:	bfa8      	it	ge
 800dabe:	2300      	movge	r3, #0
 800dac0:	9312      	str	r3, [sp, #72]	@ 0x48
 800dac2:	2400      	movs	r4, #0
 800dac4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dac8:	9316      	str	r3, [sp, #88]	@ 0x58
 800daca:	46a0      	mov	r8, r4
 800dacc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dace:	9805      	ldr	r0, [sp, #20]
 800dad0:	6859      	ldr	r1, [r3, #4]
 800dad2:	f7ff f809 	bl	800cae8 <_Balloc>
 800dad6:	4681      	mov	r9, r0
 800dad8:	2800      	cmp	r0, #0
 800dada:	f43f aef4 	beq.w	800d8c6 <_strtod_l+0x43e>
 800dade:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dae0:	691a      	ldr	r2, [r3, #16]
 800dae2:	3202      	adds	r2, #2
 800dae4:	f103 010c 	add.w	r1, r3, #12
 800dae8:	0092      	lsls	r2, r2, #2
 800daea:	300c      	adds	r0, #12
 800daec:	f7fe f89b 	bl	800bc26 <memcpy>
 800daf0:	ec4b ab10 	vmov	d0, sl, fp
 800daf4:	9805      	ldr	r0, [sp, #20]
 800daf6:	aa1c      	add	r2, sp, #112	@ 0x70
 800daf8:	a91b      	add	r1, sp, #108	@ 0x6c
 800dafa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800dafe:	f7ff fbd7 	bl	800d2b0 <__d2b>
 800db02:	901a      	str	r0, [sp, #104]	@ 0x68
 800db04:	2800      	cmp	r0, #0
 800db06:	f43f aede 	beq.w	800d8c6 <_strtod_l+0x43e>
 800db0a:	9805      	ldr	r0, [sp, #20]
 800db0c:	2101      	movs	r1, #1
 800db0e:	f7ff f929 	bl	800cd64 <__i2b>
 800db12:	4680      	mov	r8, r0
 800db14:	b948      	cbnz	r0, 800db2a <_strtod_l+0x6a2>
 800db16:	f04f 0800 	mov.w	r8, #0
 800db1a:	e6d4      	b.n	800d8c6 <_strtod_l+0x43e>
 800db1c:	f04f 32ff 	mov.w	r2, #4294967295
 800db20:	fa02 f303 	lsl.w	r3, r2, r3
 800db24:	ea03 0a0a 	and.w	sl, r3, sl
 800db28:	e7b0      	b.n	800da8c <_strtod_l+0x604>
 800db2a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800db2c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800db2e:	2d00      	cmp	r5, #0
 800db30:	bfab      	itete	ge
 800db32:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800db34:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800db36:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800db38:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800db3a:	bfac      	ite	ge
 800db3c:	18ef      	addge	r7, r5, r3
 800db3e:	1b5e      	sublt	r6, r3, r5
 800db40:	9b08      	ldr	r3, [sp, #32]
 800db42:	1aed      	subs	r5, r5, r3
 800db44:	4415      	add	r5, r2
 800db46:	4b66      	ldr	r3, [pc, #408]	@ (800dce0 <_strtod_l+0x858>)
 800db48:	3d01      	subs	r5, #1
 800db4a:	429d      	cmp	r5, r3
 800db4c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800db50:	da50      	bge.n	800dbf4 <_strtod_l+0x76c>
 800db52:	1b5b      	subs	r3, r3, r5
 800db54:	2b1f      	cmp	r3, #31
 800db56:	eba2 0203 	sub.w	r2, r2, r3
 800db5a:	f04f 0101 	mov.w	r1, #1
 800db5e:	dc3d      	bgt.n	800dbdc <_strtod_l+0x754>
 800db60:	fa01 f303 	lsl.w	r3, r1, r3
 800db64:	9313      	str	r3, [sp, #76]	@ 0x4c
 800db66:	2300      	movs	r3, #0
 800db68:	9310      	str	r3, [sp, #64]	@ 0x40
 800db6a:	18bd      	adds	r5, r7, r2
 800db6c:	9b08      	ldr	r3, [sp, #32]
 800db6e:	42af      	cmp	r7, r5
 800db70:	4416      	add	r6, r2
 800db72:	441e      	add	r6, r3
 800db74:	463b      	mov	r3, r7
 800db76:	bfa8      	it	ge
 800db78:	462b      	movge	r3, r5
 800db7a:	42b3      	cmp	r3, r6
 800db7c:	bfa8      	it	ge
 800db7e:	4633      	movge	r3, r6
 800db80:	2b00      	cmp	r3, #0
 800db82:	bfc2      	ittt	gt
 800db84:	1aed      	subgt	r5, r5, r3
 800db86:	1af6      	subgt	r6, r6, r3
 800db88:	1aff      	subgt	r7, r7, r3
 800db8a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	dd16      	ble.n	800dbbe <_strtod_l+0x736>
 800db90:	4641      	mov	r1, r8
 800db92:	9805      	ldr	r0, [sp, #20]
 800db94:	461a      	mov	r2, r3
 800db96:	f7ff f9a5 	bl	800cee4 <__pow5mult>
 800db9a:	4680      	mov	r8, r0
 800db9c:	2800      	cmp	r0, #0
 800db9e:	d0ba      	beq.n	800db16 <_strtod_l+0x68e>
 800dba0:	4601      	mov	r1, r0
 800dba2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dba4:	9805      	ldr	r0, [sp, #20]
 800dba6:	f7ff f8f3 	bl	800cd90 <__multiply>
 800dbaa:	900e      	str	r0, [sp, #56]	@ 0x38
 800dbac:	2800      	cmp	r0, #0
 800dbae:	f43f ae8a 	beq.w	800d8c6 <_strtod_l+0x43e>
 800dbb2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dbb4:	9805      	ldr	r0, [sp, #20]
 800dbb6:	f7fe ffd7 	bl	800cb68 <_Bfree>
 800dbba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dbbc:	931a      	str	r3, [sp, #104]	@ 0x68
 800dbbe:	2d00      	cmp	r5, #0
 800dbc0:	dc1d      	bgt.n	800dbfe <_strtod_l+0x776>
 800dbc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	dd23      	ble.n	800dc10 <_strtod_l+0x788>
 800dbc8:	4649      	mov	r1, r9
 800dbca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800dbcc:	9805      	ldr	r0, [sp, #20]
 800dbce:	f7ff f989 	bl	800cee4 <__pow5mult>
 800dbd2:	4681      	mov	r9, r0
 800dbd4:	b9e0      	cbnz	r0, 800dc10 <_strtod_l+0x788>
 800dbd6:	f04f 0900 	mov.w	r9, #0
 800dbda:	e674      	b.n	800d8c6 <_strtod_l+0x43e>
 800dbdc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800dbe0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800dbe4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800dbe8:	35e2      	adds	r5, #226	@ 0xe2
 800dbea:	fa01 f305 	lsl.w	r3, r1, r5
 800dbee:	9310      	str	r3, [sp, #64]	@ 0x40
 800dbf0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800dbf2:	e7ba      	b.n	800db6a <_strtod_l+0x6e2>
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	9310      	str	r3, [sp, #64]	@ 0x40
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dbfc:	e7b5      	b.n	800db6a <_strtod_l+0x6e2>
 800dbfe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc00:	9805      	ldr	r0, [sp, #20]
 800dc02:	462a      	mov	r2, r5
 800dc04:	f7ff f9c8 	bl	800cf98 <__lshift>
 800dc08:	901a      	str	r0, [sp, #104]	@ 0x68
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	d1d9      	bne.n	800dbc2 <_strtod_l+0x73a>
 800dc0e:	e65a      	b.n	800d8c6 <_strtod_l+0x43e>
 800dc10:	2e00      	cmp	r6, #0
 800dc12:	dd07      	ble.n	800dc24 <_strtod_l+0x79c>
 800dc14:	4649      	mov	r1, r9
 800dc16:	9805      	ldr	r0, [sp, #20]
 800dc18:	4632      	mov	r2, r6
 800dc1a:	f7ff f9bd 	bl	800cf98 <__lshift>
 800dc1e:	4681      	mov	r9, r0
 800dc20:	2800      	cmp	r0, #0
 800dc22:	d0d8      	beq.n	800dbd6 <_strtod_l+0x74e>
 800dc24:	2f00      	cmp	r7, #0
 800dc26:	dd08      	ble.n	800dc3a <_strtod_l+0x7b2>
 800dc28:	4641      	mov	r1, r8
 800dc2a:	9805      	ldr	r0, [sp, #20]
 800dc2c:	463a      	mov	r2, r7
 800dc2e:	f7ff f9b3 	bl	800cf98 <__lshift>
 800dc32:	4680      	mov	r8, r0
 800dc34:	2800      	cmp	r0, #0
 800dc36:	f43f ae46 	beq.w	800d8c6 <_strtod_l+0x43e>
 800dc3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc3c:	9805      	ldr	r0, [sp, #20]
 800dc3e:	464a      	mov	r2, r9
 800dc40:	f7ff fa32 	bl	800d0a8 <__mdiff>
 800dc44:	4604      	mov	r4, r0
 800dc46:	2800      	cmp	r0, #0
 800dc48:	f43f ae3d 	beq.w	800d8c6 <_strtod_l+0x43e>
 800dc4c:	68c3      	ldr	r3, [r0, #12]
 800dc4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dc50:	2300      	movs	r3, #0
 800dc52:	60c3      	str	r3, [r0, #12]
 800dc54:	4641      	mov	r1, r8
 800dc56:	f7ff fa0b 	bl	800d070 <__mcmp>
 800dc5a:	2800      	cmp	r0, #0
 800dc5c:	da46      	bge.n	800dcec <_strtod_l+0x864>
 800dc5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc60:	ea53 030a 	orrs.w	r3, r3, sl
 800dc64:	d16c      	bne.n	800dd40 <_strtod_l+0x8b8>
 800dc66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d168      	bne.n	800dd40 <_strtod_l+0x8b8>
 800dc6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dc72:	0d1b      	lsrs	r3, r3, #20
 800dc74:	051b      	lsls	r3, r3, #20
 800dc76:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dc7a:	d961      	bls.n	800dd40 <_strtod_l+0x8b8>
 800dc7c:	6963      	ldr	r3, [r4, #20]
 800dc7e:	b913      	cbnz	r3, 800dc86 <_strtod_l+0x7fe>
 800dc80:	6923      	ldr	r3, [r4, #16]
 800dc82:	2b01      	cmp	r3, #1
 800dc84:	dd5c      	ble.n	800dd40 <_strtod_l+0x8b8>
 800dc86:	4621      	mov	r1, r4
 800dc88:	2201      	movs	r2, #1
 800dc8a:	9805      	ldr	r0, [sp, #20]
 800dc8c:	f7ff f984 	bl	800cf98 <__lshift>
 800dc90:	4641      	mov	r1, r8
 800dc92:	4604      	mov	r4, r0
 800dc94:	f7ff f9ec 	bl	800d070 <__mcmp>
 800dc98:	2800      	cmp	r0, #0
 800dc9a:	dd51      	ble.n	800dd40 <_strtod_l+0x8b8>
 800dc9c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dca0:	9a08      	ldr	r2, [sp, #32]
 800dca2:	0d1b      	lsrs	r3, r3, #20
 800dca4:	051b      	lsls	r3, r3, #20
 800dca6:	2a00      	cmp	r2, #0
 800dca8:	d06b      	beq.n	800dd82 <_strtod_l+0x8fa>
 800dcaa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dcae:	d868      	bhi.n	800dd82 <_strtod_l+0x8fa>
 800dcb0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dcb4:	f67f ae9d 	bls.w	800d9f2 <_strtod_l+0x56a>
 800dcb8:	4b0a      	ldr	r3, [pc, #40]	@ (800dce4 <_strtod_l+0x85c>)
 800dcba:	4650      	mov	r0, sl
 800dcbc:	4659      	mov	r1, fp
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	f7f2 fcca 	bl	8000658 <__aeabi_dmul>
 800dcc4:	4b08      	ldr	r3, [pc, #32]	@ (800dce8 <_strtod_l+0x860>)
 800dcc6:	400b      	ands	r3, r1
 800dcc8:	4682      	mov	sl, r0
 800dcca:	468b      	mov	fp, r1
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	f47f ae05 	bne.w	800d8dc <_strtod_l+0x454>
 800dcd2:	9a05      	ldr	r2, [sp, #20]
 800dcd4:	2322      	movs	r3, #34	@ 0x22
 800dcd6:	6013      	str	r3, [r2, #0]
 800dcd8:	e600      	b.n	800d8dc <_strtod_l+0x454>
 800dcda:	bf00      	nop
 800dcdc:	0800f9e0 	.word	0x0800f9e0
 800dce0:	fffffc02 	.word	0xfffffc02
 800dce4:	39500000 	.word	0x39500000
 800dce8:	7ff00000 	.word	0x7ff00000
 800dcec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800dcf0:	d165      	bne.n	800ddbe <_strtod_l+0x936>
 800dcf2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dcf4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dcf8:	b35a      	cbz	r2, 800dd52 <_strtod_l+0x8ca>
 800dcfa:	4a9f      	ldr	r2, [pc, #636]	@ (800df78 <_strtod_l+0xaf0>)
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	d12b      	bne.n	800dd58 <_strtod_l+0x8d0>
 800dd00:	9b08      	ldr	r3, [sp, #32]
 800dd02:	4651      	mov	r1, sl
 800dd04:	b303      	cbz	r3, 800dd48 <_strtod_l+0x8c0>
 800dd06:	4b9d      	ldr	r3, [pc, #628]	@ (800df7c <_strtod_l+0xaf4>)
 800dd08:	465a      	mov	r2, fp
 800dd0a:	4013      	ands	r3, r2
 800dd0c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800dd10:	f04f 32ff 	mov.w	r2, #4294967295
 800dd14:	d81b      	bhi.n	800dd4e <_strtod_l+0x8c6>
 800dd16:	0d1b      	lsrs	r3, r3, #20
 800dd18:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dd1c:	fa02 f303 	lsl.w	r3, r2, r3
 800dd20:	4299      	cmp	r1, r3
 800dd22:	d119      	bne.n	800dd58 <_strtod_l+0x8d0>
 800dd24:	4b96      	ldr	r3, [pc, #600]	@ (800df80 <_strtod_l+0xaf8>)
 800dd26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d102      	bne.n	800dd32 <_strtod_l+0x8aa>
 800dd2c:	3101      	adds	r1, #1
 800dd2e:	f43f adca 	beq.w	800d8c6 <_strtod_l+0x43e>
 800dd32:	4b92      	ldr	r3, [pc, #584]	@ (800df7c <_strtod_l+0xaf4>)
 800dd34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd36:	401a      	ands	r2, r3
 800dd38:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800dd3c:	f04f 0a00 	mov.w	sl, #0
 800dd40:	9b08      	ldr	r3, [sp, #32]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d1b8      	bne.n	800dcb8 <_strtod_l+0x830>
 800dd46:	e5c9      	b.n	800d8dc <_strtod_l+0x454>
 800dd48:	f04f 33ff 	mov.w	r3, #4294967295
 800dd4c:	e7e8      	b.n	800dd20 <_strtod_l+0x898>
 800dd4e:	4613      	mov	r3, r2
 800dd50:	e7e6      	b.n	800dd20 <_strtod_l+0x898>
 800dd52:	ea53 030a 	orrs.w	r3, r3, sl
 800dd56:	d0a1      	beq.n	800dc9c <_strtod_l+0x814>
 800dd58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dd5a:	b1db      	cbz	r3, 800dd94 <_strtod_l+0x90c>
 800dd5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd5e:	4213      	tst	r3, r2
 800dd60:	d0ee      	beq.n	800dd40 <_strtod_l+0x8b8>
 800dd62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd64:	9a08      	ldr	r2, [sp, #32]
 800dd66:	4650      	mov	r0, sl
 800dd68:	4659      	mov	r1, fp
 800dd6a:	b1bb      	cbz	r3, 800dd9c <_strtod_l+0x914>
 800dd6c:	f7ff fb6e 	bl	800d44c <sulp>
 800dd70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd74:	ec53 2b10 	vmov	r2, r3, d0
 800dd78:	f7f2 fab8 	bl	80002ec <__adddf3>
 800dd7c:	4682      	mov	sl, r0
 800dd7e:	468b      	mov	fp, r1
 800dd80:	e7de      	b.n	800dd40 <_strtod_l+0x8b8>
 800dd82:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dd86:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dd8a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dd8e:	f04f 3aff 	mov.w	sl, #4294967295
 800dd92:	e7d5      	b.n	800dd40 <_strtod_l+0x8b8>
 800dd94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dd96:	ea13 0f0a 	tst.w	r3, sl
 800dd9a:	e7e1      	b.n	800dd60 <_strtod_l+0x8d8>
 800dd9c:	f7ff fb56 	bl	800d44c <sulp>
 800dda0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dda4:	ec53 2b10 	vmov	r2, r3, d0
 800dda8:	f7f2 fa9e 	bl	80002e8 <__aeabi_dsub>
 800ddac:	2200      	movs	r2, #0
 800ddae:	2300      	movs	r3, #0
 800ddb0:	4682      	mov	sl, r0
 800ddb2:	468b      	mov	fp, r1
 800ddb4:	f7f2 feb8 	bl	8000b28 <__aeabi_dcmpeq>
 800ddb8:	2800      	cmp	r0, #0
 800ddba:	d0c1      	beq.n	800dd40 <_strtod_l+0x8b8>
 800ddbc:	e619      	b.n	800d9f2 <_strtod_l+0x56a>
 800ddbe:	4641      	mov	r1, r8
 800ddc0:	4620      	mov	r0, r4
 800ddc2:	f7ff facd 	bl	800d360 <__ratio>
 800ddc6:	ec57 6b10 	vmov	r6, r7, d0
 800ddca:	2200      	movs	r2, #0
 800ddcc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ddd0:	4630      	mov	r0, r6
 800ddd2:	4639      	mov	r1, r7
 800ddd4:	f7f2 febc 	bl	8000b50 <__aeabi_dcmple>
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	d06f      	beq.n	800debc <_strtod_l+0xa34>
 800dddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d17a      	bne.n	800ded8 <_strtod_l+0xa50>
 800dde2:	f1ba 0f00 	cmp.w	sl, #0
 800dde6:	d158      	bne.n	800de9a <_strtod_l+0xa12>
 800dde8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ddea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d15a      	bne.n	800dea8 <_strtod_l+0xa20>
 800ddf2:	4b64      	ldr	r3, [pc, #400]	@ (800df84 <_strtod_l+0xafc>)
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	4630      	mov	r0, r6
 800ddf8:	4639      	mov	r1, r7
 800ddfa:	f7f2 fe9f 	bl	8000b3c <__aeabi_dcmplt>
 800ddfe:	2800      	cmp	r0, #0
 800de00:	d159      	bne.n	800deb6 <_strtod_l+0xa2e>
 800de02:	4630      	mov	r0, r6
 800de04:	4639      	mov	r1, r7
 800de06:	4b60      	ldr	r3, [pc, #384]	@ (800df88 <_strtod_l+0xb00>)
 800de08:	2200      	movs	r2, #0
 800de0a:	f7f2 fc25 	bl	8000658 <__aeabi_dmul>
 800de0e:	4606      	mov	r6, r0
 800de10:	460f      	mov	r7, r1
 800de12:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800de16:	9606      	str	r6, [sp, #24]
 800de18:	9307      	str	r3, [sp, #28]
 800de1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de1e:	4d57      	ldr	r5, [pc, #348]	@ (800df7c <_strtod_l+0xaf4>)
 800de20:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800de24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de26:	401d      	ands	r5, r3
 800de28:	4b58      	ldr	r3, [pc, #352]	@ (800df8c <_strtod_l+0xb04>)
 800de2a:	429d      	cmp	r5, r3
 800de2c:	f040 80b2 	bne.w	800df94 <_strtod_l+0xb0c>
 800de30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de32:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800de36:	ec4b ab10 	vmov	d0, sl, fp
 800de3a:	f7ff f9c9 	bl	800d1d0 <__ulp>
 800de3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de42:	ec51 0b10 	vmov	r0, r1, d0
 800de46:	f7f2 fc07 	bl	8000658 <__aeabi_dmul>
 800de4a:	4652      	mov	r2, sl
 800de4c:	465b      	mov	r3, fp
 800de4e:	f7f2 fa4d 	bl	80002ec <__adddf3>
 800de52:	460b      	mov	r3, r1
 800de54:	4949      	ldr	r1, [pc, #292]	@ (800df7c <_strtod_l+0xaf4>)
 800de56:	4a4e      	ldr	r2, [pc, #312]	@ (800df90 <_strtod_l+0xb08>)
 800de58:	4019      	ands	r1, r3
 800de5a:	4291      	cmp	r1, r2
 800de5c:	4682      	mov	sl, r0
 800de5e:	d942      	bls.n	800dee6 <_strtod_l+0xa5e>
 800de60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800de62:	4b47      	ldr	r3, [pc, #284]	@ (800df80 <_strtod_l+0xaf8>)
 800de64:	429a      	cmp	r2, r3
 800de66:	d103      	bne.n	800de70 <_strtod_l+0x9e8>
 800de68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800de6a:	3301      	adds	r3, #1
 800de6c:	f43f ad2b 	beq.w	800d8c6 <_strtod_l+0x43e>
 800de70:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800df80 <_strtod_l+0xaf8>
 800de74:	f04f 3aff 	mov.w	sl, #4294967295
 800de78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800de7a:	9805      	ldr	r0, [sp, #20]
 800de7c:	f7fe fe74 	bl	800cb68 <_Bfree>
 800de80:	9805      	ldr	r0, [sp, #20]
 800de82:	4649      	mov	r1, r9
 800de84:	f7fe fe70 	bl	800cb68 <_Bfree>
 800de88:	9805      	ldr	r0, [sp, #20]
 800de8a:	4641      	mov	r1, r8
 800de8c:	f7fe fe6c 	bl	800cb68 <_Bfree>
 800de90:	9805      	ldr	r0, [sp, #20]
 800de92:	4621      	mov	r1, r4
 800de94:	f7fe fe68 	bl	800cb68 <_Bfree>
 800de98:	e618      	b.n	800dacc <_strtod_l+0x644>
 800de9a:	f1ba 0f01 	cmp.w	sl, #1
 800de9e:	d103      	bne.n	800dea8 <_strtod_l+0xa20>
 800dea0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	f43f ada5 	beq.w	800d9f2 <_strtod_l+0x56a>
 800dea8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800df58 <_strtod_l+0xad0>
 800deac:	4f35      	ldr	r7, [pc, #212]	@ (800df84 <_strtod_l+0xafc>)
 800deae:	ed8d 7b06 	vstr	d7, [sp, #24]
 800deb2:	2600      	movs	r6, #0
 800deb4:	e7b1      	b.n	800de1a <_strtod_l+0x992>
 800deb6:	4f34      	ldr	r7, [pc, #208]	@ (800df88 <_strtod_l+0xb00>)
 800deb8:	2600      	movs	r6, #0
 800deba:	e7aa      	b.n	800de12 <_strtod_l+0x98a>
 800debc:	4b32      	ldr	r3, [pc, #200]	@ (800df88 <_strtod_l+0xb00>)
 800debe:	4630      	mov	r0, r6
 800dec0:	4639      	mov	r1, r7
 800dec2:	2200      	movs	r2, #0
 800dec4:	f7f2 fbc8 	bl	8000658 <__aeabi_dmul>
 800dec8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800deca:	4606      	mov	r6, r0
 800decc:	460f      	mov	r7, r1
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d09f      	beq.n	800de12 <_strtod_l+0x98a>
 800ded2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ded6:	e7a0      	b.n	800de1a <_strtod_l+0x992>
 800ded8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800df60 <_strtod_l+0xad8>
 800dedc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dee0:	ec57 6b17 	vmov	r6, r7, d7
 800dee4:	e799      	b.n	800de1a <_strtod_l+0x992>
 800dee6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800deea:	9b08      	ldr	r3, [sp, #32]
 800deec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800def0:	2b00      	cmp	r3, #0
 800def2:	d1c1      	bne.n	800de78 <_strtod_l+0x9f0>
 800def4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800def8:	0d1b      	lsrs	r3, r3, #20
 800defa:	051b      	lsls	r3, r3, #20
 800defc:	429d      	cmp	r5, r3
 800defe:	d1bb      	bne.n	800de78 <_strtod_l+0x9f0>
 800df00:	4630      	mov	r0, r6
 800df02:	4639      	mov	r1, r7
 800df04:	f7f2 ff08 	bl	8000d18 <__aeabi_d2lz>
 800df08:	f7f2 fb78 	bl	80005fc <__aeabi_l2d>
 800df0c:	4602      	mov	r2, r0
 800df0e:	460b      	mov	r3, r1
 800df10:	4630      	mov	r0, r6
 800df12:	4639      	mov	r1, r7
 800df14:	f7f2 f9e8 	bl	80002e8 <__aeabi_dsub>
 800df18:	460b      	mov	r3, r1
 800df1a:	4602      	mov	r2, r0
 800df1c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800df20:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800df24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df26:	ea46 060a 	orr.w	r6, r6, sl
 800df2a:	431e      	orrs	r6, r3
 800df2c:	d06f      	beq.n	800e00e <_strtod_l+0xb86>
 800df2e:	a30e      	add	r3, pc, #56	@ (adr r3, 800df68 <_strtod_l+0xae0>)
 800df30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df34:	f7f2 fe02 	bl	8000b3c <__aeabi_dcmplt>
 800df38:	2800      	cmp	r0, #0
 800df3a:	f47f accf 	bne.w	800d8dc <_strtod_l+0x454>
 800df3e:	a30c      	add	r3, pc, #48	@ (adr r3, 800df70 <_strtod_l+0xae8>)
 800df40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df48:	f7f2 fe16 	bl	8000b78 <__aeabi_dcmpgt>
 800df4c:	2800      	cmp	r0, #0
 800df4e:	d093      	beq.n	800de78 <_strtod_l+0x9f0>
 800df50:	e4c4      	b.n	800d8dc <_strtod_l+0x454>
 800df52:	bf00      	nop
 800df54:	f3af 8000 	nop.w
 800df58:	00000000 	.word	0x00000000
 800df5c:	bff00000 	.word	0xbff00000
 800df60:	00000000 	.word	0x00000000
 800df64:	3ff00000 	.word	0x3ff00000
 800df68:	94a03595 	.word	0x94a03595
 800df6c:	3fdfffff 	.word	0x3fdfffff
 800df70:	35afe535 	.word	0x35afe535
 800df74:	3fe00000 	.word	0x3fe00000
 800df78:	000fffff 	.word	0x000fffff
 800df7c:	7ff00000 	.word	0x7ff00000
 800df80:	7fefffff 	.word	0x7fefffff
 800df84:	3ff00000 	.word	0x3ff00000
 800df88:	3fe00000 	.word	0x3fe00000
 800df8c:	7fe00000 	.word	0x7fe00000
 800df90:	7c9fffff 	.word	0x7c9fffff
 800df94:	9b08      	ldr	r3, [sp, #32]
 800df96:	b323      	cbz	r3, 800dfe2 <_strtod_l+0xb5a>
 800df98:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800df9c:	d821      	bhi.n	800dfe2 <_strtod_l+0xb5a>
 800df9e:	a328      	add	r3, pc, #160	@ (adr r3, 800e040 <_strtod_l+0xbb8>)
 800dfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa4:	4630      	mov	r0, r6
 800dfa6:	4639      	mov	r1, r7
 800dfa8:	f7f2 fdd2 	bl	8000b50 <__aeabi_dcmple>
 800dfac:	b1a0      	cbz	r0, 800dfd8 <_strtod_l+0xb50>
 800dfae:	4639      	mov	r1, r7
 800dfb0:	4630      	mov	r0, r6
 800dfb2:	f7f2 fe29 	bl	8000c08 <__aeabi_d2uiz>
 800dfb6:	2801      	cmp	r0, #1
 800dfb8:	bf38      	it	cc
 800dfba:	2001      	movcc	r0, #1
 800dfbc:	f7f2 fad2 	bl	8000564 <__aeabi_ui2d>
 800dfc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfc2:	4606      	mov	r6, r0
 800dfc4:	460f      	mov	r7, r1
 800dfc6:	b9fb      	cbnz	r3, 800e008 <_strtod_l+0xb80>
 800dfc8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dfcc:	9014      	str	r0, [sp, #80]	@ 0x50
 800dfce:	9315      	str	r3, [sp, #84]	@ 0x54
 800dfd0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800dfd4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dfd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dfda:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800dfde:	1b5b      	subs	r3, r3, r5
 800dfe0:	9311      	str	r3, [sp, #68]	@ 0x44
 800dfe2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dfe6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800dfea:	f7ff f8f1 	bl	800d1d0 <__ulp>
 800dfee:	4650      	mov	r0, sl
 800dff0:	ec53 2b10 	vmov	r2, r3, d0
 800dff4:	4659      	mov	r1, fp
 800dff6:	f7f2 fb2f 	bl	8000658 <__aeabi_dmul>
 800dffa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800dffe:	f7f2 f975 	bl	80002ec <__adddf3>
 800e002:	4682      	mov	sl, r0
 800e004:	468b      	mov	fp, r1
 800e006:	e770      	b.n	800deea <_strtod_l+0xa62>
 800e008:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e00c:	e7e0      	b.n	800dfd0 <_strtod_l+0xb48>
 800e00e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e048 <_strtod_l+0xbc0>)
 800e010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e014:	f7f2 fd92 	bl	8000b3c <__aeabi_dcmplt>
 800e018:	e798      	b.n	800df4c <_strtod_l+0xac4>
 800e01a:	2300      	movs	r3, #0
 800e01c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e01e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e020:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e022:	6013      	str	r3, [r2, #0]
 800e024:	f7ff ba6d 	b.w	800d502 <_strtod_l+0x7a>
 800e028:	2a65      	cmp	r2, #101	@ 0x65
 800e02a:	f43f ab66 	beq.w	800d6fa <_strtod_l+0x272>
 800e02e:	2a45      	cmp	r2, #69	@ 0x45
 800e030:	f43f ab63 	beq.w	800d6fa <_strtod_l+0x272>
 800e034:	2301      	movs	r3, #1
 800e036:	f7ff bb9e 	b.w	800d776 <_strtod_l+0x2ee>
 800e03a:	bf00      	nop
 800e03c:	f3af 8000 	nop.w
 800e040:	ffc00000 	.word	0xffc00000
 800e044:	41dfffff 	.word	0x41dfffff
 800e048:	94a03595 	.word	0x94a03595
 800e04c:	3fcfffff 	.word	0x3fcfffff

0800e050 <_strtod_r>:
 800e050:	4b01      	ldr	r3, [pc, #4]	@ (800e058 <_strtod_r+0x8>)
 800e052:	f7ff ba19 	b.w	800d488 <_strtod_l>
 800e056:	bf00      	nop
 800e058:	20000084 	.word	0x20000084

0800e05c <_strtol_l.constprop.0>:
 800e05c:	2b24      	cmp	r3, #36	@ 0x24
 800e05e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e062:	4686      	mov	lr, r0
 800e064:	4690      	mov	r8, r2
 800e066:	d801      	bhi.n	800e06c <_strtol_l.constprop.0+0x10>
 800e068:	2b01      	cmp	r3, #1
 800e06a:	d106      	bne.n	800e07a <_strtol_l.constprop.0+0x1e>
 800e06c:	f7fd fdae 	bl	800bbcc <__errno>
 800e070:	2316      	movs	r3, #22
 800e072:	6003      	str	r3, [r0, #0]
 800e074:	2000      	movs	r0, #0
 800e076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e07a:	4834      	ldr	r0, [pc, #208]	@ (800e14c <_strtol_l.constprop.0+0xf0>)
 800e07c:	460d      	mov	r5, r1
 800e07e:	462a      	mov	r2, r5
 800e080:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e084:	5d06      	ldrb	r6, [r0, r4]
 800e086:	f016 0608 	ands.w	r6, r6, #8
 800e08a:	d1f8      	bne.n	800e07e <_strtol_l.constprop.0+0x22>
 800e08c:	2c2d      	cmp	r4, #45	@ 0x2d
 800e08e:	d12d      	bne.n	800e0ec <_strtol_l.constprop.0+0x90>
 800e090:	782c      	ldrb	r4, [r5, #0]
 800e092:	2601      	movs	r6, #1
 800e094:	1c95      	adds	r5, r2, #2
 800e096:	f033 0210 	bics.w	r2, r3, #16
 800e09a:	d109      	bne.n	800e0b0 <_strtol_l.constprop.0+0x54>
 800e09c:	2c30      	cmp	r4, #48	@ 0x30
 800e09e:	d12a      	bne.n	800e0f6 <_strtol_l.constprop.0+0x9a>
 800e0a0:	782a      	ldrb	r2, [r5, #0]
 800e0a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e0a6:	2a58      	cmp	r2, #88	@ 0x58
 800e0a8:	d125      	bne.n	800e0f6 <_strtol_l.constprop.0+0x9a>
 800e0aa:	786c      	ldrb	r4, [r5, #1]
 800e0ac:	2310      	movs	r3, #16
 800e0ae:	3502      	adds	r5, #2
 800e0b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e0b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	fbbc f9f3 	udiv	r9, ip, r3
 800e0be:	4610      	mov	r0, r2
 800e0c0:	fb03 ca19 	mls	sl, r3, r9, ip
 800e0c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e0c8:	2f09      	cmp	r7, #9
 800e0ca:	d81b      	bhi.n	800e104 <_strtol_l.constprop.0+0xa8>
 800e0cc:	463c      	mov	r4, r7
 800e0ce:	42a3      	cmp	r3, r4
 800e0d0:	dd27      	ble.n	800e122 <_strtol_l.constprop.0+0xc6>
 800e0d2:	1c57      	adds	r7, r2, #1
 800e0d4:	d007      	beq.n	800e0e6 <_strtol_l.constprop.0+0x8a>
 800e0d6:	4581      	cmp	r9, r0
 800e0d8:	d320      	bcc.n	800e11c <_strtol_l.constprop.0+0xc0>
 800e0da:	d101      	bne.n	800e0e0 <_strtol_l.constprop.0+0x84>
 800e0dc:	45a2      	cmp	sl, r4
 800e0de:	db1d      	blt.n	800e11c <_strtol_l.constprop.0+0xc0>
 800e0e0:	fb00 4003 	mla	r0, r0, r3, r4
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e0ea:	e7eb      	b.n	800e0c4 <_strtol_l.constprop.0+0x68>
 800e0ec:	2c2b      	cmp	r4, #43	@ 0x2b
 800e0ee:	bf04      	itt	eq
 800e0f0:	782c      	ldrbeq	r4, [r5, #0]
 800e0f2:	1c95      	addeq	r5, r2, #2
 800e0f4:	e7cf      	b.n	800e096 <_strtol_l.constprop.0+0x3a>
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d1da      	bne.n	800e0b0 <_strtol_l.constprop.0+0x54>
 800e0fa:	2c30      	cmp	r4, #48	@ 0x30
 800e0fc:	bf0c      	ite	eq
 800e0fe:	2308      	moveq	r3, #8
 800e100:	230a      	movne	r3, #10
 800e102:	e7d5      	b.n	800e0b0 <_strtol_l.constprop.0+0x54>
 800e104:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e108:	2f19      	cmp	r7, #25
 800e10a:	d801      	bhi.n	800e110 <_strtol_l.constprop.0+0xb4>
 800e10c:	3c37      	subs	r4, #55	@ 0x37
 800e10e:	e7de      	b.n	800e0ce <_strtol_l.constprop.0+0x72>
 800e110:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e114:	2f19      	cmp	r7, #25
 800e116:	d804      	bhi.n	800e122 <_strtol_l.constprop.0+0xc6>
 800e118:	3c57      	subs	r4, #87	@ 0x57
 800e11a:	e7d8      	b.n	800e0ce <_strtol_l.constprop.0+0x72>
 800e11c:	f04f 32ff 	mov.w	r2, #4294967295
 800e120:	e7e1      	b.n	800e0e6 <_strtol_l.constprop.0+0x8a>
 800e122:	1c53      	adds	r3, r2, #1
 800e124:	d108      	bne.n	800e138 <_strtol_l.constprop.0+0xdc>
 800e126:	2322      	movs	r3, #34	@ 0x22
 800e128:	f8ce 3000 	str.w	r3, [lr]
 800e12c:	4660      	mov	r0, ip
 800e12e:	f1b8 0f00 	cmp.w	r8, #0
 800e132:	d0a0      	beq.n	800e076 <_strtol_l.constprop.0+0x1a>
 800e134:	1e69      	subs	r1, r5, #1
 800e136:	e006      	b.n	800e146 <_strtol_l.constprop.0+0xea>
 800e138:	b106      	cbz	r6, 800e13c <_strtol_l.constprop.0+0xe0>
 800e13a:	4240      	negs	r0, r0
 800e13c:	f1b8 0f00 	cmp.w	r8, #0
 800e140:	d099      	beq.n	800e076 <_strtol_l.constprop.0+0x1a>
 800e142:	2a00      	cmp	r2, #0
 800e144:	d1f6      	bne.n	800e134 <_strtol_l.constprop.0+0xd8>
 800e146:	f8c8 1000 	str.w	r1, [r8]
 800e14a:	e794      	b.n	800e076 <_strtol_l.constprop.0+0x1a>
 800e14c:	0800fa09 	.word	0x0800fa09

0800e150 <_strtol_r>:
 800e150:	f7ff bf84 	b.w	800e05c <_strtol_l.constprop.0>

0800e154 <__ssputs_r>:
 800e154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e158:	688e      	ldr	r6, [r1, #8]
 800e15a:	461f      	mov	r7, r3
 800e15c:	42be      	cmp	r6, r7
 800e15e:	680b      	ldr	r3, [r1, #0]
 800e160:	4682      	mov	sl, r0
 800e162:	460c      	mov	r4, r1
 800e164:	4690      	mov	r8, r2
 800e166:	d82d      	bhi.n	800e1c4 <__ssputs_r+0x70>
 800e168:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e16c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e170:	d026      	beq.n	800e1c0 <__ssputs_r+0x6c>
 800e172:	6965      	ldr	r5, [r4, #20]
 800e174:	6909      	ldr	r1, [r1, #16]
 800e176:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e17a:	eba3 0901 	sub.w	r9, r3, r1
 800e17e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e182:	1c7b      	adds	r3, r7, #1
 800e184:	444b      	add	r3, r9
 800e186:	106d      	asrs	r5, r5, #1
 800e188:	429d      	cmp	r5, r3
 800e18a:	bf38      	it	cc
 800e18c:	461d      	movcc	r5, r3
 800e18e:	0553      	lsls	r3, r2, #21
 800e190:	d527      	bpl.n	800e1e2 <__ssputs_r+0x8e>
 800e192:	4629      	mov	r1, r5
 800e194:	f7fe fc1c 	bl	800c9d0 <_malloc_r>
 800e198:	4606      	mov	r6, r0
 800e19a:	b360      	cbz	r0, 800e1f6 <__ssputs_r+0xa2>
 800e19c:	6921      	ldr	r1, [r4, #16]
 800e19e:	464a      	mov	r2, r9
 800e1a0:	f7fd fd41 	bl	800bc26 <memcpy>
 800e1a4:	89a3      	ldrh	r3, [r4, #12]
 800e1a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e1aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1ae:	81a3      	strh	r3, [r4, #12]
 800e1b0:	6126      	str	r6, [r4, #16]
 800e1b2:	6165      	str	r5, [r4, #20]
 800e1b4:	444e      	add	r6, r9
 800e1b6:	eba5 0509 	sub.w	r5, r5, r9
 800e1ba:	6026      	str	r6, [r4, #0]
 800e1bc:	60a5      	str	r5, [r4, #8]
 800e1be:	463e      	mov	r6, r7
 800e1c0:	42be      	cmp	r6, r7
 800e1c2:	d900      	bls.n	800e1c6 <__ssputs_r+0x72>
 800e1c4:	463e      	mov	r6, r7
 800e1c6:	6820      	ldr	r0, [r4, #0]
 800e1c8:	4632      	mov	r2, r6
 800e1ca:	4641      	mov	r1, r8
 800e1cc:	f000 f9c6 	bl	800e55c <memmove>
 800e1d0:	68a3      	ldr	r3, [r4, #8]
 800e1d2:	1b9b      	subs	r3, r3, r6
 800e1d4:	60a3      	str	r3, [r4, #8]
 800e1d6:	6823      	ldr	r3, [r4, #0]
 800e1d8:	4433      	add	r3, r6
 800e1da:	6023      	str	r3, [r4, #0]
 800e1dc:	2000      	movs	r0, #0
 800e1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1e2:	462a      	mov	r2, r5
 800e1e4:	f000 fd7d 	bl	800ece2 <_realloc_r>
 800e1e8:	4606      	mov	r6, r0
 800e1ea:	2800      	cmp	r0, #0
 800e1ec:	d1e0      	bne.n	800e1b0 <__ssputs_r+0x5c>
 800e1ee:	6921      	ldr	r1, [r4, #16]
 800e1f0:	4650      	mov	r0, sl
 800e1f2:	f7fe fb79 	bl	800c8e8 <_free_r>
 800e1f6:	230c      	movs	r3, #12
 800e1f8:	f8ca 3000 	str.w	r3, [sl]
 800e1fc:	89a3      	ldrh	r3, [r4, #12]
 800e1fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e202:	81a3      	strh	r3, [r4, #12]
 800e204:	f04f 30ff 	mov.w	r0, #4294967295
 800e208:	e7e9      	b.n	800e1de <__ssputs_r+0x8a>
	...

0800e20c <_svfiprintf_r>:
 800e20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e210:	4698      	mov	r8, r3
 800e212:	898b      	ldrh	r3, [r1, #12]
 800e214:	061b      	lsls	r3, r3, #24
 800e216:	b09d      	sub	sp, #116	@ 0x74
 800e218:	4607      	mov	r7, r0
 800e21a:	460d      	mov	r5, r1
 800e21c:	4614      	mov	r4, r2
 800e21e:	d510      	bpl.n	800e242 <_svfiprintf_r+0x36>
 800e220:	690b      	ldr	r3, [r1, #16]
 800e222:	b973      	cbnz	r3, 800e242 <_svfiprintf_r+0x36>
 800e224:	2140      	movs	r1, #64	@ 0x40
 800e226:	f7fe fbd3 	bl	800c9d0 <_malloc_r>
 800e22a:	6028      	str	r0, [r5, #0]
 800e22c:	6128      	str	r0, [r5, #16]
 800e22e:	b930      	cbnz	r0, 800e23e <_svfiprintf_r+0x32>
 800e230:	230c      	movs	r3, #12
 800e232:	603b      	str	r3, [r7, #0]
 800e234:	f04f 30ff 	mov.w	r0, #4294967295
 800e238:	b01d      	add	sp, #116	@ 0x74
 800e23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e23e:	2340      	movs	r3, #64	@ 0x40
 800e240:	616b      	str	r3, [r5, #20]
 800e242:	2300      	movs	r3, #0
 800e244:	9309      	str	r3, [sp, #36]	@ 0x24
 800e246:	2320      	movs	r3, #32
 800e248:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e24c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e250:	2330      	movs	r3, #48	@ 0x30
 800e252:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e3f0 <_svfiprintf_r+0x1e4>
 800e256:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e25a:	f04f 0901 	mov.w	r9, #1
 800e25e:	4623      	mov	r3, r4
 800e260:	469a      	mov	sl, r3
 800e262:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e266:	b10a      	cbz	r2, 800e26c <_svfiprintf_r+0x60>
 800e268:	2a25      	cmp	r2, #37	@ 0x25
 800e26a:	d1f9      	bne.n	800e260 <_svfiprintf_r+0x54>
 800e26c:	ebba 0b04 	subs.w	fp, sl, r4
 800e270:	d00b      	beq.n	800e28a <_svfiprintf_r+0x7e>
 800e272:	465b      	mov	r3, fp
 800e274:	4622      	mov	r2, r4
 800e276:	4629      	mov	r1, r5
 800e278:	4638      	mov	r0, r7
 800e27a:	f7ff ff6b 	bl	800e154 <__ssputs_r>
 800e27e:	3001      	adds	r0, #1
 800e280:	f000 80a7 	beq.w	800e3d2 <_svfiprintf_r+0x1c6>
 800e284:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e286:	445a      	add	r2, fp
 800e288:	9209      	str	r2, [sp, #36]	@ 0x24
 800e28a:	f89a 3000 	ldrb.w	r3, [sl]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	f000 809f 	beq.w	800e3d2 <_svfiprintf_r+0x1c6>
 800e294:	2300      	movs	r3, #0
 800e296:	f04f 32ff 	mov.w	r2, #4294967295
 800e29a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e29e:	f10a 0a01 	add.w	sl, sl, #1
 800e2a2:	9304      	str	r3, [sp, #16]
 800e2a4:	9307      	str	r3, [sp, #28]
 800e2a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e2aa:	931a      	str	r3, [sp, #104]	@ 0x68
 800e2ac:	4654      	mov	r4, sl
 800e2ae:	2205      	movs	r2, #5
 800e2b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2b4:	484e      	ldr	r0, [pc, #312]	@ (800e3f0 <_svfiprintf_r+0x1e4>)
 800e2b6:	f7f1 ffbb 	bl	8000230 <memchr>
 800e2ba:	9a04      	ldr	r2, [sp, #16]
 800e2bc:	b9d8      	cbnz	r0, 800e2f6 <_svfiprintf_r+0xea>
 800e2be:	06d0      	lsls	r0, r2, #27
 800e2c0:	bf44      	itt	mi
 800e2c2:	2320      	movmi	r3, #32
 800e2c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2c8:	0711      	lsls	r1, r2, #28
 800e2ca:	bf44      	itt	mi
 800e2cc:	232b      	movmi	r3, #43	@ 0x2b
 800e2ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2d2:	f89a 3000 	ldrb.w	r3, [sl]
 800e2d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2d8:	d015      	beq.n	800e306 <_svfiprintf_r+0xfa>
 800e2da:	9a07      	ldr	r2, [sp, #28]
 800e2dc:	4654      	mov	r4, sl
 800e2de:	2000      	movs	r0, #0
 800e2e0:	f04f 0c0a 	mov.w	ip, #10
 800e2e4:	4621      	mov	r1, r4
 800e2e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2ea:	3b30      	subs	r3, #48	@ 0x30
 800e2ec:	2b09      	cmp	r3, #9
 800e2ee:	d94b      	bls.n	800e388 <_svfiprintf_r+0x17c>
 800e2f0:	b1b0      	cbz	r0, 800e320 <_svfiprintf_r+0x114>
 800e2f2:	9207      	str	r2, [sp, #28]
 800e2f4:	e014      	b.n	800e320 <_svfiprintf_r+0x114>
 800e2f6:	eba0 0308 	sub.w	r3, r0, r8
 800e2fa:	fa09 f303 	lsl.w	r3, r9, r3
 800e2fe:	4313      	orrs	r3, r2
 800e300:	9304      	str	r3, [sp, #16]
 800e302:	46a2      	mov	sl, r4
 800e304:	e7d2      	b.n	800e2ac <_svfiprintf_r+0xa0>
 800e306:	9b03      	ldr	r3, [sp, #12]
 800e308:	1d19      	adds	r1, r3, #4
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	9103      	str	r1, [sp, #12]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	bfbb      	ittet	lt
 800e312:	425b      	neglt	r3, r3
 800e314:	f042 0202 	orrlt.w	r2, r2, #2
 800e318:	9307      	strge	r3, [sp, #28]
 800e31a:	9307      	strlt	r3, [sp, #28]
 800e31c:	bfb8      	it	lt
 800e31e:	9204      	strlt	r2, [sp, #16]
 800e320:	7823      	ldrb	r3, [r4, #0]
 800e322:	2b2e      	cmp	r3, #46	@ 0x2e
 800e324:	d10a      	bne.n	800e33c <_svfiprintf_r+0x130>
 800e326:	7863      	ldrb	r3, [r4, #1]
 800e328:	2b2a      	cmp	r3, #42	@ 0x2a
 800e32a:	d132      	bne.n	800e392 <_svfiprintf_r+0x186>
 800e32c:	9b03      	ldr	r3, [sp, #12]
 800e32e:	1d1a      	adds	r2, r3, #4
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	9203      	str	r2, [sp, #12]
 800e334:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e338:	3402      	adds	r4, #2
 800e33a:	9305      	str	r3, [sp, #20]
 800e33c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e400 <_svfiprintf_r+0x1f4>
 800e340:	7821      	ldrb	r1, [r4, #0]
 800e342:	2203      	movs	r2, #3
 800e344:	4650      	mov	r0, sl
 800e346:	f7f1 ff73 	bl	8000230 <memchr>
 800e34a:	b138      	cbz	r0, 800e35c <_svfiprintf_r+0x150>
 800e34c:	9b04      	ldr	r3, [sp, #16]
 800e34e:	eba0 000a 	sub.w	r0, r0, sl
 800e352:	2240      	movs	r2, #64	@ 0x40
 800e354:	4082      	lsls	r2, r0
 800e356:	4313      	orrs	r3, r2
 800e358:	3401      	adds	r4, #1
 800e35a:	9304      	str	r3, [sp, #16]
 800e35c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e360:	4824      	ldr	r0, [pc, #144]	@ (800e3f4 <_svfiprintf_r+0x1e8>)
 800e362:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e366:	2206      	movs	r2, #6
 800e368:	f7f1 ff62 	bl	8000230 <memchr>
 800e36c:	2800      	cmp	r0, #0
 800e36e:	d036      	beq.n	800e3de <_svfiprintf_r+0x1d2>
 800e370:	4b21      	ldr	r3, [pc, #132]	@ (800e3f8 <_svfiprintf_r+0x1ec>)
 800e372:	bb1b      	cbnz	r3, 800e3bc <_svfiprintf_r+0x1b0>
 800e374:	9b03      	ldr	r3, [sp, #12]
 800e376:	3307      	adds	r3, #7
 800e378:	f023 0307 	bic.w	r3, r3, #7
 800e37c:	3308      	adds	r3, #8
 800e37e:	9303      	str	r3, [sp, #12]
 800e380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e382:	4433      	add	r3, r6
 800e384:	9309      	str	r3, [sp, #36]	@ 0x24
 800e386:	e76a      	b.n	800e25e <_svfiprintf_r+0x52>
 800e388:	fb0c 3202 	mla	r2, ip, r2, r3
 800e38c:	460c      	mov	r4, r1
 800e38e:	2001      	movs	r0, #1
 800e390:	e7a8      	b.n	800e2e4 <_svfiprintf_r+0xd8>
 800e392:	2300      	movs	r3, #0
 800e394:	3401      	adds	r4, #1
 800e396:	9305      	str	r3, [sp, #20]
 800e398:	4619      	mov	r1, r3
 800e39a:	f04f 0c0a 	mov.w	ip, #10
 800e39e:	4620      	mov	r0, r4
 800e3a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3a4:	3a30      	subs	r2, #48	@ 0x30
 800e3a6:	2a09      	cmp	r2, #9
 800e3a8:	d903      	bls.n	800e3b2 <_svfiprintf_r+0x1a6>
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d0c6      	beq.n	800e33c <_svfiprintf_r+0x130>
 800e3ae:	9105      	str	r1, [sp, #20]
 800e3b0:	e7c4      	b.n	800e33c <_svfiprintf_r+0x130>
 800e3b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	e7f0      	b.n	800e39e <_svfiprintf_r+0x192>
 800e3bc:	ab03      	add	r3, sp, #12
 800e3be:	9300      	str	r3, [sp, #0]
 800e3c0:	462a      	mov	r2, r5
 800e3c2:	4b0e      	ldr	r3, [pc, #56]	@ (800e3fc <_svfiprintf_r+0x1f0>)
 800e3c4:	a904      	add	r1, sp, #16
 800e3c6:	4638      	mov	r0, r7
 800e3c8:	f7fc fc66 	bl	800ac98 <_printf_float>
 800e3cc:	1c42      	adds	r2, r0, #1
 800e3ce:	4606      	mov	r6, r0
 800e3d0:	d1d6      	bne.n	800e380 <_svfiprintf_r+0x174>
 800e3d2:	89ab      	ldrh	r3, [r5, #12]
 800e3d4:	065b      	lsls	r3, r3, #25
 800e3d6:	f53f af2d 	bmi.w	800e234 <_svfiprintf_r+0x28>
 800e3da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e3dc:	e72c      	b.n	800e238 <_svfiprintf_r+0x2c>
 800e3de:	ab03      	add	r3, sp, #12
 800e3e0:	9300      	str	r3, [sp, #0]
 800e3e2:	462a      	mov	r2, r5
 800e3e4:	4b05      	ldr	r3, [pc, #20]	@ (800e3fc <_svfiprintf_r+0x1f0>)
 800e3e6:	a904      	add	r1, sp, #16
 800e3e8:	4638      	mov	r0, r7
 800e3ea:	f7fc feed 	bl	800b1c8 <_printf_i>
 800e3ee:	e7ed      	b.n	800e3cc <_svfiprintf_r+0x1c0>
 800e3f0:	0800fb09 	.word	0x0800fb09
 800e3f4:	0800fb13 	.word	0x0800fb13
 800e3f8:	0800ac99 	.word	0x0800ac99
 800e3fc:	0800e155 	.word	0x0800e155
 800e400:	0800fb0f 	.word	0x0800fb0f

0800e404 <__sflush_r>:
 800e404:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e40c:	0716      	lsls	r6, r2, #28
 800e40e:	4605      	mov	r5, r0
 800e410:	460c      	mov	r4, r1
 800e412:	d454      	bmi.n	800e4be <__sflush_r+0xba>
 800e414:	684b      	ldr	r3, [r1, #4]
 800e416:	2b00      	cmp	r3, #0
 800e418:	dc02      	bgt.n	800e420 <__sflush_r+0x1c>
 800e41a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	dd48      	ble.n	800e4b2 <__sflush_r+0xae>
 800e420:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e422:	2e00      	cmp	r6, #0
 800e424:	d045      	beq.n	800e4b2 <__sflush_r+0xae>
 800e426:	2300      	movs	r3, #0
 800e428:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e42c:	682f      	ldr	r7, [r5, #0]
 800e42e:	6a21      	ldr	r1, [r4, #32]
 800e430:	602b      	str	r3, [r5, #0]
 800e432:	d030      	beq.n	800e496 <__sflush_r+0x92>
 800e434:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e436:	89a3      	ldrh	r3, [r4, #12]
 800e438:	0759      	lsls	r1, r3, #29
 800e43a:	d505      	bpl.n	800e448 <__sflush_r+0x44>
 800e43c:	6863      	ldr	r3, [r4, #4]
 800e43e:	1ad2      	subs	r2, r2, r3
 800e440:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e442:	b10b      	cbz	r3, 800e448 <__sflush_r+0x44>
 800e444:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e446:	1ad2      	subs	r2, r2, r3
 800e448:	2300      	movs	r3, #0
 800e44a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e44c:	6a21      	ldr	r1, [r4, #32]
 800e44e:	4628      	mov	r0, r5
 800e450:	47b0      	blx	r6
 800e452:	1c43      	adds	r3, r0, #1
 800e454:	89a3      	ldrh	r3, [r4, #12]
 800e456:	d106      	bne.n	800e466 <__sflush_r+0x62>
 800e458:	6829      	ldr	r1, [r5, #0]
 800e45a:	291d      	cmp	r1, #29
 800e45c:	d82b      	bhi.n	800e4b6 <__sflush_r+0xb2>
 800e45e:	4a2a      	ldr	r2, [pc, #168]	@ (800e508 <__sflush_r+0x104>)
 800e460:	410a      	asrs	r2, r1
 800e462:	07d6      	lsls	r6, r2, #31
 800e464:	d427      	bmi.n	800e4b6 <__sflush_r+0xb2>
 800e466:	2200      	movs	r2, #0
 800e468:	6062      	str	r2, [r4, #4]
 800e46a:	04d9      	lsls	r1, r3, #19
 800e46c:	6922      	ldr	r2, [r4, #16]
 800e46e:	6022      	str	r2, [r4, #0]
 800e470:	d504      	bpl.n	800e47c <__sflush_r+0x78>
 800e472:	1c42      	adds	r2, r0, #1
 800e474:	d101      	bne.n	800e47a <__sflush_r+0x76>
 800e476:	682b      	ldr	r3, [r5, #0]
 800e478:	b903      	cbnz	r3, 800e47c <__sflush_r+0x78>
 800e47a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e47c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e47e:	602f      	str	r7, [r5, #0]
 800e480:	b1b9      	cbz	r1, 800e4b2 <__sflush_r+0xae>
 800e482:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e486:	4299      	cmp	r1, r3
 800e488:	d002      	beq.n	800e490 <__sflush_r+0x8c>
 800e48a:	4628      	mov	r0, r5
 800e48c:	f7fe fa2c 	bl	800c8e8 <_free_r>
 800e490:	2300      	movs	r3, #0
 800e492:	6363      	str	r3, [r4, #52]	@ 0x34
 800e494:	e00d      	b.n	800e4b2 <__sflush_r+0xae>
 800e496:	2301      	movs	r3, #1
 800e498:	4628      	mov	r0, r5
 800e49a:	47b0      	blx	r6
 800e49c:	4602      	mov	r2, r0
 800e49e:	1c50      	adds	r0, r2, #1
 800e4a0:	d1c9      	bne.n	800e436 <__sflush_r+0x32>
 800e4a2:	682b      	ldr	r3, [r5, #0]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d0c6      	beq.n	800e436 <__sflush_r+0x32>
 800e4a8:	2b1d      	cmp	r3, #29
 800e4aa:	d001      	beq.n	800e4b0 <__sflush_r+0xac>
 800e4ac:	2b16      	cmp	r3, #22
 800e4ae:	d11e      	bne.n	800e4ee <__sflush_r+0xea>
 800e4b0:	602f      	str	r7, [r5, #0]
 800e4b2:	2000      	movs	r0, #0
 800e4b4:	e022      	b.n	800e4fc <__sflush_r+0xf8>
 800e4b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4ba:	b21b      	sxth	r3, r3
 800e4bc:	e01b      	b.n	800e4f6 <__sflush_r+0xf2>
 800e4be:	690f      	ldr	r7, [r1, #16]
 800e4c0:	2f00      	cmp	r7, #0
 800e4c2:	d0f6      	beq.n	800e4b2 <__sflush_r+0xae>
 800e4c4:	0793      	lsls	r3, r2, #30
 800e4c6:	680e      	ldr	r6, [r1, #0]
 800e4c8:	bf08      	it	eq
 800e4ca:	694b      	ldreq	r3, [r1, #20]
 800e4cc:	600f      	str	r7, [r1, #0]
 800e4ce:	bf18      	it	ne
 800e4d0:	2300      	movne	r3, #0
 800e4d2:	eba6 0807 	sub.w	r8, r6, r7
 800e4d6:	608b      	str	r3, [r1, #8]
 800e4d8:	f1b8 0f00 	cmp.w	r8, #0
 800e4dc:	dde9      	ble.n	800e4b2 <__sflush_r+0xae>
 800e4de:	6a21      	ldr	r1, [r4, #32]
 800e4e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e4e2:	4643      	mov	r3, r8
 800e4e4:	463a      	mov	r2, r7
 800e4e6:	4628      	mov	r0, r5
 800e4e8:	47b0      	blx	r6
 800e4ea:	2800      	cmp	r0, #0
 800e4ec:	dc08      	bgt.n	800e500 <__sflush_r+0xfc>
 800e4ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4f6:	81a3      	strh	r3, [r4, #12]
 800e4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e500:	4407      	add	r7, r0
 800e502:	eba8 0800 	sub.w	r8, r8, r0
 800e506:	e7e7      	b.n	800e4d8 <__sflush_r+0xd4>
 800e508:	dfbffffe 	.word	0xdfbffffe

0800e50c <_fflush_r>:
 800e50c:	b538      	push	{r3, r4, r5, lr}
 800e50e:	690b      	ldr	r3, [r1, #16]
 800e510:	4605      	mov	r5, r0
 800e512:	460c      	mov	r4, r1
 800e514:	b913      	cbnz	r3, 800e51c <_fflush_r+0x10>
 800e516:	2500      	movs	r5, #0
 800e518:	4628      	mov	r0, r5
 800e51a:	bd38      	pop	{r3, r4, r5, pc}
 800e51c:	b118      	cbz	r0, 800e526 <_fflush_r+0x1a>
 800e51e:	6a03      	ldr	r3, [r0, #32]
 800e520:	b90b      	cbnz	r3, 800e526 <_fflush_r+0x1a>
 800e522:	f7fd fa11 	bl	800b948 <__sinit>
 800e526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d0f3      	beq.n	800e516 <_fflush_r+0xa>
 800e52e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e530:	07d0      	lsls	r0, r2, #31
 800e532:	d404      	bmi.n	800e53e <_fflush_r+0x32>
 800e534:	0599      	lsls	r1, r3, #22
 800e536:	d402      	bmi.n	800e53e <_fflush_r+0x32>
 800e538:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e53a:	f7fd fb72 	bl	800bc22 <__retarget_lock_acquire_recursive>
 800e53e:	4628      	mov	r0, r5
 800e540:	4621      	mov	r1, r4
 800e542:	f7ff ff5f 	bl	800e404 <__sflush_r>
 800e546:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e548:	07da      	lsls	r2, r3, #31
 800e54a:	4605      	mov	r5, r0
 800e54c:	d4e4      	bmi.n	800e518 <_fflush_r+0xc>
 800e54e:	89a3      	ldrh	r3, [r4, #12]
 800e550:	059b      	lsls	r3, r3, #22
 800e552:	d4e1      	bmi.n	800e518 <_fflush_r+0xc>
 800e554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e556:	f7fd fb65 	bl	800bc24 <__retarget_lock_release_recursive>
 800e55a:	e7dd      	b.n	800e518 <_fflush_r+0xc>

0800e55c <memmove>:
 800e55c:	4288      	cmp	r0, r1
 800e55e:	b510      	push	{r4, lr}
 800e560:	eb01 0402 	add.w	r4, r1, r2
 800e564:	d902      	bls.n	800e56c <memmove+0x10>
 800e566:	4284      	cmp	r4, r0
 800e568:	4623      	mov	r3, r4
 800e56a:	d807      	bhi.n	800e57c <memmove+0x20>
 800e56c:	1e43      	subs	r3, r0, #1
 800e56e:	42a1      	cmp	r1, r4
 800e570:	d008      	beq.n	800e584 <memmove+0x28>
 800e572:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e576:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e57a:	e7f8      	b.n	800e56e <memmove+0x12>
 800e57c:	4402      	add	r2, r0
 800e57e:	4601      	mov	r1, r0
 800e580:	428a      	cmp	r2, r1
 800e582:	d100      	bne.n	800e586 <memmove+0x2a>
 800e584:	bd10      	pop	{r4, pc}
 800e586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e58a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e58e:	e7f7      	b.n	800e580 <memmove+0x24>

0800e590 <strncmp>:
 800e590:	b510      	push	{r4, lr}
 800e592:	b16a      	cbz	r2, 800e5b0 <strncmp+0x20>
 800e594:	3901      	subs	r1, #1
 800e596:	1884      	adds	r4, r0, r2
 800e598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e59c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d103      	bne.n	800e5ac <strncmp+0x1c>
 800e5a4:	42a0      	cmp	r0, r4
 800e5a6:	d001      	beq.n	800e5ac <strncmp+0x1c>
 800e5a8:	2a00      	cmp	r2, #0
 800e5aa:	d1f5      	bne.n	800e598 <strncmp+0x8>
 800e5ac:	1ad0      	subs	r0, r2, r3
 800e5ae:	bd10      	pop	{r4, pc}
 800e5b0:	4610      	mov	r0, r2
 800e5b2:	e7fc      	b.n	800e5ae <strncmp+0x1e>

0800e5b4 <_sbrk_r>:
 800e5b4:	b538      	push	{r3, r4, r5, lr}
 800e5b6:	4d06      	ldr	r5, [pc, #24]	@ (800e5d0 <_sbrk_r+0x1c>)
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	4604      	mov	r4, r0
 800e5bc:	4608      	mov	r0, r1
 800e5be:	602b      	str	r3, [r5, #0]
 800e5c0:	f7f4 fa58 	bl	8002a74 <_sbrk>
 800e5c4:	1c43      	adds	r3, r0, #1
 800e5c6:	d102      	bne.n	800e5ce <_sbrk_r+0x1a>
 800e5c8:	682b      	ldr	r3, [r5, #0]
 800e5ca:	b103      	cbz	r3, 800e5ce <_sbrk_r+0x1a>
 800e5cc:	6023      	str	r3, [r4, #0]
 800e5ce:	bd38      	pop	{r3, r4, r5, pc}
 800e5d0:	200049e4 	.word	0x200049e4
 800e5d4:	00000000 	.word	0x00000000

0800e5d8 <nan>:
 800e5d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e5e0 <nan+0x8>
 800e5dc:	4770      	bx	lr
 800e5de:	bf00      	nop
 800e5e0:	00000000 	.word	0x00000000
 800e5e4:	7ff80000 	.word	0x7ff80000

0800e5e8 <__assert_func>:
 800e5e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5ea:	4614      	mov	r4, r2
 800e5ec:	461a      	mov	r2, r3
 800e5ee:	4b09      	ldr	r3, [pc, #36]	@ (800e614 <__assert_func+0x2c>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	4605      	mov	r5, r0
 800e5f4:	68d8      	ldr	r0, [r3, #12]
 800e5f6:	b954      	cbnz	r4, 800e60e <__assert_func+0x26>
 800e5f8:	4b07      	ldr	r3, [pc, #28]	@ (800e618 <__assert_func+0x30>)
 800e5fa:	461c      	mov	r4, r3
 800e5fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e600:	9100      	str	r1, [sp, #0]
 800e602:	462b      	mov	r3, r5
 800e604:	4905      	ldr	r1, [pc, #20]	@ (800e61c <__assert_func+0x34>)
 800e606:	f000 fba7 	bl	800ed58 <fiprintf>
 800e60a:	f000 fbb7 	bl	800ed7c <abort>
 800e60e:	4b04      	ldr	r3, [pc, #16]	@ (800e620 <__assert_func+0x38>)
 800e610:	e7f4      	b.n	800e5fc <__assert_func+0x14>
 800e612:	bf00      	nop
 800e614:	20000034 	.word	0x20000034
 800e618:	0800fb5d 	.word	0x0800fb5d
 800e61c:	0800fb2f 	.word	0x0800fb2f
 800e620:	0800fb22 	.word	0x0800fb22

0800e624 <_calloc_r>:
 800e624:	b570      	push	{r4, r5, r6, lr}
 800e626:	fba1 5402 	umull	r5, r4, r1, r2
 800e62a:	b93c      	cbnz	r4, 800e63c <_calloc_r+0x18>
 800e62c:	4629      	mov	r1, r5
 800e62e:	f7fe f9cf 	bl	800c9d0 <_malloc_r>
 800e632:	4606      	mov	r6, r0
 800e634:	b928      	cbnz	r0, 800e642 <_calloc_r+0x1e>
 800e636:	2600      	movs	r6, #0
 800e638:	4630      	mov	r0, r6
 800e63a:	bd70      	pop	{r4, r5, r6, pc}
 800e63c:	220c      	movs	r2, #12
 800e63e:	6002      	str	r2, [r0, #0]
 800e640:	e7f9      	b.n	800e636 <_calloc_r+0x12>
 800e642:	462a      	mov	r2, r5
 800e644:	4621      	mov	r1, r4
 800e646:	f7fd fa18 	bl	800ba7a <memset>
 800e64a:	e7f5      	b.n	800e638 <_calloc_r+0x14>

0800e64c <rshift>:
 800e64c:	6903      	ldr	r3, [r0, #16]
 800e64e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e652:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e656:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e65a:	f100 0414 	add.w	r4, r0, #20
 800e65e:	dd45      	ble.n	800e6ec <rshift+0xa0>
 800e660:	f011 011f 	ands.w	r1, r1, #31
 800e664:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e668:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e66c:	d10c      	bne.n	800e688 <rshift+0x3c>
 800e66e:	f100 0710 	add.w	r7, r0, #16
 800e672:	4629      	mov	r1, r5
 800e674:	42b1      	cmp	r1, r6
 800e676:	d334      	bcc.n	800e6e2 <rshift+0x96>
 800e678:	1a9b      	subs	r3, r3, r2
 800e67a:	009b      	lsls	r3, r3, #2
 800e67c:	1eea      	subs	r2, r5, #3
 800e67e:	4296      	cmp	r6, r2
 800e680:	bf38      	it	cc
 800e682:	2300      	movcc	r3, #0
 800e684:	4423      	add	r3, r4
 800e686:	e015      	b.n	800e6b4 <rshift+0x68>
 800e688:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e68c:	f1c1 0820 	rsb	r8, r1, #32
 800e690:	40cf      	lsrs	r7, r1
 800e692:	f105 0e04 	add.w	lr, r5, #4
 800e696:	46a1      	mov	r9, r4
 800e698:	4576      	cmp	r6, lr
 800e69a:	46f4      	mov	ip, lr
 800e69c:	d815      	bhi.n	800e6ca <rshift+0x7e>
 800e69e:	1a9a      	subs	r2, r3, r2
 800e6a0:	0092      	lsls	r2, r2, #2
 800e6a2:	3a04      	subs	r2, #4
 800e6a4:	3501      	adds	r5, #1
 800e6a6:	42ae      	cmp	r6, r5
 800e6a8:	bf38      	it	cc
 800e6aa:	2200      	movcc	r2, #0
 800e6ac:	18a3      	adds	r3, r4, r2
 800e6ae:	50a7      	str	r7, [r4, r2]
 800e6b0:	b107      	cbz	r7, 800e6b4 <rshift+0x68>
 800e6b2:	3304      	adds	r3, #4
 800e6b4:	1b1a      	subs	r2, r3, r4
 800e6b6:	42a3      	cmp	r3, r4
 800e6b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e6bc:	bf08      	it	eq
 800e6be:	2300      	moveq	r3, #0
 800e6c0:	6102      	str	r2, [r0, #16]
 800e6c2:	bf08      	it	eq
 800e6c4:	6143      	streq	r3, [r0, #20]
 800e6c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6ca:	f8dc c000 	ldr.w	ip, [ip]
 800e6ce:	fa0c fc08 	lsl.w	ip, ip, r8
 800e6d2:	ea4c 0707 	orr.w	r7, ip, r7
 800e6d6:	f849 7b04 	str.w	r7, [r9], #4
 800e6da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e6de:	40cf      	lsrs	r7, r1
 800e6e0:	e7da      	b.n	800e698 <rshift+0x4c>
 800e6e2:	f851 cb04 	ldr.w	ip, [r1], #4
 800e6e6:	f847 cf04 	str.w	ip, [r7, #4]!
 800e6ea:	e7c3      	b.n	800e674 <rshift+0x28>
 800e6ec:	4623      	mov	r3, r4
 800e6ee:	e7e1      	b.n	800e6b4 <rshift+0x68>

0800e6f0 <__hexdig_fun>:
 800e6f0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e6f4:	2b09      	cmp	r3, #9
 800e6f6:	d802      	bhi.n	800e6fe <__hexdig_fun+0xe>
 800e6f8:	3820      	subs	r0, #32
 800e6fa:	b2c0      	uxtb	r0, r0
 800e6fc:	4770      	bx	lr
 800e6fe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e702:	2b05      	cmp	r3, #5
 800e704:	d801      	bhi.n	800e70a <__hexdig_fun+0x1a>
 800e706:	3847      	subs	r0, #71	@ 0x47
 800e708:	e7f7      	b.n	800e6fa <__hexdig_fun+0xa>
 800e70a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e70e:	2b05      	cmp	r3, #5
 800e710:	d801      	bhi.n	800e716 <__hexdig_fun+0x26>
 800e712:	3827      	subs	r0, #39	@ 0x27
 800e714:	e7f1      	b.n	800e6fa <__hexdig_fun+0xa>
 800e716:	2000      	movs	r0, #0
 800e718:	4770      	bx	lr
	...

0800e71c <__gethex>:
 800e71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e720:	b085      	sub	sp, #20
 800e722:	468a      	mov	sl, r1
 800e724:	9302      	str	r3, [sp, #8]
 800e726:	680b      	ldr	r3, [r1, #0]
 800e728:	9001      	str	r0, [sp, #4]
 800e72a:	4690      	mov	r8, r2
 800e72c:	1c9c      	adds	r4, r3, #2
 800e72e:	46a1      	mov	r9, r4
 800e730:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e734:	2830      	cmp	r0, #48	@ 0x30
 800e736:	d0fa      	beq.n	800e72e <__gethex+0x12>
 800e738:	eba9 0303 	sub.w	r3, r9, r3
 800e73c:	f1a3 0b02 	sub.w	fp, r3, #2
 800e740:	f7ff ffd6 	bl	800e6f0 <__hexdig_fun>
 800e744:	4605      	mov	r5, r0
 800e746:	2800      	cmp	r0, #0
 800e748:	d168      	bne.n	800e81c <__gethex+0x100>
 800e74a:	49a0      	ldr	r1, [pc, #640]	@ (800e9cc <__gethex+0x2b0>)
 800e74c:	2201      	movs	r2, #1
 800e74e:	4648      	mov	r0, r9
 800e750:	f7ff ff1e 	bl	800e590 <strncmp>
 800e754:	4607      	mov	r7, r0
 800e756:	2800      	cmp	r0, #0
 800e758:	d167      	bne.n	800e82a <__gethex+0x10e>
 800e75a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e75e:	4626      	mov	r6, r4
 800e760:	f7ff ffc6 	bl	800e6f0 <__hexdig_fun>
 800e764:	2800      	cmp	r0, #0
 800e766:	d062      	beq.n	800e82e <__gethex+0x112>
 800e768:	4623      	mov	r3, r4
 800e76a:	7818      	ldrb	r0, [r3, #0]
 800e76c:	2830      	cmp	r0, #48	@ 0x30
 800e76e:	4699      	mov	r9, r3
 800e770:	f103 0301 	add.w	r3, r3, #1
 800e774:	d0f9      	beq.n	800e76a <__gethex+0x4e>
 800e776:	f7ff ffbb 	bl	800e6f0 <__hexdig_fun>
 800e77a:	fab0 f580 	clz	r5, r0
 800e77e:	096d      	lsrs	r5, r5, #5
 800e780:	f04f 0b01 	mov.w	fp, #1
 800e784:	464a      	mov	r2, r9
 800e786:	4616      	mov	r6, r2
 800e788:	3201      	adds	r2, #1
 800e78a:	7830      	ldrb	r0, [r6, #0]
 800e78c:	f7ff ffb0 	bl	800e6f0 <__hexdig_fun>
 800e790:	2800      	cmp	r0, #0
 800e792:	d1f8      	bne.n	800e786 <__gethex+0x6a>
 800e794:	498d      	ldr	r1, [pc, #564]	@ (800e9cc <__gethex+0x2b0>)
 800e796:	2201      	movs	r2, #1
 800e798:	4630      	mov	r0, r6
 800e79a:	f7ff fef9 	bl	800e590 <strncmp>
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	d13f      	bne.n	800e822 <__gethex+0x106>
 800e7a2:	b944      	cbnz	r4, 800e7b6 <__gethex+0x9a>
 800e7a4:	1c74      	adds	r4, r6, #1
 800e7a6:	4622      	mov	r2, r4
 800e7a8:	4616      	mov	r6, r2
 800e7aa:	3201      	adds	r2, #1
 800e7ac:	7830      	ldrb	r0, [r6, #0]
 800e7ae:	f7ff ff9f 	bl	800e6f0 <__hexdig_fun>
 800e7b2:	2800      	cmp	r0, #0
 800e7b4:	d1f8      	bne.n	800e7a8 <__gethex+0x8c>
 800e7b6:	1ba4      	subs	r4, r4, r6
 800e7b8:	00a7      	lsls	r7, r4, #2
 800e7ba:	7833      	ldrb	r3, [r6, #0]
 800e7bc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e7c0:	2b50      	cmp	r3, #80	@ 0x50
 800e7c2:	d13e      	bne.n	800e842 <__gethex+0x126>
 800e7c4:	7873      	ldrb	r3, [r6, #1]
 800e7c6:	2b2b      	cmp	r3, #43	@ 0x2b
 800e7c8:	d033      	beq.n	800e832 <__gethex+0x116>
 800e7ca:	2b2d      	cmp	r3, #45	@ 0x2d
 800e7cc:	d034      	beq.n	800e838 <__gethex+0x11c>
 800e7ce:	1c71      	adds	r1, r6, #1
 800e7d0:	2400      	movs	r4, #0
 800e7d2:	7808      	ldrb	r0, [r1, #0]
 800e7d4:	f7ff ff8c 	bl	800e6f0 <__hexdig_fun>
 800e7d8:	1e43      	subs	r3, r0, #1
 800e7da:	b2db      	uxtb	r3, r3
 800e7dc:	2b18      	cmp	r3, #24
 800e7de:	d830      	bhi.n	800e842 <__gethex+0x126>
 800e7e0:	f1a0 0210 	sub.w	r2, r0, #16
 800e7e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e7e8:	f7ff ff82 	bl	800e6f0 <__hexdig_fun>
 800e7ec:	f100 3cff 	add.w	ip, r0, #4294967295
 800e7f0:	fa5f fc8c 	uxtb.w	ip, ip
 800e7f4:	f1bc 0f18 	cmp.w	ip, #24
 800e7f8:	f04f 030a 	mov.w	r3, #10
 800e7fc:	d91e      	bls.n	800e83c <__gethex+0x120>
 800e7fe:	b104      	cbz	r4, 800e802 <__gethex+0xe6>
 800e800:	4252      	negs	r2, r2
 800e802:	4417      	add	r7, r2
 800e804:	f8ca 1000 	str.w	r1, [sl]
 800e808:	b1ed      	cbz	r5, 800e846 <__gethex+0x12a>
 800e80a:	f1bb 0f00 	cmp.w	fp, #0
 800e80e:	bf0c      	ite	eq
 800e810:	2506      	moveq	r5, #6
 800e812:	2500      	movne	r5, #0
 800e814:	4628      	mov	r0, r5
 800e816:	b005      	add	sp, #20
 800e818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e81c:	2500      	movs	r5, #0
 800e81e:	462c      	mov	r4, r5
 800e820:	e7b0      	b.n	800e784 <__gethex+0x68>
 800e822:	2c00      	cmp	r4, #0
 800e824:	d1c7      	bne.n	800e7b6 <__gethex+0x9a>
 800e826:	4627      	mov	r7, r4
 800e828:	e7c7      	b.n	800e7ba <__gethex+0x9e>
 800e82a:	464e      	mov	r6, r9
 800e82c:	462f      	mov	r7, r5
 800e82e:	2501      	movs	r5, #1
 800e830:	e7c3      	b.n	800e7ba <__gethex+0x9e>
 800e832:	2400      	movs	r4, #0
 800e834:	1cb1      	adds	r1, r6, #2
 800e836:	e7cc      	b.n	800e7d2 <__gethex+0xb6>
 800e838:	2401      	movs	r4, #1
 800e83a:	e7fb      	b.n	800e834 <__gethex+0x118>
 800e83c:	fb03 0002 	mla	r0, r3, r2, r0
 800e840:	e7ce      	b.n	800e7e0 <__gethex+0xc4>
 800e842:	4631      	mov	r1, r6
 800e844:	e7de      	b.n	800e804 <__gethex+0xe8>
 800e846:	eba6 0309 	sub.w	r3, r6, r9
 800e84a:	3b01      	subs	r3, #1
 800e84c:	4629      	mov	r1, r5
 800e84e:	2b07      	cmp	r3, #7
 800e850:	dc0a      	bgt.n	800e868 <__gethex+0x14c>
 800e852:	9801      	ldr	r0, [sp, #4]
 800e854:	f7fe f948 	bl	800cae8 <_Balloc>
 800e858:	4604      	mov	r4, r0
 800e85a:	b940      	cbnz	r0, 800e86e <__gethex+0x152>
 800e85c:	4b5c      	ldr	r3, [pc, #368]	@ (800e9d0 <__gethex+0x2b4>)
 800e85e:	4602      	mov	r2, r0
 800e860:	21e4      	movs	r1, #228	@ 0xe4
 800e862:	485c      	ldr	r0, [pc, #368]	@ (800e9d4 <__gethex+0x2b8>)
 800e864:	f7ff fec0 	bl	800e5e8 <__assert_func>
 800e868:	3101      	adds	r1, #1
 800e86a:	105b      	asrs	r3, r3, #1
 800e86c:	e7ef      	b.n	800e84e <__gethex+0x132>
 800e86e:	f100 0a14 	add.w	sl, r0, #20
 800e872:	2300      	movs	r3, #0
 800e874:	4655      	mov	r5, sl
 800e876:	469b      	mov	fp, r3
 800e878:	45b1      	cmp	r9, r6
 800e87a:	d337      	bcc.n	800e8ec <__gethex+0x1d0>
 800e87c:	f845 bb04 	str.w	fp, [r5], #4
 800e880:	eba5 050a 	sub.w	r5, r5, sl
 800e884:	10ad      	asrs	r5, r5, #2
 800e886:	6125      	str	r5, [r4, #16]
 800e888:	4658      	mov	r0, fp
 800e88a:	f7fe fa1f 	bl	800cccc <__hi0bits>
 800e88e:	016d      	lsls	r5, r5, #5
 800e890:	f8d8 6000 	ldr.w	r6, [r8]
 800e894:	1a2d      	subs	r5, r5, r0
 800e896:	42b5      	cmp	r5, r6
 800e898:	dd54      	ble.n	800e944 <__gethex+0x228>
 800e89a:	1bad      	subs	r5, r5, r6
 800e89c:	4629      	mov	r1, r5
 800e89e:	4620      	mov	r0, r4
 800e8a0:	f7fe fdb3 	bl	800d40a <__any_on>
 800e8a4:	4681      	mov	r9, r0
 800e8a6:	b178      	cbz	r0, 800e8c8 <__gethex+0x1ac>
 800e8a8:	1e6b      	subs	r3, r5, #1
 800e8aa:	1159      	asrs	r1, r3, #5
 800e8ac:	f003 021f 	and.w	r2, r3, #31
 800e8b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e8b4:	f04f 0901 	mov.w	r9, #1
 800e8b8:	fa09 f202 	lsl.w	r2, r9, r2
 800e8bc:	420a      	tst	r2, r1
 800e8be:	d003      	beq.n	800e8c8 <__gethex+0x1ac>
 800e8c0:	454b      	cmp	r3, r9
 800e8c2:	dc36      	bgt.n	800e932 <__gethex+0x216>
 800e8c4:	f04f 0902 	mov.w	r9, #2
 800e8c8:	4629      	mov	r1, r5
 800e8ca:	4620      	mov	r0, r4
 800e8cc:	f7ff febe 	bl	800e64c <rshift>
 800e8d0:	442f      	add	r7, r5
 800e8d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e8d6:	42bb      	cmp	r3, r7
 800e8d8:	da42      	bge.n	800e960 <__gethex+0x244>
 800e8da:	9801      	ldr	r0, [sp, #4]
 800e8dc:	4621      	mov	r1, r4
 800e8de:	f7fe f943 	bl	800cb68 <_Bfree>
 800e8e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	6013      	str	r3, [r2, #0]
 800e8e8:	25a3      	movs	r5, #163	@ 0xa3
 800e8ea:	e793      	b.n	800e814 <__gethex+0xf8>
 800e8ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e8f0:	2a2e      	cmp	r2, #46	@ 0x2e
 800e8f2:	d012      	beq.n	800e91a <__gethex+0x1fe>
 800e8f4:	2b20      	cmp	r3, #32
 800e8f6:	d104      	bne.n	800e902 <__gethex+0x1e6>
 800e8f8:	f845 bb04 	str.w	fp, [r5], #4
 800e8fc:	f04f 0b00 	mov.w	fp, #0
 800e900:	465b      	mov	r3, fp
 800e902:	7830      	ldrb	r0, [r6, #0]
 800e904:	9303      	str	r3, [sp, #12]
 800e906:	f7ff fef3 	bl	800e6f0 <__hexdig_fun>
 800e90a:	9b03      	ldr	r3, [sp, #12]
 800e90c:	f000 000f 	and.w	r0, r0, #15
 800e910:	4098      	lsls	r0, r3
 800e912:	ea4b 0b00 	orr.w	fp, fp, r0
 800e916:	3304      	adds	r3, #4
 800e918:	e7ae      	b.n	800e878 <__gethex+0x15c>
 800e91a:	45b1      	cmp	r9, r6
 800e91c:	d8ea      	bhi.n	800e8f4 <__gethex+0x1d8>
 800e91e:	492b      	ldr	r1, [pc, #172]	@ (800e9cc <__gethex+0x2b0>)
 800e920:	9303      	str	r3, [sp, #12]
 800e922:	2201      	movs	r2, #1
 800e924:	4630      	mov	r0, r6
 800e926:	f7ff fe33 	bl	800e590 <strncmp>
 800e92a:	9b03      	ldr	r3, [sp, #12]
 800e92c:	2800      	cmp	r0, #0
 800e92e:	d1e1      	bne.n	800e8f4 <__gethex+0x1d8>
 800e930:	e7a2      	b.n	800e878 <__gethex+0x15c>
 800e932:	1ea9      	subs	r1, r5, #2
 800e934:	4620      	mov	r0, r4
 800e936:	f7fe fd68 	bl	800d40a <__any_on>
 800e93a:	2800      	cmp	r0, #0
 800e93c:	d0c2      	beq.n	800e8c4 <__gethex+0x1a8>
 800e93e:	f04f 0903 	mov.w	r9, #3
 800e942:	e7c1      	b.n	800e8c8 <__gethex+0x1ac>
 800e944:	da09      	bge.n	800e95a <__gethex+0x23e>
 800e946:	1b75      	subs	r5, r6, r5
 800e948:	4621      	mov	r1, r4
 800e94a:	9801      	ldr	r0, [sp, #4]
 800e94c:	462a      	mov	r2, r5
 800e94e:	f7fe fb23 	bl	800cf98 <__lshift>
 800e952:	1b7f      	subs	r7, r7, r5
 800e954:	4604      	mov	r4, r0
 800e956:	f100 0a14 	add.w	sl, r0, #20
 800e95a:	f04f 0900 	mov.w	r9, #0
 800e95e:	e7b8      	b.n	800e8d2 <__gethex+0x1b6>
 800e960:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e964:	42bd      	cmp	r5, r7
 800e966:	dd6f      	ble.n	800ea48 <__gethex+0x32c>
 800e968:	1bed      	subs	r5, r5, r7
 800e96a:	42ae      	cmp	r6, r5
 800e96c:	dc34      	bgt.n	800e9d8 <__gethex+0x2bc>
 800e96e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e972:	2b02      	cmp	r3, #2
 800e974:	d022      	beq.n	800e9bc <__gethex+0x2a0>
 800e976:	2b03      	cmp	r3, #3
 800e978:	d024      	beq.n	800e9c4 <__gethex+0x2a8>
 800e97a:	2b01      	cmp	r3, #1
 800e97c:	d115      	bne.n	800e9aa <__gethex+0x28e>
 800e97e:	42ae      	cmp	r6, r5
 800e980:	d113      	bne.n	800e9aa <__gethex+0x28e>
 800e982:	2e01      	cmp	r6, #1
 800e984:	d10b      	bne.n	800e99e <__gethex+0x282>
 800e986:	9a02      	ldr	r2, [sp, #8]
 800e988:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e98c:	6013      	str	r3, [r2, #0]
 800e98e:	2301      	movs	r3, #1
 800e990:	6123      	str	r3, [r4, #16]
 800e992:	f8ca 3000 	str.w	r3, [sl]
 800e996:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e998:	2562      	movs	r5, #98	@ 0x62
 800e99a:	601c      	str	r4, [r3, #0]
 800e99c:	e73a      	b.n	800e814 <__gethex+0xf8>
 800e99e:	1e71      	subs	r1, r6, #1
 800e9a0:	4620      	mov	r0, r4
 800e9a2:	f7fe fd32 	bl	800d40a <__any_on>
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	d1ed      	bne.n	800e986 <__gethex+0x26a>
 800e9aa:	9801      	ldr	r0, [sp, #4]
 800e9ac:	4621      	mov	r1, r4
 800e9ae:	f7fe f8db 	bl	800cb68 <_Bfree>
 800e9b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	6013      	str	r3, [r2, #0]
 800e9b8:	2550      	movs	r5, #80	@ 0x50
 800e9ba:	e72b      	b.n	800e814 <__gethex+0xf8>
 800e9bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d1f3      	bne.n	800e9aa <__gethex+0x28e>
 800e9c2:	e7e0      	b.n	800e986 <__gethex+0x26a>
 800e9c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d1dd      	bne.n	800e986 <__gethex+0x26a>
 800e9ca:	e7ee      	b.n	800e9aa <__gethex+0x28e>
 800e9cc:	0800f9b0 	.word	0x0800f9b0
 800e9d0:	0800f845 	.word	0x0800f845
 800e9d4:	0800fb5e 	.word	0x0800fb5e
 800e9d8:	1e6f      	subs	r7, r5, #1
 800e9da:	f1b9 0f00 	cmp.w	r9, #0
 800e9de:	d130      	bne.n	800ea42 <__gethex+0x326>
 800e9e0:	b127      	cbz	r7, 800e9ec <__gethex+0x2d0>
 800e9e2:	4639      	mov	r1, r7
 800e9e4:	4620      	mov	r0, r4
 800e9e6:	f7fe fd10 	bl	800d40a <__any_on>
 800e9ea:	4681      	mov	r9, r0
 800e9ec:	117a      	asrs	r2, r7, #5
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e9f4:	f007 071f 	and.w	r7, r7, #31
 800e9f8:	40bb      	lsls	r3, r7
 800e9fa:	4213      	tst	r3, r2
 800e9fc:	4629      	mov	r1, r5
 800e9fe:	4620      	mov	r0, r4
 800ea00:	bf18      	it	ne
 800ea02:	f049 0902 	orrne.w	r9, r9, #2
 800ea06:	f7ff fe21 	bl	800e64c <rshift>
 800ea0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ea0e:	1b76      	subs	r6, r6, r5
 800ea10:	2502      	movs	r5, #2
 800ea12:	f1b9 0f00 	cmp.w	r9, #0
 800ea16:	d047      	beq.n	800eaa8 <__gethex+0x38c>
 800ea18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ea1c:	2b02      	cmp	r3, #2
 800ea1e:	d015      	beq.n	800ea4c <__gethex+0x330>
 800ea20:	2b03      	cmp	r3, #3
 800ea22:	d017      	beq.n	800ea54 <__gethex+0x338>
 800ea24:	2b01      	cmp	r3, #1
 800ea26:	d109      	bne.n	800ea3c <__gethex+0x320>
 800ea28:	f019 0f02 	tst.w	r9, #2
 800ea2c:	d006      	beq.n	800ea3c <__gethex+0x320>
 800ea2e:	f8da 3000 	ldr.w	r3, [sl]
 800ea32:	ea49 0903 	orr.w	r9, r9, r3
 800ea36:	f019 0f01 	tst.w	r9, #1
 800ea3a:	d10e      	bne.n	800ea5a <__gethex+0x33e>
 800ea3c:	f045 0510 	orr.w	r5, r5, #16
 800ea40:	e032      	b.n	800eaa8 <__gethex+0x38c>
 800ea42:	f04f 0901 	mov.w	r9, #1
 800ea46:	e7d1      	b.n	800e9ec <__gethex+0x2d0>
 800ea48:	2501      	movs	r5, #1
 800ea4a:	e7e2      	b.n	800ea12 <__gethex+0x2f6>
 800ea4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea4e:	f1c3 0301 	rsb	r3, r3, #1
 800ea52:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ea54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d0f0      	beq.n	800ea3c <__gethex+0x320>
 800ea5a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ea5e:	f104 0314 	add.w	r3, r4, #20
 800ea62:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ea66:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ea6a:	f04f 0c00 	mov.w	ip, #0
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea74:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ea78:	d01b      	beq.n	800eab2 <__gethex+0x396>
 800ea7a:	3201      	adds	r2, #1
 800ea7c:	6002      	str	r2, [r0, #0]
 800ea7e:	2d02      	cmp	r5, #2
 800ea80:	f104 0314 	add.w	r3, r4, #20
 800ea84:	d13c      	bne.n	800eb00 <__gethex+0x3e4>
 800ea86:	f8d8 2000 	ldr.w	r2, [r8]
 800ea8a:	3a01      	subs	r2, #1
 800ea8c:	42b2      	cmp	r2, r6
 800ea8e:	d109      	bne.n	800eaa4 <__gethex+0x388>
 800ea90:	1171      	asrs	r1, r6, #5
 800ea92:	2201      	movs	r2, #1
 800ea94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ea98:	f006 061f 	and.w	r6, r6, #31
 800ea9c:	fa02 f606 	lsl.w	r6, r2, r6
 800eaa0:	421e      	tst	r6, r3
 800eaa2:	d13a      	bne.n	800eb1a <__gethex+0x3fe>
 800eaa4:	f045 0520 	orr.w	r5, r5, #32
 800eaa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eaaa:	601c      	str	r4, [r3, #0]
 800eaac:	9b02      	ldr	r3, [sp, #8]
 800eaae:	601f      	str	r7, [r3, #0]
 800eab0:	e6b0      	b.n	800e814 <__gethex+0xf8>
 800eab2:	4299      	cmp	r1, r3
 800eab4:	f843 cc04 	str.w	ip, [r3, #-4]
 800eab8:	d8d9      	bhi.n	800ea6e <__gethex+0x352>
 800eaba:	68a3      	ldr	r3, [r4, #8]
 800eabc:	459b      	cmp	fp, r3
 800eabe:	db17      	blt.n	800eaf0 <__gethex+0x3d4>
 800eac0:	6861      	ldr	r1, [r4, #4]
 800eac2:	9801      	ldr	r0, [sp, #4]
 800eac4:	3101      	adds	r1, #1
 800eac6:	f7fe f80f 	bl	800cae8 <_Balloc>
 800eaca:	4681      	mov	r9, r0
 800eacc:	b918      	cbnz	r0, 800ead6 <__gethex+0x3ba>
 800eace:	4b1a      	ldr	r3, [pc, #104]	@ (800eb38 <__gethex+0x41c>)
 800ead0:	4602      	mov	r2, r0
 800ead2:	2184      	movs	r1, #132	@ 0x84
 800ead4:	e6c5      	b.n	800e862 <__gethex+0x146>
 800ead6:	6922      	ldr	r2, [r4, #16]
 800ead8:	3202      	adds	r2, #2
 800eada:	f104 010c 	add.w	r1, r4, #12
 800eade:	0092      	lsls	r2, r2, #2
 800eae0:	300c      	adds	r0, #12
 800eae2:	f7fd f8a0 	bl	800bc26 <memcpy>
 800eae6:	4621      	mov	r1, r4
 800eae8:	9801      	ldr	r0, [sp, #4]
 800eaea:	f7fe f83d 	bl	800cb68 <_Bfree>
 800eaee:	464c      	mov	r4, r9
 800eaf0:	6923      	ldr	r3, [r4, #16]
 800eaf2:	1c5a      	adds	r2, r3, #1
 800eaf4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eaf8:	6122      	str	r2, [r4, #16]
 800eafa:	2201      	movs	r2, #1
 800eafc:	615a      	str	r2, [r3, #20]
 800eafe:	e7be      	b.n	800ea7e <__gethex+0x362>
 800eb00:	6922      	ldr	r2, [r4, #16]
 800eb02:	455a      	cmp	r2, fp
 800eb04:	dd0b      	ble.n	800eb1e <__gethex+0x402>
 800eb06:	2101      	movs	r1, #1
 800eb08:	4620      	mov	r0, r4
 800eb0a:	f7ff fd9f 	bl	800e64c <rshift>
 800eb0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eb12:	3701      	adds	r7, #1
 800eb14:	42bb      	cmp	r3, r7
 800eb16:	f6ff aee0 	blt.w	800e8da <__gethex+0x1be>
 800eb1a:	2501      	movs	r5, #1
 800eb1c:	e7c2      	b.n	800eaa4 <__gethex+0x388>
 800eb1e:	f016 061f 	ands.w	r6, r6, #31
 800eb22:	d0fa      	beq.n	800eb1a <__gethex+0x3fe>
 800eb24:	4453      	add	r3, sl
 800eb26:	f1c6 0620 	rsb	r6, r6, #32
 800eb2a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800eb2e:	f7fe f8cd 	bl	800cccc <__hi0bits>
 800eb32:	42b0      	cmp	r0, r6
 800eb34:	dbe7      	blt.n	800eb06 <__gethex+0x3ea>
 800eb36:	e7f0      	b.n	800eb1a <__gethex+0x3fe>
 800eb38:	0800f845 	.word	0x0800f845

0800eb3c <L_shift>:
 800eb3c:	f1c2 0208 	rsb	r2, r2, #8
 800eb40:	0092      	lsls	r2, r2, #2
 800eb42:	b570      	push	{r4, r5, r6, lr}
 800eb44:	f1c2 0620 	rsb	r6, r2, #32
 800eb48:	6843      	ldr	r3, [r0, #4]
 800eb4a:	6804      	ldr	r4, [r0, #0]
 800eb4c:	fa03 f506 	lsl.w	r5, r3, r6
 800eb50:	432c      	orrs	r4, r5
 800eb52:	40d3      	lsrs	r3, r2
 800eb54:	6004      	str	r4, [r0, #0]
 800eb56:	f840 3f04 	str.w	r3, [r0, #4]!
 800eb5a:	4288      	cmp	r0, r1
 800eb5c:	d3f4      	bcc.n	800eb48 <L_shift+0xc>
 800eb5e:	bd70      	pop	{r4, r5, r6, pc}

0800eb60 <__match>:
 800eb60:	b530      	push	{r4, r5, lr}
 800eb62:	6803      	ldr	r3, [r0, #0]
 800eb64:	3301      	adds	r3, #1
 800eb66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb6a:	b914      	cbnz	r4, 800eb72 <__match+0x12>
 800eb6c:	6003      	str	r3, [r0, #0]
 800eb6e:	2001      	movs	r0, #1
 800eb70:	bd30      	pop	{r4, r5, pc}
 800eb72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb76:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800eb7a:	2d19      	cmp	r5, #25
 800eb7c:	bf98      	it	ls
 800eb7e:	3220      	addls	r2, #32
 800eb80:	42a2      	cmp	r2, r4
 800eb82:	d0f0      	beq.n	800eb66 <__match+0x6>
 800eb84:	2000      	movs	r0, #0
 800eb86:	e7f3      	b.n	800eb70 <__match+0x10>

0800eb88 <__hexnan>:
 800eb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb8c:	680b      	ldr	r3, [r1, #0]
 800eb8e:	6801      	ldr	r1, [r0, #0]
 800eb90:	115e      	asrs	r6, r3, #5
 800eb92:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800eb96:	f013 031f 	ands.w	r3, r3, #31
 800eb9a:	b087      	sub	sp, #28
 800eb9c:	bf18      	it	ne
 800eb9e:	3604      	addne	r6, #4
 800eba0:	2500      	movs	r5, #0
 800eba2:	1f37      	subs	r7, r6, #4
 800eba4:	4682      	mov	sl, r0
 800eba6:	4690      	mov	r8, r2
 800eba8:	9301      	str	r3, [sp, #4]
 800ebaa:	f846 5c04 	str.w	r5, [r6, #-4]
 800ebae:	46b9      	mov	r9, r7
 800ebb0:	463c      	mov	r4, r7
 800ebb2:	9502      	str	r5, [sp, #8]
 800ebb4:	46ab      	mov	fp, r5
 800ebb6:	784a      	ldrb	r2, [r1, #1]
 800ebb8:	1c4b      	adds	r3, r1, #1
 800ebba:	9303      	str	r3, [sp, #12]
 800ebbc:	b342      	cbz	r2, 800ec10 <__hexnan+0x88>
 800ebbe:	4610      	mov	r0, r2
 800ebc0:	9105      	str	r1, [sp, #20]
 800ebc2:	9204      	str	r2, [sp, #16]
 800ebc4:	f7ff fd94 	bl	800e6f0 <__hexdig_fun>
 800ebc8:	2800      	cmp	r0, #0
 800ebca:	d151      	bne.n	800ec70 <__hexnan+0xe8>
 800ebcc:	9a04      	ldr	r2, [sp, #16]
 800ebce:	9905      	ldr	r1, [sp, #20]
 800ebd0:	2a20      	cmp	r2, #32
 800ebd2:	d818      	bhi.n	800ec06 <__hexnan+0x7e>
 800ebd4:	9b02      	ldr	r3, [sp, #8]
 800ebd6:	459b      	cmp	fp, r3
 800ebd8:	dd13      	ble.n	800ec02 <__hexnan+0x7a>
 800ebda:	454c      	cmp	r4, r9
 800ebdc:	d206      	bcs.n	800ebec <__hexnan+0x64>
 800ebde:	2d07      	cmp	r5, #7
 800ebe0:	dc04      	bgt.n	800ebec <__hexnan+0x64>
 800ebe2:	462a      	mov	r2, r5
 800ebe4:	4649      	mov	r1, r9
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	f7ff ffa8 	bl	800eb3c <L_shift>
 800ebec:	4544      	cmp	r4, r8
 800ebee:	d952      	bls.n	800ec96 <__hexnan+0x10e>
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	f1a4 0904 	sub.w	r9, r4, #4
 800ebf6:	f844 3c04 	str.w	r3, [r4, #-4]
 800ebfa:	f8cd b008 	str.w	fp, [sp, #8]
 800ebfe:	464c      	mov	r4, r9
 800ec00:	461d      	mov	r5, r3
 800ec02:	9903      	ldr	r1, [sp, #12]
 800ec04:	e7d7      	b.n	800ebb6 <__hexnan+0x2e>
 800ec06:	2a29      	cmp	r2, #41	@ 0x29
 800ec08:	d157      	bne.n	800ecba <__hexnan+0x132>
 800ec0a:	3102      	adds	r1, #2
 800ec0c:	f8ca 1000 	str.w	r1, [sl]
 800ec10:	f1bb 0f00 	cmp.w	fp, #0
 800ec14:	d051      	beq.n	800ecba <__hexnan+0x132>
 800ec16:	454c      	cmp	r4, r9
 800ec18:	d206      	bcs.n	800ec28 <__hexnan+0xa0>
 800ec1a:	2d07      	cmp	r5, #7
 800ec1c:	dc04      	bgt.n	800ec28 <__hexnan+0xa0>
 800ec1e:	462a      	mov	r2, r5
 800ec20:	4649      	mov	r1, r9
 800ec22:	4620      	mov	r0, r4
 800ec24:	f7ff ff8a 	bl	800eb3c <L_shift>
 800ec28:	4544      	cmp	r4, r8
 800ec2a:	d936      	bls.n	800ec9a <__hexnan+0x112>
 800ec2c:	f1a8 0204 	sub.w	r2, r8, #4
 800ec30:	4623      	mov	r3, r4
 800ec32:	f853 1b04 	ldr.w	r1, [r3], #4
 800ec36:	f842 1f04 	str.w	r1, [r2, #4]!
 800ec3a:	429f      	cmp	r7, r3
 800ec3c:	d2f9      	bcs.n	800ec32 <__hexnan+0xaa>
 800ec3e:	1b3b      	subs	r3, r7, r4
 800ec40:	f023 0303 	bic.w	r3, r3, #3
 800ec44:	3304      	adds	r3, #4
 800ec46:	3401      	adds	r4, #1
 800ec48:	3e03      	subs	r6, #3
 800ec4a:	42b4      	cmp	r4, r6
 800ec4c:	bf88      	it	hi
 800ec4e:	2304      	movhi	r3, #4
 800ec50:	4443      	add	r3, r8
 800ec52:	2200      	movs	r2, #0
 800ec54:	f843 2b04 	str.w	r2, [r3], #4
 800ec58:	429f      	cmp	r7, r3
 800ec5a:	d2fb      	bcs.n	800ec54 <__hexnan+0xcc>
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	b91b      	cbnz	r3, 800ec68 <__hexnan+0xe0>
 800ec60:	4547      	cmp	r7, r8
 800ec62:	d128      	bne.n	800ecb6 <__hexnan+0x12e>
 800ec64:	2301      	movs	r3, #1
 800ec66:	603b      	str	r3, [r7, #0]
 800ec68:	2005      	movs	r0, #5
 800ec6a:	b007      	add	sp, #28
 800ec6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec70:	3501      	adds	r5, #1
 800ec72:	2d08      	cmp	r5, #8
 800ec74:	f10b 0b01 	add.w	fp, fp, #1
 800ec78:	dd06      	ble.n	800ec88 <__hexnan+0x100>
 800ec7a:	4544      	cmp	r4, r8
 800ec7c:	d9c1      	bls.n	800ec02 <__hexnan+0x7a>
 800ec7e:	2300      	movs	r3, #0
 800ec80:	f844 3c04 	str.w	r3, [r4, #-4]
 800ec84:	2501      	movs	r5, #1
 800ec86:	3c04      	subs	r4, #4
 800ec88:	6822      	ldr	r2, [r4, #0]
 800ec8a:	f000 000f 	and.w	r0, r0, #15
 800ec8e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ec92:	6020      	str	r0, [r4, #0]
 800ec94:	e7b5      	b.n	800ec02 <__hexnan+0x7a>
 800ec96:	2508      	movs	r5, #8
 800ec98:	e7b3      	b.n	800ec02 <__hexnan+0x7a>
 800ec9a:	9b01      	ldr	r3, [sp, #4]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d0dd      	beq.n	800ec5c <__hexnan+0xd4>
 800eca0:	f1c3 0320 	rsb	r3, r3, #32
 800eca4:	f04f 32ff 	mov.w	r2, #4294967295
 800eca8:	40da      	lsrs	r2, r3
 800ecaa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ecae:	4013      	ands	r3, r2
 800ecb0:	f846 3c04 	str.w	r3, [r6, #-4]
 800ecb4:	e7d2      	b.n	800ec5c <__hexnan+0xd4>
 800ecb6:	3f04      	subs	r7, #4
 800ecb8:	e7d0      	b.n	800ec5c <__hexnan+0xd4>
 800ecba:	2004      	movs	r0, #4
 800ecbc:	e7d5      	b.n	800ec6a <__hexnan+0xe2>

0800ecbe <__ascii_mbtowc>:
 800ecbe:	b082      	sub	sp, #8
 800ecc0:	b901      	cbnz	r1, 800ecc4 <__ascii_mbtowc+0x6>
 800ecc2:	a901      	add	r1, sp, #4
 800ecc4:	b142      	cbz	r2, 800ecd8 <__ascii_mbtowc+0x1a>
 800ecc6:	b14b      	cbz	r3, 800ecdc <__ascii_mbtowc+0x1e>
 800ecc8:	7813      	ldrb	r3, [r2, #0]
 800ecca:	600b      	str	r3, [r1, #0]
 800eccc:	7812      	ldrb	r2, [r2, #0]
 800ecce:	1e10      	subs	r0, r2, #0
 800ecd0:	bf18      	it	ne
 800ecd2:	2001      	movne	r0, #1
 800ecd4:	b002      	add	sp, #8
 800ecd6:	4770      	bx	lr
 800ecd8:	4610      	mov	r0, r2
 800ecda:	e7fb      	b.n	800ecd4 <__ascii_mbtowc+0x16>
 800ecdc:	f06f 0001 	mvn.w	r0, #1
 800ece0:	e7f8      	b.n	800ecd4 <__ascii_mbtowc+0x16>

0800ece2 <_realloc_r>:
 800ece2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ece6:	4680      	mov	r8, r0
 800ece8:	4615      	mov	r5, r2
 800ecea:	460c      	mov	r4, r1
 800ecec:	b921      	cbnz	r1, 800ecf8 <_realloc_r+0x16>
 800ecee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecf2:	4611      	mov	r1, r2
 800ecf4:	f7fd be6c 	b.w	800c9d0 <_malloc_r>
 800ecf8:	b92a      	cbnz	r2, 800ed06 <_realloc_r+0x24>
 800ecfa:	f7fd fdf5 	bl	800c8e8 <_free_r>
 800ecfe:	2400      	movs	r4, #0
 800ed00:	4620      	mov	r0, r4
 800ed02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed06:	f000 f840 	bl	800ed8a <_malloc_usable_size_r>
 800ed0a:	4285      	cmp	r5, r0
 800ed0c:	4606      	mov	r6, r0
 800ed0e:	d802      	bhi.n	800ed16 <_realloc_r+0x34>
 800ed10:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ed14:	d8f4      	bhi.n	800ed00 <_realloc_r+0x1e>
 800ed16:	4629      	mov	r1, r5
 800ed18:	4640      	mov	r0, r8
 800ed1a:	f7fd fe59 	bl	800c9d0 <_malloc_r>
 800ed1e:	4607      	mov	r7, r0
 800ed20:	2800      	cmp	r0, #0
 800ed22:	d0ec      	beq.n	800ecfe <_realloc_r+0x1c>
 800ed24:	42b5      	cmp	r5, r6
 800ed26:	462a      	mov	r2, r5
 800ed28:	4621      	mov	r1, r4
 800ed2a:	bf28      	it	cs
 800ed2c:	4632      	movcs	r2, r6
 800ed2e:	f7fc ff7a 	bl	800bc26 <memcpy>
 800ed32:	4621      	mov	r1, r4
 800ed34:	4640      	mov	r0, r8
 800ed36:	f7fd fdd7 	bl	800c8e8 <_free_r>
 800ed3a:	463c      	mov	r4, r7
 800ed3c:	e7e0      	b.n	800ed00 <_realloc_r+0x1e>

0800ed3e <__ascii_wctomb>:
 800ed3e:	4603      	mov	r3, r0
 800ed40:	4608      	mov	r0, r1
 800ed42:	b141      	cbz	r1, 800ed56 <__ascii_wctomb+0x18>
 800ed44:	2aff      	cmp	r2, #255	@ 0xff
 800ed46:	d904      	bls.n	800ed52 <__ascii_wctomb+0x14>
 800ed48:	228a      	movs	r2, #138	@ 0x8a
 800ed4a:	601a      	str	r2, [r3, #0]
 800ed4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed50:	4770      	bx	lr
 800ed52:	700a      	strb	r2, [r1, #0]
 800ed54:	2001      	movs	r0, #1
 800ed56:	4770      	bx	lr

0800ed58 <fiprintf>:
 800ed58:	b40e      	push	{r1, r2, r3}
 800ed5a:	b503      	push	{r0, r1, lr}
 800ed5c:	4601      	mov	r1, r0
 800ed5e:	ab03      	add	r3, sp, #12
 800ed60:	4805      	ldr	r0, [pc, #20]	@ (800ed78 <fiprintf+0x20>)
 800ed62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed66:	6800      	ldr	r0, [r0, #0]
 800ed68:	9301      	str	r3, [sp, #4]
 800ed6a:	f000 f83f 	bl	800edec <_vfiprintf_r>
 800ed6e:	b002      	add	sp, #8
 800ed70:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed74:	b003      	add	sp, #12
 800ed76:	4770      	bx	lr
 800ed78:	20000034 	.word	0x20000034

0800ed7c <abort>:
 800ed7c:	b508      	push	{r3, lr}
 800ed7e:	2006      	movs	r0, #6
 800ed80:	f000 fa08 	bl	800f194 <raise>
 800ed84:	2001      	movs	r0, #1
 800ed86:	f7f3 fdfd 	bl	8002984 <_exit>

0800ed8a <_malloc_usable_size_r>:
 800ed8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed8e:	1f18      	subs	r0, r3, #4
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	bfbc      	itt	lt
 800ed94:	580b      	ldrlt	r3, [r1, r0]
 800ed96:	18c0      	addlt	r0, r0, r3
 800ed98:	4770      	bx	lr

0800ed9a <__sfputc_r>:
 800ed9a:	6893      	ldr	r3, [r2, #8]
 800ed9c:	3b01      	subs	r3, #1
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	b410      	push	{r4}
 800eda2:	6093      	str	r3, [r2, #8]
 800eda4:	da08      	bge.n	800edb8 <__sfputc_r+0x1e>
 800eda6:	6994      	ldr	r4, [r2, #24]
 800eda8:	42a3      	cmp	r3, r4
 800edaa:	db01      	blt.n	800edb0 <__sfputc_r+0x16>
 800edac:	290a      	cmp	r1, #10
 800edae:	d103      	bne.n	800edb8 <__sfputc_r+0x1e>
 800edb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edb4:	f000 b932 	b.w	800f01c <__swbuf_r>
 800edb8:	6813      	ldr	r3, [r2, #0]
 800edba:	1c58      	adds	r0, r3, #1
 800edbc:	6010      	str	r0, [r2, #0]
 800edbe:	7019      	strb	r1, [r3, #0]
 800edc0:	4608      	mov	r0, r1
 800edc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edc6:	4770      	bx	lr

0800edc8 <__sfputs_r>:
 800edc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edca:	4606      	mov	r6, r0
 800edcc:	460f      	mov	r7, r1
 800edce:	4614      	mov	r4, r2
 800edd0:	18d5      	adds	r5, r2, r3
 800edd2:	42ac      	cmp	r4, r5
 800edd4:	d101      	bne.n	800edda <__sfputs_r+0x12>
 800edd6:	2000      	movs	r0, #0
 800edd8:	e007      	b.n	800edea <__sfputs_r+0x22>
 800edda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edde:	463a      	mov	r2, r7
 800ede0:	4630      	mov	r0, r6
 800ede2:	f7ff ffda 	bl	800ed9a <__sfputc_r>
 800ede6:	1c43      	adds	r3, r0, #1
 800ede8:	d1f3      	bne.n	800edd2 <__sfputs_r+0xa>
 800edea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800edec <_vfiprintf_r>:
 800edec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edf0:	460d      	mov	r5, r1
 800edf2:	b09d      	sub	sp, #116	@ 0x74
 800edf4:	4614      	mov	r4, r2
 800edf6:	4698      	mov	r8, r3
 800edf8:	4606      	mov	r6, r0
 800edfa:	b118      	cbz	r0, 800ee04 <_vfiprintf_r+0x18>
 800edfc:	6a03      	ldr	r3, [r0, #32]
 800edfe:	b90b      	cbnz	r3, 800ee04 <_vfiprintf_r+0x18>
 800ee00:	f7fc fda2 	bl	800b948 <__sinit>
 800ee04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee06:	07d9      	lsls	r1, r3, #31
 800ee08:	d405      	bmi.n	800ee16 <_vfiprintf_r+0x2a>
 800ee0a:	89ab      	ldrh	r3, [r5, #12]
 800ee0c:	059a      	lsls	r2, r3, #22
 800ee0e:	d402      	bmi.n	800ee16 <_vfiprintf_r+0x2a>
 800ee10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee12:	f7fc ff06 	bl	800bc22 <__retarget_lock_acquire_recursive>
 800ee16:	89ab      	ldrh	r3, [r5, #12]
 800ee18:	071b      	lsls	r3, r3, #28
 800ee1a:	d501      	bpl.n	800ee20 <_vfiprintf_r+0x34>
 800ee1c:	692b      	ldr	r3, [r5, #16]
 800ee1e:	b99b      	cbnz	r3, 800ee48 <_vfiprintf_r+0x5c>
 800ee20:	4629      	mov	r1, r5
 800ee22:	4630      	mov	r0, r6
 800ee24:	f000 f938 	bl	800f098 <__swsetup_r>
 800ee28:	b170      	cbz	r0, 800ee48 <_vfiprintf_r+0x5c>
 800ee2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee2c:	07dc      	lsls	r4, r3, #31
 800ee2e:	d504      	bpl.n	800ee3a <_vfiprintf_r+0x4e>
 800ee30:	f04f 30ff 	mov.w	r0, #4294967295
 800ee34:	b01d      	add	sp, #116	@ 0x74
 800ee36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee3a:	89ab      	ldrh	r3, [r5, #12]
 800ee3c:	0598      	lsls	r0, r3, #22
 800ee3e:	d4f7      	bmi.n	800ee30 <_vfiprintf_r+0x44>
 800ee40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee42:	f7fc feef 	bl	800bc24 <__retarget_lock_release_recursive>
 800ee46:	e7f3      	b.n	800ee30 <_vfiprintf_r+0x44>
 800ee48:	2300      	movs	r3, #0
 800ee4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee4c:	2320      	movs	r3, #32
 800ee4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee52:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee56:	2330      	movs	r3, #48	@ 0x30
 800ee58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f008 <_vfiprintf_r+0x21c>
 800ee5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee60:	f04f 0901 	mov.w	r9, #1
 800ee64:	4623      	mov	r3, r4
 800ee66:	469a      	mov	sl, r3
 800ee68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee6c:	b10a      	cbz	r2, 800ee72 <_vfiprintf_r+0x86>
 800ee6e:	2a25      	cmp	r2, #37	@ 0x25
 800ee70:	d1f9      	bne.n	800ee66 <_vfiprintf_r+0x7a>
 800ee72:	ebba 0b04 	subs.w	fp, sl, r4
 800ee76:	d00b      	beq.n	800ee90 <_vfiprintf_r+0xa4>
 800ee78:	465b      	mov	r3, fp
 800ee7a:	4622      	mov	r2, r4
 800ee7c:	4629      	mov	r1, r5
 800ee7e:	4630      	mov	r0, r6
 800ee80:	f7ff ffa2 	bl	800edc8 <__sfputs_r>
 800ee84:	3001      	adds	r0, #1
 800ee86:	f000 80a7 	beq.w	800efd8 <_vfiprintf_r+0x1ec>
 800ee8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee8c:	445a      	add	r2, fp
 800ee8e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee90:	f89a 3000 	ldrb.w	r3, [sl]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	f000 809f 	beq.w	800efd8 <_vfiprintf_r+0x1ec>
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	f04f 32ff 	mov.w	r2, #4294967295
 800eea0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eea4:	f10a 0a01 	add.w	sl, sl, #1
 800eea8:	9304      	str	r3, [sp, #16]
 800eeaa:	9307      	str	r3, [sp, #28]
 800eeac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eeb0:	931a      	str	r3, [sp, #104]	@ 0x68
 800eeb2:	4654      	mov	r4, sl
 800eeb4:	2205      	movs	r2, #5
 800eeb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeba:	4853      	ldr	r0, [pc, #332]	@ (800f008 <_vfiprintf_r+0x21c>)
 800eebc:	f7f1 f9b8 	bl	8000230 <memchr>
 800eec0:	9a04      	ldr	r2, [sp, #16]
 800eec2:	b9d8      	cbnz	r0, 800eefc <_vfiprintf_r+0x110>
 800eec4:	06d1      	lsls	r1, r2, #27
 800eec6:	bf44      	itt	mi
 800eec8:	2320      	movmi	r3, #32
 800eeca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eece:	0713      	lsls	r3, r2, #28
 800eed0:	bf44      	itt	mi
 800eed2:	232b      	movmi	r3, #43	@ 0x2b
 800eed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eed8:	f89a 3000 	ldrb.w	r3, [sl]
 800eedc:	2b2a      	cmp	r3, #42	@ 0x2a
 800eede:	d015      	beq.n	800ef0c <_vfiprintf_r+0x120>
 800eee0:	9a07      	ldr	r2, [sp, #28]
 800eee2:	4654      	mov	r4, sl
 800eee4:	2000      	movs	r0, #0
 800eee6:	f04f 0c0a 	mov.w	ip, #10
 800eeea:	4621      	mov	r1, r4
 800eeec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eef0:	3b30      	subs	r3, #48	@ 0x30
 800eef2:	2b09      	cmp	r3, #9
 800eef4:	d94b      	bls.n	800ef8e <_vfiprintf_r+0x1a2>
 800eef6:	b1b0      	cbz	r0, 800ef26 <_vfiprintf_r+0x13a>
 800eef8:	9207      	str	r2, [sp, #28]
 800eefa:	e014      	b.n	800ef26 <_vfiprintf_r+0x13a>
 800eefc:	eba0 0308 	sub.w	r3, r0, r8
 800ef00:	fa09 f303 	lsl.w	r3, r9, r3
 800ef04:	4313      	orrs	r3, r2
 800ef06:	9304      	str	r3, [sp, #16]
 800ef08:	46a2      	mov	sl, r4
 800ef0a:	e7d2      	b.n	800eeb2 <_vfiprintf_r+0xc6>
 800ef0c:	9b03      	ldr	r3, [sp, #12]
 800ef0e:	1d19      	adds	r1, r3, #4
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	9103      	str	r1, [sp, #12]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	bfbb      	ittet	lt
 800ef18:	425b      	neglt	r3, r3
 800ef1a:	f042 0202 	orrlt.w	r2, r2, #2
 800ef1e:	9307      	strge	r3, [sp, #28]
 800ef20:	9307      	strlt	r3, [sp, #28]
 800ef22:	bfb8      	it	lt
 800ef24:	9204      	strlt	r2, [sp, #16]
 800ef26:	7823      	ldrb	r3, [r4, #0]
 800ef28:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef2a:	d10a      	bne.n	800ef42 <_vfiprintf_r+0x156>
 800ef2c:	7863      	ldrb	r3, [r4, #1]
 800ef2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef30:	d132      	bne.n	800ef98 <_vfiprintf_r+0x1ac>
 800ef32:	9b03      	ldr	r3, [sp, #12]
 800ef34:	1d1a      	adds	r2, r3, #4
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	9203      	str	r2, [sp, #12]
 800ef3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef3e:	3402      	adds	r4, #2
 800ef40:	9305      	str	r3, [sp, #20]
 800ef42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f018 <_vfiprintf_r+0x22c>
 800ef46:	7821      	ldrb	r1, [r4, #0]
 800ef48:	2203      	movs	r2, #3
 800ef4a:	4650      	mov	r0, sl
 800ef4c:	f7f1 f970 	bl	8000230 <memchr>
 800ef50:	b138      	cbz	r0, 800ef62 <_vfiprintf_r+0x176>
 800ef52:	9b04      	ldr	r3, [sp, #16]
 800ef54:	eba0 000a 	sub.w	r0, r0, sl
 800ef58:	2240      	movs	r2, #64	@ 0x40
 800ef5a:	4082      	lsls	r2, r0
 800ef5c:	4313      	orrs	r3, r2
 800ef5e:	3401      	adds	r4, #1
 800ef60:	9304      	str	r3, [sp, #16]
 800ef62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef66:	4829      	ldr	r0, [pc, #164]	@ (800f00c <_vfiprintf_r+0x220>)
 800ef68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef6c:	2206      	movs	r2, #6
 800ef6e:	f7f1 f95f 	bl	8000230 <memchr>
 800ef72:	2800      	cmp	r0, #0
 800ef74:	d03f      	beq.n	800eff6 <_vfiprintf_r+0x20a>
 800ef76:	4b26      	ldr	r3, [pc, #152]	@ (800f010 <_vfiprintf_r+0x224>)
 800ef78:	bb1b      	cbnz	r3, 800efc2 <_vfiprintf_r+0x1d6>
 800ef7a:	9b03      	ldr	r3, [sp, #12]
 800ef7c:	3307      	adds	r3, #7
 800ef7e:	f023 0307 	bic.w	r3, r3, #7
 800ef82:	3308      	adds	r3, #8
 800ef84:	9303      	str	r3, [sp, #12]
 800ef86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef88:	443b      	add	r3, r7
 800ef8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef8c:	e76a      	b.n	800ee64 <_vfiprintf_r+0x78>
 800ef8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef92:	460c      	mov	r4, r1
 800ef94:	2001      	movs	r0, #1
 800ef96:	e7a8      	b.n	800eeea <_vfiprintf_r+0xfe>
 800ef98:	2300      	movs	r3, #0
 800ef9a:	3401      	adds	r4, #1
 800ef9c:	9305      	str	r3, [sp, #20]
 800ef9e:	4619      	mov	r1, r3
 800efa0:	f04f 0c0a 	mov.w	ip, #10
 800efa4:	4620      	mov	r0, r4
 800efa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efaa:	3a30      	subs	r2, #48	@ 0x30
 800efac:	2a09      	cmp	r2, #9
 800efae:	d903      	bls.n	800efb8 <_vfiprintf_r+0x1cc>
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d0c6      	beq.n	800ef42 <_vfiprintf_r+0x156>
 800efb4:	9105      	str	r1, [sp, #20]
 800efb6:	e7c4      	b.n	800ef42 <_vfiprintf_r+0x156>
 800efb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800efbc:	4604      	mov	r4, r0
 800efbe:	2301      	movs	r3, #1
 800efc0:	e7f0      	b.n	800efa4 <_vfiprintf_r+0x1b8>
 800efc2:	ab03      	add	r3, sp, #12
 800efc4:	9300      	str	r3, [sp, #0]
 800efc6:	462a      	mov	r2, r5
 800efc8:	4b12      	ldr	r3, [pc, #72]	@ (800f014 <_vfiprintf_r+0x228>)
 800efca:	a904      	add	r1, sp, #16
 800efcc:	4630      	mov	r0, r6
 800efce:	f7fb fe63 	bl	800ac98 <_printf_float>
 800efd2:	4607      	mov	r7, r0
 800efd4:	1c78      	adds	r0, r7, #1
 800efd6:	d1d6      	bne.n	800ef86 <_vfiprintf_r+0x19a>
 800efd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800efda:	07d9      	lsls	r1, r3, #31
 800efdc:	d405      	bmi.n	800efea <_vfiprintf_r+0x1fe>
 800efde:	89ab      	ldrh	r3, [r5, #12]
 800efe0:	059a      	lsls	r2, r3, #22
 800efe2:	d402      	bmi.n	800efea <_vfiprintf_r+0x1fe>
 800efe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800efe6:	f7fc fe1d 	bl	800bc24 <__retarget_lock_release_recursive>
 800efea:	89ab      	ldrh	r3, [r5, #12]
 800efec:	065b      	lsls	r3, r3, #25
 800efee:	f53f af1f 	bmi.w	800ee30 <_vfiprintf_r+0x44>
 800eff2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eff4:	e71e      	b.n	800ee34 <_vfiprintf_r+0x48>
 800eff6:	ab03      	add	r3, sp, #12
 800eff8:	9300      	str	r3, [sp, #0]
 800effa:	462a      	mov	r2, r5
 800effc:	4b05      	ldr	r3, [pc, #20]	@ (800f014 <_vfiprintf_r+0x228>)
 800effe:	a904      	add	r1, sp, #16
 800f000:	4630      	mov	r0, r6
 800f002:	f7fc f8e1 	bl	800b1c8 <_printf_i>
 800f006:	e7e4      	b.n	800efd2 <_vfiprintf_r+0x1e6>
 800f008:	0800fb09 	.word	0x0800fb09
 800f00c:	0800fb13 	.word	0x0800fb13
 800f010:	0800ac99 	.word	0x0800ac99
 800f014:	0800edc9 	.word	0x0800edc9
 800f018:	0800fb0f 	.word	0x0800fb0f

0800f01c <__swbuf_r>:
 800f01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f01e:	460e      	mov	r6, r1
 800f020:	4614      	mov	r4, r2
 800f022:	4605      	mov	r5, r0
 800f024:	b118      	cbz	r0, 800f02e <__swbuf_r+0x12>
 800f026:	6a03      	ldr	r3, [r0, #32]
 800f028:	b90b      	cbnz	r3, 800f02e <__swbuf_r+0x12>
 800f02a:	f7fc fc8d 	bl	800b948 <__sinit>
 800f02e:	69a3      	ldr	r3, [r4, #24]
 800f030:	60a3      	str	r3, [r4, #8]
 800f032:	89a3      	ldrh	r3, [r4, #12]
 800f034:	071a      	lsls	r2, r3, #28
 800f036:	d501      	bpl.n	800f03c <__swbuf_r+0x20>
 800f038:	6923      	ldr	r3, [r4, #16]
 800f03a:	b943      	cbnz	r3, 800f04e <__swbuf_r+0x32>
 800f03c:	4621      	mov	r1, r4
 800f03e:	4628      	mov	r0, r5
 800f040:	f000 f82a 	bl	800f098 <__swsetup_r>
 800f044:	b118      	cbz	r0, 800f04e <__swbuf_r+0x32>
 800f046:	f04f 37ff 	mov.w	r7, #4294967295
 800f04a:	4638      	mov	r0, r7
 800f04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f04e:	6823      	ldr	r3, [r4, #0]
 800f050:	6922      	ldr	r2, [r4, #16]
 800f052:	1a98      	subs	r0, r3, r2
 800f054:	6963      	ldr	r3, [r4, #20]
 800f056:	b2f6      	uxtb	r6, r6
 800f058:	4283      	cmp	r3, r0
 800f05a:	4637      	mov	r7, r6
 800f05c:	dc05      	bgt.n	800f06a <__swbuf_r+0x4e>
 800f05e:	4621      	mov	r1, r4
 800f060:	4628      	mov	r0, r5
 800f062:	f7ff fa53 	bl	800e50c <_fflush_r>
 800f066:	2800      	cmp	r0, #0
 800f068:	d1ed      	bne.n	800f046 <__swbuf_r+0x2a>
 800f06a:	68a3      	ldr	r3, [r4, #8]
 800f06c:	3b01      	subs	r3, #1
 800f06e:	60a3      	str	r3, [r4, #8]
 800f070:	6823      	ldr	r3, [r4, #0]
 800f072:	1c5a      	adds	r2, r3, #1
 800f074:	6022      	str	r2, [r4, #0]
 800f076:	701e      	strb	r6, [r3, #0]
 800f078:	6962      	ldr	r2, [r4, #20]
 800f07a:	1c43      	adds	r3, r0, #1
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d004      	beq.n	800f08a <__swbuf_r+0x6e>
 800f080:	89a3      	ldrh	r3, [r4, #12]
 800f082:	07db      	lsls	r3, r3, #31
 800f084:	d5e1      	bpl.n	800f04a <__swbuf_r+0x2e>
 800f086:	2e0a      	cmp	r6, #10
 800f088:	d1df      	bne.n	800f04a <__swbuf_r+0x2e>
 800f08a:	4621      	mov	r1, r4
 800f08c:	4628      	mov	r0, r5
 800f08e:	f7ff fa3d 	bl	800e50c <_fflush_r>
 800f092:	2800      	cmp	r0, #0
 800f094:	d0d9      	beq.n	800f04a <__swbuf_r+0x2e>
 800f096:	e7d6      	b.n	800f046 <__swbuf_r+0x2a>

0800f098 <__swsetup_r>:
 800f098:	b538      	push	{r3, r4, r5, lr}
 800f09a:	4b29      	ldr	r3, [pc, #164]	@ (800f140 <__swsetup_r+0xa8>)
 800f09c:	4605      	mov	r5, r0
 800f09e:	6818      	ldr	r0, [r3, #0]
 800f0a0:	460c      	mov	r4, r1
 800f0a2:	b118      	cbz	r0, 800f0ac <__swsetup_r+0x14>
 800f0a4:	6a03      	ldr	r3, [r0, #32]
 800f0a6:	b90b      	cbnz	r3, 800f0ac <__swsetup_r+0x14>
 800f0a8:	f7fc fc4e 	bl	800b948 <__sinit>
 800f0ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0b0:	0719      	lsls	r1, r3, #28
 800f0b2:	d422      	bmi.n	800f0fa <__swsetup_r+0x62>
 800f0b4:	06da      	lsls	r2, r3, #27
 800f0b6:	d407      	bmi.n	800f0c8 <__swsetup_r+0x30>
 800f0b8:	2209      	movs	r2, #9
 800f0ba:	602a      	str	r2, [r5, #0]
 800f0bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0c0:	81a3      	strh	r3, [r4, #12]
 800f0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c6:	e033      	b.n	800f130 <__swsetup_r+0x98>
 800f0c8:	0758      	lsls	r0, r3, #29
 800f0ca:	d512      	bpl.n	800f0f2 <__swsetup_r+0x5a>
 800f0cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f0ce:	b141      	cbz	r1, 800f0e2 <__swsetup_r+0x4a>
 800f0d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f0d4:	4299      	cmp	r1, r3
 800f0d6:	d002      	beq.n	800f0de <__swsetup_r+0x46>
 800f0d8:	4628      	mov	r0, r5
 800f0da:	f7fd fc05 	bl	800c8e8 <_free_r>
 800f0de:	2300      	movs	r3, #0
 800f0e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f0e2:	89a3      	ldrh	r3, [r4, #12]
 800f0e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f0e8:	81a3      	strh	r3, [r4, #12]
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	6063      	str	r3, [r4, #4]
 800f0ee:	6923      	ldr	r3, [r4, #16]
 800f0f0:	6023      	str	r3, [r4, #0]
 800f0f2:	89a3      	ldrh	r3, [r4, #12]
 800f0f4:	f043 0308 	orr.w	r3, r3, #8
 800f0f8:	81a3      	strh	r3, [r4, #12]
 800f0fa:	6923      	ldr	r3, [r4, #16]
 800f0fc:	b94b      	cbnz	r3, 800f112 <__swsetup_r+0x7a>
 800f0fe:	89a3      	ldrh	r3, [r4, #12]
 800f100:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f108:	d003      	beq.n	800f112 <__swsetup_r+0x7a>
 800f10a:	4621      	mov	r1, r4
 800f10c:	4628      	mov	r0, r5
 800f10e:	f000 f883 	bl	800f218 <__smakebuf_r>
 800f112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f116:	f013 0201 	ands.w	r2, r3, #1
 800f11a:	d00a      	beq.n	800f132 <__swsetup_r+0x9a>
 800f11c:	2200      	movs	r2, #0
 800f11e:	60a2      	str	r2, [r4, #8]
 800f120:	6962      	ldr	r2, [r4, #20]
 800f122:	4252      	negs	r2, r2
 800f124:	61a2      	str	r2, [r4, #24]
 800f126:	6922      	ldr	r2, [r4, #16]
 800f128:	b942      	cbnz	r2, 800f13c <__swsetup_r+0xa4>
 800f12a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f12e:	d1c5      	bne.n	800f0bc <__swsetup_r+0x24>
 800f130:	bd38      	pop	{r3, r4, r5, pc}
 800f132:	0799      	lsls	r1, r3, #30
 800f134:	bf58      	it	pl
 800f136:	6962      	ldrpl	r2, [r4, #20]
 800f138:	60a2      	str	r2, [r4, #8]
 800f13a:	e7f4      	b.n	800f126 <__swsetup_r+0x8e>
 800f13c:	2000      	movs	r0, #0
 800f13e:	e7f7      	b.n	800f130 <__swsetup_r+0x98>
 800f140:	20000034 	.word	0x20000034

0800f144 <_raise_r>:
 800f144:	291f      	cmp	r1, #31
 800f146:	b538      	push	{r3, r4, r5, lr}
 800f148:	4605      	mov	r5, r0
 800f14a:	460c      	mov	r4, r1
 800f14c:	d904      	bls.n	800f158 <_raise_r+0x14>
 800f14e:	2316      	movs	r3, #22
 800f150:	6003      	str	r3, [r0, #0]
 800f152:	f04f 30ff 	mov.w	r0, #4294967295
 800f156:	bd38      	pop	{r3, r4, r5, pc}
 800f158:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f15a:	b112      	cbz	r2, 800f162 <_raise_r+0x1e>
 800f15c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f160:	b94b      	cbnz	r3, 800f176 <_raise_r+0x32>
 800f162:	4628      	mov	r0, r5
 800f164:	f000 f830 	bl	800f1c8 <_getpid_r>
 800f168:	4622      	mov	r2, r4
 800f16a:	4601      	mov	r1, r0
 800f16c:	4628      	mov	r0, r5
 800f16e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f172:	f000 b817 	b.w	800f1a4 <_kill_r>
 800f176:	2b01      	cmp	r3, #1
 800f178:	d00a      	beq.n	800f190 <_raise_r+0x4c>
 800f17a:	1c59      	adds	r1, r3, #1
 800f17c:	d103      	bne.n	800f186 <_raise_r+0x42>
 800f17e:	2316      	movs	r3, #22
 800f180:	6003      	str	r3, [r0, #0]
 800f182:	2001      	movs	r0, #1
 800f184:	e7e7      	b.n	800f156 <_raise_r+0x12>
 800f186:	2100      	movs	r1, #0
 800f188:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f18c:	4620      	mov	r0, r4
 800f18e:	4798      	blx	r3
 800f190:	2000      	movs	r0, #0
 800f192:	e7e0      	b.n	800f156 <_raise_r+0x12>

0800f194 <raise>:
 800f194:	4b02      	ldr	r3, [pc, #8]	@ (800f1a0 <raise+0xc>)
 800f196:	4601      	mov	r1, r0
 800f198:	6818      	ldr	r0, [r3, #0]
 800f19a:	f7ff bfd3 	b.w	800f144 <_raise_r>
 800f19e:	bf00      	nop
 800f1a0:	20000034 	.word	0x20000034

0800f1a4 <_kill_r>:
 800f1a4:	b538      	push	{r3, r4, r5, lr}
 800f1a6:	4d07      	ldr	r5, [pc, #28]	@ (800f1c4 <_kill_r+0x20>)
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	4604      	mov	r4, r0
 800f1ac:	4608      	mov	r0, r1
 800f1ae:	4611      	mov	r1, r2
 800f1b0:	602b      	str	r3, [r5, #0]
 800f1b2:	f7f3 fbd7 	bl	8002964 <_kill>
 800f1b6:	1c43      	adds	r3, r0, #1
 800f1b8:	d102      	bne.n	800f1c0 <_kill_r+0x1c>
 800f1ba:	682b      	ldr	r3, [r5, #0]
 800f1bc:	b103      	cbz	r3, 800f1c0 <_kill_r+0x1c>
 800f1be:	6023      	str	r3, [r4, #0]
 800f1c0:	bd38      	pop	{r3, r4, r5, pc}
 800f1c2:	bf00      	nop
 800f1c4:	200049e4 	.word	0x200049e4

0800f1c8 <_getpid_r>:
 800f1c8:	f7f3 bbc4 	b.w	8002954 <_getpid>

0800f1cc <__swhatbuf_r>:
 800f1cc:	b570      	push	{r4, r5, r6, lr}
 800f1ce:	460c      	mov	r4, r1
 800f1d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1d4:	2900      	cmp	r1, #0
 800f1d6:	b096      	sub	sp, #88	@ 0x58
 800f1d8:	4615      	mov	r5, r2
 800f1da:	461e      	mov	r6, r3
 800f1dc:	da0d      	bge.n	800f1fa <__swhatbuf_r+0x2e>
 800f1de:	89a3      	ldrh	r3, [r4, #12]
 800f1e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f1e4:	f04f 0100 	mov.w	r1, #0
 800f1e8:	bf14      	ite	ne
 800f1ea:	2340      	movne	r3, #64	@ 0x40
 800f1ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f1f0:	2000      	movs	r0, #0
 800f1f2:	6031      	str	r1, [r6, #0]
 800f1f4:	602b      	str	r3, [r5, #0]
 800f1f6:	b016      	add	sp, #88	@ 0x58
 800f1f8:	bd70      	pop	{r4, r5, r6, pc}
 800f1fa:	466a      	mov	r2, sp
 800f1fc:	f000 f848 	bl	800f290 <_fstat_r>
 800f200:	2800      	cmp	r0, #0
 800f202:	dbec      	blt.n	800f1de <__swhatbuf_r+0x12>
 800f204:	9901      	ldr	r1, [sp, #4]
 800f206:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f20a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f20e:	4259      	negs	r1, r3
 800f210:	4159      	adcs	r1, r3
 800f212:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f216:	e7eb      	b.n	800f1f0 <__swhatbuf_r+0x24>

0800f218 <__smakebuf_r>:
 800f218:	898b      	ldrh	r3, [r1, #12]
 800f21a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f21c:	079d      	lsls	r5, r3, #30
 800f21e:	4606      	mov	r6, r0
 800f220:	460c      	mov	r4, r1
 800f222:	d507      	bpl.n	800f234 <__smakebuf_r+0x1c>
 800f224:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f228:	6023      	str	r3, [r4, #0]
 800f22a:	6123      	str	r3, [r4, #16]
 800f22c:	2301      	movs	r3, #1
 800f22e:	6163      	str	r3, [r4, #20]
 800f230:	b003      	add	sp, #12
 800f232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f234:	ab01      	add	r3, sp, #4
 800f236:	466a      	mov	r2, sp
 800f238:	f7ff ffc8 	bl	800f1cc <__swhatbuf_r>
 800f23c:	9f00      	ldr	r7, [sp, #0]
 800f23e:	4605      	mov	r5, r0
 800f240:	4639      	mov	r1, r7
 800f242:	4630      	mov	r0, r6
 800f244:	f7fd fbc4 	bl	800c9d0 <_malloc_r>
 800f248:	b948      	cbnz	r0, 800f25e <__smakebuf_r+0x46>
 800f24a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f24e:	059a      	lsls	r2, r3, #22
 800f250:	d4ee      	bmi.n	800f230 <__smakebuf_r+0x18>
 800f252:	f023 0303 	bic.w	r3, r3, #3
 800f256:	f043 0302 	orr.w	r3, r3, #2
 800f25a:	81a3      	strh	r3, [r4, #12]
 800f25c:	e7e2      	b.n	800f224 <__smakebuf_r+0xc>
 800f25e:	89a3      	ldrh	r3, [r4, #12]
 800f260:	6020      	str	r0, [r4, #0]
 800f262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f266:	81a3      	strh	r3, [r4, #12]
 800f268:	9b01      	ldr	r3, [sp, #4]
 800f26a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f26e:	b15b      	cbz	r3, 800f288 <__smakebuf_r+0x70>
 800f270:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f274:	4630      	mov	r0, r6
 800f276:	f000 f81d 	bl	800f2b4 <_isatty_r>
 800f27a:	b128      	cbz	r0, 800f288 <__smakebuf_r+0x70>
 800f27c:	89a3      	ldrh	r3, [r4, #12]
 800f27e:	f023 0303 	bic.w	r3, r3, #3
 800f282:	f043 0301 	orr.w	r3, r3, #1
 800f286:	81a3      	strh	r3, [r4, #12]
 800f288:	89a3      	ldrh	r3, [r4, #12]
 800f28a:	431d      	orrs	r5, r3
 800f28c:	81a5      	strh	r5, [r4, #12]
 800f28e:	e7cf      	b.n	800f230 <__smakebuf_r+0x18>

0800f290 <_fstat_r>:
 800f290:	b538      	push	{r3, r4, r5, lr}
 800f292:	4d07      	ldr	r5, [pc, #28]	@ (800f2b0 <_fstat_r+0x20>)
 800f294:	2300      	movs	r3, #0
 800f296:	4604      	mov	r4, r0
 800f298:	4608      	mov	r0, r1
 800f29a:	4611      	mov	r1, r2
 800f29c:	602b      	str	r3, [r5, #0]
 800f29e:	f7f3 fbc1 	bl	8002a24 <_fstat>
 800f2a2:	1c43      	adds	r3, r0, #1
 800f2a4:	d102      	bne.n	800f2ac <_fstat_r+0x1c>
 800f2a6:	682b      	ldr	r3, [r5, #0]
 800f2a8:	b103      	cbz	r3, 800f2ac <_fstat_r+0x1c>
 800f2aa:	6023      	str	r3, [r4, #0]
 800f2ac:	bd38      	pop	{r3, r4, r5, pc}
 800f2ae:	bf00      	nop
 800f2b0:	200049e4 	.word	0x200049e4

0800f2b4 <_isatty_r>:
 800f2b4:	b538      	push	{r3, r4, r5, lr}
 800f2b6:	4d06      	ldr	r5, [pc, #24]	@ (800f2d0 <_isatty_r+0x1c>)
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	4604      	mov	r4, r0
 800f2bc:	4608      	mov	r0, r1
 800f2be:	602b      	str	r3, [r5, #0]
 800f2c0:	f7f3 fbc0 	bl	8002a44 <_isatty>
 800f2c4:	1c43      	adds	r3, r0, #1
 800f2c6:	d102      	bne.n	800f2ce <_isatty_r+0x1a>
 800f2c8:	682b      	ldr	r3, [r5, #0]
 800f2ca:	b103      	cbz	r3, 800f2ce <_isatty_r+0x1a>
 800f2cc:	6023      	str	r3, [r4, #0]
 800f2ce:	bd38      	pop	{r3, r4, r5, pc}
 800f2d0:	200049e4 	.word	0x200049e4

0800f2d4 <_init>:
 800f2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2d6:	bf00      	nop
 800f2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2da:	bc08      	pop	{r3}
 800f2dc:	469e      	mov	lr, r3
 800f2de:	4770      	bx	lr

0800f2e0 <_fini>:
 800f2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2e2:	bf00      	nop
 800f2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2e6:	bc08      	pop	{r3}
 800f2e8:	469e      	mov	lr, r3
 800f2ea:	4770      	bx	lr
