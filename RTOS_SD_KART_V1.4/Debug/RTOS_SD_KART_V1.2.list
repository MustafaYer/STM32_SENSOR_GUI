
RTOS_SD_KART_V1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f4e4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000908  0800f6b8  0800f6b8  000106b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ffc0  0800ffc0  000111f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ffc0  0800ffc0  00010fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ffc8  0800ffc8  000111f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ffc8  0800ffc8  00010fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ffcc  0800ffcc  00010fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800ffd0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004808  200001f0  080101c0  000111f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049f8  080101c0  000119f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001db87  00000000  00000000  00011220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004916  00000000  00000000  0002eda7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001990  00000000  00000000  000336c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013cf  00000000  00000000  00035050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000277f2  00000000  00000000  0003641f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021ed1  00000000  00000000  0005dc11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df674  00000000  00000000  0007fae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015f156  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f10  00000000  00000000  0015f19c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001670ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f69c 	.word	0x0800f69c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800f69c 	.word	0x0800f69c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a0 	b.w	8001040 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	460c      	mov	r4, r1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d14e      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d90:	4694      	mov	ip, r2
 8000d92:	458c      	cmp	ip, r1
 8000d94:	4686      	mov	lr, r0
 8000d96:	fab2 f282 	clz	r2, r2
 8000d9a:	d962      	bls.n	8000e62 <__udivmoddi4+0xde>
 8000d9c:	b14a      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000d9e:	f1c2 0320 	rsb	r3, r2, #32
 8000da2:	4091      	lsls	r1, r2
 8000da4:	fa20 f303 	lsr.w	r3, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	4319      	orrs	r1, r3
 8000dae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f f68c 	uxth.w	r6, ip
 8000dba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb04 f106 	mul.w	r1, r4, r6
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dda:	f080 8112 	bcs.w	8001002 <__udivmoddi4+0x27e>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 810f 	bls.w	8001002 <__udivmoddi4+0x27e>
 8000de4:	3c02      	subs	r4, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a59      	subs	r1, r3, r1
 8000dea:	fa1f f38e 	uxth.w	r3, lr
 8000dee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df2:	fb07 1110 	mls	r1, r7, r0, r1
 8000df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfa:	fb00 f606 	mul.w	r6, r0, r6
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	d90a      	bls.n	8000e18 <__udivmoddi4+0x94>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e0a:	f080 80fc 	bcs.w	8001006 <__udivmoddi4+0x282>
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	f240 80f9 	bls.w	8001006 <__udivmoddi4+0x282>
 8000e14:	4463      	add	r3, ip
 8000e16:	3802      	subs	r0, #2
 8000e18:	1b9b      	subs	r3, r3, r6
 8000e1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e1e:	2100      	movs	r1, #0
 8000e20:	b11d      	cbz	r5, 8000e2a <__udivmoddi4+0xa6>
 8000e22:	40d3      	lsrs	r3, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	e9c5 3200 	strd	r3, r2, [r5]
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d905      	bls.n	8000e3e <__udivmoddi4+0xba>
 8000e32:	b10d      	cbz	r5, 8000e38 <__udivmoddi4+0xb4>
 8000e34:	e9c5 0100 	strd	r0, r1, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e7f5      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e3e:	fab3 f183 	clz	r1, r3
 8000e42:	2900      	cmp	r1, #0
 8000e44:	d146      	bne.n	8000ed4 <__udivmoddi4+0x150>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d302      	bcc.n	8000e50 <__udivmoddi4+0xcc>
 8000e4a:	4290      	cmp	r0, r2
 8000e4c:	f0c0 80f0 	bcc.w	8001030 <__udivmoddi4+0x2ac>
 8000e50:	1a86      	subs	r6, r0, r2
 8000e52:	eb64 0303 	sbc.w	r3, r4, r3
 8000e56:	2001      	movs	r0, #1
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d0e6      	beq.n	8000e2a <__udivmoddi4+0xa6>
 8000e5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e60:	e7e3      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x204>
 8000e68:	eba1 040c 	sub.w	r4, r1, ip
 8000e6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	2101      	movs	r1, #1
 8000e76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb07 f006 	mul.w	r0, r7, r6
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x11c>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x11a>
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	f200 80cd 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e9e:	4626      	mov	r6, r4
 8000ea0:	1a1c      	subs	r4, r3, r0
 8000ea2:	fa1f f38e 	uxth.w	r3, lr
 8000ea6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eaa:	fb08 4410 	mls	r4, r8, r0, r4
 8000eae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eb2:	fb00 f707 	mul.w	r7, r0, r7
 8000eb6:	429f      	cmp	r7, r3
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x148>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec2:	d202      	bcs.n	8000eca <__udivmoddi4+0x146>
 8000ec4:	429f      	cmp	r7, r3
 8000ec6:	f200 80b0 	bhi.w	800102a <__udivmoddi4+0x2a6>
 8000eca:	4620      	mov	r0, r4
 8000ecc:	1bdb      	subs	r3, r3, r7
 8000ece:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ed2:	e7a5      	b.n	8000e20 <__udivmoddi4+0x9c>
 8000ed4:	f1c1 0620 	rsb	r6, r1, #32
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	fa22 f706 	lsr.w	r7, r2, r6
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ee4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ee8:	ea43 030c 	orr.w	r3, r3, ip
 8000eec:	40f4      	lsrs	r4, r6
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	0c38      	lsrs	r0, r7, #16
 8000ef4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ef8:	fbb4 fef0 	udiv	lr, r4, r0
 8000efc:	fa1f fc87 	uxth.w	ip, r7
 8000f00:	fb00 441e 	mls	r4, r0, lr, r4
 8000f04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f08:	fb0e f90c 	mul.w	r9, lr, ip
 8000f0c:	45a1      	cmp	r9, r4
 8000f0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f12:	d90a      	bls.n	8000f2a <__udivmoddi4+0x1a6>
 8000f14:	193c      	adds	r4, r7, r4
 8000f16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f1a:	f080 8084 	bcs.w	8001026 <__udivmoddi4+0x2a2>
 8000f1e:	45a1      	cmp	r9, r4
 8000f20:	f240 8081 	bls.w	8001026 <__udivmoddi4+0x2a2>
 8000f24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	eba4 0409 	sub.w	r4, r4, r9
 8000f2e:	fa1f f983 	uxth.w	r9, r3
 8000f32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f36:	fb00 4413 	mls	r4, r0, r3, r4
 8000f3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x1d2>
 8000f46:	193c      	adds	r4, r7, r4
 8000f48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f4c:	d267      	bcs.n	800101e <__udivmoddi4+0x29a>
 8000f4e:	45a4      	cmp	ip, r4
 8000f50:	d965      	bls.n	800101e <__udivmoddi4+0x29a>
 8000f52:	3b02      	subs	r3, #2
 8000f54:	443c      	add	r4, r7
 8000f56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f5e:	eba4 040c 	sub.w	r4, r4, ip
 8000f62:	429c      	cmp	r4, r3
 8000f64:	46ce      	mov	lr, r9
 8000f66:	469c      	mov	ip, r3
 8000f68:	d351      	bcc.n	800100e <__udivmoddi4+0x28a>
 8000f6a:	d04e      	beq.n	800100a <__udivmoddi4+0x286>
 8000f6c:	b155      	cbz	r5, 8000f84 <__udivmoddi4+0x200>
 8000f6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f72:	eb64 040c 	sbc.w	r4, r4, ip
 8000f76:	fa04 f606 	lsl.w	r6, r4, r6
 8000f7a:	40cb      	lsrs	r3, r1
 8000f7c:	431e      	orrs	r6, r3
 8000f7e:	40cc      	lsrs	r4, r1
 8000f80:	e9c5 6400 	strd	r6, r4, [r5]
 8000f84:	2100      	movs	r1, #0
 8000f86:	e750      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f94:	fa24 f303 	lsr.w	r3, r4, r3
 8000f98:	4094      	lsls	r4, r2
 8000f9a:	430c      	orrs	r4, r1
 8000f9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fa0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa4:	fa1f f78c 	uxth.w	r7, ip
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3110 	mls	r1, r8, r0, r3
 8000fb0:	0c23      	lsrs	r3, r4, #16
 8000fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb6:	fb00 f107 	mul.w	r1, r0, r7
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x24c>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fc6:	d22c      	bcs.n	8001022 <__udivmoddi4+0x29e>
 8000fc8:	4299      	cmp	r1, r3
 8000fca:	d92a      	bls.n	8001022 <__udivmoddi4+0x29e>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fe0:	fb01 f307 	mul.w	r3, r1, r7
 8000fe4:	42a3      	cmp	r3, r4
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x276>
 8000fe8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ff0:	d213      	bcs.n	800101a <__udivmoddi4+0x296>
 8000ff2:	42a3      	cmp	r3, r4
 8000ff4:	d911      	bls.n	800101a <__udivmoddi4+0x296>
 8000ff6:	3902      	subs	r1, #2
 8000ff8:	4464      	add	r4, ip
 8000ffa:	1ae4      	subs	r4, r4, r3
 8000ffc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001000:	e739      	b.n	8000e76 <__udivmoddi4+0xf2>
 8001002:	4604      	mov	r4, r0
 8001004:	e6f0      	b.n	8000de8 <__udivmoddi4+0x64>
 8001006:	4608      	mov	r0, r1
 8001008:	e706      	b.n	8000e18 <__udivmoddi4+0x94>
 800100a:	45c8      	cmp	r8, r9
 800100c:	d2ae      	bcs.n	8000f6c <__udivmoddi4+0x1e8>
 800100e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001012:	eb63 0c07 	sbc.w	ip, r3, r7
 8001016:	3801      	subs	r0, #1
 8001018:	e7a8      	b.n	8000f6c <__udivmoddi4+0x1e8>
 800101a:	4631      	mov	r1, r6
 800101c:	e7ed      	b.n	8000ffa <__udivmoddi4+0x276>
 800101e:	4603      	mov	r3, r0
 8001020:	e799      	b.n	8000f56 <__udivmoddi4+0x1d2>
 8001022:	4630      	mov	r0, r6
 8001024:	e7d4      	b.n	8000fd0 <__udivmoddi4+0x24c>
 8001026:	46d6      	mov	lr, sl
 8001028:	e77f      	b.n	8000f2a <__udivmoddi4+0x1a6>
 800102a:	4463      	add	r3, ip
 800102c:	3802      	subs	r0, #2
 800102e:	e74d      	b.n	8000ecc <__udivmoddi4+0x148>
 8001030:	4606      	mov	r6, r0
 8001032:	4623      	mov	r3, r4
 8001034:	4608      	mov	r0, r1
 8001036:	e70f      	b.n	8000e58 <__udivmoddi4+0xd4>
 8001038:	3e02      	subs	r6, #2
 800103a:	4463      	add	r3, ip
 800103c:	e730      	b.n	8000ea0 <__udivmoddi4+0x11c>
 800103e:	bf00      	nop

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <DHT_Delay>:
uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
uint16_t SUM;
int TEMP, RH;

void DHT_Delay (uint16_t time)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(DHT_TIMER, 0);
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <DHT_Delay+0x30>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2200      	movs	r2, #0
 8001054:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(DHT_TIMER))<time);
 8001056:	bf00      	nop
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <DHT_Delay+0x30>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800105e:	88fb      	ldrh	r3, [r7, #6]
 8001060:	429a      	cmp	r2, r3
 8001062:	d3f9      	bcc.n	8001058 <DHT_Delay+0x14>
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	200009e4 	.word	0x200009e4

08001078 <Set_Pin_Output>:


void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4619      	mov	r1, r3
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f001 ffac 	bl	8003004 <HAL_GPIO_Init>
}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	4619      	mov	r1, r3
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f001 ff8e 	bl	8003004 <HAL_GPIO_Init>
}
 80010e8:	bf00      	nop
 80010ea:	3720      	adds	r7, #32
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <DHT11_Start>:


void DHT11_Start (void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80010f4:	2101      	movs	r1, #1
 80010f6:	480d      	ldr	r0, [pc, #52]	@ (800112c <DHT11_Start+0x3c>)
 80010f8:	f7ff ffbe 	bl	8001078 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80010fc:	2200      	movs	r2, #0
 80010fe:	2101      	movs	r1, #1
 8001100:	480a      	ldr	r0, [pc, #40]	@ (800112c <DHT11_Start+0x3c>)
 8001102:	f002 f92b 	bl	800335c <HAL_GPIO_WritePin>
	DHT_Delay (18000);   // wait for 18ms
 8001106:	f244 6050 	movw	r0, #18000	@ 0x4650
 800110a:	f7ff ff9b 	bl	8001044 <DHT_Delay>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800110e:	2201      	movs	r2, #1
 8001110:	2101      	movs	r1, #1
 8001112:	4806      	ldr	r0, [pc, #24]	@ (800112c <DHT11_Start+0x3c>)
 8001114:	f002 f922 	bl	800335c <HAL_GPIO_WritePin>
    DHT_Delay (20);   // wait for 30us
 8001118:	2014      	movs	r0, #20
 800111a:	f7ff ff93 	bl	8001044 <DHT_Delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 800111e:	2101      	movs	r1, #1
 8001120:	4802      	ldr	r0, [pc, #8]	@ (800112c <DHT11_Start+0x3c>)
 8001122:	f7ff ffc7 	bl	80010b4 <Set_Pin_Input>
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40020000 	.word	0x40020000

08001130 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	71fb      	strb	r3, [r7, #7]
	DHT_Delay (40);
 800113a:	2028      	movs	r0, #40	@ 0x28
 800113c:	f7ff ff82 	bl	8001044 <DHT_Delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001140:	2101      	movs	r1, #1
 8001142:	4811      	ldr	r0, [pc, #68]	@ (8001188 <DHT11_Check_Response+0x58>)
 8001144:	f002 f8f2 	bl	800332c <HAL_GPIO_ReadPin>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10e      	bne.n	800116c <DHT11_Check_Response+0x3c>
	{
		DHT_Delay (80);
 800114e:	2050      	movs	r0, #80	@ 0x50
 8001150:	f7ff ff78 	bl	8001044 <DHT_Delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001154:	2101      	movs	r1, #1
 8001156:	480c      	ldr	r0, [pc, #48]	@ (8001188 <DHT11_Check_Response+0x58>)
 8001158:	f002 f8e8 	bl	800332c <HAL_GPIO_ReadPin>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <DHT11_Check_Response+0x38>
 8001162:	2301      	movs	r3, #1
 8001164:	71fb      	strb	r3, [r7, #7]
 8001166:	e001      	b.n	800116c <DHT11_Check_Response+0x3c>
		else Response = -1;
 8001168:	23ff      	movs	r3, #255	@ 0xff
 800116a:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 800116c:	bf00      	nop
 800116e:	2101      	movs	r1, #1
 8001170:	4805      	ldr	r0, [pc, #20]	@ (8001188 <DHT11_Check_Response+0x58>)
 8001172:	f002 f8db 	bl	800332c <HAL_GPIO_ReadPin>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f8      	bne.n	800116e <DHT11_Check_Response+0x3e>

	return Response;
 800117c:	79fb      	ldrb	r3, [r7, #7]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40020000 	.word	0x40020000

0800118c <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001192:	2300      	movs	r3, #0
 8001194:	71bb      	strb	r3, [r7, #6]
 8001196:	e037      	b.n	8001208 <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8001198:	bf00      	nop
 800119a:	2101      	movs	r1, #1
 800119c:	481e      	ldr	r0, [pc, #120]	@ (8001218 <DHT11_Read+0x8c>)
 800119e:	f002 f8c5 	bl	800332c <HAL_GPIO_ReadPin>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f8      	beq.n	800119a <DHT11_Read+0xe>
		DHT_Delay (40);   // wait for 40 us
 80011a8:	2028      	movs	r0, #40	@ 0x28
 80011aa:	f7ff ff4b 	bl	8001044 <DHT_Delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80011ae:	2101      	movs	r1, #1
 80011b0:	4819      	ldr	r0, [pc, #100]	@ (8001218 <DHT11_Read+0x8c>)
 80011b2:	f002 f8bb 	bl	800332c <HAL_GPIO_ReadPin>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d10e      	bne.n	80011da <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 80011bc:	79bb      	ldrb	r3, [r7, #6]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2201      	movs	r2, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	b25a      	sxtb	r2, r3
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	4013      	ands	r3, r2
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	e00b      	b.n	80011f2 <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80011da:	79bb      	ldrb	r3, [r7, #6]
 80011dc:	f1c3 0307 	rsb	r3, r3, #7
 80011e0:	2201      	movs	r2, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	b25a      	sxtb	r2, r3
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 80011f2:	bf00      	nop
 80011f4:	2101      	movs	r1, #1
 80011f6:	4808      	ldr	r0, [pc, #32]	@ (8001218 <DHT11_Read+0x8c>)
 80011f8:	f002 f898 	bl	800332c <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f8      	bne.n	80011f4 <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 8001202:	79bb      	ldrb	r3, [r7, #6]
 8001204:	3301      	adds	r3, #1
 8001206:	71bb      	strb	r3, [r7, #6]
 8001208:	79bb      	ldrb	r3, [r7, #6]
 800120a:	2b07      	cmp	r3, #7
 800120c:	d9c4      	bls.n	8001198 <DHT11_Read+0xc>
	}
	return i;
 800120e:	79fb      	ldrb	r3, [r7, #7]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40020000 	.word	0x40020000

0800121c <DHT11_Get_Data>:

uint8_t DHT11_Get_Data(int *Temperature, int *Humidity) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	DHT11_Start();
 8001226:	f7ff ff63 	bl	80010f0 <DHT11_Start>

	if (DHT11_Check_Response()) {
 800122a:	f7ff ff81 	bl	8001130 <DHT11_Check_Response>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d044      	beq.n	80012be <DHT11_Get_Data+0xa2>
		Rh_byte1 = DHT11_Read();
 8001234:	f7ff ffaa 	bl	800118c <DHT11_Read>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b22      	ldr	r3, [pc, #136]	@ (80012c8 <DHT11_Get_Data+0xac>)
 800123e:	701a      	strb	r2, [r3, #0]
		Rh_byte2 = DHT11_Read();
 8001240:	f7ff ffa4 	bl	800118c <DHT11_Read>
 8001244:	4603      	mov	r3, r0
 8001246:	461a      	mov	r2, r3
 8001248:	4b20      	ldr	r3, [pc, #128]	@ (80012cc <DHT11_Get_Data+0xb0>)
 800124a:	701a      	strb	r2, [r3, #0]
		Temp_byte1 = DHT11_Read();
 800124c:	f7ff ff9e 	bl	800118c <DHT11_Read>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	4b1e      	ldr	r3, [pc, #120]	@ (80012d0 <DHT11_Get_Data+0xb4>)
 8001256:	701a      	strb	r2, [r3, #0]
		Temp_byte2 = DHT11_Read();
 8001258:	f7ff ff98 	bl	800118c <DHT11_Read>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	4b1c      	ldr	r3, [pc, #112]	@ (80012d4 <DHT11_Get_Data+0xb8>)
 8001262:	701a      	strb	r2, [r3, #0]
		SUM = DHT11_Read();
 8001264:	f7ff ff92 	bl	800118c <DHT11_Read>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <DHT11_Get_Data+0xbc>)
 800126e:	801a      	strh	r2, [r3, #0]

		if (SUM == (Rh_byte1 + Rh_byte2 + Temp_byte1 + Temp_byte2)) {
 8001270:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <DHT11_Get_Data+0xbc>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <DHT11_Get_Data+0xac>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	4b13      	ldr	r3, [pc, #76]	@ (80012cc <DHT11_Get_Data+0xb0>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4413      	add	r3, r2
 8001282:	4a13      	ldr	r2, [pc, #76]	@ (80012d0 <DHT11_Get_Data+0xb4>)
 8001284:	7812      	ldrb	r2, [r2, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a12      	ldr	r2, [pc, #72]	@ (80012d4 <DHT11_Get_Data+0xb8>)
 800128a:	7812      	ldrb	r2, [r2, #0]
 800128c:	4413      	add	r3, r2
 800128e:	4299      	cmp	r1, r3
 8001290:	d113      	bne.n	80012ba <DHT11_Get_Data+0x9e>
			TEMP = Temp_byte1;
 8001292:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <DHT11_Get_Data+0xb4>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <DHT11_Get_Data+0xc0>)
 800129a:	601a      	str	r2, [r3, #0]
			RH = Rh_byte1;
 800129c:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <DHT11_Get_Data+0xac>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <DHT11_Get_Data+0xc4>)
 80012a4:	601a      	str	r2, [r3, #0]

	} else {
		return -1;
	}

	*Temperature = (int*) TEMP;
 80012a6:	4b0d      	ldr	r3, [pc, #52]	@ (80012dc <DHT11_Get_Data+0xc0>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	601a      	str	r2, [r3, #0]
	*Humidity = (int*) RH;
 80012ae:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <DHT11_Get_Data+0xc4>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	601a      	str	r2, [r3, #0]

	return 1;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e002      	b.n	80012c0 <DHT11_Get_Data+0xa4>
			return -1;
 80012ba:	23ff      	movs	r3, #255	@ 0xff
 80012bc:	e000      	b.n	80012c0 <DHT11_Get_Data+0xa4>
		return -1;
 80012be:	23ff      	movs	r3, #255	@ 0xff
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000020c 	.word	0x2000020c
 80012cc:	2000020d 	.word	0x2000020d
 80012d0:	2000020e 	.word	0x2000020e
 80012d4:	2000020f 	.word	0x2000020f
 80012d8:	20000210 	.word	0x20000210
 80012dc:	20000214 	.word	0x20000214
 80012e0:	20000218 	.word	0x20000218

080012e4 <Mount_SD>:
//{
//	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
//}

void Mount_SD (const TCHAR* path)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80012ec:	2201      	movs	r2, #1
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	4805      	ldr	r0, [pc, #20]	@ (8001308 <Mount_SD+0x24>)
 80012f2:	f006 fa85 	bl	8007800 <f_mount>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b04      	ldr	r3, [pc, #16]	@ (800130c <Mount_SD+0x28>)
 80012fc:	701a      	strb	r2, [r3, #0]
//	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
//	else Send_Uart("SD CARD mounted successfully...\n");
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000021c 	.word	0x2000021c
 800130c:	20000698 	.word	0x20000698

08001310 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8001318:	2201      	movs	r2, #1
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	2000      	movs	r0, #0
 800131e:	f006 fa6f 	bl	8007800 <f_mount>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	4b03      	ldr	r3, [pc, #12]	@ (8001334 <Unmount_SD+0x24>)
 8001328:	701a      	strb	r2, [r3, #0]
//	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
//	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000698 	.word	0x20000698

08001338 <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	@ 0x38
 800133c:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = pvPortMalloc(20*sizeof (char));
 800133e:	2014      	movs	r0, #20
 8001340:	f009 fbcc 	bl	800aadc <pvPortMalloc>
 8001344:	6378      	str	r0, [r7, #52]	@ 0x34
    sprintf (path, "%s","/");
 8001346:	4a29      	ldr	r2, [pc, #164]	@ (80013ec <Format_SD+0xb4>)
 8001348:	4929      	ldr	r1, [pc, #164]	@ (80013f0 <Format_SD+0xb8>)
 800134a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800134c:	f00a fd16 	bl	800bd7c <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001354:	4618      	mov	r0, r3
 8001356:	f006 fed4 	bl	8008102 <f_opendir>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	4b25      	ldr	r3, [pc, #148]	@ (80013f4 <Format_SD+0xbc>)
 8001360:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001362:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <Format_SD+0xbc>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d136      	bne.n	80013d8 <Format_SD+0xa0>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4922      	ldr	r1, [pc, #136]	@ (80013f8 <Format_SD+0xc0>)
 800136e:	4618      	mov	r0, r3
 8001370:	f006 ff6b 	bl	800824a <f_readdir>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <Format_SD+0xbc>)
 800137a:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 800137c:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <Format_SD+0xbc>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d125      	bne.n	80013d0 <Format_SD+0x98>
 8001384:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <Format_SD+0xc0>)
 8001386:	7a5b      	ldrb	r3, [r3, #9]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d021      	beq.n	80013d0 <Format_SD+0x98>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 800138c:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <Format_SD+0xc0>)
 800138e:	7a1b      	ldrb	r3, [r3, #8]
 8001390:	f003 0310 	and.w	r3, r3, #16
 8001394:	2b00      	cmp	r3, #0
 8001396:	d011      	beq.n	80013bc <Format_SD+0x84>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8001398:	4918      	ldr	r1, [pc, #96]	@ (80013fc <Format_SD+0xc4>)
 800139a:	4819      	ldr	r0, [pc, #100]	@ (8001400 <Format_SD+0xc8>)
 800139c:	f7fe ff38 	bl	8000210 <strcmp>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d012      	beq.n	80013cc <Format_SD+0x94>
            	fresult = f_unlink(fno.fname);
 80013a6:	4815      	ldr	r0, [pc, #84]	@ (80013fc <Format_SD+0xc4>)
 80013a8:	f006 ffd2 	bl	8008350 <f_unlink>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <Format_SD+0xbc>)
 80013b2:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <Format_SD+0xbc>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b07      	cmp	r3, #7
 80013ba:	e7d6      	b.n	800136a <Format_SD+0x32>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 80013bc:	480f      	ldr	r0, [pc, #60]	@ (80013fc <Format_SD+0xc4>)
 80013be:	f006 ffc7 	bl	8008350 <f_unlink>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <Format_SD+0xbc>)
 80013c8:	701a      	strb	r2, [r3, #0]
 80013ca:	e7ce      	b.n	800136a <Format_SD+0x32>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80013cc:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80013ce:	e7cc      	b.n	800136a <Format_SD+0x32>
            }
        }
        f_closedir(&dir);
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4618      	mov	r0, r3
 80013d4:	f006 ff0e 	bl	80081f4 <f_closedir>
    }
    vPortFree(path);
 80013d8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80013da:	f009 fc4d 	bl	800ac78 <vPortFree>
    return fresult;
 80013de:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <Format_SD+0xbc>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3738      	adds	r7, #56	@ 0x38
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	0800f6e8 	.word	0x0800f6e8
 80013f0:	0800f6b8 	.word	0x0800f6b8
 80013f4:	20000698 	.word	0x20000698
 80013f8:	20000680 	.word	0x20000680
 80013fc:	20000689 	.word	0x20000689
 8001400:	0800f6bc 	.word	0x0800f6bc

08001404 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 800140c:	4939      	ldr	r1, [pc, #228]	@ (80014f4 <Create_File+0xf0>)
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f006 ff5e 	bl	80082d0 <f_stat>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	4b37      	ldr	r3, [pc, #220]	@ (80014f8 <Create_File+0xf4>)
 800141a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800141c:	4b36      	ldr	r3, [pc, #216]	@ (80014f8 <Create_File+0xf4>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d10e      	bne.n	8001442 <Create_File+0x3e>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8001424:	2064      	movs	r0, #100	@ 0x64
 8001426:	f009 fb59 	bl	800aadc <pvPortMalloc>
 800142a:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	4933      	ldr	r1, [pc, #204]	@ (80014fc <Create_File+0xf8>)
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f00a fca3 	bl	800bd7c <siprintf>
//		Send_Uart(buf);
		vPortFree(buf);
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f009 fc1e 	bl	800ac78 <vPortFree>
	    return fresult;
 800143c:	4b2e      	ldr	r3, [pc, #184]	@ (80014f8 <Create_File+0xf4>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	e053      	b.n	80014ea <Create_File+0xe6>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001442:	220b      	movs	r2, #11
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	482e      	ldr	r0, [pc, #184]	@ (8001500 <Create_File+0xfc>)
 8001448:	f006 fa3e 	bl	80078c8 <f_open>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <Create_File+0xf4>)
 8001452:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001454:	4b28      	ldr	r3, [pc, #160]	@ (80014f8 <Create_File+0xf4>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d011      	beq.n	8001480 <Create_File+0x7c>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 800145c:	2064      	movs	r0, #100	@ 0x64
 800145e:	f009 fb3d 	bl	800aadc <pvPortMalloc>
 8001462:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8001464:	4b24      	ldr	r3, [pc, #144]	@ (80014f8 <Create_File+0xf4>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4925      	ldr	r1, [pc, #148]	@ (8001504 <Create_File+0x100>)
 800146e:	6938      	ldr	r0, [r7, #16]
 8001470:	f00a fc84 	bl	800bd7c <siprintf>
//			Send_Uart(buf);
			vPortFree(buf);
 8001474:	6938      	ldr	r0, [r7, #16]
 8001476:	f009 fbff 	bl	800ac78 <vPortFree>
		    return fresult;
 800147a:	4b1f      	ldr	r3, [pc, #124]	@ (80014f8 <Create_File+0xf4>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	e034      	b.n	80014ea <Create_File+0xe6>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001480:	2064      	movs	r0, #100	@ 0x64
 8001482:	f009 fb2b 	bl	800aadc <pvPortMalloc>
 8001486:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	491f      	ldr	r1, [pc, #124]	@ (8001508 <Create_File+0x104>)
 800148c:	69f8      	ldr	r0, [r7, #28]
 800148e:	f00a fc75 	bl	800bd7c <siprintf>
//			Send_Uart(buf);
			vPortFree(buf);
 8001492:	69f8      	ldr	r0, [r7, #28]
 8001494:	f009 fbf0 	bl	800ac78 <vPortFree>
		}

		fresult = f_close(&fil);
 8001498:	4819      	ldr	r0, [pc, #100]	@ (8001500 <Create_File+0xfc>)
 800149a:	f006 fe03 	bl	80080a4 <f_close>
 800149e:	4603      	mov	r3, r0
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <Create_File+0xf4>)
 80014a4:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80014a6:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <Create_File+0xf4>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00f      	beq.n	80014ce <Create_File+0xca>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80014ae:	2064      	movs	r0, #100	@ 0x64
 80014b0:	f009 fb14 	bl	800aadc <pvPortMalloc>
 80014b4:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 80014b6:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <Create_File+0xf4>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4913      	ldr	r1, [pc, #76]	@ (800150c <Create_File+0x108>)
 80014c0:	6978      	ldr	r0, [r7, #20]
 80014c2:	f00a fc5b 	bl	800bd7c <siprintf>
//			Send_Uart(buf);
			vPortFree(buf);
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f009 fbd6 	bl	800ac78 <vPortFree>
 80014cc:	e00b      	b.n	80014e6 <Create_File+0xe2>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80014ce:	2064      	movs	r0, #100	@ 0x64
 80014d0:	f009 fb04 	bl	800aadc <pvPortMalloc>
 80014d4:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	490d      	ldr	r1, [pc, #52]	@ (8001510 <Create_File+0x10c>)
 80014da:	69b8      	ldr	r0, [r7, #24]
 80014dc:	f00a fc4e 	bl	800bd7c <siprintf>
//			Send_Uart(buf);
			vPortFree(buf);
 80014e0:	69b8      	ldr	r0, [r7, #24]
 80014e2:	f009 fbc9 	bl	800ac78 <vPortFree>
		}
	}
    return fresult;
 80014e6:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <Create_File+0xf4>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000680 	.word	0x20000680
 80014f8:	20000698 	.word	0x20000698
 80014fc:	0800f864 	.word	0x0800f864
 8001500:	20000450 	.word	0x20000450
 8001504:	0800f89c 	.word	0x0800f89c
 8001508:	0800f8c4 	.word	0x0800f8c4
 800150c:	0800f904 	.word	0x0800f904
 8001510:	0800f844 	.word	0x0800f844

08001514 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800151e:	494a      	ldr	r1, [pc, #296]	@ (8001648 <Update_File+0x134>)
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f006 fed5 	bl	80082d0 <f_stat>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	4b48      	ldr	r3, [pc, #288]	@ (800164c <Update_File+0x138>)
 800152c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800152e:	4b47      	ldr	r3, [pc, #284]	@ (800164c <Update_File+0x138>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00e      	beq.n	8001554 <Update_File+0x40>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8001536:	2064      	movs	r0, #100	@ 0x64
 8001538:	f009 fad0 	bl	800aadc <pvPortMalloc>
 800153c:	60b8      	str	r0, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	4943      	ldr	r1, [pc, #268]	@ (8001650 <Update_File+0x13c>)
 8001542:	68b8      	ldr	r0, [r7, #8]
 8001544:	f00a fc1a 	bl	800bd7c <siprintf>
//		Send_Uart (buf);
		vPortFree(buf);
 8001548:	68b8      	ldr	r0, [r7, #8]
 800154a:	f009 fb95 	bl	800ac78 <vPortFree>
	    return fresult;
 800154e:	4b3f      	ldr	r3, [pc, #252]	@ (800164c <Update_File+0x138>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	e074      	b.n	800163e <Update_File+0x12a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8001554:	2232      	movs	r2, #50	@ 0x32
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	483e      	ldr	r0, [pc, #248]	@ (8001654 <Update_File+0x140>)
 800155a:	f006 f9b5 	bl	80078c8 <f_open>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	4b3a      	ldr	r3, [pc, #232]	@ (800164c <Update_File+0x138>)
 8001564:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001566:	4b39      	ldr	r3, [pc, #228]	@ (800164c <Update_File+0x138>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d011      	beq.n	8001592 <Update_File+0x7e>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 800156e:	2064      	movs	r0, #100	@ 0x64
 8001570:	f009 fab4 	bl	800aadc <pvPortMalloc>
 8001574:	60f8      	str	r0, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8001576:	4b35      	ldr	r3, [pc, #212]	@ (800164c <Update_File+0x138>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4936      	ldr	r1, [pc, #216]	@ (8001658 <Update_File+0x144>)
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f00a fbfb 	bl	800bd7c <siprintf>
//	    	Send_Uart(buf);
	        vPortFree(buf);
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f009 fb76 	bl	800ac78 <vPortFree>
	        return fresult;
 800158c:	4b2f      	ldr	r3, [pc, #188]	@ (800164c <Update_File+0x138>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	e055      	b.n	800163e <Update_File+0x12a>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8001592:	6838      	ldr	r0, [r7, #0]
 8001594:	f7fe fe9c 	bl	80002d0 <strlen>
 8001598:	4602      	mov	r2, r0
 800159a:	4b30      	ldr	r3, [pc, #192]	@ (800165c <Update_File+0x148>)
 800159c:	6839      	ldr	r1, [r7, #0]
 800159e:	482d      	ldr	r0, [pc, #180]	@ (8001654 <Update_File+0x140>)
 80015a0:	f006 fb53 	bl	8007c4a <f_write>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b28      	ldr	r3, [pc, #160]	@ (800164c <Update_File+0x138>)
 80015aa:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80015ac:	4b27      	ldr	r3, [pc, #156]	@ (800164c <Update_File+0x138>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00f      	beq.n	80015d4 <Update_File+0xc0>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80015b4:	2064      	movs	r0, #100	@ 0x64
 80015b6:	f009 fa91 	bl	800aadc <pvPortMalloc>
 80015ba:	61b8      	str	r0, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 80015bc:	4b23      	ldr	r3, [pc, #140]	@ (800164c <Update_File+0x138>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4926      	ldr	r1, [pc, #152]	@ (8001660 <Update_File+0x14c>)
 80015c6:	69b8      	ldr	r0, [r7, #24]
 80015c8:	f00a fbd8 	bl	800bd7c <siprintf>
//	    	Send_Uart(buf);
	    	vPortFree(buf);
 80015cc:	69b8      	ldr	r0, [r7, #24]
 80015ce:	f009 fb53 	bl	800ac78 <vPortFree>
 80015d2:	e00b      	b.n	80015ec <Update_File+0xd8>
	    }

	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80015d4:	2064      	movs	r0, #100	@ 0x64
 80015d6:	f009 fa81 	bl	800aadc <pvPortMalloc>
 80015da:	61f8      	str	r0, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	4921      	ldr	r1, [pc, #132]	@ (8001664 <Update_File+0x150>)
 80015e0:	69f8      	ldr	r0, [r7, #28]
 80015e2:	f00a fbcb 	bl	800bd7c <siprintf>
//	    	Send_Uart(buf);
	    	vPortFree(buf);
 80015e6:	69f8      	ldr	r0, [r7, #28]
 80015e8:	f009 fb46 	bl	800ac78 <vPortFree>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 80015ec:	4819      	ldr	r0, [pc, #100]	@ (8001654 <Update_File+0x140>)
 80015ee:	f006 fd59 	bl	80080a4 <f_close>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b15      	ldr	r3, [pc, #84]	@ (800164c <Update_File+0x138>)
 80015f8:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80015fa:	4b14      	ldr	r3, [pc, #80]	@ (800164c <Update_File+0x138>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00f      	beq.n	8001622 <Update_File+0x10e>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001602:	2064      	movs	r0, #100	@ 0x64
 8001604:	f009 fa6a 	bl	800aadc <pvPortMalloc>
 8001608:	6138      	str	r0, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <Update_File+0x138>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4915      	ldr	r1, [pc, #84]	@ (8001668 <Update_File+0x154>)
 8001614:	6938      	ldr	r0, [r7, #16]
 8001616:	f00a fbb1 	bl	800bd7c <siprintf>
//	    	Send_Uart(buf);
	    	vPortFree(buf);
 800161a:	6938      	ldr	r0, [r7, #16]
 800161c:	f009 fb2c 	bl	800ac78 <vPortFree>
 8001620:	e00b      	b.n	800163a <Update_File+0x126>
	    }
	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001622:	2064      	movs	r0, #100	@ 0x64
 8001624:	f009 fa5a 	bl	800aadc <pvPortMalloc>
 8001628:	6178      	str	r0, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	490f      	ldr	r1, [pc, #60]	@ (800166c <Update_File+0x158>)
 800162e:	6978      	ldr	r0, [r7, #20]
 8001630:	f00a fba4 	bl	800bd7c <siprintf>
//	    	Send_Uart(buf);
	    	vPortFree(buf);
 8001634:	6978      	ldr	r0, [r7, #20]
 8001636:	f009 fb1f 	bl	800ac78 <vPortFree>
	     }
	}
    return fresult;
 800163a:	4b04      	ldr	r3, [pc, #16]	@ (800164c <Update_File+0x138>)
 800163c:	781b      	ldrb	r3, [r3, #0]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3720      	adds	r7, #32
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000680 	.word	0x20000680
 800164c:	20000698 	.word	0x20000698
 8001650:	0800f6ec 	.word	0x0800f6ec
 8001654:	20000450 	.word	0x20000450
 8001658:	0800f70c 	.word	0x0800f70c
 800165c:	2000069c 	.word	0x2000069c
 8001660:	0800f928 	.word	0x0800f928
 8001664:	0800f950 	.word	0x0800f950
 8001668:	0800f81c 	.word	0x0800f81c
 800166c:	0800f844 	.word	0x0800f844

08001670 <CalculateCRC>:
//    index += strlen(footer);
//
//    HAL_UART_Transmit(huart, packet, packetLength, HAL_MAX_DELAY);  // Paketi gönder
//}

uint8_t CalculateCRC(uint8_t *data, uint16_t length) {
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]

    uint8_t crc = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < length; i++) {
 8001680:	2300      	movs	r3, #0
 8001682:	81bb      	strh	r3, [r7, #12]
 8001684:	e009      	b.n	800169a <CalculateCRC+0x2a>
        crc ^= data[i];
 8001686:	89bb      	ldrh	r3, [r7, #12]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	4413      	add	r3, r2
 800168c:	781a      	ldrb	r2, [r3, #0]
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	4053      	eors	r3, r2
 8001692:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < length; i++) {
 8001694:	89bb      	ldrh	r3, [r7, #12]
 8001696:	3301      	adds	r3, #1
 8001698:	81bb      	strh	r3, [r7, #12]
 800169a:	89ba      	ldrh	r2, [r7, #12]
 800169c:	887b      	ldrh	r3, [r7, #2]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d3f1      	bcc.n	8001686 <CalculateCRC+0x16>
    }
    return crc;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <SendDataPacket>:


void SendDataPacket(UART_HandleTypeDef *huart, uint8_t *data, uint16_t length) {
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b0cb      	sub	sp, #300	@ 0x12c
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80016ba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016be:	6018      	str	r0, [r3, #0]
 80016c0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80016c4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80016c8:	6019      	str	r1, [r3, #0]
 80016ca:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80016ce:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80016d2:	801a      	strh	r2, [r3, #0]

    const char *header = ":A42*";
 80016d4:	4b74      	ldr	r3, [pc, #464]	@ (80018a8 <SendDataPacket+0x1f8>)
 80016d6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    const char *footer = ";";  // Sonlandırıcı karakter
 80016da:	4b74      	ldr	r3, [pc, #464]	@ (80018ac <SendDataPacket+0x1fc>)
 80016dc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

    uint8_t crc = CalculateCRC(data, length);
 80016e0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80016e4:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80016e8:	881a      	ldrh	r2, [r3, #0]
 80016ea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80016ee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80016f2:	4611      	mov	r1, r2
 80016f4:	6818      	ldr	r0, [r3, #0]
 80016f6:	f7ff ffbb 	bl	8001670 <CalculateCRC>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

    char dataSizeStr[10];
    snprintf(dataSizeStr, sizeof(dataSizeStr), "%d", length); // Veri uzunluğunu yaz
 8001700:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001704:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800170e:	4a68      	ldr	r2, [pc, #416]	@ (80018b0 <SendDataPacket+0x200>)
 8001710:	210a      	movs	r1, #10
 8001712:	f00a faff 	bl	800bd14 <sniprintf>

    uint16_t packetLength = strlen(header) + strlen(dataSizeStr) + 1 + length + 1 + sizeof(crc)+ strlen(footer);
 8001716:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 800171a:	f7fe fdd9 	bl	80002d0 <strlen>
 800171e:	4603      	mov	r3, r0
 8001720:	b29c      	uxth	r4, r3
 8001722:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe fdd2 	bl	80002d0 <strlen>
 800172c:	4603      	mov	r3, r0
 800172e:	b29b      	uxth	r3, r3
 8001730:	4423      	add	r3, r4
 8001732:	b29a      	uxth	r2, r3
 8001734:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001738:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	b29c      	uxth	r4, r3
 8001742:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8001746:	f7fe fdc3 	bl	80002d0 <strlen>
 800174a:	4603      	mov	r3, r0
 800174c:	b29b      	uxth	r3, r3
 800174e:	4423      	add	r3, r4
 8001750:	b29b      	uxth	r3, r3
 8001752:	3303      	adds	r3, #3
 8001754:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e

    uint8_t packet[256];  // Statik olarak ayrılan buffer, maksimum paket boyutuna uygun

    uint16_t index = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
    memcpy(&packet[index], header, strlen(header));  // Başlık ekle
 800175e:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8001762:	f107 0210 	add.w	r2, r7, #16
 8001766:	18d4      	adds	r4, r2, r3
 8001768:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 800176c:	f7fe fdb0 	bl	80002d0 <strlen>
 8001770:	4603      	mov	r3, r0
 8001772:	461a      	mov	r2, r3
 8001774:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 8001778:	4620      	mov	r0, r4
 800177a:	f00a fc38 	bl	800bfee <memcpy>
    index += strlen(header);
 800177e:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8001782:	f7fe fda5 	bl	80002d0 <strlen>
 8001786:	4603      	mov	r3, r0
 8001788:	b29a      	uxth	r2, r3
 800178a:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 800178e:	4413      	add	r3, r2
 8001790:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

    memcpy(&packet[index], dataSizeStr, strlen(dataSizeStr));  // Veri uzunluğunu ekle
 8001794:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8001798:	f107 0210 	add.w	r2, r7, #16
 800179c:	18d4      	adds	r4, r2, r3
 800179e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fd94 	bl	80002d0 <strlen>
 80017a8:	4602      	mov	r2, r0
 80017aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017ae:	4619      	mov	r1, r3
 80017b0:	4620      	mov	r0, r4
 80017b2:	f00a fc1c 	bl	800bfee <memcpy>
    index += strlen(dataSizeStr);
 80017b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fd88 	bl	80002d0 <strlen>
 80017c0:	4603      	mov	r3, r0
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 80017c8:	4413      	add	r3, r2
 80017ca:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
    packet[index++] = '*';  // Ayırıcı karakter
 80017ce:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	f8a7 211c 	strh.w	r2, [r7, #284]	@ 0x11c
 80017d8:	461a      	mov	r2, r3
 80017da:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80017de:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80017e2:	212a      	movs	r1, #42	@ 0x2a
 80017e4:	5499      	strb	r1, [r3, r2]

    memcpy(&packet[index], data, length);  // Veriyi ekle
 80017e6:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 80017ea:	f107 0210 	add.w	r2, r7, #16
 80017ee:	18d0      	adds	r0, r2, r3
 80017f0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80017f4:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80017f8:	881a      	ldrh	r2, [r3, #0]
 80017fa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80017fe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001802:	6819      	ldr	r1, [r3, #0]
 8001804:	f00a fbf3 	bl	800bfee <memcpy>
    index += length;
 8001808:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800180c:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8001810:	f8b7 211c 	ldrh.w	r2, [r7, #284]	@ 0x11c
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	4413      	add	r3, r2
 8001818:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

    packet[index++] = '*';  // CRC'yi ekle
 800181c:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	f8a7 211c 	strh.w	r2, [r7, #284]	@ 0x11c
 8001826:	461a      	mov	r2, r3
 8001828:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800182c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001830:	212a      	movs	r1, #42	@ 0x2a
 8001832:	5499      	strb	r1, [r3, r2]


    memcpy(&packet[index], &crc, 1);
 8001834:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8001838:	f107 0210 	add.w	r2, r7, #16
 800183c:	4413      	add	r3, r2
 800183e:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 8001842:	701a      	strb	r2, [r3, #0]
    index += 1;
 8001844:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8001848:	3301      	adds	r3, #1
 800184a:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

    memcpy(&packet[index], footer, strlen(footer));  // Sonlandırıcı karakter ekle
 800184e:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8001852:	f107 0210 	add.w	r2, r7, #16
 8001856:	18d4      	adds	r4, r2, r3
 8001858:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800185c:	f7fe fd38 	bl	80002d0 <strlen>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 8001868:	4620      	mov	r0, r4
 800186a:	f00a fbc0 	bl	800bfee <memcpy>
    index += strlen(footer);
 800186e:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8001872:	f7fe fd2d 	bl	80002d0 <strlen>
 8001876:	4603      	mov	r3, r0
 8001878:	b29a      	uxth	r2, r3
 800187a:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 800187e:	4413      	add	r3, r2
 8001880:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

    HAL_UART_Transmit(huart, packet, packetLength, 1000);  // Paketi gönder
 8001884:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 8001888:	f107 0110 	add.w	r1, r7, #16
 800188c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001890:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 8001894:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001898:	6800      	ldr	r0, [r0, #0]
 800189a:	f003 fd21 	bl	80052e0 <HAL_UART_Transmit>
}
 800189e:	bf00      	nop
 80018a0:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd90      	pop	{r4, r7, pc}
 80018a8:	0800fa3c 	.word	0x0800fa3c
 80018ac:	0800fa44 	.word	0x0800fa44
 80018b0:	0800fa48 	.word	0x0800fa48

080018b4 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2140      	movs	r1, #64	@ 0x40
 80018bc:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <SELECT+0x14>)
 80018be:	f001 fd4d 	bl	800335c <HAL_GPIO_WritePin>
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40020400 	.word	0x40020400

080018cc <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80018d0:	2201      	movs	r2, #1
 80018d2:	2140      	movs	r1, #64	@ 0x40
 80018d4:	4802      	ldr	r0, [pc, #8]	@ (80018e0 <DESELECT+0x14>)
 80018d6:	f001 fd41 	bl	800335c <HAL_GPIO_WritePin>
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40020400 	.word	0x40020400

080018e4 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80018ee:	bf00      	nop
 80018f0:	4808      	ldr	r0, [pc, #32]	@ (8001914 <SPI_TxByte+0x30>)
 80018f2:	f002 fedd 	bl	80046b0 <HAL_SPI_GetState>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d1f9      	bne.n	80018f0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80018fc:	1df9      	adds	r1, r7, #7
 80018fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001902:	2201      	movs	r2, #1
 8001904:	4803      	ldr	r0, [pc, #12]	@ (8001914 <SPI_TxByte+0x30>)
 8001906:	f002 fbe6 	bl	80040d6 <HAL_SPI_Transmit>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000944 	.word	0x20000944

08001918 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800191e:	23ff      	movs	r3, #255	@ 0xff
 8001920:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8001926:	bf00      	nop
 8001928:	4809      	ldr	r0, [pc, #36]	@ (8001950 <SPI_RxByte+0x38>)
 800192a:	f002 fec1 	bl	80046b0 <HAL_SPI_GetState>
 800192e:	4603      	mov	r3, r0
 8001930:	2b01      	cmp	r3, #1
 8001932:	d1f9      	bne.n	8001928 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8001934:	1dba      	adds	r2, r7, #6
 8001936:	1df9      	adds	r1, r7, #7
 8001938:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2301      	movs	r3, #1
 8001940:	4803      	ldr	r0, [pc, #12]	@ (8001950 <SPI_RxByte+0x38>)
 8001942:	f002 fd0c 	bl	800435e <HAL_SPI_TransmitReceive>
  
  return data;
 8001946:	79bb      	ldrb	r3, [r7, #6]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000944 	.word	0x20000944

08001954 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800195c:	f7ff ffdc 	bl	8001918 <SPI_RxByte>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	701a      	strb	r2, [r3, #0]
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8001976:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <SD_ReadyWait+0x34>)
 8001978:	2232      	movs	r2, #50	@ 0x32
 800197a:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 800197c:	f7ff ffcc 	bl	8001918 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8001980:	f7ff ffca 	bl	8001918 <SPI_RxByte>
 8001984:	4603      	mov	r3, r0
 8001986:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	2bff      	cmp	r3, #255	@ 0xff
 800198c:	d004      	beq.n	8001998 <SD_ReadyWait+0x28>
 800198e:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <SD_ReadyWait+0x34>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f3      	bne.n	8001980 <SD_ReadyWait+0x10>
  
  return res;
 8001998:	79fb      	ldrb	r3, [r7, #7]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000ad2 	.word	0x20000ad2

080019a8 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80019ae:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80019b2:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 80019b4:	f7ff ff8a 	bl	80018cc <DESELECT>
  
  for(int i = 0; i < 10; i++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	e005      	b.n	80019ca <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80019be:	20ff      	movs	r0, #255	@ 0xff
 80019c0:	f7ff ff90 	bl	80018e4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	3301      	adds	r3, #1
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	2b09      	cmp	r3, #9
 80019ce:	ddf6      	ble.n	80019be <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 80019d0:	f7ff ff70 	bl	80018b4 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 80019d4:	2340      	movs	r3, #64	@ 0x40
 80019d6:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80019e8:	2395      	movs	r3, #149	@ 0x95
 80019ea:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e009      	b.n	8001a06 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80019f2:	1d3a      	adds	r2, r7, #4
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff72 	bl	80018e4 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	3301      	adds	r3, #1
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2b05      	cmp	r3, #5
 8001a0a:	ddf2      	ble.n	80019f2 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8001a0c:	e002      	b.n	8001a14 <SD_PowerOn+0x6c>
  {
    Count--;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001a14:	f7ff ff80 	bl	8001918 <SPI_RxByte>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d002      	beq.n	8001a24 <SD_PowerOn+0x7c>
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1f4      	bne.n	8001a0e <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8001a24:	f7ff ff52 	bl	80018cc <DESELECT>
  SPI_TxByte(0XFF);
 8001a28:	20ff      	movs	r0, #255	@ 0xff
 8001a2a:	f7ff ff5b 	bl	80018e4 <SPI_TxByte>
  
  PowerFlag = 1;
 8001a2e:	4b03      	ldr	r3, [pc, #12]	@ (8001a3c <SD_PowerOn+0x94>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
}
 8001a34:	bf00      	nop
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200006a1 	.word	0x200006a1

08001a40 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001a44:	4b03      	ldr	r3, [pc, #12]	@ (8001a54 <SD_PowerOff+0x14>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	200006a1 	.word	0x200006a1

08001a58 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001a5c:	4b03      	ldr	r3, [pc, #12]	@ (8001a6c <SD_CheckPower+0x14>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	200006a1 	.word	0x200006a1

08001a70 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8001a7a:	4b17      	ldr	r3, [pc, #92]	@ (8001ad8 <SD_RxDataBlock+0x68>)
 8001a7c:	220a      	movs	r2, #10
 8001a7e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8001a80:	f7ff ff4a 	bl	8001918 <SPI_RxByte>
 8001a84:	4603      	mov	r3, r0
 8001a86:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	2bff      	cmp	r3, #255	@ 0xff
 8001a8c:	d104      	bne.n	8001a98 <SD_RxDataBlock+0x28>
 8001a8e:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <SD_RxDataBlock+0x68>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f3      	bne.n	8001a80 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	2bfe      	cmp	r3, #254	@ 0xfe
 8001a9c:	d001      	beq.n	8001aa2 <SD_RxDataBlock+0x32>
    return FALSE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e016      	b.n	8001ad0 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff53 	bl	8001954 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff4d 	bl	8001954 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	3b02      	subs	r3, #2
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1ed      	bne.n	8001aa2 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8001ac6:	f7ff ff27 	bl	8001918 <SPI_RxByte>
  SPI_RxByte();
 8001aca:	f7ff ff25 	bl	8001918 <SPI_RxByte>
  
  return TRUE;
 8001ace:	2301      	movs	r3, #1
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000ad1 	.word	0x20000ad1

08001adc <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001aec:	f7ff ff40 	bl	8001970 <SD_ReadyWait>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2bff      	cmp	r3, #255	@ 0xff
 8001af4:	d001      	beq.n	8001afa <SD_TxDataBlock+0x1e>
    return FALSE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e040      	b.n	8001b7c <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fef1 	bl	80018e4 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8001b02:	78fb      	ldrb	r3, [r7, #3]
 8001b04:	2bfd      	cmp	r3, #253	@ 0xfd
 8001b06:	d031      	beq.n	8001b6c <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	607a      	str	r2, [r7, #4]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fee5 	bl	80018e4 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	607a      	str	r2, [r7, #4]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fede 	bl	80018e4 <SPI_TxByte>
    } while (--wc);
 8001b28:	7bbb      	ldrb	r3, [r7, #14]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	73bb      	strb	r3, [r7, #14]
 8001b2e:	7bbb      	ldrb	r3, [r7, #14]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1eb      	bne.n	8001b0c <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8001b34:	f7ff fef0 	bl	8001918 <SPI_RxByte>
    SPI_RxByte();
 8001b38:	f7ff feee 	bl	8001918 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001b3c:	e00b      	b.n	8001b56 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8001b3e:	f7ff feeb 	bl	8001918 <SPI_RxByte>
 8001b42:	4603      	mov	r3, r0
 8001b44:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d006      	beq.n	8001b5e <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8001b50:	7b7b      	ldrb	r3, [r7, #13]
 8001b52:	3301      	adds	r3, #1
 8001b54:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8001b56:	7b7b      	ldrb	r3, [r7, #13]
 8001b58:	2b40      	cmp	r3, #64	@ 0x40
 8001b5a:	d9f0      	bls.n	8001b3e <SD_TxDataBlock+0x62>
 8001b5c:	e000      	b.n	8001b60 <SD_TxDataBlock+0x84>
        break;
 8001b5e:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001b60:	bf00      	nop
 8001b62:	f7ff fed9 	bl	8001918 <SPI_RxByte>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0fa      	beq.n	8001b62 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	f003 031f 	and.w	r3, r3, #31
 8001b72:	2b05      	cmp	r3, #5
 8001b74:	d101      	bne.n	8001b7a <SD_TxDataBlock+0x9e>
    return TRUE;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001b90:	f7ff feee 	bl	8001970 <SD_ReadyWait>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2bff      	cmp	r3, #255	@ 0xff
 8001b98:	d001      	beq.n	8001b9e <SD_SendCmd+0x1a>
    return 0xFF;
 8001b9a:	23ff      	movs	r3, #255	@ 0xff
 8001b9c:	e040      	b.n	8001c20 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fe9f 	bl	80018e4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	0e1b      	lsrs	r3, r3, #24
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fe99 	bl	80018e4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	0c1b      	lsrs	r3, r3, #16
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fe93 	bl	80018e4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fe8d 	bl	80018e4 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fe88 	bl	80018e4 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	2b40      	cmp	r3, #64	@ 0x40
 8001bdc:	d101      	bne.n	8001be2 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001bde:	2395      	movs	r3, #149	@ 0x95
 8001be0:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	2b48      	cmp	r3, #72	@ 0x48
 8001be6:	d101      	bne.n	8001bec <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001be8:	2387      	movs	r3, #135	@ 0x87
 8001bea:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fe78 	bl	80018e4 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	2b4c      	cmp	r3, #76	@ 0x4c
 8001bf8:	d101      	bne.n	8001bfe <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001bfa:	f7ff fe8d 	bl	8001918 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8001bfe:	230a      	movs	r3, #10
 8001c00:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001c02:	f7ff fe89 	bl	8001918 <SPI_RxByte>
 8001c06:	4603      	mov	r3, r0
 8001c08:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001c0a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	da05      	bge.n	8001c1e <SD_SendCmd+0x9a>
 8001c12:	7bbb      	ldrb	r3, [r7, #14]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	73bb      	strb	r3, [r7, #14]
 8001c18:	7bbb      	ldrb	r3, [r7, #14]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f1      	bne.n	8001c02 <SD_SendCmd+0x7e>
  
  return res;
 8001c1e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0d5      	b.n	8001de8 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001c3c:	4b6c      	ldr	r3, [pc, #432]	@ (8001df0 <SD_disk_initialize+0x1c8>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <SD_disk_initialize+0x2a>
    return Stat;        
 8001c4a:	4b69      	ldr	r3, [pc, #420]	@ (8001df0 <SD_disk_initialize+0x1c8>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	e0ca      	b.n	8001de8 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8001c52:	f7ff fea9 	bl	80019a8 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8001c56:	f7ff fe2d 	bl	80018b4 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001c5e:	2100      	movs	r1, #0
 8001c60:	2040      	movs	r0, #64	@ 0x40
 8001c62:	f7ff ff8f 	bl	8001b84 <SD_SendCmd>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	f040 80a5 	bne.w	8001db8 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001c6e:	4b61      	ldr	r3, [pc, #388]	@ (8001df4 <SD_disk_initialize+0x1cc>)
 8001c70:	2264      	movs	r2, #100	@ 0x64
 8001c72:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001c74:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001c78:	2048      	movs	r0, #72	@ 0x48
 8001c7a:	f7ff ff83 	bl	8001b84 <SD_SendCmd>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d158      	bne.n	8001d36 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001c84:	2300      	movs	r3, #0
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	e00c      	b.n	8001ca4 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001c8a:	7bfc      	ldrb	r4, [r7, #15]
 8001c8c:	f7ff fe44 	bl	8001918 <SPI_RxByte>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	f104 0310 	add.w	r3, r4, #16
 8001c98:	443b      	add	r3, r7
 8001c9a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d9ef      	bls.n	8001c8a <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001caa:	7abb      	ldrb	r3, [r7, #10]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	f040 8083 	bne.w	8001db8 <SD_disk_initialize+0x190>
 8001cb2:	7afb      	ldrb	r3, [r7, #11]
 8001cb4:	2baa      	cmp	r3, #170	@ 0xaa
 8001cb6:	d17f      	bne.n	8001db8 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2077      	movs	r0, #119	@ 0x77
 8001cbc:	f7ff ff62 	bl	8001b84 <SD_SendCmd>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d807      	bhi.n	8001cd6 <SD_disk_initialize+0xae>
 8001cc6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001cca:	2069      	movs	r0, #105	@ 0x69
 8001ccc:	f7ff ff5a 	bl	8001b84 <SD_SendCmd>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d005      	beq.n	8001ce2 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001cd6:	4b47      	ldr	r3, [pc, #284]	@ (8001df4 <SD_disk_initialize+0x1cc>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1eb      	bne.n	8001cb8 <SD_disk_initialize+0x90>
 8001ce0:	e000      	b.n	8001ce4 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001ce2:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001ce4:	4b43      	ldr	r3, [pc, #268]	@ (8001df4 <SD_disk_initialize+0x1cc>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d064      	beq.n	8001db8 <SD_disk_initialize+0x190>
 8001cee:	2100      	movs	r1, #0
 8001cf0:	207a      	movs	r0, #122	@ 0x7a
 8001cf2:	f7ff ff47 	bl	8001b84 <SD_SendCmd>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d15d      	bne.n	8001db8 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	73fb      	strb	r3, [r7, #15]
 8001d00:	e00c      	b.n	8001d1c <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001d02:	7bfc      	ldrb	r4, [r7, #15]
 8001d04:	f7ff fe08 	bl	8001918 <SPI_RxByte>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f104 0310 	add.w	r3, r4, #16
 8001d10:	443b      	add	r3, r7
 8001d12:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	d9ef      	bls.n	8001d02 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8001d22:	7a3b      	ldrb	r3, [r7, #8]
 8001d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <SD_disk_initialize+0x108>
 8001d2c:	2306      	movs	r3, #6
 8001d2e:	e000      	b.n	8001d32 <SD_disk_initialize+0x10a>
 8001d30:	2302      	movs	r3, #2
 8001d32:	73bb      	strb	r3, [r7, #14]
 8001d34:	e040      	b.n	8001db8 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001d36:	2100      	movs	r1, #0
 8001d38:	2077      	movs	r0, #119	@ 0x77
 8001d3a:	f7ff ff23 	bl	8001b84 <SD_SendCmd>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d808      	bhi.n	8001d56 <SD_disk_initialize+0x12e>
 8001d44:	2100      	movs	r1, #0
 8001d46:	2069      	movs	r0, #105	@ 0x69
 8001d48:	f7ff ff1c 	bl	8001b84 <SD_SendCmd>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d801      	bhi.n	8001d56 <SD_disk_initialize+0x12e>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e000      	b.n	8001d58 <SD_disk_initialize+0x130>
 8001d56:	2301      	movs	r3, #1
 8001d58:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001d5a:	7bbb      	ldrb	r3, [r7, #14]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d10e      	bne.n	8001d7e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001d60:	2100      	movs	r1, #0
 8001d62:	2077      	movs	r0, #119	@ 0x77
 8001d64:	f7ff ff0e 	bl	8001b84 <SD_SendCmd>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d80e      	bhi.n	8001d8c <SD_disk_initialize+0x164>
 8001d6e:	2100      	movs	r1, #0
 8001d70:	2069      	movs	r0, #105	@ 0x69
 8001d72:	f7ff ff07 	bl	8001b84 <SD_SendCmd>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d107      	bne.n	8001d8c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001d7c:	e00d      	b.n	8001d9a <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001d7e:	2100      	movs	r1, #0
 8001d80:	2041      	movs	r0, #65	@ 0x41
 8001d82:	f7ff feff 	bl	8001b84 <SD_SendCmd>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001d8c:	4b19      	ldr	r3, [pc, #100]	@ (8001df4 <SD_disk_initialize+0x1cc>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1e1      	bne.n	8001d5a <SD_disk_initialize+0x132>
 8001d96:	e000      	b.n	8001d9a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001d98:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001d9a:	4b16      	ldr	r3, [pc, #88]	@ (8001df4 <SD_disk_initialize+0x1cc>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d007      	beq.n	8001db4 <SD_disk_initialize+0x18c>
 8001da4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001da8:	2050      	movs	r0, #80	@ 0x50
 8001daa:	f7ff feeb 	bl	8001b84 <SD_SendCmd>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8001db8:	4a0f      	ldr	r2, [pc, #60]	@ (8001df8 <SD_disk_initialize+0x1d0>)
 8001dba:	7bbb      	ldrb	r3, [r7, #14]
 8001dbc:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8001dbe:	f7ff fd85 	bl	80018cc <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001dc2:	f7ff fda9 	bl	8001918 <SPI_RxByte>
  
  if (type) 
 8001dc6:	7bbb      	ldrb	r3, [r7, #14]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001dcc:	4b08      	ldr	r3, [pc, #32]	@ (8001df0 <SD_disk_initialize+0x1c8>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	f023 0301 	bic.w	r3, r3, #1
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	4b05      	ldr	r3, [pc, #20]	@ (8001df0 <SD_disk_initialize+0x1c8>)
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	e001      	b.n	8001de2 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001dde:	f7ff fe2f 	bl	8001a40 <SD_PowerOff>
  }
  
  return Stat;
 8001de2:	4b03      	ldr	r3, [pc, #12]	@ (8001df0 <SD_disk_initialize+0x1c8>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b2db      	uxtb	r3, r3
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd90      	pop	{r4, r7, pc}
 8001df0:	20000000 	.word	0x20000000
 8001df4:	20000ad1 	.word	0x20000ad1
 8001df8:	200006a0 	.word	0x200006a0

08001dfc <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e002      	b.n	8001e16 <SD_disk_status+0x1a>
  
  return Stat;
 8001e10:	4b04      	ldr	r3, [pc, #16]	@ (8001e24 <SD_disk_status+0x28>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	b2db      	uxtb	r3, r3
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000000 	.word	0x20000000

08001e28 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	4603      	mov	r3, r0
 8001e36:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d102      	bne.n	8001e44 <SD_disk_read+0x1c>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <SD_disk_read+0x20>
    return RES_PARERR;
 8001e44:	2304      	movs	r3, #4
 8001e46:	e051      	b.n	8001eec <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001e48:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef4 <SD_disk_read+0xcc>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e048      	b.n	8001eec <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001e5a:	4b27      	ldr	r3, [pc, #156]	@ (8001ef8 <SD_disk_read+0xd0>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d102      	bne.n	8001e6c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	025b      	lsls	r3, r3, #9
 8001e6a:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001e6c:	f7ff fd22 	bl	80018b4 <SELECT>
  
  if (count == 1) 
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d111      	bne.n	8001e9a <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	2051      	movs	r0, #81	@ 0x51
 8001e7a:	f7ff fe83 	bl	8001b84 <SD_SendCmd>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d129      	bne.n	8001ed8 <SD_disk_read+0xb0>
 8001e84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e88:	68b8      	ldr	r0, [r7, #8]
 8001e8a:	f7ff fdf1 	bl	8001a70 <SD_RxDataBlock>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d021      	beq.n	8001ed8 <SD_disk_read+0xb0>
      count = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	e01e      	b.n	8001ed8 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	2052      	movs	r0, #82	@ 0x52
 8001e9e:	f7ff fe71 	bl	8001b84 <SD_SendCmd>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d117      	bne.n	8001ed8 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001ea8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001eac:	68b8      	ldr	r0, [r7, #8]
 8001eae:	f7ff fddf 	bl	8001a70 <SD_RxDataBlock>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00a      	beq.n	8001ece <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001ebe:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1ed      	bne.n	8001ea8 <SD_disk_read+0x80>
 8001ecc:	e000      	b.n	8001ed0 <SD_disk_read+0xa8>
          break;
 8001ece:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	204c      	movs	r0, #76	@ 0x4c
 8001ed4:	f7ff fe56 	bl	8001b84 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8001ed8:	f7ff fcf8 	bl	80018cc <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001edc:	f7ff fd1c 	bl	8001918 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	bf14      	ite	ne
 8001ee6:	2301      	movne	r3, #1
 8001ee8:	2300      	moveq	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	200006a0 	.word	0x200006a0

08001efc <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	4603      	mov	r3, r0
 8001f0a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d102      	bne.n	8001f18 <SD_disk_write+0x1c>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <SD_disk_write+0x20>
    return RES_PARERR;
 8001f18:	2304      	movs	r3, #4
 8001f1a:	e06b      	b.n	8001ff4 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001f1c:	4b37      	ldr	r3, [pc, #220]	@ (8001ffc <SD_disk_write+0x100>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e062      	b.n	8001ff4 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001f2e:	4b33      	ldr	r3, [pc, #204]	@ (8001ffc <SD_disk_write+0x100>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e059      	b.n	8001ff4 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001f40:	4b2f      	ldr	r3, [pc, #188]	@ (8002000 <SD_disk_write+0x104>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d102      	bne.n	8001f52 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	025b      	lsls	r3, r3, #9
 8001f50:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001f52:	f7ff fcaf 	bl	80018b4 <SELECT>
  
  if (count == 1) 
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d110      	bne.n	8001f7e <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	2058      	movs	r0, #88	@ 0x58
 8001f60:	f7ff fe10 	bl	8001b84 <SD_SendCmd>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d13a      	bne.n	8001fe0 <SD_disk_write+0xe4>
 8001f6a:	21fe      	movs	r1, #254	@ 0xfe
 8001f6c:	68b8      	ldr	r0, [r7, #8]
 8001f6e:	f7ff fdb5 	bl	8001adc <SD_TxDataBlock>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d033      	beq.n	8001fe0 <SD_disk_write+0xe4>
      count = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	603b      	str	r3, [r7, #0]
 8001f7c:	e030      	b.n	8001fe0 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001f7e:	4b20      	ldr	r3, [pc, #128]	@ (8002000 <SD_disk_write+0x104>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d007      	beq.n	8001f9a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2077      	movs	r0, #119	@ 0x77
 8001f8e:	f7ff fdf9 	bl	8001b84 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001f92:	6839      	ldr	r1, [r7, #0]
 8001f94:	2057      	movs	r0, #87	@ 0x57
 8001f96:	f7ff fdf5 	bl	8001b84 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	2059      	movs	r0, #89	@ 0x59
 8001f9e:	f7ff fdf1 	bl	8001b84 <SD_SendCmd>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d11b      	bne.n	8001fe0 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001fa8:	21fc      	movs	r1, #252	@ 0xfc
 8001faa:	68b8      	ldr	r0, [r7, #8]
 8001fac:	f7ff fd96 	bl	8001adc <SD_TxDataBlock>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00a      	beq.n	8001fcc <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001fbc:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1ee      	bne.n	8001fa8 <SD_disk_write+0xac>
 8001fca:	e000      	b.n	8001fce <SD_disk_write+0xd2>
          break;
 8001fcc:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8001fce:	21fd      	movs	r1, #253	@ 0xfd
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f7ff fd83 	bl	8001adc <SD_TxDataBlock>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <SD_disk_write+0xe4>
      {        
        count = 1;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001fe0:	f7ff fc74 	bl	80018cc <DESELECT>
  SPI_RxByte();
 8001fe4:	f7ff fc98 	bl	8001918 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	bf14      	ite	ne
 8001fee:	2301      	movne	r3, #1
 8001ff0:	2300      	moveq	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000000 	.word	0x20000000
 8002000:	200006a0 	.word	0x200006a0

08002004 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b08b      	sub	sp, #44	@ 0x2c
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	603a      	str	r2, [r7, #0]
 800200e:	71fb      	strb	r3, [r7, #7]
 8002010:	460b      	mov	r3, r1
 8002012:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800201e:	2304      	movs	r3, #4
 8002020:	e119      	b.n	8002256 <SD_disk_ioctl+0x252>
  
  res = RES_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  if (ctrl == CTRL_POWER) 
 8002028:	79bb      	ldrb	r3, [r7, #6]
 800202a:	2b05      	cmp	r3, #5
 800202c:	d129      	bne.n	8002082 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 800202e:	6a3b      	ldr	r3, [r7, #32]
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d017      	beq.n	8002066 <SD_disk_ioctl+0x62>
 8002036:	2b02      	cmp	r3, #2
 8002038:	dc1f      	bgt.n	800207a <SD_disk_ioctl+0x76>
 800203a:	2b00      	cmp	r3, #0
 800203c:	d002      	beq.n	8002044 <SD_disk_ioctl+0x40>
 800203e:	2b01      	cmp	r3, #1
 8002040:	d00b      	beq.n	800205a <SD_disk_ioctl+0x56>
 8002042:	e01a      	b.n	800207a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002044:	f7ff fd08 	bl	8001a58 <SD_CheckPower>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800204e:	f7ff fcf7 	bl	8001a40 <SD_PowerOff>
      res = RES_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002058:	e0fb      	b.n	8002252 <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 800205a:	f7ff fca5 	bl	80019a8 <SD_PowerOn>
      res = RES_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002064:	e0f5      	b.n	8002252 <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	1c5c      	adds	r4, r3, #1
 800206a:	f7ff fcf5 	bl	8001a58 <SD_CheckPower>
 800206e:	4603      	mov	r3, r0
 8002070:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8002072:	2300      	movs	r3, #0
 8002074:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002078:	e0eb      	b.n	8002252 <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 800207a:	2304      	movs	r3, #4
 800207c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002080:	e0e7      	b.n	8002252 <SD_disk_ioctl+0x24e>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8002082:	4b77      	ldr	r3, [pc, #476]	@ (8002260 <SD_disk_ioctl+0x25c>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8002090:	2303      	movs	r3, #3
 8002092:	e0e0      	b.n	8002256 <SD_disk_ioctl+0x252>
    
    SELECT();
 8002094:	f7ff fc0e 	bl	80018b4 <SELECT>
    
    switch (ctrl) 
 8002098:	79bb      	ldrb	r3, [r7, #6]
 800209a:	2b0d      	cmp	r3, #13
 800209c:	f200 80ca 	bhi.w	8002234 <SD_disk_ioctl+0x230>
 80020a0:	a201      	add	r2, pc, #4	@ (adr r2, 80020a8 <SD_disk_ioctl+0xa4>)
 80020a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a6:	bf00      	nop
 80020a8:	0800219f 	.word	0x0800219f
 80020ac:	080020e1 	.word	0x080020e1
 80020b0:	0800218f 	.word	0x0800218f
 80020b4:	08002235 	.word	0x08002235
 80020b8:	08002235 	.word	0x08002235
 80020bc:	08002235 	.word	0x08002235
 80020c0:	08002235 	.word	0x08002235
 80020c4:	08002235 	.word	0x08002235
 80020c8:	08002235 	.word	0x08002235
 80020cc:	08002235 	.word	0x08002235
 80020d0:	08002235 	.word	0x08002235
 80020d4:	080021b1 	.word	0x080021b1
 80020d8:	080021d5 	.word	0x080021d5
 80020dc:	080021f9 	.word	0x080021f9
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80020e0:	2100      	movs	r1, #0
 80020e2:	2049      	movs	r0, #73	@ 0x49
 80020e4:	f7ff fd4e 	bl	8001b84 <SD_SendCmd>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f040 80a6 	bne.w	800223c <SD_disk_ioctl+0x238>
 80020f0:	f107 030c 	add.w	r3, r7, #12
 80020f4:	2110      	movs	r1, #16
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fcba 	bl	8001a70 <SD_RxDataBlock>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 809c 	beq.w	800223c <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1) 
 8002104:	7b3b      	ldrb	r3, [r7, #12]
 8002106:	099b      	lsrs	r3, r3, #6
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b01      	cmp	r3, #1
 800210c:	d10d      	bne.n	800212a <SD_disk_ioctl+0x126>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800210e:	7d7b      	ldrb	r3, [r7, #21]
 8002110:	461a      	mov	r2, r3
 8002112:	7d3b      	ldrb	r3, [r7, #20]
 8002114:	021b      	lsls	r3, r3, #8
 8002116:	b29b      	uxth	r3, r3
 8002118:	4413      	add	r3, r2
 800211a:	b29b      	uxth	r3, r3
 800211c:	3301      	adds	r3, #1
 800211e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002120:	8bfb      	ldrh	r3, [r7, #30]
 8002122:	029a      	lsls	r2, r3, #10
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	e02d      	b.n	8002186 <SD_disk_ioctl+0x182>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800212a:	7c7b      	ldrb	r3, [r7, #17]
 800212c:	f003 030f 	and.w	r3, r3, #15
 8002130:	b2da      	uxtb	r2, r3
 8002132:	7dbb      	ldrb	r3, [r7, #22]
 8002134:	09db      	lsrs	r3, r3, #7
 8002136:	b2db      	uxtb	r3, r3
 8002138:	4413      	add	r3, r2
 800213a:	b2da      	uxtb	r2, r3
 800213c:	7d7b      	ldrb	r3, [r7, #21]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	b2db      	uxtb	r3, r3
 8002142:	f003 0306 	and.w	r3, r3, #6
 8002146:	b2db      	uxtb	r3, r3
 8002148:	4413      	add	r3, r2
 800214a:	b2db      	uxtb	r3, r3
 800214c:	3302      	adds	r3, #2
 800214e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002152:	7d3b      	ldrb	r3, [r7, #20]
 8002154:	099b      	lsrs	r3, r3, #6
 8002156:	b2db      	uxtb	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	7cfb      	ldrb	r3, [r7, #19]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	b29b      	uxth	r3, r3
 8002160:	4413      	add	r3, r2
 8002162:	b29a      	uxth	r2, r3
 8002164:	7cbb      	ldrb	r3, [r7, #18]
 8002166:	029b      	lsls	r3, r3, #10
 8002168:	b29b      	uxth	r3, r3
 800216a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800216e:	b29b      	uxth	r3, r3
 8002170:	4413      	add	r3, r2
 8002172:	b29b      	uxth	r3, r3
 8002174:	3301      	adds	r3, #1
 8002176:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002178:	8bfa      	ldrh	r2, [r7, #30]
 800217a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800217e:	3b09      	subs	r3, #9
 8002180:	409a      	lsls	r2, r3
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 800218c:	e056      	b.n	800223c <SD_disk_ioctl+0x238>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002194:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800219c:	e055      	b.n	800224a <SD_disk_ioctl+0x246>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800219e:	f7ff fbe7 	bl	8001970 <SD_ReadyWait>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2bff      	cmp	r3, #255	@ 0xff
 80021a6:	d14b      	bne.n	8002240 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80021ae:	e047      	b.n	8002240 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80021b0:	2100      	movs	r1, #0
 80021b2:	2049      	movs	r0, #73	@ 0x49
 80021b4:	f7ff fce6 	bl	8001b84 <SD_SendCmd>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d142      	bne.n	8002244 <SD_disk_ioctl+0x240>
 80021be:	2110      	movs	r1, #16
 80021c0:	6a38      	ldr	r0, [r7, #32]
 80021c2:	f7ff fc55 	bl	8001a70 <SD_RxDataBlock>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d03b      	beq.n	8002244 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80021d2:	e037      	b.n	8002244 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80021d4:	2100      	movs	r1, #0
 80021d6:	204a      	movs	r0, #74	@ 0x4a
 80021d8:	f7ff fcd4 	bl	8001b84 <SD_SendCmd>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d132      	bne.n	8002248 <SD_disk_ioctl+0x244>
 80021e2:	2110      	movs	r1, #16
 80021e4:	6a38      	ldr	r0, [r7, #32]
 80021e6:	f7ff fc43 	bl	8001a70 <SD_RxDataBlock>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d02b      	beq.n	8002248 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80021f6:	e027      	b.n	8002248 <SD_disk_ioctl+0x244>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80021f8:	2100      	movs	r1, #0
 80021fa:	207a      	movs	r0, #122	@ 0x7a
 80021fc:	f7ff fcc2 	bl	8001b84 <SD_SendCmd>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d116      	bne.n	8002234 <SD_disk_ioctl+0x230>
      {         
        for (n = 0; n < 4; n++)
 8002206:	2300      	movs	r3, #0
 8002208:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800220c:	e00b      	b.n	8002226 <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 800220e:	6a3c      	ldr	r4, [r7, #32]
 8002210:	1c63      	adds	r3, r4, #1
 8002212:	623b      	str	r3, [r7, #32]
 8002214:	f7ff fb80 	bl	8001918 <SPI_RxByte>
 8002218:	4603      	mov	r3, r0
 800221a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800221c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002220:	3301      	adds	r3, #1
 8002222:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002226:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800222a:	2b03      	cmp	r3, #3
 800222c:	d9ef      	bls.n	800220e <SD_disk_ioctl+0x20a>
        }
        
        res = RES_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }     
      
    default:
      res = RES_PARERR;
 8002234:	2304      	movs	r3, #4
 8002236:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800223a:	e006      	b.n	800224a <SD_disk_ioctl+0x246>
      break;
 800223c:	bf00      	nop
 800223e:	e004      	b.n	800224a <SD_disk_ioctl+0x246>
      break;
 8002240:	bf00      	nop
 8002242:	e002      	b.n	800224a <SD_disk_ioctl+0x246>
      break;
 8002244:	bf00      	nop
 8002246:	e000      	b.n	800224a <SD_disk_ioctl+0x246>
      break;
 8002248:	bf00      	nop
    }
    
    DESELECT();
 800224a:	f7ff fb3f 	bl	80018cc <DESELECT>
    SPI_RxByte();
 800224e:	f7ff fb63 	bl	8001918 <SPI_RxByte>
  }
  
  return res;
 8002252:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002256:	4618      	mov	r0, r3
 8002258:	372c      	adds	r7, #44	@ 0x2c
 800225a:	46bd      	mov	sp, r7
 800225c:	bd90      	pop	{r4, r7, pc}
 800225e:	bf00      	nop
 8002260:	20000000 	.word	0x20000000

08002264 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4a07      	ldr	r2, [pc, #28]	@ (8002290 <vApplicationGetIdleTaskMemory+0x2c>)
 8002274:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4a06      	ldr	r2, [pc, #24]	@ (8002294 <vApplicationGetIdleTaskMemory+0x30>)
 800227a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2280      	movs	r2, #128	@ 0x80
 8002280:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002282:	bf00      	nop
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	200006a4 	.word	0x200006a4
 8002294:	20000744 	.word	0x20000744

08002298 <DHT_Task>:
xTaskHandle DHT_Task_Handler;
xTaskHandle SDCARD_Task_Handler;

uint8_t data_ready = 0;

void DHT_Task(void *argument) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]

	char uart_buffer[2] = {0};
 80022a0:	2300      	movs	r3, #0
 80022a2:	81bb      	strh	r3, [r7, #12]

    while (1) {

        DHT11_Get_Data(&Temperature, &Humidity);
 80022a4:	490d      	ldr	r1, [pc, #52]	@ (80022dc <DHT_Task+0x44>)
 80022a6:	480e      	ldr	r0, [pc, #56]	@ (80022e0 <DHT_Task+0x48>)
 80022a8:	f7fe ffb8 	bl	800121c <DHT11_Get_Data>
        data_ready = 1;  // Veri hazır bayrağını set et
 80022ac:	4b0d      	ldr	r3, [pc, #52]	@ (80022e4 <DHT_Task+0x4c>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]

        sprintf(uart_buffer, "%d", Temperature);
 80022b2:	4b0b      	ldr	r3, [pc, #44]	@ (80022e0 <DHT_Task+0x48>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	f107 030c 	add.w	r3, r7, #12
 80022ba:	490b      	ldr	r1, [pc, #44]	@ (80022e8 <DHT_Task+0x50>)
 80022bc:	4618      	mov	r0, r3
 80022be:	f009 fd5d 	bl	800bd7c <siprintf>

        SendDataPacket(&huart2,(uint8_t*)uart_buffer,2);
 80022c2:	f107 030c 	add.w	r3, r7, #12
 80022c6:	2202      	movs	r2, #2
 80022c8:	4619      	mov	r1, r3
 80022ca:	4808      	ldr	r0, [pc, #32]	@ (80022ec <DHT_Task+0x54>)
 80022cc:	f7ff f9f0 	bl	80016b0 <SendDataPacket>
        vTaskDelay(1000);  // 2 saniyede bir veri oku
 80022d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022d4:	f007 fb30 	bl	8009938 <vTaskDelay>
        DHT11_Get_Data(&Temperature, &Humidity);
 80022d8:	bf00      	nop
 80022da:	e7e3      	b.n	80022a4 <DHT_Task+0xc>
 80022dc:	20000a7c 	.word	0x20000a7c
 80022e0:	20000a78 	.word	0x20000a78
 80022e4:	20000a84 	.word	0x20000a84
 80022e8:	0800fa4c 	.word	0x0800fa4c
 80022ec:	20000a2c 	.word	0x20000a2c

080022f0 <SDCARD_Task>:

    }
}

void SDCARD_Task(void *argument) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b092      	sub	sp, #72	@ 0x48
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	6078      	str	r0, [r7, #4]

    int indx = 1;
 80022f8:	2301      	movs	r3, #1
 80022fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    char buffer[50];

    while (1) {
        if (data_ready) {  // Veri hazırsa SD karta yaz
 80022fc:	4b13      	ldr	r3, [pc, #76]	@ (800234c <SDCARD_Task+0x5c>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d01d      	beq.n	8002340 <SDCARD_Task+0x50>
            Mount_SD("/");
 8002304:	4812      	ldr	r0, [pc, #72]	@ (8002350 <SDCARD_Task+0x60>)
 8002306:	f7fe ffed 	bl	80012e4 <Mount_SD>
            sprintf(buffer, "%d. Temp = %d C\t RH = %d \n", indx, Temperature, Humidity);
 800230a:	4b12      	ldr	r3, [pc, #72]	@ (8002354 <SDCARD_Task+0x64>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	4b12      	ldr	r3, [pc, #72]	@ (8002358 <SDCARD_Task+0x68>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f107 0008 	add.w	r0, r7, #8
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	4613      	mov	r3, r2
 800231a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800231c:	490f      	ldr	r1, [pc, #60]	@ (800235c <SDCARD_Task+0x6c>)
 800231e:	f009 fd2d 	bl	800bd7c <siprintf>

            Update_File("TEMP.TXT", buffer);
 8002322:	f107 0308 	add.w	r3, r7, #8
 8002326:	4619      	mov	r1, r3
 8002328:	480d      	ldr	r0, [pc, #52]	@ (8002360 <SDCARD_Task+0x70>)
 800232a:	f7ff f8f3 	bl	8001514 <Update_File>
            Unmount_SD("/");
 800232e:	4808      	ldr	r0, [pc, #32]	@ (8002350 <SDCARD_Task+0x60>)
 8002330:	f7fe ffee 	bl	8001310 <Unmount_SD>

            indx++;
 8002334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002336:	3301      	adds	r3, #1
 8002338:	63fb      	str	r3, [r7, #60]	@ 0x3c
            data_ready = 0;  // Bayrağı sıfırla
 800233a:	4b04      	ldr	r3, [pc, #16]	@ (800234c <SDCARD_Task+0x5c>)
 800233c:	2200      	movs	r2, #0
 800233e:	701a      	strb	r2, [r3, #0]
        }
        vTaskDelay(1000);  // 1 saniye bekle
 8002340:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002344:	f007 faf8 	bl	8009938 <vTaskDelay>
        if (data_ready) {  // Veri hazırsa SD karta yaz
 8002348:	e7d8      	b.n	80022fc <SDCARD_Task+0xc>
 800234a:	bf00      	nop
 800234c:	20000a84 	.word	0x20000a84
 8002350:	0800fa50 	.word	0x0800fa50
 8002354:	20000a78 	.word	0x20000a78
 8002358:	20000a7c 	.word	0x20000a7c
 800235c:	0800fa54 	.word	0x0800fa54
 8002360:	0800fa70 	.word	0x0800fa70

08002364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002364:	b5b0      	push	{r4, r5, r7, lr}
 8002366:	b08a      	sub	sp, #40	@ 0x28
 8002368:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800236a:	f000 fd27 	bl	8002dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800236e:	f000 f85f 	bl	8002430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002372:	f000 f9b1 	bl	80026d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002376:	f000 f8c7 	bl	8002508 <MX_SPI1_Init>
  MX_TIM1_Init();
 800237a:	f000 f8fb 	bl	8002574 <MX_TIM1_Init>
  MX_TIM7_Init();
 800237e:	f000 f94b 	bl	8002618 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8002382:	f000 f97f 	bl	8002684 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8002386:	f003 fb67 	bl	8005a58 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  Mount_SD("/");
 800238a:	481e      	ldr	r0, [pc, #120]	@ (8002404 <main+0xa0>)
 800238c:	f7fe ffaa 	bl	80012e4 <Mount_SD>
  Format_SD();
 8002390:	f7fe ffd2 	bl	8001338 <Format_SD>
  Create_File("TEMP.TXT");
 8002394:	481c      	ldr	r0, [pc, #112]	@ (8002408 <main+0xa4>)
 8002396:	f7ff f835 	bl	8001404 <Create_File>
  Unmount_SD("/");
 800239a:	481a      	ldr	r0, [pc, #104]	@ (8002404 <main+0xa0>)
 800239c:	f7fe ffb8 	bl	8001310 <Unmount_SD>

//  xTaskCreate(DHT_Task, "DHT", 128, NULL, 1, &SDCARD_Task_Handler);
  xTaskCreate(DHT_Task, "DHT", configMINIMAL_STACK_SIZE * 2, NULL, 1, NULL);
 80023a0:	2300      	movs	r3, #0
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	2301      	movs	r3, #1
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	2300      	movs	r3, #0
 80023aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023ae:	4917      	ldr	r1, [pc, #92]	@ (800240c <main+0xa8>)
 80023b0:	4817      	ldr	r0, [pc, #92]	@ (8002410 <main+0xac>)
 80023b2:	f007 f971 	bl	8009698 <xTaskCreate>

  xTaskCreate(SDCARD_Task, "SD", 128, NULL, 2, &SDCARD_Task_Handler);
 80023b6:	4b17      	ldr	r3, [pc, #92]	@ (8002414 <main+0xb0>)
 80023b8:	9301      	str	r3, [sp, #4]
 80023ba:	2302      	movs	r3, #2
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	2300      	movs	r3, #0
 80023c0:	2280      	movs	r2, #128	@ 0x80
 80023c2:	4915      	ldr	r1, [pc, #84]	@ (8002418 <main+0xb4>)
 80023c4:	4815      	ldr	r0, [pc, #84]	@ (800241c <main+0xb8>)
 80023c6:	f007 f967 	bl	8009698 <xTaskCreate>

  HAL_TIM_Base_Start(&htim7);  // us delay timer
 80023ca:	4815      	ldr	r0, [pc, #84]	@ (8002420 <main+0xbc>)
 80023cc:	f002 faaa 	bl	8004924 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim1); // periodic delay timer
 80023d0:	4814      	ldr	r0, [pc, #80]	@ (8002424 <main+0xc0>)
 80023d2:	f002 fb0f 	bl	80049f4 <HAL_TIM_Base_Start_IT>

  vTaskStartScheduler();
 80023d6:	f007 fae5 	bl	80099a4 <vTaskStartScheduler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80023da:	4b13      	ldr	r3, [pc, #76]	@ (8002428 <main+0xc4>)
 80023dc:	1d3c      	adds	r4, r7, #4
 80023de:	461d      	mov	r5, r3
 80023e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	2100      	movs	r1, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f006 f937 	bl	8008664 <osThreadCreate>
 80023f6:	4603      	mov	r3, r0
 80023f8:	4a0c      	ldr	r2, [pc, #48]	@ (800242c <main+0xc8>)
 80023fa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80023fc:	f006 f92b 	bl	8008656 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <main+0x9c>
 8002404:	0800fa50 	.word	0x0800fa50
 8002408:	0800fa70 	.word	0x0800fa70
 800240c:	0800fa7c 	.word	0x0800fa7c
 8002410:	08002299 	.word	0x08002299
 8002414:	20000a80 	.word	0x20000a80
 8002418:	0800fa80 	.word	0x0800fa80
 800241c:	080022f1 	.word	0x080022f1
 8002420:	200009e4 	.word	0x200009e4
 8002424:	2000099c 	.word	0x2000099c
 8002428:	0800fa90 	.word	0x0800fa90
 800242c:	20000a74 	.word	0x20000a74

08002430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b094      	sub	sp, #80	@ 0x50
 8002434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002436:	f107 031c 	add.w	r3, r7, #28
 800243a:	2234      	movs	r2, #52	@ 0x34
 800243c:	2100      	movs	r1, #0
 800243e:	4618      	mov	r0, r3
 8002440:	f009 fcff 	bl	800be42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002444:	f107 0308 	add.w	r3, r7, #8
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002454:	2300      	movs	r3, #0
 8002456:	607b      	str	r3, [r7, #4]
 8002458:	4b29      	ldr	r3, [pc, #164]	@ (8002500 <SystemClock_Config+0xd0>)
 800245a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245c:	4a28      	ldr	r2, [pc, #160]	@ (8002500 <SystemClock_Config+0xd0>)
 800245e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002462:	6413      	str	r3, [r2, #64]	@ 0x40
 8002464:	4b26      	ldr	r3, [pc, #152]	@ (8002500 <SystemClock_Config+0xd0>)
 8002466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800246c:	607b      	str	r3, [r7, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002470:	2300      	movs	r3, #0
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	4b23      	ldr	r3, [pc, #140]	@ (8002504 <SystemClock_Config+0xd4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800247c:	4a21      	ldr	r2, [pc, #132]	@ (8002504 <SystemClock_Config+0xd4>)
 800247e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	4b1f      	ldr	r3, [pc, #124]	@ (8002504 <SystemClock_Config+0xd4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800248c:	603b      	str	r3, [r7, #0]
 800248e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002490:	2302      	movs	r3, #2
 8002492:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002494:	2301      	movs	r3, #1
 8002496:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002498:	2310      	movs	r3, #16
 800249a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800249c:	2302      	movs	r3, #2
 800249e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024a0:	2300      	movs	r3, #0
 80024a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80024a4:	2308      	movs	r3, #8
 80024a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 80024a8:	233c      	movs	r3, #60	@ 0x3c
 80024aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024ac:	2302      	movs	r3, #2
 80024ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80024b0:	2302      	movs	r3, #2
 80024b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80024b4:	2302      	movs	r3, #2
 80024b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024b8:	f107 031c 	add.w	r3, r7, #28
 80024bc:	4618      	mov	r0, r3
 80024be:	f001 fae3 	bl	8003a88 <HAL_RCC_OscConfig>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80024c8:	f000 f994 	bl	80027f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024cc:	230f      	movs	r3, #15
 80024ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024d0:	2302      	movs	r3, #2
 80024d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024d4:	2300      	movs	r3, #0
 80024d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024de:	2300      	movs	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80024e2:	f107 0308 	add.w	r3, r7, #8
 80024e6:	2101      	movs	r1, #1
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 ff51 	bl	8003390 <HAL_RCC_ClockConfig>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80024f4:	f000 f97e 	bl	80027f4 <Error_Handler>
  }
}
 80024f8:	bf00      	nop
 80024fa:	3750      	adds	r7, #80	@ 0x50
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40023800 	.word	0x40023800
 8002504:	40007000 	.word	0x40007000

08002508 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800250c:	4b17      	ldr	r3, [pc, #92]	@ (800256c <MX_SPI1_Init+0x64>)
 800250e:	4a18      	ldr	r2, [pc, #96]	@ (8002570 <MX_SPI1_Init+0x68>)
 8002510:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002512:	4b16      	ldr	r3, [pc, #88]	@ (800256c <MX_SPI1_Init+0x64>)
 8002514:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002518:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800251a:	4b14      	ldr	r3, [pc, #80]	@ (800256c <MX_SPI1_Init+0x64>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002520:	4b12      	ldr	r3, [pc, #72]	@ (800256c <MX_SPI1_Init+0x64>)
 8002522:	2200      	movs	r2, #0
 8002524:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002526:	4b11      	ldr	r3, [pc, #68]	@ (800256c <MX_SPI1_Init+0x64>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800252c:	4b0f      	ldr	r3, [pc, #60]	@ (800256c <MX_SPI1_Init+0x64>)
 800252e:	2200      	movs	r2, #0
 8002530:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002532:	4b0e      	ldr	r3, [pc, #56]	@ (800256c <MX_SPI1_Init+0x64>)
 8002534:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002538:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800253a:	4b0c      	ldr	r3, [pc, #48]	@ (800256c <MX_SPI1_Init+0x64>)
 800253c:	2220      	movs	r2, #32
 800253e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002540:	4b0a      	ldr	r3, [pc, #40]	@ (800256c <MX_SPI1_Init+0x64>)
 8002542:	2200      	movs	r2, #0
 8002544:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002546:	4b09      	ldr	r3, [pc, #36]	@ (800256c <MX_SPI1_Init+0x64>)
 8002548:	2200      	movs	r2, #0
 800254a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800254c:	4b07      	ldr	r3, [pc, #28]	@ (800256c <MX_SPI1_Init+0x64>)
 800254e:	2200      	movs	r2, #0
 8002550:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002552:	4b06      	ldr	r3, [pc, #24]	@ (800256c <MX_SPI1_Init+0x64>)
 8002554:	220a      	movs	r2, #10
 8002556:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002558:	4804      	ldr	r0, [pc, #16]	@ (800256c <MX_SPI1_Init+0x64>)
 800255a:	f001 fd33 	bl	8003fc4 <HAL_SPI_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002564:	f000 f946 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000944 	.word	0x20000944
 8002570:	40013000 	.word	0x40013000

08002574 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800257a:	f107 0308 	add.w	r3, r7, #8
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	609a      	str	r2, [r3, #8]
 8002586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002588:	463b      	mov	r3, r7
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002590:	4b1f      	ldr	r3, [pc, #124]	@ (8002610 <MX_TIM1_Init+0x9c>)
 8002592:	4a20      	ldr	r2, [pc, #128]	@ (8002614 <MX_TIM1_Init+0xa0>)
 8002594:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 60000-1;
 8002596:	4b1e      	ldr	r3, [pc, #120]	@ (8002610 <MX_TIM1_Init+0x9c>)
 8002598:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800259c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259e:	4b1c      	ldr	r3, [pc, #112]	@ (8002610 <MX_TIM1_Init+0x9c>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 80025a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002610 <MX_TIM1_Init+0x9c>)
 80025a6:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80025aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ac:	4b18      	ldr	r3, [pc, #96]	@ (8002610 <MX_TIM1_Init+0x9c>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025b2:	4b17      	ldr	r3, [pc, #92]	@ (8002610 <MX_TIM1_Init+0x9c>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b8:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <MX_TIM1_Init+0x9c>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025be:	4814      	ldr	r0, [pc, #80]	@ (8002610 <MX_TIM1_Init+0x9c>)
 80025c0:	f002 f960 	bl	8004884 <HAL_TIM_Base_Init>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80025ca:	f000 f913 	bl	80027f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025d4:	f107 0308 	add.w	r3, r7, #8
 80025d8:	4619      	mov	r1, r3
 80025da:	480d      	ldr	r0, [pc, #52]	@ (8002610 <MX_TIM1_Init+0x9c>)
 80025dc:	f002 fb6a 	bl	8004cb4 <HAL_TIM_ConfigClockSource>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80025e6:	f000 f905 	bl	80027f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025ea:	2320      	movs	r3, #32
 80025ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025f2:	463b      	mov	r3, r7
 80025f4:	4619      	mov	r1, r3
 80025f6:	4806      	ldr	r0, [pc, #24]	@ (8002610 <MX_TIM1_Init+0x9c>)
 80025f8:	f002 fd92 	bl	8005120 <HAL_TIMEx_MasterConfigSynchronization>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002602:	f000 f8f7 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002606:	bf00      	nop
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	2000099c 	.word	0x2000099c
 8002614:	40010000 	.word	0x40010000

08002618 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800261e:	463b      	mov	r3, r7
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002626:	4b15      	ldr	r3, [pc, #84]	@ (800267c <MX_TIM7_Init+0x64>)
 8002628:	4a15      	ldr	r2, [pc, #84]	@ (8002680 <MX_TIM7_Init+0x68>)
 800262a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 60-1;
 800262c:	4b13      	ldr	r3, [pc, #76]	@ (800267c <MX_TIM7_Init+0x64>)
 800262e:	223b      	movs	r2, #59	@ 0x3b
 8002630:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002632:	4b12      	ldr	r3, [pc, #72]	@ (800267c <MX_TIM7_Init+0x64>)
 8002634:	2200      	movs	r2, #0
 8002636:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0xffff-1;
 8002638:	4b10      	ldr	r3, [pc, #64]	@ (800267c <MX_TIM7_Init+0x64>)
 800263a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800263e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002640:	4b0e      	ldr	r3, [pc, #56]	@ (800267c <MX_TIM7_Init+0x64>)
 8002642:	2200      	movs	r2, #0
 8002644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002646:	480d      	ldr	r0, [pc, #52]	@ (800267c <MX_TIM7_Init+0x64>)
 8002648:	f002 f91c 	bl	8004884 <HAL_TIM_Base_Init>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002652:	f000 f8cf 	bl	80027f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002656:	2300      	movs	r3, #0
 8002658:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800265a:	2300      	movs	r3, #0
 800265c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800265e:	463b      	mov	r3, r7
 8002660:	4619      	mov	r1, r3
 8002662:	4806      	ldr	r0, [pc, #24]	@ (800267c <MX_TIM7_Init+0x64>)
 8002664:	f002 fd5c 	bl	8005120 <HAL_TIMEx_MasterConfigSynchronization>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800266e:	f000 f8c1 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200009e4 	.word	0x200009e4
 8002680:	40001400 	.word	0x40001400

08002684 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002688:	4b11      	ldr	r3, [pc, #68]	@ (80026d0 <MX_USART2_UART_Init+0x4c>)
 800268a:	4a12      	ldr	r2, [pc, #72]	@ (80026d4 <MX_USART2_UART_Init+0x50>)
 800268c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800268e:	4b10      	ldr	r3, [pc, #64]	@ (80026d0 <MX_USART2_UART_Init+0x4c>)
 8002690:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002694:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002696:	4b0e      	ldr	r3, [pc, #56]	@ (80026d0 <MX_USART2_UART_Init+0x4c>)
 8002698:	2200      	movs	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800269c:	4b0c      	ldr	r3, [pc, #48]	@ (80026d0 <MX_USART2_UART_Init+0x4c>)
 800269e:	2200      	movs	r2, #0
 80026a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026a2:	4b0b      	ldr	r3, [pc, #44]	@ (80026d0 <MX_USART2_UART_Init+0x4c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026a8:	4b09      	ldr	r3, [pc, #36]	@ (80026d0 <MX_USART2_UART_Init+0x4c>)
 80026aa:	220c      	movs	r2, #12
 80026ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ae:	4b08      	ldr	r3, [pc, #32]	@ (80026d0 <MX_USART2_UART_Init+0x4c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b4:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <MX_USART2_UART_Init+0x4c>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026ba:	4805      	ldr	r0, [pc, #20]	@ (80026d0 <MX_USART2_UART_Init+0x4c>)
 80026bc:	f002 fdc0 	bl	8005240 <HAL_UART_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026c6:	f000 f895 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000a2c 	.word	0x20000a2c
 80026d4:	40004400 	.word	0x40004400

080026d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026de:	f107 030c 	add.w	r3, r7, #12
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	605a      	str	r2, [r3, #4]
 80026e8:	609a      	str	r2, [r3, #8]
 80026ea:	60da      	str	r2, [r3, #12]
 80026ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	4b25      	ldr	r3, [pc, #148]	@ (8002788 <MX_GPIO_Init+0xb0>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f6:	4a24      	ldr	r2, [pc, #144]	@ (8002788 <MX_GPIO_Init+0xb0>)
 80026f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fe:	4b22      	ldr	r3, [pc, #136]	@ (8002788 <MX_GPIO_Init+0xb0>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	4b1e      	ldr	r3, [pc, #120]	@ (8002788 <MX_GPIO_Init+0xb0>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002712:	4a1d      	ldr	r2, [pc, #116]	@ (8002788 <MX_GPIO_Init+0xb0>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6313      	str	r3, [r2, #48]	@ 0x30
 800271a:	4b1b      	ldr	r3, [pc, #108]	@ (8002788 <MX_GPIO_Init+0xb0>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	607b      	str	r3, [r7, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	603b      	str	r3, [r7, #0]
 800272a:	4b17      	ldr	r3, [pc, #92]	@ (8002788 <MX_GPIO_Init+0xb0>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	4a16      	ldr	r2, [pc, #88]	@ (8002788 <MX_GPIO_Init+0xb0>)
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	6313      	str	r3, [r2, #48]	@ 0x30
 8002736:	4b14      	ldr	r3, [pc, #80]	@ (8002788 <MX_GPIO_Init+0xb0>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002742:	2200      	movs	r2, #0
 8002744:	2140      	movs	r1, #64	@ 0x40
 8002746:	4811      	ldr	r0, [pc, #68]	@ (800278c <MX_GPIO_Init+0xb4>)
 8002748:	f000 fe08 	bl	800335c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800274c:	2301      	movs	r3, #1
 800274e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002750:	2300      	movs	r3, #0
 8002752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002758:	f107 030c 	add.w	r3, r7, #12
 800275c:	4619      	mov	r1, r3
 800275e:	480c      	ldr	r0, [pc, #48]	@ (8002790 <MX_GPIO_Init+0xb8>)
 8002760:	f000 fc50 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8002764:	2340      	movs	r3, #64	@ 0x40
 8002766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002768:	2301      	movs	r3, #1
 800276a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002770:	2300      	movs	r3, #0
 8002772:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8002774:	f107 030c 	add.w	r3, r7, #12
 8002778:	4619      	mov	r1, r3
 800277a:	4804      	ldr	r0, [pc, #16]	@ (800278c <MX_GPIO_Init+0xb4>)
 800277c:	f000 fc42 	bl	8003004 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002780:	bf00      	nop
 8002782:	3720      	adds	r7, #32
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40023800 	.word	0x40023800
 800278c:	40020400 	.word	0x40020400
 8002790:	40020000 	.word	0x40020000

08002794 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800279c:	2001      	movs	r0, #1
 800279e:	f005 ffad 	bl	80086fc <osDelay>
 80027a2:	e7fb      	b.n	800279c <StartDefaultTask+0x8>

080027a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0d      	ldr	r2, [pc, #52]	@ (80027e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d10c      	bne.n	80027d0 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		// release the semaphore here
		 /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE as
		 it will get set to pdTRUE inside the interrupt safe API function if a
		 context switch is required. */
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
		 xHigherPriorityTaskWoken was set to pdTRUE inside xSemaphoreGiveFromISR()
		 then calling portEND_SWITCHING_ISR() will request a context switch. If
		 xHigherPriorityTaskWoken is still pdFALSE then calling
		 portEND_SWITCHING_ISR() will have no effect */

		portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d007      	beq.n	80027d0 <HAL_TIM_PeriodElapsedCallback+0x2c>
 80027c0:	4b0a      	ldr	r3, [pc, #40]	@ (80027ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80027c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	f3bf 8f4f 	dsb	sy
 80027cc:	f3bf 8f6f 	isb	sy
	}


  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a06      	ldr	r2, [pc, #24]	@ (80027f0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d101      	bne.n	80027de <HAL_TIM_PeriodElapsedCallback+0x3a>
    HAL_IncTick();
 80027da:	f000 fb11 	bl	8002e00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40010000 	.word	0x40010000
 80027ec:	e000ed04 	.word	0xe000ed04
 80027f0:	40001000 	.word	0x40001000

080027f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027f8:	b672      	cpsid	i
}
 80027fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027fc:	bf00      	nop
 80027fe:	e7fd      	b.n	80027fc <Error_Handler+0x8>

08002800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	607b      	str	r3, [r7, #4]
 800280a:	4b12      	ldr	r3, [pc, #72]	@ (8002854 <HAL_MspInit+0x54>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280e:	4a11      	ldr	r2, [pc, #68]	@ (8002854 <HAL_MspInit+0x54>)
 8002810:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002814:	6453      	str	r3, [r2, #68]	@ 0x44
 8002816:	4b0f      	ldr	r3, [pc, #60]	@ (8002854 <HAL_MspInit+0x54>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	603b      	str	r3, [r7, #0]
 8002826:	4b0b      	ldr	r3, [pc, #44]	@ (8002854 <HAL_MspInit+0x54>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	4a0a      	ldr	r2, [pc, #40]	@ (8002854 <HAL_MspInit+0x54>)
 800282c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002830:	6413      	str	r3, [r2, #64]	@ 0x40
 8002832:	4b08      	ldr	r3, [pc, #32]	@ (8002854 <HAL_MspInit+0x54>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	210f      	movs	r1, #15
 8002842:	f06f 0001 	mvn.w	r0, #1
 8002846:	f000 fbb3 	bl	8002fb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40023800 	.word	0x40023800

08002858 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	@ 0x28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002860:	f107 0314 	add.w	r3, r7, #20
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]
 800286e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a19      	ldr	r2, [pc, #100]	@ (80028dc <HAL_SPI_MspInit+0x84>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d12b      	bne.n	80028d2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	4b18      	ldr	r3, [pc, #96]	@ (80028e0 <HAL_SPI_MspInit+0x88>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002882:	4a17      	ldr	r2, [pc, #92]	@ (80028e0 <HAL_SPI_MspInit+0x88>)
 8002884:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002888:	6453      	str	r3, [r2, #68]	@ 0x44
 800288a:	4b15      	ldr	r3, [pc, #84]	@ (80028e0 <HAL_SPI_MspInit+0x88>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002892:	613b      	str	r3, [r7, #16]
 8002894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	4b11      	ldr	r3, [pc, #68]	@ (80028e0 <HAL_SPI_MspInit+0x88>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289e:	4a10      	ldr	r2, [pc, #64]	@ (80028e0 <HAL_SPI_MspInit+0x88>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028a6:	4b0e      	ldr	r3, [pc, #56]	@ (80028e0 <HAL_SPI_MspInit+0x88>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80028b2:	23e0      	movs	r3, #224	@ 0xe0
 80028b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b6:	2302      	movs	r3, #2
 80028b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028be:	2303      	movs	r3, #3
 80028c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028c2:	2305      	movs	r3, #5
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c6:	f107 0314 	add.w	r3, r7, #20
 80028ca:	4619      	mov	r1, r3
 80028cc:	4805      	ldr	r0, [pc, #20]	@ (80028e4 <HAL_SPI_MspInit+0x8c>)
 80028ce:	f000 fb99 	bl	8003004 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80028d2:	bf00      	nop
 80028d4:	3728      	adds	r7, #40	@ 0x28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40013000 	.word	0x40013000
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40020000 	.word	0x40020000

080028e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a18      	ldr	r2, [pc, #96]	@ (8002958 <HAL_TIM_Base_MspInit+0x70>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d116      	bne.n	8002928 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	4b17      	ldr	r3, [pc, #92]	@ (800295c <HAL_TIM_Base_MspInit+0x74>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002902:	4a16      	ldr	r2, [pc, #88]	@ (800295c <HAL_TIM_Base_MspInit+0x74>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6453      	str	r3, [r2, #68]	@ 0x44
 800290a:	4b14      	ldr	r3, [pc, #80]	@ (800295c <HAL_TIM_Base_MspInit+0x74>)
 800290c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2105      	movs	r1, #5
 800291a:	2019      	movs	r0, #25
 800291c:	f000 fb48 	bl	8002fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002920:	2019      	movs	r0, #25
 8002922:	f000 fb61 	bl	8002fe8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002926:	e012      	b.n	800294e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a0c      	ldr	r2, [pc, #48]	@ (8002960 <HAL_TIM_Base_MspInit+0x78>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d10d      	bne.n	800294e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	4b09      	ldr	r3, [pc, #36]	@ (800295c <HAL_TIM_Base_MspInit+0x74>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	4a08      	ldr	r2, [pc, #32]	@ (800295c <HAL_TIM_Base_MspInit+0x74>)
 800293c:	f043 0320 	orr.w	r3, r3, #32
 8002940:	6413      	str	r3, [r2, #64]	@ 0x40
 8002942:	4b06      	ldr	r3, [pc, #24]	@ (800295c <HAL_TIM_Base_MspInit+0x74>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	f003 0320 	and.w	r3, r3, #32
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
}
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40010000 	.word	0x40010000
 800295c:	40023800 	.word	0x40023800
 8002960:	40001400 	.word	0x40001400

08002964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08a      	sub	sp, #40	@ 0x28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a19      	ldr	r2, [pc, #100]	@ (80029e8 <HAL_UART_MspInit+0x84>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d12b      	bne.n	80029de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	4b18      	ldr	r3, [pc, #96]	@ (80029ec <HAL_UART_MspInit+0x88>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	4a17      	ldr	r2, [pc, #92]	@ (80029ec <HAL_UART_MspInit+0x88>)
 8002990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002994:	6413      	str	r3, [r2, #64]	@ 0x40
 8002996:	4b15      	ldr	r3, [pc, #84]	@ (80029ec <HAL_UART_MspInit+0x88>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	4b11      	ldr	r3, [pc, #68]	@ (80029ec <HAL_UART_MspInit+0x88>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	4a10      	ldr	r2, [pc, #64]	@ (80029ec <HAL_UART_MspInit+0x88>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b2:	4b0e      	ldr	r3, [pc, #56]	@ (80029ec <HAL_UART_MspInit+0x88>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029be:	230c      	movs	r3, #12
 80029c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ca:	2303      	movs	r3, #3
 80029cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029ce:	2307      	movs	r3, #7
 80029d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d2:	f107 0314 	add.w	r3, r7, #20
 80029d6:	4619      	mov	r1, r3
 80029d8:	4805      	ldr	r0, [pc, #20]	@ (80029f0 <HAL_UART_MspInit+0x8c>)
 80029da:	f000 fb13 	bl	8003004 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80029de:	bf00      	nop
 80029e0:	3728      	adds	r7, #40	@ 0x28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40004400 	.word	0x40004400
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40020000 	.word	0x40020000

080029f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08e      	sub	sp, #56	@ 0x38
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	4b33      	ldr	r3, [pc, #204]	@ (8002ad8 <HAL_InitTick+0xe4>)
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0c:	4a32      	ldr	r2, [pc, #200]	@ (8002ad8 <HAL_InitTick+0xe4>)
 8002a0e:	f043 0310 	orr.w	r3, r3, #16
 8002a12:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a14:	4b30      	ldr	r3, [pc, #192]	@ (8002ad8 <HAL_InitTick+0xe4>)
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a20:	f107 0210 	add.w	r2, r7, #16
 8002a24:	f107 0314 	add.w	r3, r7, #20
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 fdca 	bl	80035c4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d103      	bne.n	8002a42 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a3a:	f000 fd9b 	bl	8003574 <HAL_RCC_GetPCLK1Freq>
 8002a3e:	6378      	str	r0, [r7, #52]	@ 0x34
 8002a40:	e004      	b.n	8002a4c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002a42:	f000 fd97 	bl	8003574 <HAL_RCC_GetPCLK1Freq>
 8002a46:	4603      	mov	r3, r0
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a4e:	4a23      	ldr	r2, [pc, #140]	@ (8002adc <HAL_InitTick+0xe8>)
 8002a50:	fba2 2303 	umull	r2, r3, r2, r3
 8002a54:	0c9b      	lsrs	r3, r3, #18
 8002a56:	3b01      	subs	r3, #1
 8002a58:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002a5a:	4b21      	ldr	r3, [pc, #132]	@ (8002ae0 <HAL_InitTick+0xec>)
 8002a5c:	4a21      	ldr	r2, [pc, #132]	@ (8002ae4 <HAL_InitTick+0xf0>)
 8002a5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002a60:	4b1f      	ldr	r3, [pc, #124]	@ (8002ae0 <HAL_InitTick+0xec>)
 8002a62:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002a66:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002a68:	4a1d      	ldr	r2, [pc, #116]	@ (8002ae0 <HAL_InitTick+0xec>)
 8002a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a6c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ae0 <HAL_InitTick+0xec>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a74:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae0 <HAL_InitTick+0xec>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a7a:	4b19      	ldr	r3, [pc, #100]	@ (8002ae0 <HAL_InitTick+0xec>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002a80:	4817      	ldr	r0, [pc, #92]	@ (8002ae0 <HAL_InitTick+0xec>)
 8002a82:	f001 feff 	bl	8004884 <HAL_TIM_Base_Init>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002a8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d11b      	bne.n	8002acc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002a94:	4812      	ldr	r0, [pc, #72]	@ (8002ae0 <HAL_InitTick+0xec>)
 8002a96:	f001 ffad 	bl	80049f4 <HAL_TIM_Base_Start_IT>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002aa0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d111      	bne.n	8002acc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002aa8:	2036      	movs	r0, #54	@ 0x36
 8002aaa:	f000 fa9d 	bl	8002fe8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b0f      	cmp	r3, #15
 8002ab2:	d808      	bhi.n	8002ac6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	2036      	movs	r0, #54	@ 0x36
 8002aba:	f000 fa79 	bl	8002fb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002abe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae8 <HAL_InitTick+0xf4>)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	e002      	b.n	8002acc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002acc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3738      	adds	r7, #56	@ 0x38
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	431bde83 	.word	0x431bde83
 8002ae0:	20000a88 	.word	0x20000a88
 8002ae4:	40001000 	.word	0x40001000
 8002ae8:	20000008 	.word	0x20000008

08002aec <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(){
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
	if(Timer1 > 0) Timer1--;
 8002af0:	4b0e      	ldr	r3, [pc, #56]	@ (8002b2c <SDTimer_Handler+0x40>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d006      	beq.n	8002b08 <SDTimer_Handler+0x1c>
 8002afa:	4b0c      	ldr	r3, [pc, #48]	@ (8002b2c <SDTimer_Handler+0x40>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	4b09      	ldr	r3, [pc, #36]	@ (8002b2c <SDTimer_Handler+0x40>)
 8002b06:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0) Timer2--;
 8002b08:	4b09      	ldr	r3, [pc, #36]	@ (8002b30 <SDTimer_Handler+0x44>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d006      	beq.n	8002b20 <SDTimer_Handler+0x34>
 8002b12:	4b07      	ldr	r3, [pc, #28]	@ (8002b30 <SDTimer_Handler+0x44>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	4b04      	ldr	r3, [pc, #16]	@ (8002b30 <SDTimer_Handler+0x44>)
 8002b1e:	701a      	strb	r2, [r3, #0]
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	20000ad1 	.word	0x20000ad1
 8002b30:	20000ad2 	.word	0x20000ad2

08002b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b38:	bf00      	nop
 8002b3a:	e7fd      	b.n	8002b38 <NMI_Handler+0x4>

08002b3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b40:	bf00      	nop
 8002b42:	e7fd      	b.n	8002b40 <HardFault_Handler+0x4>

08002b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b48:	bf00      	nop
 8002b4a:	e7fd      	b.n	8002b48 <MemManage_Handler+0x4>

08002b4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b50:	bf00      	nop
 8002b52:	e7fd      	b.n	8002b50 <BusFault_Handler+0x4>

08002b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b58:	bf00      	nop
 8002b5a:	e7fd      	b.n	8002b58 <UsageFault_Handler+0x4>

08002b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b70:	4802      	ldr	r0, [pc, #8]	@ (8002b7c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002b72:	f001 ffaf 	bl	8004ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	2000099c 	.word	0x2000099c

08002b80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	FatFsCnt++;
 8002b84:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb0 <TIM6_DAC_IRQHandler+0x30>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	4b08      	ldr	r3, [pc, #32]	@ (8002bb0 <TIM6_DAC_IRQHandler+0x30>)
 8002b90:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10){
 8002b92:	4b07      	ldr	r3, [pc, #28]	@ (8002bb0 <TIM6_DAC_IRQHandler+0x30>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b09      	cmp	r3, #9
 8002b9a:	d904      	bls.n	8002ba6 <TIM6_DAC_IRQHandler+0x26>
		FatFsCnt = 0;
 8002b9c:	4b04      	ldr	r3, [pc, #16]	@ (8002bb0 <TIM6_DAC_IRQHandler+0x30>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002ba2:	f7ff ffa3 	bl	8002aec <SDTimer_Handler>
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ba6:	4803      	ldr	r0, [pc, #12]	@ (8002bb4 <TIM6_DAC_IRQHandler+0x34>)
 8002ba8:	f001 ff94 	bl	8004ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002bac:	bf00      	nop
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000ad0 	.word	0x20000ad0
 8002bb4:	20000a88 	.word	0x20000a88

08002bb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return 1;
 8002bbc:	2301      	movs	r3, #1
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <_kill>:

int _kill(int pid, int sig)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bd2:	f009 f9df 	bl	800bf94 <__errno>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2216      	movs	r2, #22
 8002bda:	601a      	str	r2, [r3, #0]
  return -1;
 8002bdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <_exit>:

void _exit (int status)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ffe7 	bl	8002bc8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bfa:	bf00      	nop
 8002bfc:	e7fd      	b.n	8002bfa <_exit+0x12>

08002bfe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b086      	sub	sp, #24
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	e00a      	b.n	8002c26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c10:	f3af 8000 	nop.w
 8002c14:	4601      	mov	r1, r0
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	60ba      	str	r2, [r7, #8]
 8002c1c:	b2ca      	uxtb	r2, r1
 8002c1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	3301      	adds	r3, #1
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	dbf0      	blt.n	8002c10 <_read+0x12>
  }

  return len;
 8002c2e:	687b      	ldr	r3, [r7, #4]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	e009      	b.n	8002c5e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	60ba      	str	r2, [r7, #8]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	dbf1      	blt.n	8002c4a <_write+0x12>
  }
  return len;
 8002c66:	687b      	ldr	r3, [r7, #4]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <_close>:

int _close(int file)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c98:	605a      	str	r2, [r3, #4]
  return 0;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <_isatty>:

int _isatty(int file)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cb0:	2301      	movs	r3, #1
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b085      	sub	sp, #20
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	60f8      	str	r0, [r7, #12]
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ce0:	4a14      	ldr	r2, [pc, #80]	@ (8002d34 <_sbrk+0x5c>)
 8002ce2:	4b15      	ldr	r3, [pc, #84]	@ (8002d38 <_sbrk+0x60>)
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cec:	4b13      	ldr	r3, [pc, #76]	@ (8002d3c <_sbrk+0x64>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d102      	bne.n	8002cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cf4:	4b11      	ldr	r3, [pc, #68]	@ (8002d3c <_sbrk+0x64>)
 8002cf6:	4a12      	ldr	r2, [pc, #72]	@ (8002d40 <_sbrk+0x68>)
 8002cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cfa:	4b10      	ldr	r3, [pc, #64]	@ (8002d3c <_sbrk+0x64>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d207      	bcs.n	8002d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d08:	f009 f944 	bl	800bf94 <__errno>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	220c      	movs	r2, #12
 8002d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d12:	f04f 33ff 	mov.w	r3, #4294967295
 8002d16:	e009      	b.n	8002d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d18:	4b08      	ldr	r3, [pc, #32]	@ (8002d3c <_sbrk+0x64>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d1e:	4b07      	ldr	r3, [pc, #28]	@ (8002d3c <_sbrk+0x64>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	4a05      	ldr	r2, [pc, #20]	@ (8002d3c <_sbrk+0x64>)
 8002d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20020000 	.word	0x20020000
 8002d38:	00000400 	.word	0x00000400
 8002d3c:	20000ad4 	.word	0x20000ad4
 8002d40:	200049f8 	.word	0x200049f8

08002d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d48:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <SystemInit+0x20>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d4e:	4a05      	ldr	r2, [pc, #20]	@ (8002d64 <SystemInit+0x20>)
 8002d50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002da0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d6c:	f7ff ffea 	bl	8002d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d70:	480c      	ldr	r0, [pc, #48]	@ (8002da4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d72:	490d      	ldr	r1, [pc, #52]	@ (8002da8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d74:	4a0d      	ldr	r2, [pc, #52]	@ (8002dac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d78:	e002      	b.n	8002d80 <LoopCopyDataInit>

08002d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d7e:	3304      	adds	r3, #4

08002d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d84:	d3f9      	bcc.n	8002d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d86:	4a0a      	ldr	r2, [pc, #40]	@ (8002db0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d88:	4c0a      	ldr	r4, [pc, #40]	@ (8002db4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d8c:	e001      	b.n	8002d92 <LoopFillZerobss>

08002d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d90:	3204      	adds	r2, #4

08002d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d94:	d3fb      	bcc.n	8002d8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002d96:	f009 f903 	bl	800bfa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d9a:	f7ff fae3 	bl	8002364 <main>
  bx  lr    
 8002d9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002da0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002da8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002dac:	0800ffd0 	.word	0x0800ffd0
  ldr r2, =_sbss
 8002db0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002db4:	200049f8 	.word	0x200049f8

08002db8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002db8:	e7fe      	b.n	8002db8 <ADC_IRQHandler>
	...

08002dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <HAL_Init+0x40>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8002dfc <HAL_Init+0x40>)
 8002dc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dfc <HAL_Init+0x40>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002dfc <HAL_Init+0x40>)
 8002dd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dd8:	4b08      	ldr	r3, [pc, #32]	@ (8002dfc <HAL_Init+0x40>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a07      	ldr	r2, [pc, #28]	@ (8002dfc <HAL_Init+0x40>)
 8002dde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002de4:	2003      	movs	r0, #3
 8002de6:	f000 f8d8 	bl	8002f9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dea:	200f      	movs	r0, #15
 8002dec:	f7ff fe02 	bl	80029f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002df0:	f7ff fd06 	bl	8002800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40023c00 	.word	0x40023c00

08002e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e04:	4b06      	ldr	r3, [pc, #24]	@ (8002e20 <HAL_IncTick+0x20>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4b06      	ldr	r3, [pc, #24]	@ (8002e24 <HAL_IncTick+0x24>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4413      	add	r3, r2
 8002e10:	4a04      	ldr	r2, [pc, #16]	@ (8002e24 <HAL_IncTick+0x24>)
 8002e12:	6013      	str	r3, [r2, #0]
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	2000000c 	.word	0x2000000c
 8002e24:	20000ad8 	.word	0x20000ad8

08002e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e2c:	4b03      	ldr	r3, [pc, #12]	@ (8002e3c <HAL_GetTick+0x14>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20000ad8 	.word	0x20000ad8

08002e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e50:	4b0c      	ldr	r3, [pc, #48]	@ (8002e84 <__NVIC_SetPriorityGrouping+0x44>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e72:	4a04      	ldr	r2, [pc, #16]	@ (8002e84 <__NVIC_SetPriorityGrouping+0x44>)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	60d3      	str	r3, [r2, #12]
}
 8002e78:	bf00      	nop
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	e000ed00 	.word	0xe000ed00

08002e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	0a1b      	lsrs	r3, r3, #8
 8002e92:	f003 0307 	and.w	r3, r3, #7
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	e000ed00 	.word	0xe000ed00

08002ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	db0b      	blt.n	8002ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eb6:	79fb      	ldrb	r3, [r7, #7]
 8002eb8:	f003 021f 	and.w	r2, r3, #31
 8002ebc:	4907      	ldr	r1, [pc, #28]	@ (8002edc <__NVIC_EnableIRQ+0x38>)
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	2001      	movs	r0, #1
 8002ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	e000e100 	.word	0xe000e100

08002ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	6039      	str	r1, [r7, #0]
 8002eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	db0a      	blt.n	8002f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	490c      	ldr	r1, [pc, #48]	@ (8002f2c <__NVIC_SetPriority+0x4c>)
 8002efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efe:	0112      	lsls	r2, r2, #4
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	440b      	add	r3, r1
 8002f04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f08:	e00a      	b.n	8002f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	4908      	ldr	r1, [pc, #32]	@ (8002f30 <__NVIC_SetPriority+0x50>)
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	3b04      	subs	r3, #4
 8002f18:	0112      	lsls	r2, r2, #4
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	761a      	strb	r2, [r3, #24]
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	e000e100 	.word	0xe000e100
 8002f30:	e000ed00 	.word	0xe000ed00

08002f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b089      	sub	sp, #36	@ 0x24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f1c3 0307 	rsb	r3, r3, #7
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	bf28      	it	cs
 8002f52:	2304      	movcs	r3, #4
 8002f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	3304      	adds	r3, #4
 8002f5a:	2b06      	cmp	r3, #6
 8002f5c:	d902      	bls.n	8002f64 <NVIC_EncodePriority+0x30>
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	3b03      	subs	r3, #3
 8002f62:	e000      	b.n	8002f66 <NVIC_EncodePriority+0x32>
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f68:	f04f 32ff 	mov.w	r2, #4294967295
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	43da      	mvns	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	401a      	ands	r2, r3
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	fa01 f303 	lsl.w	r3, r1, r3
 8002f86:	43d9      	mvns	r1, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f8c:	4313      	orrs	r3, r2
         );
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3724      	adds	r7, #36	@ 0x24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff ff4c 	bl	8002e40 <__NVIC_SetPriorityGrouping>
}
 8002fa8:	bf00      	nop
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fc2:	f7ff ff61 	bl	8002e88 <__NVIC_GetPriorityGrouping>
 8002fc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	6978      	ldr	r0, [r7, #20]
 8002fce:	f7ff ffb1 	bl	8002f34 <NVIC_EncodePriority>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff ff80 	bl	8002ee0 <__NVIC_SetPriority>
}
 8002fe0:	bf00      	nop
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff ff54 	bl	8002ea4 <__NVIC_EnableIRQ>
}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003004:	b480      	push	{r7}
 8003006:	b089      	sub	sp, #36	@ 0x24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003012:	2300      	movs	r3, #0
 8003014:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003016:	2300      	movs	r3, #0
 8003018:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
 800301e:	e165      	b.n	80032ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003020:	2201      	movs	r2, #1
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4013      	ands	r3, r2
 8003032:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	429a      	cmp	r2, r3
 800303a:	f040 8154 	bne.w	80032e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b01      	cmp	r3, #1
 8003048:	d005      	beq.n	8003056 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003052:	2b02      	cmp	r3, #2
 8003054:	d130      	bne.n	80030b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	2203      	movs	r2, #3
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43db      	mvns	r3, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4013      	ands	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4313      	orrs	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800308c:	2201      	movs	r2, #1
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 0201 	and.w	r2, r3, #1
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 0303 	and.w	r3, r3, #3
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d017      	beq.n	80030f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	2203      	movs	r2, #3
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4013      	ands	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 0303 	and.w	r3, r3, #3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d123      	bne.n	8003148 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	08da      	lsrs	r2, r3, #3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3208      	adds	r2, #8
 8003108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800310c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	220f      	movs	r2, #15
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	08da      	lsrs	r2, r3, #3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3208      	adds	r2, #8
 8003142:	69b9      	ldr	r1, [r7, #24]
 8003144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	2203      	movs	r2, #3
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4013      	ands	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 0203 	and.w	r2, r3, #3
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4313      	orrs	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 80ae 	beq.w	80032e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	4b5d      	ldr	r3, [pc, #372]	@ (8003304 <HAL_GPIO_Init+0x300>)
 8003190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003192:	4a5c      	ldr	r2, [pc, #368]	@ (8003304 <HAL_GPIO_Init+0x300>)
 8003194:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003198:	6453      	str	r3, [r2, #68]	@ 0x44
 800319a:	4b5a      	ldr	r3, [pc, #360]	@ (8003304 <HAL_GPIO_Init+0x300>)
 800319c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031a6:	4a58      	ldr	r2, [pc, #352]	@ (8003308 <HAL_GPIO_Init+0x304>)
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	089b      	lsrs	r3, r3, #2
 80031ac:	3302      	adds	r3, #2
 80031ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	220f      	movs	r2, #15
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a4f      	ldr	r2, [pc, #316]	@ (800330c <HAL_GPIO_Init+0x308>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d025      	beq.n	800321e <HAL_GPIO_Init+0x21a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a4e      	ldr	r2, [pc, #312]	@ (8003310 <HAL_GPIO_Init+0x30c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d01f      	beq.n	800321a <HAL_GPIO_Init+0x216>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a4d      	ldr	r2, [pc, #308]	@ (8003314 <HAL_GPIO_Init+0x310>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d019      	beq.n	8003216 <HAL_GPIO_Init+0x212>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a4c      	ldr	r2, [pc, #304]	@ (8003318 <HAL_GPIO_Init+0x314>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d013      	beq.n	8003212 <HAL_GPIO_Init+0x20e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a4b      	ldr	r2, [pc, #300]	@ (800331c <HAL_GPIO_Init+0x318>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00d      	beq.n	800320e <HAL_GPIO_Init+0x20a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4a      	ldr	r2, [pc, #296]	@ (8003320 <HAL_GPIO_Init+0x31c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d007      	beq.n	800320a <HAL_GPIO_Init+0x206>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a49      	ldr	r2, [pc, #292]	@ (8003324 <HAL_GPIO_Init+0x320>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d101      	bne.n	8003206 <HAL_GPIO_Init+0x202>
 8003202:	2306      	movs	r3, #6
 8003204:	e00c      	b.n	8003220 <HAL_GPIO_Init+0x21c>
 8003206:	2307      	movs	r3, #7
 8003208:	e00a      	b.n	8003220 <HAL_GPIO_Init+0x21c>
 800320a:	2305      	movs	r3, #5
 800320c:	e008      	b.n	8003220 <HAL_GPIO_Init+0x21c>
 800320e:	2304      	movs	r3, #4
 8003210:	e006      	b.n	8003220 <HAL_GPIO_Init+0x21c>
 8003212:	2303      	movs	r3, #3
 8003214:	e004      	b.n	8003220 <HAL_GPIO_Init+0x21c>
 8003216:	2302      	movs	r3, #2
 8003218:	e002      	b.n	8003220 <HAL_GPIO_Init+0x21c>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <HAL_GPIO_Init+0x21c>
 800321e:	2300      	movs	r3, #0
 8003220:	69fa      	ldr	r2, [r7, #28]
 8003222:	f002 0203 	and.w	r2, r2, #3
 8003226:	0092      	lsls	r2, r2, #2
 8003228:	4093      	lsls	r3, r2
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4313      	orrs	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003230:	4935      	ldr	r1, [pc, #212]	@ (8003308 <HAL_GPIO_Init+0x304>)
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	089b      	lsrs	r3, r3, #2
 8003236:	3302      	adds	r3, #2
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800323e:	4b3a      	ldr	r3, [pc, #232]	@ (8003328 <HAL_GPIO_Init+0x324>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003262:	4a31      	ldr	r2, [pc, #196]	@ (8003328 <HAL_GPIO_Init+0x324>)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003268:	4b2f      	ldr	r3, [pc, #188]	@ (8003328 <HAL_GPIO_Init+0x324>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800328c:	4a26      	ldr	r2, [pc, #152]	@ (8003328 <HAL_GPIO_Init+0x324>)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003292:	4b25      	ldr	r3, [pc, #148]	@ (8003328 <HAL_GPIO_Init+0x324>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	43db      	mvns	r3, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4013      	ands	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003328 <HAL_GPIO_Init+0x324>)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003328 <HAL_GPIO_Init+0x324>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032e0:	4a11      	ldr	r2, [pc, #68]	@ (8003328 <HAL_GPIO_Init+0x324>)
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	3301      	adds	r3, #1
 80032ea:	61fb      	str	r3, [r7, #28]
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	2b0f      	cmp	r3, #15
 80032f0:	f67f ae96 	bls.w	8003020 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	3724      	adds	r7, #36	@ 0x24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40023800 	.word	0x40023800
 8003308:	40013800 	.word	0x40013800
 800330c:	40020000 	.word	0x40020000
 8003310:	40020400 	.word	0x40020400
 8003314:	40020800 	.word	0x40020800
 8003318:	40020c00 	.word	0x40020c00
 800331c:	40021000 	.word	0x40021000
 8003320:	40021400 	.word	0x40021400
 8003324:	40021800 	.word	0x40021800
 8003328:	40013c00 	.word	0x40013c00

0800332c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	887b      	ldrh	r3, [r7, #2]
 800333e:	4013      	ands	r3, r2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003344:	2301      	movs	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
 8003348:	e001      	b.n	800334e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800334a:	2300      	movs	r3, #0
 800334c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800334e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	807b      	strh	r3, [r7, #2]
 8003368:	4613      	mov	r3, r2
 800336a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800336c:	787b      	ldrb	r3, [r7, #1]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003372:	887a      	ldrh	r2, [r7, #2]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003378:	e003      	b.n	8003382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800337a:	887b      	ldrh	r3, [r7, #2]
 800337c:	041a      	lsls	r2, r3, #16
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	619a      	str	r2, [r3, #24]
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
	...

08003390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0cc      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033a4:	4b68      	ldr	r3, [pc, #416]	@ (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d90c      	bls.n	80033cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b2:	4b65      	ldr	r3, [pc, #404]	@ (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ba:	4b63      	ldr	r3, [pc, #396]	@ (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d001      	beq.n	80033cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0b8      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d020      	beq.n	800341a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033e4:	4b59      	ldr	r3, [pc, #356]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	4a58      	ldr	r2, [pc, #352]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033fc:	4b53      	ldr	r3, [pc, #332]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	4a52      	ldr	r2, [pc, #328]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003408:	4b50      	ldr	r3, [pc, #320]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	494d      	ldr	r1, [pc, #308]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	4313      	orrs	r3, r2
 8003418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d044      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d107      	bne.n	800343e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342e:	4b47      	ldr	r3, [pc, #284]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d119      	bne.n	800346e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e07f      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d003      	beq.n	800344e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800344a:	2b03      	cmp	r3, #3
 800344c:	d107      	bne.n	800345e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800344e:	4b3f      	ldr	r3, [pc, #252]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d109      	bne.n	800346e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e06f      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345e:	4b3b      	ldr	r3, [pc, #236]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e067      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800346e:	4b37      	ldr	r3, [pc, #220]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f023 0203 	bic.w	r2, r3, #3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4934      	ldr	r1, [pc, #208]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	4313      	orrs	r3, r2
 800347e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003480:	f7ff fcd2 	bl	8002e28 <HAL_GetTick>
 8003484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003486:	e00a      	b.n	800349e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003488:	f7ff fcce 	bl	8002e28 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003496:	4293      	cmp	r3, r2
 8003498:	d901      	bls.n	800349e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e04f      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349e:	4b2b      	ldr	r3, [pc, #172]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 020c 	and.w	r2, r3, #12
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d1eb      	bne.n	8003488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034b0:	4b25      	ldr	r3, [pc, #148]	@ (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d20c      	bcs.n	80034d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b22      	ldr	r3, [pc, #136]	@ (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	4b20      	ldr	r3, [pc, #128]	@ (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e032      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e4:	4b19      	ldr	r3, [pc, #100]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4916      	ldr	r1, [pc, #88]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003502:	4b12      	ldr	r3, [pc, #72]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	490e      	ldr	r1, [pc, #56]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	4313      	orrs	r3, r2
 8003514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003516:	f000 f887 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 800351a:	4602      	mov	r2, r0
 800351c:	4b0b      	ldr	r3, [pc, #44]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	091b      	lsrs	r3, r3, #4
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	490a      	ldr	r1, [pc, #40]	@ (8003550 <HAL_RCC_ClockConfig+0x1c0>)
 8003528:	5ccb      	ldrb	r3, [r1, r3]
 800352a:	fa22 f303 	lsr.w	r3, r2, r3
 800352e:	4a09      	ldr	r2, [pc, #36]	@ (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 8003530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003532:	4b09      	ldr	r3, [pc, #36]	@ (8003558 <HAL_RCC_ClockConfig+0x1c8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fa5c 	bl	80029f4 <HAL_InitTick>

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40023c00 	.word	0x40023c00
 800354c:	40023800 	.word	0x40023800
 8003550:	0800faf8 	.word	0x0800faf8
 8003554:	20000004 	.word	0x20000004
 8003558:	20000008 	.word	0x20000008

0800355c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003560:	4b03      	ldr	r3, [pc, #12]	@ (8003570 <HAL_RCC_GetHCLKFreq+0x14>)
 8003562:	681b      	ldr	r3, [r3, #0]
}
 8003564:	4618      	mov	r0, r3
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	20000004 	.word	0x20000004

08003574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003578:	f7ff fff0 	bl	800355c <HAL_RCC_GetHCLKFreq>
 800357c:	4602      	mov	r2, r0
 800357e:	4b05      	ldr	r3, [pc, #20]	@ (8003594 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	0a9b      	lsrs	r3, r3, #10
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	4903      	ldr	r1, [pc, #12]	@ (8003598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800358a:	5ccb      	ldrb	r3, [r1, r3]
 800358c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003590:	4618      	mov	r0, r3
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40023800 	.word	0x40023800
 8003598:	0800fb08 	.word	0x0800fb08

0800359c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035a0:	f7ff ffdc 	bl	800355c <HAL_RCC_GetHCLKFreq>
 80035a4:	4602      	mov	r2, r0
 80035a6:	4b05      	ldr	r3, [pc, #20]	@ (80035bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	0b5b      	lsrs	r3, r3, #13
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	4903      	ldr	r1, [pc, #12]	@ (80035c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035b2:	5ccb      	ldrb	r3, [r1, r3]
 80035b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40023800 	.word	0x40023800
 80035c0:	0800fb08 	.word	0x0800fb08

080035c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	220f      	movs	r2, #15
 80035d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035d4:	4b12      	ldr	r3, [pc, #72]	@ (8003620 <HAL_RCC_GetClockConfig+0x5c>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 0203 	and.w	r2, r3, #3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003620 <HAL_RCC_GetClockConfig+0x5c>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003620 <HAL_RCC_GetClockConfig+0x5c>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80035f8:	4b09      	ldr	r3, [pc, #36]	@ (8003620 <HAL_RCC_GetClockConfig+0x5c>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	08db      	lsrs	r3, r3, #3
 80035fe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003606:	4b07      	ldr	r3, [pc, #28]	@ (8003624 <HAL_RCC_GetClockConfig+0x60>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 020f 	and.w	r2, r3, #15
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	601a      	str	r2, [r3, #0]
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40023800 	.word	0x40023800
 8003624:	40023c00 	.word	0x40023c00

08003628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800362c:	b0ae      	sub	sp, #184	@ 0xb8
 800362e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003636:	2300      	movs	r3, #0
 8003638:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800364e:	4bcb      	ldr	r3, [pc, #812]	@ (800397c <HAL_RCC_GetSysClockFreq+0x354>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 030c 	and.w	r3, r3, #12
 8003656:	2b0c      	cmp	r3, #12
 8003658:	f200 8206 	bhi.w	8003a68 <HAL_RCC_GetSysClockFreq+0x440>
 800365c:	a201      	add	r2, pc, #4	@ (adr r2, 8003664 <HAL_RCC_GetSysClockFreq+0x3c>)
 800365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003662:	bf00      	nop
 8003664:	08003699 	.word	0x08003699
 8003668:	08003a69 	.word	0x08003a69
 800366c:	08003a69 	.word	0x08003a69
 8003670:	08003a69 	.word	0x08003a69
 8003674:	080036a1 	.word	0x080036a1
 8003678:	08003a69 	.word	0x08003a69
 800367c:	08003a69 	.word	0x08003a69
 8003680:	08003a69 	.word	0x08003a69
 8003684:	080036a9 	.word	0x080036a9
 8003688:	08003a69 	.word	0x08003a69
 800368c:	08003a69 	.word	0x08003a69
 8003690:	08003a69 	.word	0x08003a69
 8003694:	08003899 	.word	0x08003899
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003698:	4bb9      	ldr	r3, [pc, #740]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x358>)
 800369a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800369e:	e1e7      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036a0:	4bb8      	ldr	r3, [pc, #736]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x35c>)
 80036a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80036a6:	e1e3      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036a8:	4bb4      	ldr	r3, [pc, #720]	@ (800397c <HAL_RCC_GetSysClockFreq+0x354>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036b4:	4bb1      	ldr	r3, [pc, #708]	@ (800397c <HAL_RCC_GetSysClockFreq+0x354>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d071      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c0:	4bae      	ldr	r3, [pc, #696]	@ (800397c <HAL_RCC_GetSysClockFreq+0x354>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	099b      	lsrs	r3, r3, #6
 80036c6:	2200      	movs	r2, #0
 80036c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80036cc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80036d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036dc:	2300      	movs	r3, #0
 80036de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80036e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80036e6:	4622      	mov	r2, r4
 80036e8:	462b      	mov	r3, r5
 80036ea:	f04f 0000 	mov.w	r0, #0
 80036ee:	f04f 0100 	mov.w	r1, #0
 80036f2:	0159      	lsls	r1, r3, #5
 80036f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036f8:	0150      	lsls	r0, r2, #5
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	4621      	mov	r1, r4
 8003700:	1a51      	subs	r1, r2, r1
 8003702:	6439      	str	r1, [r7, #64]	@ 0x40
 8003704:	4629      	mov	r1, r5
 8003706:	eb63 0301 	sbc.w	r3, r3, r1
 800370a:	647b      	str	r3, [r7, #68]	@ 0x44
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003718:	4649      	mov	r1, r9
 800371a:	018b      	lsls	r3, r1, #6
 800371c:	4641      	mov	r1, r8
 800371e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003722:	4641      	mov	r1, r8
 8003724:	018a      	lsls	r2, r1, #6
 8003726:	4641      	mov	r1, r8
 8003728:	1a51      	subs	r1, r2, r1
 800372a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800372c:	4649      	mov	r1, r9
 800372e:	eb63 0301 	sbc.w	r3, r3, r1
 8003732:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003740:	4649      	mov	r1, r9
 8003742:	00cb      	lsls	r3, r1, #3
 8003744:	4641      	mov	r1, r8
 8003746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800374a:	4641      	mov	r1, r8
 800374c:	00ca      	lsls	r2, r1, #3
 800374e:	4610      	mov	r0, r2
 8003750:	4619      	mov	r1, r3
 8003752:	4603      	mov	r3, r0
 8003754:	4622      	mov	r2, r4
 8003756:	189b      	adds	r3, r3, r2
 8003758:	633b      	str	r3, [r7, #48]	@ 0x30
 800375a:	462b      	mov	r3, r5
 800375c:	460a      	mov	r2, r1
 800375e:	eb42 0303 	adc.w	r3, r2, r3
 8003762:	637b      	str	r3, [r7, #52]	@ 0x34
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003770:	4629      	mov	r1, r5
 8003772:	024b      	lsls	r3, r1, #9
 8003774:	4621      	mov	r1, r4
 8003776:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800377a:	4621      	mov	r1, r4
 800377c:	024a      	lsls	r2, r1, #9
 800377e:	4610      	mov	r0, r2
 8003780:	4619      	mov	r1, r3
 8003782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003786:	2200      	movs	r2, #0
 8003788:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800378c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003790:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003794:	f7fd faa8 	bl	8000ce8 <__aeabi_uldivmod>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4613      	mov	r3, r2
 800379e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037a2:	e067      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a4:	4b75      	ldr	r3, [pc, #468]	@ (800397c <HAL_RCC_GetSysClockFreq+0x354>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	099b      	lsrs	r3, r3, #6
 80037aa:	2200      	movs	r2, #0
 80037ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037b0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80037b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037be:	2300      	movs	r3, #0
 80037c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80037c2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80037c6:	4622      	mov	r2, r4
 80037c8:	462b      	mov	r3, r5
 80037ca:	f04f 0000 	mov.w	r0, #0
 80037ce:	f04f 0100 	mov.w	r1, #0
 80037d2:	0159      	lsls	r1, r3, #5
 80037d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d8:	0150      	lsls	r0, r2, #5
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	4621      	mov	r1, r4
 80037e0:	1a51      	subs	r1, r2, r1
 80037e2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80037e4:	4629      	mov	r1, r5
 80037e6:	eb63 0301 	sbc.w	r3, r3, r1
 80037ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80037f8:	4649      	mov	r1, r9
 80037fa:	018b      	lsls	r3, r1, #6
 80037fc:	4641      	mov	r1, r8
 80037fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003802:	4641      	mov	r1, r8
 8003804:	018a      	lsls	r2, r1, #6
 8003806:	4641      	mov	r1, r8
 8003808:	ebb2 0a01 	subs.w	sl, r2, r1
 800380c:	4649      	mov	r1, r9
 800380e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800381e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003822:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003826:	4692      	mov	sl, r2
 8003828:	469b      	mov	fp, r3
 800382a:	4623      	mov	r3, r4
 800382c:	eb1a 0303 	adds.w	r3, sl, r3
 8003830:	623b      	str	r3, [r7, #32]
 8003832:	462b      	mov	r3, r5
 8003834:	eb4b 0303 	adc.w	r3, fp, r3
 8003838:	627b      	str	r3, [r7, #36]	@ 0x24
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003846:	4629      	mov	r1, r5
 8003848:	028b      	lsls	r3, r1, #10
 800384a:	4621      	mov	r1, r4
 800384c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003850:	4621      	mov	r1, r4
 8003852:	028a      	lsls	r2, r1, #10
 8003854:	4610      	mov	r0, r2
 8003856:	4619      	mov	r1, r3
 8003858:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800385c:	2200      	movs	r2, #0
 800385e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003860:	677a      	str	r2, [r7, #116]	@ 0x74
 8003862:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003866:	f7fd fa3f 	bl	8000ce8 <__aeabi_uldivmod>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	4613      	mov	r3, r2
 8003870:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003874:	4b41      	ldr	r3, [pc, #260]	@ (800397c <HAL_RCC_GetSysClockFreq+0x354>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	0c1b      	lsrs	r3, r3, #16
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	3301      	adds	r3, #1
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003886:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800388a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800388e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003892:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003896:	e0eb      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003898:	4b38      	ldr	r3, [pc, #224]	@ (800397c <HAL_RCC_GetSysClockFreq+0x354>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038a4:	4b35      	ldr	r3, [pc, #212]	@ (800397c <HAL_RCC_GetSysClockFreq+0x354>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d06b      	beq.n	8003988 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b0:	4b32      	ldr	r3, [pc, #200]	@ (800397c <HAL_RCC_GetSysClockFreq+0x354>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	099b      	lsrs	r3, r3, #6
 80038b6:	2200      	movs	r2, #0
 80038b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80038bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80038c4:	2300      	movs	r3, #0
 80038c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80038c8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80038cc:	4622      	mov	r2, r4
 80038ce:	462b      	mov	r3, r5
 80038d0:	f04f 0000 	mov.w	r0, #0
 80038d4:	f04f 0100 	mov.w	r1, #0
 80038d8:	0159      	lsls	r1, r3, #5
 80038da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038de:	0150      	lsls	r0, r2, #5
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4621      	mov	r1, r4
 80038e6:	1a51      	subs	r1, r2, r1
 80038e8:	61b9      	str	r1, [r7, #24]
 80038ea:	4629      	mov	r1, r5
 80038ec:	eb63 0301 	sbc.w	r3, r3, r1
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80038fe:	4659      	mov	r1, fp
 8003900:	018b      	lsls	r3, r1, #6
 8003902:	4651      	mov	r1, sl
 8003904:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003908:	4651      	mov	r1, sl
 800390a:	018a      	lsls	r2, r1, #6
 800390c:	4651      	mov	r1, sl
 800390e:	ebb2 0801 	subs.w	r8, r2, r1
 8003912:	4659      	mov	r1, fp
 8003914:	eb63 0901 	sbc.w	r9, r3, r1
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003924:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003928:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800392c:	4690      	mov	r8, r2
 800392e:	4699      	mov	r9, r3
 8003930:	4623      	mov	r3, r4
 8003932:	eb18 0303 	adds.w	r3, r8, r3
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	462b      	mov	r3, r5
 800393a:	eb49 0303 	adc.w	r3, r9, r3
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800394c:	4629      	mov	r1, r5
 800394e:	024b      	lsls	r3, r1, #9
 8003950:	4621      	mov	r1, r4
 8003952:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003956:	4621      	mov	r1, r4
 8003958:	024a      	lsls	r2, r1, #9
 800395a:	4610      	mov	r0, r2
 800395c:	4619      	mov	r1, r3
 800395e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003962:	2200      	movs	r2, #0
 8003964:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003966:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003968:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800396c:	f7fd f9bc 	bl	8000ce8 <__aeabi_uldivmod>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4613      	mov	r3, r2
 8003976:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800397a:	e065      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0x420>
 800397c:	40023800 	.word	0x40023800
 8003980:	00f42400 	.word	0x00f42400
 8003984:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003988:	4b3d      	ldr	r3, [pc, #244]	@ (8003a80 <HAL_RCC_GetSysClockFreq+0x458>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	099b      	lsrs	r3, r3, #6
 800398e:	2200      	movs	r2, #0
 8003990:	4618      	mov	r0, r3
 8003992:	4611      	mov	r1, r2
 8003994:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003998:	653b      	str	r3, [r7, #80]	@ 0x50
 800399a:	2300      	movs	r3, #0
 800399c:	657b      	str	r3, [r7, #84]	@ 0x54
 800399e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80039a2:	4642      	mov	r2, r8
 80039a4:	464b      	mov	r3, r9
 80039a6:	f04f 0000 	mov.w	r0, #0
 80039aa:	f04f 0100 	mov.w	r1, #0
 80039ae:	0159      	lsls	r1, r3, #5
 80039b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039b4:	0150      	lsls	r0, r2, #5
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4641      	mov	r1, r8
 80039bc:	1a51      	subs	r1, r2, r1
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	4649      	mov	r1, r9
 80039c2:	eb63 0301 	sbc.w	r3, r3, r1
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80039d4:	4659      	mov	r1, fp
 80039d6:	018b      	lsls	r3, r1, #6
 80039d8:	4651      	mov	r1, sl
 80039da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039de:	4651      	mov	r1, sl
 80039e0:	018a      	lsls	r2, r1, #6
 80039e2:	4651      	mov	r1, sl
 80039e4:	1a54      	subs	r4, r2, r1
 80039e6:	4659      	mov	r1, fp
 80039e8:	eb63 0501 	sbc.w	r5, r3, r1
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	00eb      	lsls	r3, r5, #3
 80039f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039fa:	00e2      	lsls	r2, r4, #3
 80039fc:	4614      	mov	r4, r2
 80039fe:	461d      	mov	r5, r3
 8003a00:	4643      	mov	r3, r8
 8003a02:	18e3      	adds	r3, r4, r3
 8003a04:	603b      	str	r3, [r7, #0]
 8003a06:	464b      	mov	r3, r9
 8003a08:	eb45 0303 	adc.w	r3, r5, r3
 8003a0c:	607b      	str	r3, [r7, #4]
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	028b      	lsls	r3, r1, #10
 8003a1e:	4621      	mov	r1, r4
 8003a20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a24:	4621      	mov	r1, r4
 8003a26:	028a      	lsls	r2, r1, #10
 8003a28:	4610      	mov	r0, r2
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a30:	2200      	movs	r2, #0
 8003a32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a34:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003a36:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a3a:	f7fd f955 	bl	8000ce8 <__aeabi_uldivmod>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4613      	mov	r3, r2
 8003a44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003a48:	4b0d      	ldr	r3, [pc, #52]	@ (8003a80 <HAL_RCC_GetSysClockFreq+0x458>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	0f1b      	lsrs	r3, r3, #28
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003a56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a66:	e003      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a68:	4b06      	ldr	r3, [pc, #24]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	37b8      	adds	r7, #184	@ 0xb8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a7e:	bf00      	nop
 8003a80:	40023800 	.word	0x40023800
 8003a84:	00f42400 	.word	0x00f42400

08003a88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e28d      	b.n	8003fb6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 8083 	beq.w	8003bae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003aa8:	4b94      	ldr	r3, [pc, #592]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 030c 	and.w	r3, r3, #12
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d019      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003ab4:	4b91      	ldr	r3, [pc, #580]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 030c 	and.w	r3, r3, #12
        || \
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d106      	bne.n	8003ace <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003ac0:	4b8e      	ldr	r3, [pc, #568]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ac8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003acc:	d00c      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ace:	4b8b      	ldr	r3, [pc, #556]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003ad6:	2b0c      	cmp	r3, #12
 8003ad8:	d112      	bne.n	8003b00 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ada:	4b88      	ldr	r3, [pc, #544]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ae2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ae6:	d10b      	bne.n	8003b00 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae8:	4b84      	ldr	r3, [pc, #528]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d05b      	beq.n	8003bac <HAL_RCC_OscConfig+0x124>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d157      	bne.n	8003bac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e25a      	b.n	8003fb6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b08:	d106      	bne.n	8003b18 <HAL_RCC_OscConfig+0x90>
 8003b0a:	4b7c      	ldr	r3, [pc, #496]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a7b      	ldr	r2, [pc, #492]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e01d      	b.n	8003b54 <HAL_RCC_OscConfig+0xcc>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0xb4>
 8003b22:	4b76      	ldr	r3, [pc, #472]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a75      	ldr	r2, [pc, #468]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	4b73      	ldr	r3, [pc, #460]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a72      	ldr	r2, [pc, #456]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e00b      	b.n	8003b54 <HAL_RCC_OscConfig+0xcc>
 8003b3c:	4b6f      	ldr	r3, [pc, #444]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a6e      	ldr	r2, [pc, #440]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	4b6c      	ldr	r3, [pc, #432]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a6b      	ldr	r2, [pc, #428]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d013      	beq.n	8003b84 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5c:	f7ff f964 	bl	8002e28 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b64:	f7ff f960 	bl	8002e28 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	@ 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e21f      	b.n	8003fb6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b76:	4b61      	ldr	r3, [pc, #388]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0xdc>
 8003b82:	e014      	b.n	8003bae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7ff f950 	bl	8002e28 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7ff f94c 	bl	8002e28 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	@ 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e20b      	b.n	8003fb6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b9e:	4b57      	ldr	r3, [pc, #348]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x104>
 8003baa:	e000      	b.n	8003bae <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d06f      	beq.n	8003c9a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003bba:	4b50      	ldr	r3, [pc, #320]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d017      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003bc6:	4b4d      	ldr	r3, [pc, #308]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
        || \
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d105      	bne.n	8003bde <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00b      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bde:	4b47      	ldr	r3, [pc, #284]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003be6:	2b0c      	cmp	r3, #12
 8003be8:	d11c      	bne.n	8003c24 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bea:	4b44      	ldr	r3, [pc, #272]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d116      	bne.n	8003c24 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bf6:	4b41      	ldr	r3, [pc, #260]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <HAL_RCC_OscConfig+0x186>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d001      	beq.n	8003c0e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e1d3      	b.n	8003fb6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4937      	ldr	r1, [pc, #220]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c22:	e03a      	b.n	8003c9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d020      	beq.n	8003c6e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c2c:	4b34      	ldr	r3, [pc, #208]	@ (8003d00 <HAL_RCC_OscConfig+0x278>)
 8003c2e:	2201      	movs	r2, #1
 8003c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c32:	f7ff f8f9 	bl	8002e28 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c3a:	f7ff f8f5 	bl	8002e28 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e1b4      	b.n	8003fb6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0f0      	beq.n	8003c3a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c58:	4b28      	ldr	r3, [pc, #160]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4925      	ldr	r1, [pc, #148]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	600b      	str	r3, [r1, #0]
 8003c6c:	e015      	b.n	8003c9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c6e:	4b24      	ldr	r3, [pc, #144]	@ (8003d00 <HAL_RCC_OscConfig+0x278>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7ff f8d8 	bl	8002e28 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c7c:	f7ff f8d4 	bl	8002e28 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e193      	b.n	8003fb6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d036      	beq.n	8003d14 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d016      	beq.n	8003cdc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cae:	4b15      	ldr	r3, [pc, #84]	@ (8003d04 <HAL_RCC_OscConfig+0x27c>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb4:	f7ff f8b8 	bl	8002e28 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cbc:	f7ff f8b4 	bl	8002e28 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e173      	b.n	8003fb6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cce:	4b0b      	ldr	r3, [pc, #44]	@ (8003cfc <HAL_RCC_OscConfig+0x274>)
 8003cd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0x234>
 8003cda:	e01b      	b.n	8003d14 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cdc:	4b09      	ldr	r3, [pc, #36]	@ (8003d04 <HAL_RCC_OscConfig+0x27c>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce2:	f7ff f8a1 	bl	8002e28 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce8:	e00e      	b.n	8003d08 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cea:	f7ff f89d 	bl	8002e28 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d907      	bls.n	8003d08 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e15c      	b.n	8003fb6 <HAL_RCC_OscConfig+0x52e>
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	42470000 	.word	0x42470000
 8003d04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d08:	4b8a      	ldr	r3, [pc, #552]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1ea      	bne.n	8003cea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 8097 	beq.w	8003e50 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d22:	2300      	movs	r3, #0
 8003d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d26:	4b83      	ldr	r3, [pc, #524]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10f      	bne.n	8003d52 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	4b7f      	ldr	r3, [pc, #508]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	4a7e      	ldr	r2, [pc, #504]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d42:	4b7c      	ldr	r3, [pc, #496]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d52:	4b79      	ldr	r3, [pc, #484]	@ (8003f38 <HAL_RCC_OscConfig+0x4b0>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d118      	bne.n	8003d90 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d5e:	4b76      	ldr	r3, [pc, #472]	@ (8003f38 <HAL_RCC_OscConfig+0x4b0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a75      	ldr	r2, [pc, #468]	@ (8003f38 <HAL_RCC_OscConfig+0x4b0>)
 8003d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d6a:	f7ff f85d 	bl	8002e28 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d72:	f7ff f859 	bl	8002e28 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e118      	b.n	8003fb6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d84:	4b6c      	ldr	r3, [pc, #432]	@ (8003f38 <HAL_RCC_OscConfig+0x4b0>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d106      	bne.n	8003da6 <HAL_RCC_OscConfig+0x31e>
 8003d98:	4b66      	ldr	r3, [pc, #408]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9c:	4a65      	ldr	r2, [pc, #404]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003da4:	e01c      	b.n	8003de0 <HAL_RCC_OscConfig+0x358>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	2b05      	cmp	r3, #5
 8003dac:	d10c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x340>
 8003dae:	4b61      	ldr	r3, [pc, #388]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db2:	4a60      	ldr	r2, [pc, #384]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003db4:	f043 0304 	orr.w	r3, r3, #4
 8003db8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dba:	4b5e      	ldr	r3, [pc, #376]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dbe:	4a5d      	ldr	r2, [pc, #372]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003dc0:	f043 0301 	orr.w	r3, r3, #1
 8003dc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dc6:	e00b      	b.n	8003de0 <HAL_RCC_OscConfig+0x358>
 8003dc8:	4b5a      	ldr	r3, [pc, #360]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dcc:	4a59      	ldr	r2, [pc, #356]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dd4:	4b57      	ldr	r3, [pc, #348]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd8:	4a56      	ldr	r2, [pc, #344]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003dda:	f023 0304 	bic.w	r3, r3, #4
 8003dde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d015      	beq.n	8003e14 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de8:	f7ff f81e 	bl	8002e28 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dee:	e00a      	b.n	8003e06 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df0:	f7ff f81a 	bl	8002e28 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e0d7      	b.n	8003fb6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e06:	4b4b      	ldr	r3, [pc, #300]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0ee      	beq.n	8003df0 <HAL_RCC_OscConfig+0x368>
 8003e12:	e014      	b.n	8003e3e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e14:	f7ff f808 	bl	8002e28 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1c:	f7ff f804 	bl	8002e28 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e0c1      	b.n	8003fb6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e32:	4b40      	ldr	r3, [pc, #256]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1ee      	bne.n	8003e1c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e3e:	7dfb      	ldrb	r3, [r7, #23]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d105      	bne.n	8003e50 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e44:	4b3b      	ldr	r3, [pc, #236]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e48:	4a3a      	ldr	r2, [pc, #232]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003e4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80ad 	beq.w	8003fb4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e5a:	4b36      	ldr	r3, [pc, #216]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d060      	beq.n	8003f28 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d145      	bne.n	8003efa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6e:	4b33      	ldr	r3, [pc, #204]	@ (8003f3c <HAL_RCC_OscConfig+0x4b4>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7fe ffd8 	bl	8002e28 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e7c:	f7fe ffd4 	bl	8002e28 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e093      	b.n	8003fb6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8e:	4b29      	ldr	r3, [pc, #164]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69da      	ldr	r2, [r3, #28]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	019b      	lsls	r3, r3, #6
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb0:	085b      	lsrs	r3, r3, #1
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	041b      	lsls	r3, r3, #16
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ebc:	061b      	lsls	r3, r3, #24
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec4:	071b      	lsls	r3, r3, #28
 8003ec6:	491b      	ldr	r1, [pc, #108]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f3c <HAL_RCC_OscConfig+0x4b4>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed2:	f7fe ffa9 	bl	8002e28 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eda:	f7fe ffa5 	bl	8002e28 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e064      	b.n	8003fb6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eec:	4b11      	ldr	r3, [pc, #68]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0f0      	beq.n	8003eda <HAL_RCC_OscConfig+0x452>
 8003ef8:	e05c      	b.n	8003fb4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efa:	4b10      	ldr	r3, [pc, #64]	@ (8003f3c <HAL_RCC_OscConfig+0x4b4>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fe ff92 	bl	8002e28 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f08:	f7fe ff8e 	bl	8002e28 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e04d      	b.n	8003fb6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1a:	4b06      	ldr	r3, [pc, #24]	@ (8003f34 <HAL_RCC_OscConfig+0x4ac>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x480>
 8003f26:	e045      	b.n	8003fb4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d107      	bne.n	8003f40 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e040      	b.n	8003fb6 <HAL_RCC_OscConfig+0x52e>
 8003f34:	40023800 	.word	0x40023800
 8003f38:	40007000 	.word	0x40007000
 8003f3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f40:	4b1f      	ldr	r3, [pc, #124]	@ (8003fc0 <HAL_RCC_OscConfig+0x538>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d030      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d129      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d122      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f70:	4013      	ands	r3, r2
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d119      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f86:	085b      	lsrs	r3, r3, #1
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d10f      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d107      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003faa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40023800 	.word	0x40023800

08003fc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e07b      	b.n	80040ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d108      	bne.n	8003ff0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fe6:	d009      	beq.n	8003ffc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	61da      	str	r2, [r3, #28]
 8003fee:	e005      	b.n	8003ffc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d106      	bne.n	800401c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7fe fc1e 	bl	8002858 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004032:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004080:	ea42 0103 	orr.w	r1, r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004088:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	0c1b      	lsrs	r3, r3, #16
 800409a:	f003 0104 	and.w	r1, r3, #4
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	f003 0210 	and.w	r2, r3, #16
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69da      	ldr	r2, [r3, #28]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b088      	sub	sp, #32
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	603b      	str	r3, [r7, #0]
 80040e2:	4613      	mov	r3, r2
 80040e4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040e6:	f7fe fe9f 	bl	8002e28 <HAL_GetTick>
 80040ea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80040ec:	88fb      	ldrh	r3, [r7, #6]
 80040ee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d001      	beq.n	8004100 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80040fc:	2302      	movs	r3, #2
 80040fe:	e12a      	b.n	8004356 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <HAL_SPI_Transmit+0x36>
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e122      	b.n	8004356 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004116:	2b01      	cmp	r3, #1
 8004118:	d101      	bne.n	800411e <HAL_SPI_Transmit+0x48>
 800411a:	2302      	movs	r3, #2
 800411c:	e11b      	b.n	8004356 <HAL_SPI_Transmit+0x280>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2203      	movs	r2, #3
 800412a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	88fa      	ldrh	r2, [r7, #6]
 800413e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	88fa      	ldrh	r2, [r7, #6]
 8004144:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800416c:	d10f      	bne.n	800418e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800417c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800418c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004198:	2b40      	cmp	r3, #64	@ 0x40
 800419a:	d007      	beq.n	80041ac <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041b4:	d152      	bne.n	800425c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <HAL_SPI_Transmit+0xee>
 80041be:	8b7b      	ldrh	r3, [r7, #26]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d145      	bne.n	8004250 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c8:	881a      	ldrh	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d4:	1c9a      	adds	r2, r3, #2
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041de:	b29b      	uxth	r3, r3
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80041e8:	e032      	b.n	8004250 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d112      	bne.n	800421e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fc:	881a      	ldrh	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004208:	1c9a      	adds	r2, r3, #2
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800421c:	e018      	b.n	8004250 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800421e:	f7fe fe03 	bl	8002e28 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d803      	bhi.n	8004236 <HAL_SPI_Transmit+0x160>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004234:	d102      	bne.n	800423c <HAL_SPI_Transmit+0x166>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d109      	bne.n	8004250 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e082      	b.n	8004356 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1c7      	bne.n	80041ea <HAL_SPI_Transmit+0x114>
 800425a:	e053      	b.n	8004304 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <HAL_SPI_Transmit+0x194>
 8004264:	8b7b      	ldrh	r3, [r7, #26]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d147      	bne.n	80042fa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	7812      	ldrb	r2, [r2, #0]
 8004276:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004290:	e033      	b.n	80042fa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b02      	cmp	r3, #2
 800429e:	d113      	bne.n	80042c8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	330c      	adds	r3, #12
 80042aa:	7812      	ldrb	r2, [r2, #0]
 80042ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80042c6:	e018      	b.n	80042fa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042c8:	f7fe fdae 	bl	8002e28 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d803      	bhi.n	80042e0 <HAL_SPI_Transmit+0x20a>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042de:	d102      	bne.n	80042e6 <HAL_SPI_Transmit+0x210>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d109      	bne.n	80042fa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e02d      	b.n	8004356 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1c6      	bne.n	8004292 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004304:	69fa      	ldr	r2, [r7, #28]
 8004306:	6839      	ldr	r1, [r7, #0]
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 fa67 	bl	80047dc <SPI_EndRxTxTransaction>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2220      	movs	r2, #32
 8004318:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10a      	bne.n	8004338 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	617b      	str	r3, [r7, #20]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004354:	2300      	movs	r3, #0
  }
}
 8004356:	4618      	mov	r0, r3
 8004358:	3720      	adds	r7, #32
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b08a      	sub	sp, #40	@ 0x28
 8004362:	af00      	add	r7, sp, #0
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	607a      	str	r2, [r7, #4]
 800436a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800436c:	2301      	movs	r3, #1
 800436e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004370:	f7fe fd5a 	bl	8002e28 <HAL_GetTick>
 8004374:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800437c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004384:	887b      	ldrh	r3, [r7, #2]
 8004386:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004388:	7ffb      	ldrb	r3, [r7, #31]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d00c      	beq.n	80043a8 <HAL_SPI_TransmitReceive+0x4a>
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004394:	d106      	bne.n	80043a4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d102      	bne.n	80043a4 <HAL_SPI_TransmitReceive+0x46>
 800439e:	7ffb      	ldrb	r3, [r7, #31]
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d001      	beq.n	80043a8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80043a4:	2302      	movs	r3, #2
 80043a6:	e17f      	b.n	80046a8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d005      	beq.n	80043ba <HAL_SPI_TransmitReceive+0x5c>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <HAL_SPI_TransmitReceive+0x5c>
 80043b4:	887b      	ldrh	r3, [r7, #2]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e174      	b.n	80046a8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_SPI_TransmitReceive+0x6e>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e16d      	b.n	80046a8 <HAL_SPI_TransmitReceive+0x34a>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d003      	beq.n	80043e8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2205      	movs	r2, #5
 80043e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	887a      	ldrh	r2, [r7, #2]
 80043f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	887a      	ldrh	r2, [r7, #2]
 80043fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	887a      	ldrh	r2, [r7, #2]
 800440a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	887a      	ldrh	r2, [r7, #2]
 8004410:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004428:	2b40      	cmp	r3, #64	@ 0x40
 800442a:	d007      	beq.n	800443c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800443a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004444:	d17e      	bne.n	8004544 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_SPI_TransmitReceive+0xf6>
 800444e:	8afb      	ldrh	r3, [r7, #22]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d16c      	bne.n	800452e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004458:	881a      	ldrh	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004464:	1c9a      	adds	r2, r3, #2
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004478:	e059      	b.n	800452e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b02      	cmp	r3, #2
 8004486:	d11b      	bne.n	80044c0 <HAL_SPI_TransmitReceive+0x162>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d016      	beq.n	80044c0 <HAL_SPI_TransmitReceive+0x162>
 8004492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004494:	2b01      	cmp	r3, #1
 8004496:	d113      	bne.n	80044c0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449c:	881a      	ldrh	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a8:	1c9a      	adds	r2, r3, #2
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d119      	bne.n	8004502 <HAL_SPI_TransmitReceive+0x1a4>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d014      	beq.n	8004502 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e2:	b292      	uxth	r2, r2
 80044e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ea:	1c9a      	adds	r2, r3, #2
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044fe:	2301      	movs	r3, #1
 8004500:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004502:	f7fe fc91 	bl	8002e28 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800450e:	429a      	cmp	r2, r3
 8004510:	d80d      	bhi.n	800452e <HAL_SPI_TransmitReceive+0x1d0>
 8004512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004518:	d009      	beq.n	800452e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e0bc      	b.n	80046a8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004532:	b29b      	uxth	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1a0      	bne.n	800447a <HAL_SPI_TransmitReceive+0x11c>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800453c:	b29b      	uxth	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d19b      	bne.n	800447a <HAL_SPI_TransmitReceive+0x11c>
 8004542:	e082      	b.n	800464a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <HAL_SPI_TransmitReceive+0x1f4>
 800454c:	8afb      	ldrh	r3, [r7, #22]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d171      	bne.n	8004636 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	330c      	adds	r3, #12
 800455c:	7812      	ldrb	r2, [r2, #0]
 800455e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004578:	e05d      	b.n	8004636 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b02      	cmp	r3, #2
 8004586:	d11c      	bne.n	80045c2 <HAL_SPI_TransmitReceive+0x264>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d017      	beq.n	80045c2 <HAL_SPI_TransmitReceive+0x264>
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	2b01      	cmp	r3, #1
 8004596:	d114      	bne.n	80045c2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	330c      	adds	r3, #12
 80045a2:	7812      	ldrb	r2, [r2, #0]
 80045a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d119      	bne.n	8004604 <HAL_SPI_TransmitReceive+0x2a6>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d014      	beq.n	8004604 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004600:	2301      	movs	r3, #1
 8004602:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004604:	f7fe fc10 	bl	8002e28 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004610:	429a      	cmp	r2, r3
 8004612:	d803      	bhi.n	800461c <HAL_SPI_TransmitReceive+0x2be>
 8004614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461a:	d102      	bne.n	8004622 <HAL_SPI_TransmitReceive+0x2c4>
 800461c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800461e:	2b00      	cmp	r3, #0
 8004620:	d109      	bne.n	8004636 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e038      	b.n	80046a8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d19c      	bne.n	800457a <HAL_SPI_TransmitReceive+0x21c>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d197      	bne.n	800457a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800464a:	6a3a      	ldr	r2, [r7, #32]
 800464c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 f8c4 	bl	80047dc <SPI_EndRxTxTransaction>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d008      	beq.n	800466c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2220      	movs	r2, #32
 800465e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e01d      	b.n	80046a8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10a      	bne.n	800468a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004674:	2300      	movs	r3, #0
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	613b      	str	r3, [r7, #16]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80046a6:	2300      	movs	r3, #0
  }
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3728      	adds	r7, #40	@ 0x28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046be:	b2db      	uxtb	r3, r3
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	4613      	mov	r3, r2
 80046da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046dc:	f7fe fba4 	bl	8002e28 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e4:	1a9b      	subs	r3, r3, r2
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	4413      	add	r3, r2
 80046ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046ec:	f7fe fb9c 	bl	8002e28 <HAL_GetTick>
 80046f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046f2:	4b39      	ldr	r3, [pc, #228]	@ (80047d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	015b      	lsls	r3, r3, #5
 80046f8:	0d1b      	lsrs	r3, r3, #20
 80046fa:	69fa      	ldr	r2, [r7, #28]
 80046fc:	fb02 f303 	mul.w	r3, r2, r3
 8004700:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004702:	e054      	b.n	80047ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470a:	d050      	beq.n	80047ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800470c:	f7fe fb8c 	bl	8002e28 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	429a      	cmp	r2, r3
 800471a:	d902      	bls.n	8004722 <SPI_WaitFlagStateUntilTimeout+0x56>
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d13d      	bne.n	800479e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004730:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800473a:	d111      	bne.n	8004760 <SPI_WaitFlagStateUntilTimeout+0x94>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004744:	d004      	beq.n	8004750 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800474e:	d107      	bne.n	8004760 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800475e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004764:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004768:	d10f      	bne.n	800478a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004788:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e017      	b.n	80047ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4013      	ands	r3, r2
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	bf0c      	ite	eq
 80047be:	2301      	moveq	r3, #1
 80047c0:	2300      	movne	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	79fb      	ldrb	r3, [r7, #7]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d19b      	bne.n	8004704 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3720      	adds	r7, #32
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20000004 	.word	0x20000004

080047dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2201      	movs	r2, #1
 80047f0:	2102      	movs	r1, #2
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f7ff ff6a 	bl	80046cc <SPI_WaitFlagStateUntilTimeout>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d007      	beq.n	800480e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004802:	f043 0220 	orr.w	r2, r3, #32
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e032      	b.n	8004874 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800480e:	4b1b      	ldr	r3, [pc, #108]	@ (800487c <SPI_EndRxTxTransaction+0xa0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a1b      	ldr	r2, [pc, #108]	@ (8004880 <SPI_EndRxTxTransaction+0xa4>)
 8004814:	fba2 2303 	umull	r2, r3, r2, r3
 8004818:	0d5b      	lsrs	r3, r3, #21
 800481a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800481e:	fb02 f303 	mul.w	r3, r2, r3
 8004822:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800482c:	d112      	bne.n	8004854 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2200      	movs	r2, #0
 8004836:	2180      	movs	r1, #128	@ 0x80
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f7ff ff47 	bl	80046cc <SPI_WaitFlagStateUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d016      	beq.n	8004872 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004848:	f043 0220 	orr.w	r2, r3, #32
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e00f      	b.n	8004874 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	3b01      	subs	r3, #1
 800485e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800486a:	2b80      	cmp	r3, #128	@ 0x80
 800486c:	d0f2      	beq.n	8004854 <SPI_EndRxTxTransaction+0x78>
 800486e:	e000      	b.n	8004872 <SPI_EndRxTxTransaction+0x96>
        break;
 8004870:	bf00      	nop
  }

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	20000004 	.word	0x20000004
 8004880:	165e9f81 	.word	0x165e9f81

08004884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e041      	b.n	800491a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d106      	bne.n	80048b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fe f81c 	bl	80028e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3304      	adds	r3, #4
 80048c0:	4619      	mov	r1, r3
 80048c2:	4610      	mov	r0, r2
 80048c4:	f000 fae6 	bl	8004e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b01      	cmp	r3, #1
 8004936:	d001      	beq.n	800493c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e046      	b.n	80049ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a23      	ldr	r2, [pc, #140]	@ (80049d8 <HAL_TIM_Base_Start+0xb4>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d022      	beq.n	8004994 <HAL_TIM_Base_Start+0x70>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004956:	d01d      	beq.n	8004994 <HAL_TIM_Base_Start+0x70>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1f      	ldr	r2, [pc, #124]	@ (80049dc <HAL_TIM_Base_Start+0xb8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d018      	beq.n	8004994 <HAL_TIM_Base_Start+0x70>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1e      	ldr	r2, [pc, #120]	@ (80049e0 <HAL_TIM_Base_Start+0xbc>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d013      	beq.n	8004994 <HAL_TIM_Base_Start+0x70>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a1c      	ldr	r2, [pc, #112]	@ (80049e4 <HAL_TIM_Base_Start+0xc0>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00e      	beq.n	8004994 <HAL_TIM_Base_Start+0x70>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1b      	ldr	r2, [pc, #108]	@ (80049e8 <HAL_TIM_Base_Start+0xc4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d009      	beq.n	8004994 <HAL_TIM_Base_Start+0x70>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a19      	ldr	r2, [pc, #100]	@ (80049ec <HAL_TIM_Base_Start+0xc8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d004      	beq.n	8004994 <HAL_TIM_Base_Start+0x70>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a18      	ldr	r2, [pc, #96]	@ (80049f0 <HAL_TIM_Base_Start+0xcc>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d111      	bne.n	80049b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b06      	cmp	r3, #6
 80049a4:	d010      	beq.n	80049c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f042 0201 	orr.w	r2, r2, #1
 80049b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b6:	e007      	b.n	80049c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	40010000 	.word	0x40010000
 80049dc:	40000400 	.word	0x40000400
 80049e0:	40000800 	.word	0x40000800
 80049e4:	40000c00 	.word	0x40000c00
 80049e8:	40010400 	.word	0x40010400
 80049ec:	40014000 	.word	0x40014000
 80049f0:	40001800 	.word	0x40001800

080049f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d001      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e04e      	b.n	8004aaa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a23      	ldr	r2, [pc, #140]	@ (8004ab8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d022      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x80>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a36:	d01d      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x80>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8004abc <HAL_TIM_Base_Start_IT+0xc8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d018      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x80>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a1e      	ldr	r2, [pc, #120]	@ (8004ac0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d013      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x80>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00e      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x80>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d009      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x80>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a19      	ldr	r2, [pc, #100]	@ (8004acc <HAL_TIM_Base_Start_IT+0xd8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d004      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x80>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a18      	ldr	r2, [pc, #96]	@ (8004ad0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d111      	bne.n	8004a98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b06      	cmp	r3, #6
 8004a84:	d010      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0201 	orr.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a96:	e007      	b.n	8004aa8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40010000 	.word	0x40010000
 8004abc:	40000400 	.word	0x40000400
 8004ac0:	40000800 	.word	0x40000800
 8004ac4:	40000c00 	.word	0x40000c00
 8004ac8:	40010400 	.word	0x40010400
 8004acc:	40014000 	.word	0x40014000
 8004ad0:	40001800 	.word	0x40001800

08004ad4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d020      	beq.n	8004b38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01b      	beq.n	8004b38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0202 	mvn.w	r2, #2
 8004b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f999 	bl	8004e56 <HAL_TIM_IC_CaptureCallback>
 8004b24:	e005      	b.n	8004b32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f98b 	bl	8004e42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f99c 	bl	8004e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d020      	beq.n	8004b84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01b      	beq.n	8004b84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0204 	mvn.w	r2, #4
 8004b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2202      	movs	r2, #2
 8004b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f973 	bl	8004e56 <HAL_TIM_IC_CaptureCallback>
 8004b70:	e005      	b.n	8004b7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f965 	bl	8004e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f976 	bl	8004e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d020      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01b      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0208 	mvn.w	r2, #8
 8004ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2204      	movs	r2, #4
 8004ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f94d 	bl	8004e56 <HAL_TIM_IC_CaptureCallback>
 8004bbc:	e005      	b.n	8004bca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f93f 	bl	8004e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f950 	bl	8004e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f003 0310 	and.w	r3, r3, #16
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d020      	beq.n	8004c1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01b      	beq.n	8004c1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0210 	mvn.w	r2, #16
 8004bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2208      	movs	r2, #8
 8004bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f927 	bl	8004e56 <HAL_TIM_IC_CaptureCallback>
 8004c08:	e005      	b.n	8004c16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f919 	bl	8004e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f92a 	bl	8004e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00c      	beq.n	8004c40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d007      	beq.n	8004c40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0201 	mvn.w	r2, #1
 8004c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7fd fdb2 	bl	80027a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00c      	beq.n	8004c64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d007      	beq.n	8004c64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fae4 	bl	800522c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00c      	beq.n	8004c88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d007      	beq.n	8004c88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f8fb 	bl	8004e7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f003 0320 	and.w	r3, r3, #32
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00c      	beq.n	8004cac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d007      	beq.n	8004cac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f06f 0220 	mvn.w	r2, #32
 8004ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fab6 	bl	8005218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cac:	bf00      	nop
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_TIM_ConfigClockSource+0x1c>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e0b4      	b.n	8004e3a <HAL_TIM_ConfigClockSource+0x186>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d08:	d03e      	beq.n	8004d88 <HAL_TIM_ConfigClockSource+0xd4>
 8004d0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d0e:	f200 8087 	bhi.w	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d16:	f000 8086 	beq.w	8004e26 <HAL_TIM_ConfigClockSource+0x172>
 8004d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d1e:	d87f      	bhi.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d20:	2b70      	cmp	r3, #112	@ 0x70
 8004d22:	d01a      	beq.n	8004d5a <HAL_TIM_ConfigClockSource+0xa6>
 8004d24:	2b70      	cmp	r3, #112	@ 0x70
 8004d26:	d87b      	bhi.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d28:	2b60      	cmp	r3, #96	@ 0x60
 8004d2a:	d050      	beq.n	8004dce <HAL_TIM_ConfigClockSource+0x11a>
 8004d2c:	2b60      	cmp	r3, #96	@ 0x60
 8004d2e:	d877      	bhi.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d30:	2b50      	cmp	r3, #80	@ 0x50
 8004d32:	d03c      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0xfa>
 8004d34:	2b50      	cmp	r3, #80	@ 0x50
 8004d36:	d873      	bhi.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d38:	2b40      	cmp	r3, #64	@ 0x40
 8004d3a:	d058      	beq.n	8004dee <HAL_TIM_ConfigClockSource+0x13a>
 8004d3c:	2b40      	cmp	r3, #64	@ 0x40
 8004d3e:	d86f      	bhi.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d40:	2b30      	cmp	r3, #48	@ 0x30
 8004d42:	d064      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x15a>
 8004d44:	2b30      	cmp	r3, #48	@ 0x30
 8004d46:	d86b      	bhi.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d060      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x15a>
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d867      	bhi.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d05c      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x15a>
 8004d54:	2b10      	cmp	r3, #16
 8004d56:	d05a      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x15a>
 8004d58:	e062      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d6a:	f000 f9b9 	bl	80050e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	609a      	str	r2, [r3, #8]
      break;
 8004d86:	e04f      	b.n	8004e28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d98:	f000 f9a2 	bl	80050e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004daa:	609a      	str	r2, [r3, #8]
      break;
 8004dac:	e03c      	b.n	8004e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dba:	461a      	mov	r2, r3
 8004dbc:	f000 f916 	bl	8004fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2150      	movs	r1, #80	@ 0x50
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 f96f 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004dcc:	e02c      	b.n	8004e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f000 f935 	bl	800504a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2160      	movs	r1, #96	@ 0x60
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 f95f 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004dec:	e01c      	b.n	8004e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f000 f8f6 	bl	8004fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2140      	movs	r1, #64	@ 0x40
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 f94f 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004e0c:	e00c      	b.n	8004e28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4619      	mov	r1, r3
 8004e18:	4610      	mov	r0, r2
 8004e1a:	f000 f946 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004e1e:	e003      	b.n	8004e28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	73fb      	strb	r3, [r7, #15]
      break;
 8004e24:	e000      	b.n	8004e28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
	...

08004e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a46      	ldr	r2, [pc, #280]	@ (8004fc0 <TIM_Base_SetConfig+0x12c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d013      	beq.n	8004ed4 <TIM_Base_SetConfig+0x40>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eb2:	d00f      	beq.n	8004ed4 <TIM_Base_SetConfig+0x40>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a43      	ldr	r2, [pc, #268]	@ (8004fc4 <TIM_Base_SetConfig+0x130>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00b      	beq.n	8004ed4 <TIM_Base_SetConfig+0x40>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a42      	ldr	r2, [pc, #264]	@ (8004fc8 <TIM_Base_SetConfig+0x134>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d007      	beq.n	8004ed4 <TIM_Base_SetConfig+0x40>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a41      	ldr	r2, [pc, #260]	@ (8004fcc <TIM_Base_SetConfig+0x138>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d003      	beq.n	8004ed4 <TIM_Base_SetConfig+0x40>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a40      	ldr	r2, [pc, #256]	@ (8004fd0 <TIM_Base_SetConfig+0x13c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d108      	bne.n	8004ee6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a35      	ldr	r2, [pc, #212]	@ (8004fc0 <TIM_Base_SetConfig+0x12c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d02b      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ef4:	d027      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a32      	ldr	r2, [pc, #200]	@ (8004fc4 <TIM_Base_SetConfig+0x130>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d023      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a31      	ldr	r2, [pc, #196]	@ (8004fc8 <TIM_Base_SetConfig+0x134>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d01f      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a30      	ldr	r2, [pc, #192]	@ (8004fcc <TIM_Base_SetConfig+0x138>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d01b      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a2f      	ldr	r2, [pc, #188]	@ (8004fd0 <TIM_Base_SetConfig+0x13c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d017      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a2e      	ldr	r2, [pc, #184]	@ (8004fd4 <TIM_Base_SetConfig+0x140>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d013      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a2d      	ldr	r2, [pc, #180]	@ (8004fd8 <TIM_Base_SetConfig+0x144>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00f      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a2c      	ldr	r2, [pc, #176]	@ (8004fdc <TIM_Base_SetConfig+0x148>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00b      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a2b      	ldr	r2, [pc, #172]	@ (8004fe0 <TIM_Base_SetConfig+0x14c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d007      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a2a      	ldr	r2, [pc, #168]	@ (8004fe4 <TIM_Base_SetConfig+0x150>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d003      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a29      	ldr	r2, [pc, #164]	@ (8004fe8 <TIM_Base_SetConfig+0x154>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d108      	bne.n	8004f58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a10      	ldr	r2, [pc, #64]	@ (8004fc0 <TIM_Base_SetConfig+0x12c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <TIM_Base_SetConfig+0xf8>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a12      	ldr	r2, [pc, #72]	@ (8004fd0 <TIM_Base_SetConfig+0x13c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d103      	bne.n	8004f94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d105      	bne.n	8004fb2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	f023 0201 	bic.w	r2, r3, #1
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	611a      	str	r2, [r3, #16]
  }
}
 8004fb2:	bf00      	nop
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	40010000 	.word	0x40010000
 8004fc4:	40000400 	.word	0x40000400
 8004fc8:	40000800 	.word	0x40000800
 8004fcc:	40000c00 	.word	0x40000c00
 8004fd0:	40010400 	.word	0x40010400
 8004fd4:	40014000 	.word	0x40014000
 8004fd8:	40014400 	.word	0x40014400
 8004fdc:	40014800 	.word	0x40014800
 8004fe0:	40001800 	.word	0x40001800
 8004fe4:	40001c00 	.word	0x40001c00
 8004fe8:	40002000 	.word	0x40002000

08004fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	f023 0201 	bic.w	r2, r3, #1
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	4313      	orrs	r3, r2
 8005020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f023 030a 	bic.w	r3, r3, #10
 8005028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	621a      	str	r2, [r3, #32]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800504a:	b480      	push	{r7}
 800504c:	b087      	sub	sp, #28
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	f023 0210 	bic.w	r2, r3, #16
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005074:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	031b      	lsls	r3, r3, #12
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	4313      	orrs	r3, r2
 800507e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005086:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	621a      	str	r2, [r3, #32]
}
 800509e:	bf00      	nop
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b085      	sub	sp, #20
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f043 0307 	orr.w	r3, r3, #7
 80050cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	609a      	str	r2, [r3, #8]
}
 80050d4:	bf00      	nop
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	021a      	lsls	r2, r3, #8
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	431a      	orrs	r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	4313      	orrs	r3, r2
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	4313      	orrs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	609a      	str	r2, [r3, #8]
}
 8005114:	bf00      	nop
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005134:	2302      	movs	r3, #2
 8005136:	e05a      	b.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800515e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a21      	ldr	r2, [pc, #132]	@ (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d022      	beq.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005184:	d01d      	beq.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a1d      	ldr	r2, [pc, #116]	@ (8005200 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d018      	beq.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a1b      	ldr	r2, [pc, #108]	@ (8005204 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d013      	beq.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a1a      	ldr	r2, [pc, #104]	@ (8005208 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d00e      	beq.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a18      	ldr	r2, [pc, #96]	@ (800520c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d009      	beq.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a17      	ldr	r2, [pc, #92]	@ (8005210 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d004      	beq.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a15      	ldr	r2, [pc, #84]	@ (8005214 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d10c      	bne.n	80051dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40010000 	.word	0x40010000
 8005200:	40000400 	.word	0x40000400
 8005204:	40000800 	.word	0x40000800
 8005208:	40000c00 	.word	0x40000c00
 800520c:	40010400 	.word	0x40010400
 8005210:	40014000 	.word	0x40014000
 8005214:	40001800 	.word	0x40001800

08005218 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e042      	b.n	80052d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d106      	bne.n	800526c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7fd fb7c 	bl	8002964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2224      	movs	r2, #36	@ 0x24
 8005270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005282:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f973 	bl	8005570 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	691a      	ldr	r2, [r3, #16]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695a      	ldr	r2, [r3, #20]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08a      	sub	sp, #40	@ 0x28
 80052e4:	af02      	add	r7, sp, #8
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	603b      	str	r3, [r7, #0]
 80052ec:	4613      	mov	r3, r2
 80052ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b20      	cmp	r3, #32
 80052fe:	d175      	bne.n	80053ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <HAL_UART_Transmit+0x2c>
 8005306:	88fb      	ldrh	r3, [r7, #6]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e06e      	b.n	80053ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2221      	movs	r2, #33	@ 0x21
 800531a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800531e:	f7fd fd83 	bl	8002e28 <HAL_GetTick>
 8005322:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	88fa      	ldrh	r2, [r7, #6]
 8005328:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	88fa      	ldrh	r2, [r7, #6]
 800532e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005338:	d108      	bne.n	800534c <HAL_UART_Transmit+0x6c>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d104      	bne.n	800534c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005342:	2300      	movs	r3, #0
 8005344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	e003      	b.n	8005354 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005350:	2300      	movs	r3, #0
 8005352:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005354:	e02e      	b.n	80053b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2200      	movs	r2, #0
 800535e:	2180      	movs	r1, #128	@ 0x80
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 f848 	bl	80053f6 <UART_WaitOnFlagUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e03a      	b.n	80053ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10b      	bne.n	8005396 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800538c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	3302      	adds	r3, #2
 8005392:	61bb      	str	r3, [r7, #24]
 8005394:	e007      	b.n	80053a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	781a      	ldrb	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	3301      	adds	r3, #1
 80053a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1cb      	bne.n	8005356 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2200      	movs	r2, #0
 80053c6:	2140      	movs	r1, #64	@ 0x40
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 f814 	bl	80053f6 <UART_WaitOnFlagUntilTimeout>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e006      	b.n	80053ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	e000      	b.n	80053ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80053ec:	2302      	movs	r3, #2
  }
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3720      	adds	r7, #32
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b086      	sub	sp, #24
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	60f8      	str	r0, [r7, #12]
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	603b      	str	r3, [r7, #0]
 8005402:	4613      	mov	r3, r2
 8005404:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005406:	e03b      	b.n	8005480 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540e:	d037      	beq.n	8005480 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005410:	f7fd fd0a 	bl	8002e28 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	6a3a      	ldr	r2, [r7, #32]
 800541c:	429a      	cmp	r2, r3
 800541e:	d302      	bcc.n	8005426 <UART_WaitOnFlagUntilTimeout+0x30>
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e03a      	b.n	80054a0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	d023      	beq.n	8005480 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2b80      	cmp	r3, #128	@ 0x80
 800543c:	d020      	beq.n	8005480 <UART_WaitOnFlagUntilTimeout+0x8a>
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b40      	cmp	r3, #64	@ 0x40
 8005442:	d01d      	beq.n	8005480 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	2b08      	cmp	r3, #8
 8005450:	d116      	bne.n	8005480 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005452:	2300      	movs	r3, #0
 8005454:	617b      	str	r3, [r7, #20]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 f81d 	bl	80054a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2208      	movs	r2, #8
 8005472:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e00f      	b.n	80054a0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4013      	ands	r3, r2
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	429a      	cmp	r2, r3
 800548e:	bf0c      	ite	eq
 8005490:	2301      	moveq	r3, #1
 8005492:	2300      	movne	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	461a      	mov	r2, r3
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	429a      	cmp	r2, r3
 800549c:	d0b4      	beq.n	8005408 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b095      	sub	sp, #84	@ 0x54
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	330c      	adds	r3, #12
 80054b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ba:	e853 3f00 	ldrex	r3, [r3]
 80054be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	330c      	adds	r3, #12
 80054ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054d0:	643a      	str	r2, [r7, #64]	@ 0x40
 80054d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054d8:	e841 2300 	strex	r3, r2, [r1]
 80054dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1e5      	bne.n	80054b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3314      	adds	r3, #20
 80054ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	e853 3f00 	ldrex	r3, [r3]
 80054f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	f023 0301 	bic.w	r3, r3, #1
 80054fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3314      	adds	r3, #20
 8005502:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005504:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005506:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005508:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800550a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800550c:	e841 2300 	strex	r3, r2, [r1]
 8005510:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e5      	bne.n	80054e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551c:	2b01      	cmp	r3, #1
 800551e:	d119      	bne.n	8005554 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	330c      	adds	r3, #12
 8005526:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	e853 3f00 	ldrex	r3, [r3]
 800552e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f023 0310 	bic.w	r3, r3, #16
 8005536:	647b      	str	r3, [r7, #68]	@ 0x44
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	330c      	adds	r3, #12
 800553e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005540:	61ba      	str	r2, [r7, #24]
 8005542:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005544:	6979      	ldr	r1, [r7, #20]
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	e841 2300 	strex	r3, r2, [r1]
 800554c:	613b      	str	r3, [r7, #16]
   return(result);
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1e5      	bne.n	8005520 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005562:	bf00      	nop
 8005564:	3754      	adds	r7, #84	@ 0x54
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
	...

08005570 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005574:	b0c0      	sub	sp, #256	@ 0x100
 8005576:	af00      	add	r7, sp, #0
 8005578:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800557c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800558c:	68d9      	ldr	r1, [r3, #12]
 800558e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	ea40 0301 	orr.w	r3, r0, r1
 8005598:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800559a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	431a      	orrs	r2, r3
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80055c8:	f021 010c 	bic.w	r1, r1, #12
 80055cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055d6:	430b      	orrs	r3, r1
 80055d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80055e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ea:	6999      	ldr	r1, [r3, #24]
 80055ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	ea40 0301 	orr.w	r3, r0, r1
 80055f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	4b8f      	ldr	r3, [pc, #572]	@ (800583c <UART_SetConfig+0x2cc>)
 8005600:	429a      	cmp	r2, r3
 8005602:	d005      	beq.n	8005610 <UART_SetConfig+0xa0>
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	4b8d      	ldr	r3, [pc, #564]	@ (8005840 <UART_SetConfig+0x2d0>)
 800560c:	429a      	cmp	r2, r3
 800560e:	d104      	bne.n	800561a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005610:	f7fd ffc4 	bl	800359c <HAL_RCC_GetPCLK2Freq>
 8005614:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005618:	e003      	b.n	8005622 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800561a:	f7fd ffab 	bl	8003574 <HAL_RCC_GetPCLK1Freq>
 800561e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800562c:	f040 810c 	bne.w	8005848 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005634:	2200      	movs	r2, #0
 8005636:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800563a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800563e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005642:	4622      	mov	r2, r4
 8005644:	462b      	mov	r3, r5
 8005646:	1891      	adds	r1, r2, r2
 8005648:	65b9      	str	r1, [r7, #88]	@ 0x58
 800564a:	415b      	adcs	r3, r3
 800564c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800564e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005652:	4621      	mov	r1, r4
 8005654:	eb12 0801 	adds.w	r8, r2, r1
 8005658:	4629      	mov	r1, r5
 800565a:	eb43 0901 	adc.w	r9, r3, r1
 800565e:	f04f 0200 	mov.w	r2, #0
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800566a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800566e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005672:	4690      	mov	r8, r2
 8005674:	4699      	mov	r9, r3
 8005676:	4623      	mov	r3, r4
 8005678:	eb18 0303 	adds.w	r3, r8, r3
 800567c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005680:	462b      	mov	r3, r5
 8005682:	eb49 0303 	adc.w	r3, r9, r3
 8005686:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800568a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005696:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800569a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800569e:	460b      	mov	r3, r1
 80056a0:	18db      	adds	r3, r3, r3
 80056a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80056a4:	4613      	mov	r3, r2
 80056a6:	eb42 0303 	adc.w	r3, r2, r3
 80056aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80056ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80056b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80056b4:	f7fb fb18 	bl	8000ce8 <__aeabi_uldivmod>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	4b61      	ldr	r3, [pc, #388]	@ (8005844 <UART_SetConfig+0x2d4>)
 80056be:	fba3 2302 	umull	r2, r3, r3, r2
 80056c2:	095b      	lsrs	r3, r3, #5
 80056c4:	011c      	lsls	r4, r3, #4
 80056c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ca:	2200      	movs	r2, #0
 80056cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80056d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80056d8:	4642      	mov	r2, r8
 80056da:	464b      	mov	r3, r9
 80056dc:	1891      	adds	r1, r2, r2
 80056de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80056e0:	415b      	adcs	r3, r3
 80056e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80056e8:	4641      	mov	r1, r8
 80056ea:	eb12 0a01 	adds.w	sl, r2, r1
 80056ee:	4649      	mov	r1, r9
 80056f0:	eb43 0b01 	adc.w	fp, r3, r1
 80056f4:	f04f 0200 	mov.w	r2, #0
 80056f8:	f04f 0300 	mov.w	r3, #0
 80056fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005700:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005704:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005708:	4692      	mov	sl, r2
 800570a:	469b      	mov	fp, r3
 800570c:	4643      	mov	r3, r8
 800570e:	eb1a 0303 	adds.w	r3, sl, r3
 8005712:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005716:	464b      	mov	r3, r9
 8005718:	eb4b 0303 	adc.w	r3, fp, r3
 800571c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800572c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005730:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005734:	460b      	mov	r3, r1
 8005736:	18db      	adds	r3, r3, r3
 8005738:	643b      	str	r3, [r7, #64]	@ 0x40
 800573a:	4613      	mov	r3, r2
 800573c:	eb42 0303 	adc.w	r3, r2, r3
 8005740:	647b      	str	r3, [r7, #68]	@ 0x44
 8005742:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005746:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800574a:	f7fb facd 	bl	8000ce8 <__aeabi_uldivmod>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	4611      	mov	r1, r2
 8005754:	4b3b      	ldr	r3, [pc, #236]	@ (8005844 <UART_SetConfig+0x2d4>)
 8005756:	fba3 2301 	umull	r2, r3, r3, r1
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	2264      	movs	r2, #100	@ 0x64
 800575e:	fb02 f303 	mul.w	r3, r2, r3
 8005762:	1acb      	subs	r3, r1, r3
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800576a:	4b36      	ldr	r3, [pc, #216]	@ (8005844 <UART_SetConfig+0x2d4>)
 800576c:	fba3 2302 	umull	r2, r3, r3, r2
 8005770:	095b      	lsrs	r3, r3, #5
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005778:	441c      	add	r4, r3
 800577a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800577e:	2200      	movs	r2, #0
 8005780:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005784:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005788:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800578c:	4642      	mov	r2, r8
 800578e:	464b      	mov	r3, r9
 8005790:	1891      	adds	r1, r2, r2
 8005792:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005794:	415b      	adcs	r3, r3
 8005796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005798:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800579c:	4641      	mov	r1, r8
 800579e:	1851      	adds	r1, r2, r1
 80057a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80057a2:	4649      	mov	r1, r9
 80057a4:	414b      	adcs	r3, r1
 80057a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80057a8:	f04f 0200 	mov.w	r2, #0
 80057ac:	f04f 0300 	mov.w	r3, #0
 80057b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80057b4:	4659      	mov	r1, fp
 80057b6:	00cb      	lsls	r3, r1, #3
 80057b8:	4651      	mov	r1, sl
 80057ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057be:	4651      	mov	r1, sl
 80057c0:	00ca      	lsls	r2, r1, #3
 80057c2:	4610      	mov	r0, r2
 80057c4:	4619      	mov	r1, r3
 80057c6:	4603      	mov	r3, r0
 80057c8:	4642      	mov	r2, r8
 80057ca:	189b      	adds	r3, r3, r2
 80057cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057d0:	464b      	mov	r3, r9
 80057d2:	460a      	mov	r2, r1
 80057d4:	eb42 0303 	adc.w	r3, r2, r3
 80057d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80057ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057f0:	460b      	mov	r3, r1
 80057f2:	18db      	adds	r3, r3, r3
 80057f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057f6:	4613      	mov	r3, r2
 80057f8:	eb42 0303 	adc.w	r3, r2, r3
 80057fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005802:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005806:	f7fb fa6f 	bl	8000ce8 <__aeabi_uldivmod>
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	4b0d      	ldr	r3, [pc, #52]	@ (8005844 <UART_SetConfig+0x2d4>)
 8005810:	fba3 1302 	umull	r1, r3, r3, r2
 8005814:	095b      	lsrs	r3, r3, #5
 8005816:	2164      	movs	r1, #100	@ 0x64
 8005818:	fb01 f303 	mul.w	r3, r1, r3
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	3332      	adds	r3, #50	@ 0x32
 8005822:	4a08      	ldr	r2, [pc, #32]	@ (8005844 <UART_SetConfig+0x2d4>)
 8005824:	fba2 2303 	umull	r2, r3, r2, r3
 8005828:	095b      	lsrs	r3, r3, #5
 800582a:	f003 0207 	and.w	r2, r3, #7
 800582e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4422      	add	r2, r4
 8005836:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005838:	e106      	b.n	8005a48 <UART_SetConfig+0x4d8>
 800583a:	bf00      	nop
 800583c:	40011000 	.word	0x40011000
 8005840:	40011400 	.word	0x40011400
 8005844:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800584c:	2200      	movs	r2, #0
 800584e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005852:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005856:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800585a:	4642      	mov	r2, r8
 800585c:	464b      	mov	r3, r9
 800585e:	1891      	adds	r1, r2, r2
 8005860:	6239      	str	r1, [r7, #32]
 8005862:	415b      	adcs	r3, r3
 8005864:	627b      	str	r3, [r7, #36]	@ 0x24
 8005866:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800586a:	4641      	mov	r1, r8
 800586c:	1854      	adds	r4, r2, r1
 800586e:	4649      	mov	r1, r9
 8005870:	eb43 0501 	adc.w	r5, r3, r1
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	f04f 0300 	mov.w	r3, #0
 800587c:	00eb      	lsls	r3, r5, #3
 800587e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005882:	00e2      	lsls	r2, r4, #3
 8005884:	4614      	mov	r4, r2
 8005886:	461d      	mov	r5, r3
 8005888:	4643      	mov	r3, r8
 800588a:	18e3      	adds	r3, r4, r3
 800588c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005890:	464b      	mov	r3, r9
 8005892:	eb45 0303 	adc.w	r3, r5, r3
 8005896:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800589a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80058a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058aa:	f04f 0200 	mov.w	r2, #0
 80058ae:	f04f 0300 	mov.w	r3, #0
 80058b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80058b6:	4629      	mov	r1, r5
 80058b8:	008b      	lsls	r3, r1, #2
 80058ba:	4621      	mov	r1, r4
 80058bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058c0:	4621      	mov	r1, r4
 80058c2:	008a      	lsls	r2, r1, #2
 80058c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80058c8:	f7fb fa0e 	bl	8000ce8 <__aeabi_uldivmod>
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4b60      	ldr	r3, [pc, #384]	@ (8005a54 <UART_SetConfig+0x4e4>)
 80058d2:	fba3 2302 	umull	r2, r3, r3, r2
 80058d6:	095b      	lsrs	r3, r3, #5
 80058d8:	011c      	lsls	r4, r3, #4
 80058da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058de:	2200      	movs	r2, #0
 80058e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80058e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80058ec:	4642      	mov	r2, r8
 80058ee:	464b      	mov	r3, r9
 80058f0:	1891      	adds	r1, r2, r2
 80058f2:	61b9      	str	r1, [r7, #24]
 80058f4:	415b      	adcs	r3, r3
 80058f6:	61fb      	str	r3, [r7, #28]
 80058f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058fc:	4641      	mov	r1, r8
 80058fe:	1851      	adds	r1, r2, r1
 8005900:	6139      	str	r1, [r7, #16]
 8005902:	4649      	mov	r1, r9
 8005904:	414b      	adcs	r3, r1
 8005906:	617b      	str	r3, [r7, #20]
 8005908:	f04f 0200 	mov.w	r2, #0
 800590c:	f04f 0300 	mov.w	r3, #0
 8005910:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005914:	4659      	mov	r1, fp
 8005916:	00cb      	lsls	r3, r1, #3
 8005918:	4651      	mov	r1, sl
 800591a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800591e:	4651      	mov	r1, sl
 8005920:	00ca      	lsls	r2, r1, #3
 8005922:	4610      	mov	r0, r2
 8005924:	4619      	mov	r1, r3
 8005926:	4603      	mov	r3, r0
 8005928:	4642      	mov	r2, r8
 800592a:	189b      	adds	r3, r3, r2
 800592c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005930:	464b      	mov	r3, r9
 8005932:	460a      	mov	r2, r1
 8005934:	eb42 0303 	adc.w	r3, r2, r3
 8005938:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005946:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005948:	f04f 0200 	mov.w	r2, #0
 800594c:	f04f 0300 	mov.w	r3, #0
 8005950:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005954:	4649      	mov	r1, r9
 8005956:	008b      	lsls	r3, r1, #2
 8005958:	4641      	mov	r1, r8
 800595a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800595e:	4641      	mov	r1, r8
 8005960:	008a      	lsls	r2, r1, #2
 8005962:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005966:	f7fb f9bf 	bl	8000ce8 <__aeabi_uldivmod>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	4611      	mov	r1, r2
 8005970:	4b38      	ldr	r3, [pc, #224]	@ (8005a54 <UART_SetConfig+0x4e4>)
 8005972:	fba3 2301 	umull	r2, r3, r3, r1
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	2264      	movs	r2, #100	@ 0x64
 800597a:	fb02 f303 	mul.w	r3, r2, r3
 800597e:	1acb      	subs	r3, r1, r3
 8005980:	011b      	lsls	r3, r3, #4
 8005982:	3332      	adds	r3, #50	@ 0x32
 8005984:	4a33      	ldr	r2, [pc, #204]	@ (8005a54 <UART_SetConfig+0x4e4>)
 8005986:	fba2 2303 	umull	r2, r3, r2, r3
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005990:	441c      	add	r4, r3
 8005992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005996:	2200      	movs	r2, #0
 8005998:	673b      	str	r3, [r7, #112]	@ 0x70
 800599a:	677a      	str	r2, [r7, #116]	@ 0x74
 800599c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80059a0:	4642      	mov	r2, r8
 80059a2:	464b      	mov	r3, r9
 80059a4:	1891      	adds	r1, r2, r2
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	415b      	adcs	r3, r3
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059b0:	4641      	mov	r1, r8
 80059b2:	1851      	adds	r1, r2, r1
 80059b4:	6039      	str	r1, [r7, #0]
 80059b6:	4649      	mov	r1, r9
 80059b8:	414b      	adcs	r3, r1
 80059ba:	607b      	str	r3, [r7, #4]
 80059bc:	f04f 0200 	mov.w	r2, #0
 80059c0:	f04f 0300 	mov.w	r3, #0
 80059c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059c8:	4659      	mov	r1, fp
 80059ca:	00cb      	lsls	r3, r1, #3
 80059cc:	4651      	mov	r1, sl
 80059ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059d2:	4651      	mov	r1, sl
 80059d4:	00ca      	lsls	r2, r1, #3
 80059d6:	4610      	mov	r0, r2
 80059d8:	4619      	mov	r1, r3
 80059da:	4603      	mov	r3, r0
 80059dc:	4642      	mov	r2, r8
 80059de:	189b      	adds	r3, r3, r2
 80059e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059e2:	464b      	mov	r3, r9
 80059e4:	460a      	mov	r2, r1
 80059e6:	eb42 0303 	adc.w	r3, r2, r3
 80059ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80059f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a04:	4649      	mov	r1, r9
 8005a06:	008b      	lsls	r3, r1, #2
 8005a08:	4641      	mov	r1, r8
 8005a0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a0e:	4641      	mov	r1, r8
 8005a10:	008a      	lsls	r2, r1, #2
 8005a12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a16:	f7fb f967 	bl	8000ce8 <__aeabi_uldivmod>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a54 <UART_SetConfig+0x4e4>)
 8005a20:	fba3 1302 	umull	r1, r3, r3, r2
 8005a24:	095b      	lsrs	r3, r3, #5
 8005a26:	2164      	movs	r1, #100	@ 0x64
 8005a28:	fb01 f303 	mul.w	r3, r1, r3
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	3332      	adds	r3, #50	@ 0x32
 8005a32:	4a08      	ldr	r2, [pc, #32]	@ (8005a54 <UART_SetConfig+0x4e4>)
 8005a34:	fba2 2303 	umull	r2, r3, r2, r3
 8005a38:	095b      	lsrs	r3, r3, #5
 8005a3a:	f003 020f 	and.w	r2, r3, #15
 8005a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4422      	add	r2, r4
 8005a46:	609a      	str	r2, [r3, #8]
}
 8005a48:	bf00      	nop
 8005a4a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a54:	51eb851f 	.word	0x51eb851f

08005a58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005a5c:	4904      	ldr	r1, [pc, #16]	@ (8005a70 <MX_FATFS_Init+0x18>)
 8005a5e:	4805      	ldr	r0, [pc, #20]	@ (8005a74 <MX_FATFS_Init+0x1c>)
 8005a60:	f002 fd74 	bl	800854c <FATFS_LinkDriver>
 8005a64:	4603      	mov	r3, r0
 8005a66:	461a      	mov	r2, r3
 8005a68:	4b03      	ldr	r3, [pc, #12]	@ (8005a78 <MX_FATFS_Init+0x20>)
 8005a6a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005a6c:	bf00      	nop
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	20000ae0 	.word	0x20000ae0
 8005a74:	20000010 	.word	0x20000010
 8005a78:	20000adc 	.word	0x20000adc

08005a7c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005a80:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	4603      	mov	r3, r0
 8005a94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8005a96:	79fb      	ldrb	r3, [r7, #7]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fc f8c5 	bl	8001c28 <SD_disk_initialize>
 8005a9e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8005ab2:	79fb      	ldrb	r3, [r7, #7]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fc f9a1 	bl	8001dfc <SD_disk_status>
 8005aba:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60b9      	str	r1, [r7, #8]
 8005acc:	607a      	str	r2, [r7, #4]
 8005ace:	603b      	str	r3, [r7, #0]
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8005ad4:	7bf8      	ldrb	r0, [r7, #15]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	68b9      	ldr	r1, [r7, #8]
 8005adc:	f7fc f9a4 	bl	8001e28 <SD_disk_read>
 8005ae0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b084      	sub	sp, #16
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	603b      	str	r3, [r7, #0]
 8005af6:	4603      	mov	r3, r0
 8005af8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8005afa:	7bf8      	ldrb	r0, [r7, #15]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	68b9      	ldr	r1, [r7, #8]
 8005b02:	f7fc f9fb 	bl	8001efc <SD_disk_write>
 8005b06:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	603a      	str	r2, [r7, #0]
 8005b1a:	71fb      	strb	r3, [r7, #7]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8005b20:	79b9      	ldrb	r1, [r7, #6]
 8005b22:	79fb      	ldrb	r3, [r7, #7]
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fc fa6c 	bl	8002004 <SD_disk_ioctl>
 8005b2c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
	...

08005b38 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005b42:	79fb      	ldrb	r3, [r7, #7]
 8005b44:	4a08      	ldr	r2, [pc, #32]	@ (8005b68 <disk_status+0x30>)
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	79fa      	ldrb	r2, [r7, #7]
 8005b50:	4905      	ldr	r1, [pc, #20]	@ (8005b68 <disk_status+0x30>)
 8005b52:	440a      	add	r2, r1
 8005b54:	7a12      	ldrb	r2, [r2, #8]
 8005b56:	4610      	mov	r0, r2
 8005b58:	4798      	blx	r3
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	20000b0c 	.word	0x20000b0c

08005b6c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	4603      	mov	r3, r0
 8005b74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005b7a:	79fb      	ldrb	r3, [r7, #7]
 8005b7c:	4a0e      	ldr	r2, [pc, #56]	@ (8005bb8 <disk_initialize+0x4c>)
 8005b7e:	5cd3      	ldrb	r3, [r2, r3]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d114      	bne.n	8005bae <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005b84:	79fb      	ldrb	r3, [r7, #7]
 8005b86:	4a0c      	ldr	r2, [pc, #48]	@ (8005bb8 <disk_initialize+0x4c>)
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	79fa      	ldrb	r2, [r7, #7]
 8005b92:	4909      	ldr	r1, [pc, #36]	@ (8005bb8 <disk_initialize+0x4c>)
 8005b94:	440a      	add	r2, r1
 8005b96:	7a12      	ldrb	r2, [r2, #8]
 8005b98:	4610      	mov	r0, r2
 8005b9a:	4798      	blx	r3
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d103      	bne.n	8005bae <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005ba6:	79fb      	ldrb	r3, [r7, #7]
 8005ba8:	4a03      	ldr	r2, [pc, #12]	@ (8005bb8 <disk_initialize+0x4c>)
 8005baa:	2101      	movs	r1, #1
 8005bac:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	20000b0c 	.word	0x20000b0c

08005bbc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005bbc:	b590      	push	{r4, r7, lr}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	607a      	str	r2, [r7, #4]
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	4603      	mov	r3, r0
 8005bca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	4a0a      	ldr	r2, [pc, #40]	@ (8005bf8 <disk_read+0x3c>)
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	689c      	ldr	r4, [r3, #8]
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	4a07      	ldr	r2, [pc, #28]	@ (8005bf8 <disk_read+0x3c>)
 8005bdc:	4413      	add	r3, r2
 8005bde:	7a18      	ldrb	r0, [r3, #8]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	68b9      	ldr	r1, [r7, #8]
 8005be6:	47a0      	blx	r4
 8005be8:	4603      	mov	r3, r0
 8005bea:	75fb      	strb	r3, [r7, #23]
  return res;
 8005bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd90      	pop	{r4, r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20000b0c 	.word	0x20000b0c

08005bfc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005bfc:	b590      	push	{r4, r7, lr}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	4603      	mov	r3, r0
 8005c0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8005c38 <disk_write+0x3c>)
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	68dc      	ldr	r4, [r3, #12]
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	4a07      	ldr	r2, [pc, #28]	@ (8005c38 <disk_write+0x3c>)
 8005c1c:	4413      	add	r3, r2
 8005c1e:	7a18      	ldrb	r0, [r3, #8]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	68b9      	ldr	r1, [r7, #8]
 8005c26:	47a0      	blx	r4
 8005c28:	4603      	mov	r3, r0
 8005c2a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd90      	pop	{r4, r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20000b0c 	.word	0x20000b0c

08005c3c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	4603      	mov	r3, r0
 8005c44:	603a      	str	r2, [r7, #0]
 8005c46:	71fb      	strb	r3, [r7, #7]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005c4c:	79fb      	ldrb	r3, [r7, #7]
 8005c4e:	4a09      	ldr	r2, [pc, #36]	@ (8005c74 <disk_ioctl+0x38>)
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	79fa      	ldrb	r2, [r7, #7]
 8005c5a:	4906      	ldr	r1, [pc, #24]	@ (8005c74 <disk_ioctl+0x38>)
 8005c5c:	440a      	add	r2, r1
 8005c5e:	7a10      	ldrb	r0, [r2, #8]
 8005c60:	79b9      	ldrb	r1, [r7, #6]
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	4798      	blx	r3
 8005c66:	4603      	mov	r3, r0
 8005c68:	73fb      	strb	r3, [r7, #15]
  return res;
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	20000b0c 	.word	0x20000b0c

08005c78 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3301      	adds	r3, #1
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005c88:	89fb      	ldrh	r3, [r7, #14]
 8005c8a:	021b      	lsls	r3, r3, #8
 8005c8c:	b21a      	sxth	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	b21b      	sxth	r3, r3
 8005c94:	4313      	orrs	r3, r2
 8005c96:	b21b      	sxth	r3, r3
 8005c98:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005c9a:	89fb      	ldrh	r3, [r7, #14]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3303      	adds	r3, #3
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	021b      	lsls	r3, r3, #8
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	3202      	adds	r2, #2
 8005cc0:	7812      	ldrb	r2, [r2, #0]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	021b      	lsls	r3, r3, #8
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	3201      	adds	r2, #1
 8005cce:	7812      	ldrb	r2, [r2, #0]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	021b      	lsls	r3, r3, #8
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	7812      	ldrb	r2, [r2, #0]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
	return rv;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	607a      	str	r2, [r7, #4]
 8005d00:	887a      	ldrh	r2, [r7, #2]
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	701a      	strb	r2, [r3, #0]
 8005d06:	887b      	ldrh	r3, [r7, #2]
 8005d08:	0a1b      	lsrs	r3, r3, #8
 8005d0a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	607a      	str	r2, [r7, #4]
 8005d12:	887a      	ldrh	r2, [r7, #2]
 8005d14:	b2d2      	uxtb	r2, r2
 8005d16:	701a      	strb	r2, [r3, #0]
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	701a      	strb	r2, [r3, #0]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	0a1b      	lsrs	r3, r3, #8
 8005d3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	607a      	str	r2, [r7, #4]
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	b2d2      	uxtb	r2, r2
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	0a1b      	lsrs	r3, r3, #8
 8005d50:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	0a1b      	lsrs	r3, r3, #8
 8005d62:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	607a      	str	r2, [r7, #4]
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	b2d2      	uxtb	r2, r2
 8005d6e:	701a      	strb	r2, [r3, #0]
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00d      	beq.n	8005db2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	1c53      	adds	r3, r2, #1
 8005d9a:	613b      	str	r3, [r7, #16]
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	1c59      	adds	r1, r3, #1
 8005da0:	6179      	str	r1, [r7, #20]
 8005da2:	7812      	ldrb	r2, [r2, #0]
 8005da4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3b01      	subs	r3, #1
 8005daa:	607b      	str	r3, [r7, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1f1      	bne.n	8005d96 <mem_cpy+0x1a>
	}
}
 8005db2:	bf00      	nop
 8005db4:	371c      	adds	r7, #28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005dbe:	b480      	push	{r7}
 8005dc0:	b087      	sub	sp, #28
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	617a      	str	r2, [r7, #20]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	607b      	str	r3, [r7, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1f3      	bne.n	8005dce <mem_set+0x10>
}
 8005de6:	bf00      	nop
 8005de8:	bf00      	nop
 8005dea:	371c      	adds	r7, #28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005df4:	b480      	push	{r7}
 8005df6:	b089      	sub	sp, #36	@ 0x24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	61fb      	str	r3, [r7, #28]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	61fa      	str	r2, [r7, #28]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	4619      	mov	r1, r3
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	61ba      	str	r2, [r7, #24]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	1acb      	subs	r3, r1, r3
 8005e20:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	3b01      	subs	r3, #1
 8005e26:	607b      	str	r3, [r7, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d002      	beq.n	8005e34 <mem_cmp+0x40>
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d0eb      	beq.n	8005e0c <mem_cmp+0x18>

	return r;
 8005e34:	697b      	ldr	r3, [r7, #20]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3724      	adds	r7, #36	@ 0x24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005e42:	b480      	push	{r7}
 8005e44:	b083      	sub	sp, #12
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005e4c:	e002      	b.n	8005e54 <chk_chr+0x12>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	3301      	adds	r3, #1
 8005e52:	607b      	str	r3, [r7, #4]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d005      	beq.n	8005e68 <chk_chr+0x26>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	461a      	mov	r2, r3
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d1f2      	bne.n	8005e4e <chk_chr+0xc>
	return *str;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d009      	beq.n	8005e9a <lock_fs+0x22>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f002 fb99 	bl	80085c2 <ff_req_grant>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <lock_fs+0x22>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <lock_fs+0x24>
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	460b      	mov	r3, r1
 8005eae:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00d      	beq.n	8005ed2 <unlock_fs+0x2e>
 8005eb6:	78fb      	ldrb	r3, [r7, #3]
 8005eb8:	2b0c      	cmp	r3, #12
 8005eba:	d00a      	beq.n	8005ed2 <unlock_fs+0x2e>
 8005ebc:	78fb      	ldrb	r3, [r7, #3]
 8005ebe:	2b0b      	cmp	r3, #11
 8005ec0:	d007      	beq.n	8005ed2 <unlock_fs+0x2e>
 8005ec2:	78fb      	ldrb	r3, [r7, #3]
 8005ec4:	2b0f      	cmp	r3, #15
 8005ec6:	d004      	beq.n	8005ed2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f002 fb8d 	bl	80085ec <ff_rel_grant>
	}
}
 8005ed2:	bf00      	nop
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60bb      	str	r3, [r7, #8]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	60fb      	str	r3, [r7, #12]
 8005eee:	e029      	b.n	8005f44 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005ef0:	4a27      	ldr	r2, [pc, #156]	@ (8005f90 <chk_lock+0xb4>)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	4413      	add	r3, r2
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01d      	beq.n	8005f3a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005efe:	4a24      	ldr	r2, [pc, #144]	@ (8005f90 <chk_lock+0xb4>)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	011b      	lsls	r3, r3, #4
 8005f04:	4413      	add	r3, r2
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d116      	bne.n	8005f3e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005f10:	4a1f      	ldr	r2, [pc, #124]	@ (8005f90 <chk_lock+0xb4>)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	011b      	lsls	r3, r3, #4
 8005f16:	4413      	add	r3, r2
 8005f18:	3304      	adds	r3, #4
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d10c      	bne.n	8005f3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005f24:	4a1a      	ldr	r2, [pc, #104]	@ (8005f90 <chk_lock+0xb4>)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	4413      	add	r3, r2
 8005f2c:	3308      	adds	r3, #8
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d102      	bne.n	8005f3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005f38:	e007      	b.n	8005f4a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	3301      	adds	r3, #1
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d9d2      	bls.n	8005ef0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d109      	bne.n	8005f64 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d102      	bne.n	8005f5c <chk_lock+0x80>
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d101      	bne.n	8005f60 <chk_lock+0x84>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	e010      	b.n	8005f82 <chk_lock+0xa6>
 8005f60:	2312      	movs	r3, #18
 8005f62:	e00e      	b.n	8005f82 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d108      	bne.n	8005f7c <chk_lock+0xa0>
 8005f6a:	4a09      	ldr	r2, [pc, #36]	@ (8005f90 <chk_lock+0xb4>)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	4413      	add	r3, r2
 8005f72:	330c      	adds	r3, #12
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f7a:	d101      	bne.n	8005f80 <chk_lock+0xa4>
 8005f7c:	2310      	movs	r3, #16
 8005f7e:	e000      	b.n	8005f82 <chk_lock+0xa6>
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	20000aec 	.word	0x20000aec

08005f94 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	607b      	str	r3, [r7, #4]
 8005f9e:	e002      	b.n	8005fa6 <enq_lock+0x12>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	607b      	str	r3, [r7, #4]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d806      	bhi.n	8005fba <enq_lock+0x26>
 8005fac:	4a09      	ldr	r2, [pc, #36]	@ (8005fd4 <enq_lock+0x40>)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	4413      	add	r3, r2
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1f2      	bne.n	8005fa0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	bf14      	ite	ne
 8005fc0:	2301      	movne	r3, #1
 8005fc2:	2300      	moveq	r3, #0
 8005fc4:	b2db      	uxtb	r3, r3
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	20000aec 	.word	0x20000aec

08005fd8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60fb      	str	r3, [r7, #12]
 8005fe6:	e01f      	b.n	8006028 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005fe8:	4a41      	ldr	r2, [pc, #260]	@ (80060f0 <inc_lock+0x118>)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	4413      	add	r3, r2
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d113      	bne.n	8006022 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005ffa:	4a3d      	ldr	r2, [pc, #244]	@ (80060f0 <inc_lock+0x118>)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	4413      	add	r3, r2
 8006002:	3304      	adds	r3, #4
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800600a:	429a      	cmp	r2, r3
 800600c:	d109      	bne.n	8006022 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800600e:	4a38      	ldr	r2, [pc, #224]	@ (80060f0 <inc_lock+0x118>)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	4413      	add	r3, r2
 8006016:	3308      	adds	r3, #8
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800601e:	429a      	cmp	r2, r3
 8006020:	d006      	beq.n	8006030 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	3301      	adds	r3, #1
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d9dc      	bls.n	8005fe8 <inc_lock+0x10>
 800602e:	e000      	b.n	8006032 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006030:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2b02      	cmp	r3, #2
 8006036:	d132      	bne.n	800609e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006038:	2300      	movs	r3, #0
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	e002      	b.n	8006044 <inc_lock+0x6c>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3301      	adds	r3, #1
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d806      	bhi.n	8006058 <inc_lock+0x80>
 800604a:	4a29      	ldr	r2, [pc, #164]	@ (80060f0 <inc_lock+0x118>)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	4413      	add	r3, r2
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1f2      	bne.n	800603e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b02      	cmp	r3, #2
 800605c:	d101      	bne.n	8006062 <inc_lock+0x8a>
 800605e:	2300      	movs	r3, #0
 8006060:	e040      	b.n	80060e4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	4922      	ldr	r1, [pc, #136]	@ (80060f0 <inc_lock+0x118>)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	440b      	add	r3, r1
 800606e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	491e      	ldr	r1, [pc, #120]	@ (80060f0 <inc_lock+0x118>)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	011b      	lsls	r3, r3, #4
 800607a:	440b      	add	r3, r1
 800607c:	3304      	adds	r3, #4
 800607e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	695a      	ldr	r2, [r3, #20]
 8006084:	491a      	ldr	r1, [pc, #104]	@ (80060f0 <inc_lock+0x118>)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	011b      	lsls	r3, r3, #4
 800608a:	440b      	add	r3, r1
 800608c:	3308      	adds	r3, #8
 800608e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006090:	4a17      	ldr	r2, [pc, #92]	@ (80060f0 <inc_lock+0x118>)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	011b      	lsls	r3, r3, #4
 8006096:	4413      	add	r3, r2
 8006098:	330c      	adds	r3, #12
 800609a:	2200      	movs	r2, #0
 800609c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d009      	beq.n	80060b8 <inc_lock+0xe0>
 80060a4:	4a12      	ldr	r2, [pc, #72]	@ (80060f0 <inc_lock+0x118>)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	4413      	add	r3, r2
 80060ac:	330c      	adds	r3, #12
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <inc_lock+0xe0>
 80060b4:	2300      	movs	r3, #0
 80060b6:	e015      	b.n	80060e4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d108      	bne.n	80060d0 <inc_lock+0xf8>
 80060be:	4a0c      	ldr	r2, [pc, #48]	@ (80060f0 <inc_lock+0x118>)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	4413      	add	r3, r2
 80060c6:	330c      	adds	r3, #12
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	3301      	adds	r3, #1
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	e001      	b.n	80060d4 <inc_lock+0xfc>
 80060d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80060d4:	4906      	ldr	r1, [pc, #24]	@ (80060f0 <inc_lock+0x118>)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	011b      	lsls	r3, r3, #4
 80060da:	440b      	add	r3, r1
 80060dc:	330c      	adds	r3, #12
 80060de:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	3301      	adds	r3, #1
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3714      	adds	r7, #20
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	20000aec 	.word	0x20000aec

080060f4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3b01      	subs	r3, #1
 8006100:	607b      	str	r3, [r7, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d825      	bhi.n	8006154 <dec_lock+0x60>
		n = Files[i].ctr;
 8006108:	4a17      	ldr	r2, [pc, #92]	@ (8006168 <dec_lock+0x74>)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	011b      	lsls	r3, r3, #4
 800610e:	4413      	add	r3, r2
 8006110:	330c      	adds	r3, #12
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006116:	89fb      	ldrh	r3, [r7, #14]
 8006118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800611c:	d101      	bne.n	8006122 <dec_lock+0x2e>
 800611e:	2300      	movs	r3, #0
 8006120:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006122:	89fb      	ldrh	r3, [r7, #14]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d002      	beq.n	800612e <dec_lock+0x3a>
 8006128:	89fb      	ldrh	r3, [r7, #14]
 800612a:	3b01      	subs	r3, #1
 800612c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800612e:	4a0e      	ldr	r2, [pc, #56]	@ (8006168 <dec_lock+0x74>)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	011b      	lsls	r3, r3, #4
 8006134:	4413      	add	r3, r2
 8006136:	330c      	adds	r3, #12
 8006138:	89fa      	ldrh	r2, [r7, #14]
 800613a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800613c:	89fb      	ldrh	r3, [r7, #14]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d105      	bne.n	800614e <dec_lock+0x5a>
 8006142:	4a09      	ldr	r2, [pc, #36]	@ (8006168 <dec_lock+0x74>)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	011b      	lsls	r3, r3, #4
 8006148:	4413      	add	r3, r2
 800614a:	2200      	movs	r2, #0
 800614c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	737b      	strb	r3, [r7, #13]
 8006152:	e001      	b.n	8006158 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006154:	2302      	movs	r3, #2
 8006156:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006158:	7b7b      	ldrb	r3, [r7, #13]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	20000aec 	.word	0x20000aec

0800616c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006174:	2300      	movs	r3, #0
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	e010      	b.n	800619c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800617a:	4a0d      	ldr	r2, [pc, #52]	@ (80061b0 <clear_lock+0x44>)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	4413      	add	r3, r2
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	429a      	cmp	r2, r3
 8006188:	d105      	bne.n	8006196 <clear_lock+0x2a>
 800618a:	4a09      	ldr	r2, [pc, #36]	@ (80061b0 <clear_lock+0x44>)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	011b      	lsls	r3, r3, #4
 8006190:	4413      	add	r3, r2
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	3301      	adds	r3, #1
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d9eb      	bls.n	800617a <clear_lock+0xe>
	}
}
 80061a2:	bf00      	nop
 80061a4:	bf00      	nop
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	20000aec 	.word	0x20000aec

080061b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80061bc:	2300      	movs	r3, #0
 80061be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	78db      	ldrb	r3, [r3, #3]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d034      	beq.n	8006232 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061cc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	7858      	ldrb	r0, [r3, #1]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80061d8:	2301      	movs	r3, #1
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	f7ff fd0e 	bl	8005bfc <disk_write>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <sync_window+0x38>
			res = FR_DISK_ERR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	73fb      	strb	r3, [r7, #15]
 80061ea:	e022      	b.n	8006232 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	1ad2      	subs	r2, r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d217      	bcs.n	8006232 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	789b      	ldrb	r3, [r3, #2]
 8006206:	613b      	str	r3, [r7, #16]
 8006208:	e010      	b.n	800622c <sync_window+0x78>
					wsect += fs->fsize;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	4413      	add	r3, r2
 8006212:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	7858      	ldrb	r0, [r3, #1]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800621e:	2301      	movs	r3, #1
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	f7ff fceb 	bl	8005bfc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	3b01      	subs	r3, #1
 800622a:	613b      	str	r3, [r7, #16]
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d8eb      	bhi.n	800620a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006232:	7bfb      	ldrb	r3, [r7, #15]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3718      	adds	r7, #24
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d01b      	beq.n	800628c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7ff ffad 	bl	80061b4 <sync_window>
 800625a:	4603      	mov	r3, r0
 800625c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800625e:	7bfb      	ldrb	r3, [r7, #15]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d113      	bne.n	800628c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	7858      	ldrb	r0, [r3, #1]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800626e:	2301      	movs	r3, #1
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	f7ff fca3 	bl	8005bbc <disk_read>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d004      	beq.n	8006286 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800627c:	f04f 33ff 	mov.w	r3, #4294967295
 8006280:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006282:	2301      	movs	r3, #1
 8006284:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	683a      	ldr	r2, [r7, #0]
 800628a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800628c:	7bfb      	ldrb	r3, [r7, #15]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
	...

08006298 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7ff ff87 	bl	80061b4 <sync_window>
 80062a6:	4603      	mov	r3, r0
 80062a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80062aa:	7bfb      	ldrb	r3, [r7, #15]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d158      	bne.n	8006362 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b03      	cmp	r3, #3
 80062b6:	d148      	bne.n	800634a <sync_fs+0xb2>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	791b      	ldrb	r3, [r3, #4]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d144      	bne.n	800634a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3334      	adds	r3, #52	@ 0x34
 80062c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062c8:	2100      	movs	r1, #0
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff fd77 	bl	8005dbe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3334      	adds	r3, #52	@ 0x34
 80062d4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80062d8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80062dc:	4618      	mov	r0, r3
 80062de:	f7ff fd06 	bl	8005cee <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3334      	adds	r3, #52	@ 0x34
 80062e6:	4921      	ldr	r1, [pc, #132]	@ (800636c <sync_fs+0xd4>)
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7ff fd1b 	bl	8005d24 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3334      	adds	r3, #52	@ 0x34
 80062f2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80062f6:	491e      	ldr	r1, [pc, #120]	@ (8006370 <sync_fs+0xd8>)
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7ff fd13 	bl	8005d24 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3334      	adds	r3, #52	@ 0x34
 8006302:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	4619      	mov	r1, r3
 800630c:	4610      	mov	r0, r2
 800630e:	f7ff fd09 	bl	8005d24 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3334      	adds	r3, #52	@ 0x34
 8006316:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	4619      	mov	r1, r3
 8006320:	4610      	mov	r0, r2
 8006322:	f7ff fcff 	bl	8005d24 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	7858      	ldrb	r0, [r3, #1]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800633e:	2301      	movs	r3, #1
 8006340:	f7ff fc5c 	bl	8005bfc <disk_write>
			fs->fsi_flag = 0;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	785b      	ldrb	r3, [r3, #1]
 800634e:	2200      	movs	r2, #0
 8006350:	2100      	movs	r1, #0
 8006352:	4618      	mov	r0, r3
 8006354:	f7ff fc72 	bl	8005c3c <disk_ioctl>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <sync_fs+0xca>
 800635e:	2301      	movs	r3, #1
 8006360:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006362:	7bfb      	ldrb	r3, [r7, #15]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	41615252 	.word	0x41615252
 8006370:	61417272 	.word	0x61417272

08006374 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	3b02      	subs	r3, #2
 8006382:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	3b02      	subs	r3, #2
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	429a      	cmp	r2, r3
 800638e:	d301      	bcc.n	8006394 <clust2sect+0x20>
 8006390:	2300      	movs	r3, #0
 8006392:	e008      	b.n	80063a6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	895b      	ldrh	r3, [r3, #10]
 8006398:	461a      	mov	r2, r3
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	fb03 f202 	mul.w	r2, r3, r2
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a4:	4413      	add	r3, r2
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b086      	sub	sp, #24
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d904      	bls.n	80063d2 <get_fat+0x20>
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d302      	bcc.n	80063d8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80063d2:	2301      	movs	r3, #1
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	e08e      	b.n	80064f6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80063d8:	f04f 33ff 	mov.w	r3, #4294967295
 80063dc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d061      	beq.n	80064aa <get_fat+0xf8>
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	dc7b      	bgt.n	80064e2 <get_fat+0x130>
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d002      	beq.n	80063f4 <get_fat+0x42>
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d041      	beq.n	8006476 <get_fat+0xc4>
 80063f2:	e076      	b.n	80064e2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	085b      	lsrs	r3, r3, #1
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	4413      	add	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	0a5b      	lsrs	r3, r3, #9
 800640a:	4413      	add	r3, r2
 800640c:	4619      	mov	r1, r3
 800640e:	6938      	ldr	r0, [r7, #16]
 8006410:	f7ff ff14 	bl	800623c <move_window>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d166      	bne.n	80064e8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	60fa      	str	r2, [r7, #12]
 8006420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4413      	add	r3, r2
 8006428:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800642c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	0a5b      	lsrs	r3, r3, #9
 8006436:	4413      	add	r3, r2
 8006438:	4619      	mov	r1, r3
 800643a:	6938      	ldr	r0, [r7, #16]
 800643c:	f7ff fefe 	bl	800623c <move_window>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d152      	bne.n	80064ec <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	4413      	add	r3, r2
 8006450:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006454:	021b      	lsls	r3, r3, #8
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	4313      	orrs	r3, r2
 800645a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <get_fat+0xba>
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	091b      	lsrs	r3, r3, #4
 800646a:	e002      	b.n	8006472 <get_fat+0xc0>
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006472:	617b      	str	r3, [r7, #20]
			break;
 8006474:	e03f      	b.n	80064f6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	0a1b      	lsrs	r3, r3, #8
 800647e:	4413      	add	r3, r2
 8006480:	4619      	mov	r1, r3
 8006482:	6938      	ldr	r0, [r7, #16]
 8006484:	f7ff feda 	bl	800623c <move_window>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d130      	bne.n	80064f0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800649c:	4413      	add	r3, r2
 800649e:	4618      	mov	r0, r3
 80064a0:	f7ff fbea 	bl	8005c78 <ld_word>
 80064a4:	4603      	mov	r3, r0
 80064a6:	617b      	str	r3, [r7, #20]
			break;
 80064a8:	e025      	b.n	80064f6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	09db      	lsrs	r3, r3, #7
 80064b2:	4413      	add	r3, r2
 80064b4:	4619      	mov	r1, r3
 80064b6:	6938      	ldr	r0, [r7, #16]
 80064b8:	f7ff fec0 	bl	800623c <move_window>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d118      	bne.n	80064f4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80064d0:	4413      	add	r3, r2
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7ff fbe8 	bl	8005ca8 <ld_dword>
 80064d8:	4603      	mov	r3, r0
 80064da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80064de:	617b      	str	r3, [r7, #20]
			break;
 80064e0:	e009      	b.n	80064f6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80064e2:	2301      	movs	r3, #1
 80064e4:	617b      	str	r3, [r7, #20]
 80064e6:	e006      	b.n	80064f6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80064e8:	bf00      	nop
 80064ea:	e004      	b.n	80064f6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80064ec:	bf00      	nop
 80064ee:	e002      	b.n	80064f6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80064f0:	bf00      	nop
 80064f2:	e000      	b.n	80064f6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80064f4:	bf00      	nop
		}
	}

	return val;
 80064f6:	697b      	ldr	r3, [r7, #20]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3718      	adds	r7, #24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006500:	b590      	push	{r4, r7, lr}
 8006502:	b089      	sub	sp, #36	@ 0x24
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800650c:	2302      	movs	r3, #2
 800650e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2b01      	cmp	r3, #1
 8006514:	f240 80d9 	bls.w	80066ca <put_fat+0x1ca>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	429a      	cmp	r2, r3
 8006520:	f080 80d3 	bcs.w	80066ca <put_fat+0x1ca>
		switch (fs->fs_type) {
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	2b03      	cmp	r3, #3
 800652a:	f000 8096 	beq.w	800665a <put_fat+0x15a>
 800652e:	2b03      	cmp	r3, #3
 8006530:	f300 80cb 	bgt.w	80066ca <put_fat+0x1ca>
 8006534:	2b01      	cmp	r3, #1
 8006536:	d002      	beq.n	800653e <put_fat+0x3e>
 8006538:	2b02      	cmp	r3, #2
 800653a:	d06e      	beq.n	800661a <put_fat+0x11a>
 800653c:	e0c5      	b.n	80066ca <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	61bb      	str	r3, [r7, #24]
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	085b      	lsrs	r3, r3, #1
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	4413      	add	r3, r2
 800654a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	0a5b      	lsrs	r3, r3, #9
 8006554:	4413      	add	r3, r2
 8006556:	4619      	mov	r1, r3
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f7ff fe6f 	bl	800623c <move_window>
 800655e:	4603      	mov	r3, r0
 8006560:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006562:	7ffb      	ldrb	r3, [r7, #31]
 8006564:	2b00      	cmp	r3, #0
 8006566:	f040 80a9 	bne.w	80066bc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	1c59      	adds	r1, r3, #1
 8006574:	61b9      	str	r1, [r7, #24]
 8006576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800657a:	4413      	add	r3, r2
 800657c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00d      	beq.n	80065a4 <put_fat+0xa4>
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	b25b      	sxtb	r3, r3
 800658e:	f003 030f 	and.w	r3, r3, #15
 8006592:	b25a      	sxtb	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	b2db      	uxtb	r3, r3
 8006598:	011b      	lsls	r3, r3, #4
 800659a:	b25b      	sxtb	r3, r3
 800659c:	4313      	orrs	r3, r2
 800659e:	b25b      	sxtb	r3, r3
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	e001      	b.n	80065a8 <put_fat+0xa8>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2201      	movs	r2, #1
 80065b0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	0a5b      	lsrs	r3, r3, #9
 80065ba:	4413      	add	r3, r2
 80065bc:	4619      	mov	r1, r3
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f7ff fe3c 	bl	800623c <move_window>
 80065c4:	4603      	mov	r3, r0
 80065c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80065c8:	7ffb      	ldrb	r3, [r7, #31]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d178      	bne.n	80066c0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065da:	4413      	add	r3, r2
 80065dc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <put_fat+0xf0>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	091b      	lsrs	r3, r3, #4
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	e00e      	b.n	800660e <put_fat+0x10e>
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	b25b      	sxtb	r3, r3
 80065f6:	f023 030f 	bic.w	r3, r3, #15
 80065fa:	b25a      	sxtb	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	0a1b      	lsrs	r3, r3, #8
 8006600:	b25b      	sxtb	r3, r3
 8006602:	f003 030f 	and.w	r3, r3, #15
 8006606:	b25b      	sxtb	r3, r3
 8006608:	4313      	orrs	r3, r2
 800660a:	b25b      	sxtb	r3, r3
 800660c:	b2db      	uxtb	r3, r3
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2201      	movs	r2, #1
 8006616:	70da      	strb	r2, [r3, #3]
			break;
 8006618:	e057      	b.n	80066ca <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	0a1b      	lsrs	r3, r3, #8
 8006622:	4413      	add	r3, r2
 8006624:	4619      	mov	r1, r3
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f7ff fe08 	bl	800623c <move_window>
 800662c:	4603      	mov	r3, r0
 800662e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006630:	7ffb      	ldrb	r3, [r7, #31]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d146      	bne.n	80066c4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006644:	4413      	add	r3, r2
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	b292      	uxth	r2, r2
 800664a:	4611      	mov	r1, r2
 800664c:	4618      	mov	r0, r3
 800664e:	f7ff fb4e 	bl	8005cee <st_word>
			fs->wflag = 1;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2201      	movs	r2, #1
 8006656:	70da      	strb	r2, [r3, #3]
			break;
 8006658:	e037      	b.n	80066ca <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	09db      	lsrs	r3, r3, #7
 8006662:	4413      	add	r3, r2
 8006664:	4619      	mov	r1, r3
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f7ff fde8 	bl	800623c <move_window>
 800666c:	4603      	mov	r3, r0
 800666e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006670:	7ffb      	ldrb	r3, [r7, #31]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d128      	bne.n	80066c8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800668a:	4413      	add	r3, r2
 800668c:	4618      	mov	r0, r3
 800668e:	f7ff fb0b 	bl	8005ca8 <ld_dword>
 8006692:	4603      	mov	r3, r0
 8006694:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006698:	4323      	orrs	r3, r4
 800669a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80066aa:	4413      	add	r3, r2
 80066ac:	6879      	ldr	r1, [r7, #4]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff fb38 	bl	8005d24 <st_dword>
			fs->wflag = 1;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	70da      	strb	r2, [r3, #3]
			break;
 80066ba:	e006      	b.n	80066ca <put_fat+0x1ca>
			if (res != FR_OK) break;
 80066bc:	bf00      	nop
 80066be:	e004      	b.n	80066ca <put_fat+0x1ca>
			if (res != FR_OK) break;
 80066c0:	bf00      	nop
 80066c2:	e002      	b.n	80066ca <put_fat+0x1ca>
			if (res != FR_OK) break;
 80066c4:	bf00      	nop
 80066c6:	e000      	b.n	80066ca <put_fat+0x1ca>
			if (res != FR_OK) break;
 80066c8:	bf00      	nop
		}
	}
	return res;
 80066ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3724      	adds	r7, #36	@ 0x24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd90      	pop	{r4, r7, pc}

080066d4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b088      	sub	sp, #32
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d904      	bls.n	80066fa <remove_chain+0x26>
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d301      	bcc.n	80066fe <remove_chain+0x2a>
 80066fa:	2302      	movs	r3, #2
 80066fc:	e04b      	b.n	8006796 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00c      	beq.n	800671e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006704:	f04f 32ff 	mov.w	r2, #4294967295
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	69b8      	ldr	r0, [r7, #24]
 800670c:	f7ff fef8 	bl	8006500 <put_fat>
 8006710:	4603      	mov	r3, r0
 8006712:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006714:	7ffb      	ldrb	r3, [r7, #31]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <remove_chain+0x4a>
 800671a:	7ffb      	ldrb	r3, [r7, #31]
 800671c:	e03b      	b.n	8006796 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800671e:	68b9      	ldr	r1, [r7, #8]
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f7ff fe46 	bl	80063b2 <get_fat>
 8006726:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d031      	beq.n	8006792 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d101      	bne.n	8006738 <remove_chain+0x64>
 8006734:	2302      	movs	r3, #2
 8006736:	e02e      	b.n	8006796 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673e:	d101      	bne.n	8006744 <remove_chain+0x70>
 8006740:	2301      	movs	r3, #1
 8006742:	e028      	b.n	8006796 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006744:	2200      	movs	r2, #0
 8006746:	68b9      	ldr	r1, [r7, #8]
 8006748:	69b8      	ldr	r0, [r7, #24]
 800674a:	f7ff fed9 	bl	8006500 <put_fat>
 800674e:	4603      	mov	r3, r0
 8006750:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006752:	7ffb      	ldrb	r3, [r7, #31]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <remove_chain+0x88>
 8006758:	7ffb      	ldrb	r3, [r7, #31]
 800675a:	e01c      	b.n	8006796 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	695a      	ldr	r2, [r3, #20]
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	3b02      	subs	r3, #2
 8006766:	429a      	cmp	r2, r3
 8006768:	d20b      	bcs.n	8006782 <remove_chain+0xae>
			fs->free_clst++;
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	791b      	ldrb	r3, [r3, #4]
 8006778:	f043 0301 	orr.w	r3, r3, #1
 800677c:	b2da      	uxtb	r2, r3
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	429a      	cmp	r2, r3
 800678e:	d3c6      	bcc.n	800671e <remove_chain+0x4a>
 8006790:	e000      	b.n	8006794 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006792:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3720      	adds	r7, #32
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b088      	sub	sp, #32
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10d      	bne.n	80067d0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d004      	beq.n	80067ca <create_chain+0x2c>
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d31b      	bcc.n	8006802 <create_chain+0x64>
 80067ca:	2301      	movs	r3, #1
 80067cc:	61bb      	str	r3, [r7, #24]
 80067ce:	e018      	b.n	8006802 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff fded 	bl	80063b2 <get_fat>
 80067d8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d801      	bhi.n	80067e4 <create_chain+0x46>
 80067e0:	2301      	movs	r3, #1
 80067e2:	e070      	b.n	80068c6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ea:	d101      	bne.n	80067f0 <create_chain+0x52>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	e06a      	b.n	80068c6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d201      	bcs.n	80067fe <create_chain+0x60>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	e063      	b.n	80068c6 <create_chain+0x128>
		scl = clst;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	3301      	adds	r3, #1
 800680a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	69fa      	ldr	r2, [r7, #28]
 8006812:	429a      	cmp	r2, r3
 8006814:	d307      	bcc.n	8006826 <create_chain+0x88>
				ncl = 2;
 8006816:	2302      	movs	r3, #2
 8006818:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800681a:	69fa      	ldr	r2, [r7, #28]
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	429a      	cmp	r2, r3
 8006820:	d901      	bls.n	8006826 <create_chain+0x88>
 8006822:	2300      	movs	r3, #0
 8006824:	e04f      	b.n	80068c6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006826:	69f9      	ldr	r1, [r7, #28]
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7ff fdc2 	bl	80063b2 <get_fat>
 800682e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00e      	beq.n	8006854 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d003      	beq.n	8006844 <create_chain+0xa6>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006842:	d101      	bne.n	8006848 <create_chain+0xaa>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	e03e      	b.n	80068c6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006848:	69fa      	ldr	r2, [r7, #28]
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	429a      	cmp	r2, r3
 800684e:	d1da      	bne.n	8006806 <create_chain+0x68>
 8006850:	2300      	movs	r3, #0
 8006852:	e038      	b.n	80068c6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006854:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006856:	f04f 32ff 	mov.w	r2, #4294967295
 800685a:	69f9      	ldr	r1, [r7, #28]
 800685c:	6938      	ldr	r0, [r7, #16]
 800685e:	f7ff fe4f 	bl	8006500 <put_fat>
 8006862:	4603      	mov	r3, r0
 8006864:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006866:	7dfb      	ldrb	r3, [r7, #23]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d109      	bne.n	8006880 <create_chain+0xe2>
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d006      	beq.n	8006880 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	6938      	ldr	r0, [r7, #16]
 8006878:	f7ff fe42 	bl	8006500 <put_fat>
 800687c:	4603      	mov	r3, r0
 800687e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006880:	7dfb      	ldrb	r3, [r7, #23]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d116      	bne.n	80068b4 <create_chain+0x116>
		fs->last_clst = ncl;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	69fa      	ldr	r2, [r7, #28]
 800688a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	695a      	ldr	r2, [r3, #20]
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	3b02      	subs	r3, #2
 8006896:	429a      	cmp	r2, r3
 8006898:	d804      	bhi.n	80068a4 <create_chain+0x106>
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	1e5a      	subs	r2, r3, #1
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	791b      	ldrb	r3, [r3, #4]
 80068a8:	f043 0301 	orr.w	r3, r3, #1
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	711a      	strb	r2, [r3, #4]
 80068b2:	e007      	b.n	80068c4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d102      	bne.n	80068c0 <create_chain+0x122>
 80068ba:	f04f 33ff 	mov.w	r3, #4294967295
 80068be:	e000      	b.n	80068c2 <create_chain+0x124>
 80068c0:	2301      	movs	r3, #1
 80068c2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80068c4:	69fb      	ldr	r3, [r7, #28]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3720      	adds	r7, #32
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b087      	sub	sp, #28
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e2:	3304      	adds	r3, #4
 80068e4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	0a5b      	lsrs	r3, r3, #9
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	8952      	ldrh	r2, [r2, #10]
 80068ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80068f2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	1d1a      	adds	r2, r3, #4
 80068f8:	613a      	str	r2, [r7, #16]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <clmt_clust+0x3a>
 8006904:	2300      	movs	r3, #0
 8006906:	e010      	b.n	800692a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	429a      	cmp	r2, r3
 800690e:	d307      	bcc.n	8006920 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	3304      	adds	r3, #4
 800691c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800691e:	e7e9      	b.n	80068f4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006920:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	4413      	add	r3, r2
}
 800692a:	4618      	mov	r0, r3
 800692c:	371c      	adds	r7, #28
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b086      	sub	sp, #24
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800694c:	d204      	bcs.n	8006958 <dir_sdi+0x22>
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	f003 031f 	and.w	r3, r3, #31
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <dir_sdi+0x26>
		return FR_INT_ERR;
 8006958:	2302      	movs	r3, #2
 800695a:	e063      	b.n	8006a24 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d106      	bne.n	800697c <dir_sdi+0x46>
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	2b02      	cmp	r3, #2
 8006974:	d902      	bls.n	800697c <dir_sdi+0x46>
		clst = fs->dirbase;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800697a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10c      	bne.n	800699c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	095b      	lsrs	r3, r3, #5
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	8912      	ldrh	r2, [r2, #8]
 800698a:	4293      	cmp	r3, r2
 800698c:	d301      	bcc.n	8006992 <dir_sdi+0x5c>
 800698e:	2302      	movs	r3, #2
 8006990:	e048      	b.n	8006a24 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	61da      	str	r2, [r3, #28]
 800699a:	e029      	b.n	80069f0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	895b      	ldrh	r3, [r3, #10]
 80069a0:	025b      	lsls	r3, r3, #9
 80069a2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80069a4:	e019      	b.n	80069da <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6979      	ldr	r1, [r7, #20]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7ff fd01 	bl	80063b2 <get_fat>
 80069b0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b8:	d101      	bne.n	80069be <dir_sdi+0x88>
 80069ba:	2301      	movs	r3, #1
 80069bc:	e032      	b.n	8006a24 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d904      	bls.n	80069ce <dir_sdi+0x98>
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d301      	bcc.n	80069d2 <dir_sdi+0x9c>
 80069ce:	2302      	movs	r3, #2
 80069d0:	e028      	b.n	8006a24 <dir_sdi+0xee>
			ofs -= csz;
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d2e1      	bcs.n	80069a6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80069e2:	6979      	ldr	r1, [r7, #20]
 80069e4:	6938      	ldr	r0, [r7, #16]
 80069e6:	f7ff fcc5 	bl	8006374 <clust2sect>
 80069ea:	4602      	mov	r2, r0
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <dir_sdi+0xcc>
 80069fe:	2302      	movs	r3, #2
 8006a00:	e010      	b.n	8006a24 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	69da      	ldr	r2, [r3, #28]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	0a5b      	lsrs	r3, r3, #9
 8006a0a:	441a      	add	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a1c:	441a      	add	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	3320      	adds	r3, #32
 8006a42:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	69db      	ldr	r3, [r3, #28]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <dir_next+0x28>
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a52:	d301      	bcc.n	8006a58 <dir_next+0x2c>
 8006a54:	2304      	movs	r3, #4
 8006a56:	e0aa      	b.n	8006bae <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f040 8098 	bne.w	8006b94 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	69db      	ldr	r3, [r3, #28]
 8006a68:	1c5a      	adds	r2, r3, #1
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10b      	bne.n	8006a8e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	095b      	lsrs	r3, r3, #5
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	8912      	ldrh	r2, [r2, #8]
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	f0c0 8088 	bcc.w	8006b94 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	61da      	str	r2, [r3, #28]
 8006a8a:	2304      	movs	r3, #4
 8006a8c:	e08f      	b.n	8006bae <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	0a5b      	lsrs	r3, r3, #9
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	8952      	ldrh	r2, [r2, #10]
 8006a96:	3a01      	subs	r2, #1
 8006a98:	4013      	ands	r3, r2
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d17a      	bne.n	8006b94 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	f7ff fc83 	bl	80063b2 <get_fat>
 8006aac:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d801      	bhi.n	8006ab8 <dir_next+0x8c>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	e07a      	b.n	8006bae <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abe:	d101      	bne.n	8006ac4 <dir_next+0x98>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e074      	b.n	8006bae <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d358      	bcc.n	8006b80 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d104      	bne.n	8006ade <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	61da      	str	r2, [r3, #28]
 8006ada:	2304      	movs	r3, #4
 8006adc:	e067      	b.n	8006bae <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	4610      	mov	r0, r2
 8006ae8:	f7ff fe59 	bl	800679e <create_chain>
 8006aec:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <dir_next+0xcc>
 8006af4:	2307      	movs	r3, #7
 8006af6:	e05a      	b.n	8006bae <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d101      	bne.n	8006b02 <dir_next+0xd6>
 8006afe:	2302      	movs	r3, #2
 8006b00:	e055      	b.n	8006bae <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b08:	d101      	bne.n	8006b0e <dir_next+0xe2>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e04f      	b.n	8006bae <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f7ff fb50 	bl	80061b4 <sync_window>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <dir_next+0xf2>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e047      	b.n	8006bae <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3334      	adds	r3, #52	@ 0x34
 8006b22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b26:	2100      	movs	r1, #0
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7ff f948 	bl	8005dbe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006b2e:	2300      	movs	r3, #0
 8006b30:	613b      	str	r3, [r7, #16]
 8006b32:	6979      	ldr	r1, [r7, #20]
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f7ff fc1d 	bl	8006374 <clust2sect>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b40:	e012      	b.n	8006b68 <dir_next+0x13c>
						fs->wflag = 1;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2201      	movs	r2, #1
 8006b46:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f7ff fb33 	bl	80061b4 <sync_window>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <dir_next+0x12c>
 8006b54:	2301      	movs	r3, #1
 8006b56:	e02a      	b.n	8006bae <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	613b      	str	r3, [r7, #16]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b62:	1c5a      	adds	r2, r3, #1
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	895b      	ldrh	r3, [r3, #10]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d3e6      	bcc.n	8006b42 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	1ad2      	subs	r2, r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006b86:	6979      	ldr	r1, [r7, #20]
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f7ff fbf3 	bl	8006374 <clust2sect>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba6:	441a      	add	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b086      	sub	sp, #24
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7ff feb4 	bl	8006936 <dir_sdi>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006bd2:	7dfb      	ldrb	r3, [r7, #23]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d12b      	bne.n	8006c30 <dir_alloc+0x7a>
		n = 0;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	69db      	ldr	r3, [r3, #28]
 8006be0:	4619      	mov	r1, r3
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f7ff fb2a 	bl	800623c <move_window>
 8006be8:	4603      	mov	r3, r0
 8006bea:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006bec:	7dfb      	ldrb	r3, [r7, #23]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d11d      	bne.n	8006c2e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	2be5      	cmp	r3, #229	@ 0xe5
 8006bfa:	d004      	beq.n	8006c06 <dir_alloc+0x50>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d107      	bne.n	8006c16 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	613b      	str	r3, [r7, #16]
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d102      	bne.n	8006c1a <dir_alloc+0x64>
 8006c14:	e00c      	b.n	8006c30 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006c16:	2300      	movs	r3, #0
 8006c18:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7ff ff05 	bl	8006a2c <dir_next>
 8006c22:	4603      	mov	r3, r0
 8006c24:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006c26:	7dfb      	ldrb	r3, [r7, #23]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d0d7      	beq.n	8006bdc <dir_alloc+0x26>
 8006c2c:	e000      	b.n	8006c30 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006c2e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006c30:	7dfb      	ldrb	r3, [r7, #23]
 8006c32:	2b04      	cmp	r3, #4
 8006c34:	d101      	bne.n	8006c3a <dir_alloc+0x84>
 8006c36:	2307      	movs	r3, #7
 8006c38:	75fb      	strb	r3, [r7, #23]
	return res;
 8006c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3718      	adds	r7, #24
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	331a      	adds	r3, #26
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7ff f810 	bl	8005c78 <ld_word>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	2b03      	cmp	r3, #3
 8006c62:	d109      	bne.n	8006c78 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	3314      	adds	r3, #20
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7ff f805 	bl	8005c78 <ld_word>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	041b      	lsls	r3, r3, #16
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006c78:	68fb      	ldr	r3, [r7, #12]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b084      	sub	sp, #16
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	60f8      	str	r0, [r7, #12]
 8006c8a:	60b9      	str	r1, [r7, #8]
 8006c8c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	331a      	adds	r3, #26
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	b292      	uxth	r2, r2
 8006c96:	4611      	mov	r1, r2
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7ff f828 	bl	8005cee <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d109      	bne.n	8006cba <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	f103 0214 	add.w	r2, r3, #20
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	0c1b      	lsrs	r3, r3, #16
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	f7ff f81a 	bl	8005cee <st_word>
	}
}
 8006cba:	bf00      	nop
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b086      	sub	sp, #24
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006ccc:	2304      	movs	r3, #4
 8006cce:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8006cd6:	e03c      	b.n	8006d52 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	6938      	ldr	r0, [r7, #16]
 8006ce0:	f7ff faac 	bl	800623c <move_window>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006ce8:	7dfb      	ldrb	r3, [r7, #23]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d136      	bne.n	8006d5c <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d102      	bne.n	8006d02 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006cfc:	2304      	movs	r3, #4
 8006cfe:	75fb      	strb	r3, [r7, #23]
 8006d00:	e031      	b.n	8006d66 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	330b      	adds	r3, #11
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d0e:	73bb      	strb	r3, [r7, #14]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	7bba      	ldrb	r2, [r7, #14]
 8006d14:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
 8006d18:	2be5      	cmp	r3, #229	@ 0xe5
 8006d1a:	d011      	beq.n	8006d40 <dir_read+0x7e>
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
 8006d1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d20:	d00e      	beq.n	8006d40 <dir_read+0x7e>
 8006d22:	7bbb      	ldrb	r3, [r7, #14]
 8006d24:	2b0f      	cmp	r3, #15
 8006d26:	d00b      	beq.n	8006d40 <dir_read+0x7e>
 8006d28:	7bbb      	ldrb	r3, [r7, #14]
 8006d2a:	f023 0320 	bic.w	r3, r3, #32
 8006d2e:	2b08      	cmp	r3, #8
 8006d30:	bf0c      	ite	eq
 8006d32:	2301      	moveq	r3, #1
 8006d34:	2300      	movne	r3, #0
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	461a      	mov	r2, r3
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d00f      	beq.n	8006d60 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006d40:	2100      	movs	r1, #0
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7ff fe72 	bl	8006a2c <dir_next>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006d4c:	7dfb      	ldrb	r3, [r7, #23]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d108      	bne.n	8006d64 <dir_read+0xa2>
	while (dp->sect) {
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1be      	bne.n	8006cd8 <dir_read+0x16>
 8006d5a:	e004      	b.n	8006d66 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006d5c:	bf00      	nop
 8006d5e:	e002      	b.n	8006d66 <dir_read+0xa4>
				break;
 8006d60:	bf00      	nop
 8006d62:	e000      	b.n	8006d66 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006d64:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006d66:	7dfb      	ldrb	r3, [r7, #23]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <dir_read+0xb0>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	61da      	str	r2, [r3, #28]
	return res;
 8006d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3718      	adds	r7, #24
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7ff fdd2 	bl	8006936 <dir_sdi>
 8006d92:	4603      	mov	r3, r0
 8006d94:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006d96:	7dfb      	ldrb	r3, [r7, #23]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <dir_find+0x24>
 8006d9c:	7dfb      	ldrb	r3, [r7, #23]
 8006d9e:	e03e      	b.n	8006e1e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	69db      	ldr	r3, [r3, #28]
 8006da4:	4619      	mov	r1, r3
 8006da6:	6938      	ldr	r0, [r7, #16]
 8006da8:	f7ff fa48 	bl	800623c <move_window>
 8006dac:	4603      	mov	r3, r0
 8006dae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d12f      	bne.n	8006e16 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d102      	bne.n	8006dca <dir_find+0x4e>
 8006dc4:	2304      	movs	r3, #4
 8006dc6:	75fb      	strb	r3, [r7, #23]
 8006dc8:	e028      	b.n	8006e1c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	330b      	adds	r3, #11
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	330b      	adds	r3, #11
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	f003 0308 	and.w	r3, r3, #8
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10a      	bne.n	8006e02 <dir_find+0x86>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a18      	ldr	r0, [r3, #32]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3324      	adds	r3, #36	@ 0x24
 8006df4:	220b      	movs	r2, #11
 8006df6:	4619      	mov	r1, r3
 8006df8:	f7fe fffc 	bl	8005df4 <mem_cmp>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00b      	beq.n	8006e1a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006e02:	2100      	movs	r1, #0
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7ff fe11 	bl	8006a2c <dir_next>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d0c5      	beq.n	8006da0 <dir_find+0x24>
 8006e14:	e002      	b.n	8006e1c <dir_find+0xa0>
		if (res != FR_OK) break;
 8006e16:	bf00      	nop
 8006e18:	e000      	b.n	8006e1c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006e1a:	bf00      	nop

	return res;
 8006e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006e34:	2101      	movs	r1, #1
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff febd 	bl	8006bb6 <dir_alloc>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d11c      	bne.n	8006e80 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	68b8      	ldr	r0, [r7, #8]
 8006e4e:	f7ff f9f5 	bl	800623c <move_window>
 8006e52:	4603      	mov	r3, r0
 8006e54:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d111      	bne.n	8006e80 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	2220      	movs	r2, #32
 8006e62:	2100      	movs	r1, #0
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7fe ffaa 	bl	8005dbe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a18      	ldr	r0, [r3, #32]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3324      	adds	r3, #36	@ 0x24
 8006e72:	220b      	movs	r2, #11
 8006e74:	4619      	mov	r1, r3
 8006e76:	f7fe ff81 	bl	8005d7c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b084      	sub	sp, #16
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	69db      	ldr	r3, [r3, #28]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f7ff f9cc 	bl	800623c <move_window>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8006ea8:	7afb      	ldrb	r3, [r7, #11]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d106      	bne.n	8006ebc <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	22e5      	movs	r2, #229	@ 0xe5
 8006eb4:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8006ebc:	7afb      	ldrb	r3, [r7, #11]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b086      	sub	sp, #24
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
 8006ece:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d04f      	beq.n	8006f7e <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	613b      	str	r3, [r7, #16]
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8006ee6:	e022      	b.n	8006f2e <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a1a      	ldr	r2, [r3, #32]
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	1c59      	adds	r1, r3, #1
 8006ef0:	6179      	str	r1, [r7, #20]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
 8006efa:	2b20      	cmp	r3, #32
 8006efc:	d016      	beq.n	8006f2c <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	2b05      	cmp	r3, #5
 8006f02:	d101      	bne.n	8006f08 <get_fileinfo+0x42>
 8006f04:	23e5      	movs	r3, #229	@ 0xe5
 8006f06:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	2b09      	cmp	r3, #9
 8006f0c:	d106      	bne.n	8006f1c <get_fileinfo+0x56>
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	1c5a      	adds	r2, r3, #1
 8006f12:	613a      	str	r2, [r7, #16]
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	4413      	add	r3, r2
 8006f18:	222e      	movs	r2, #46	@ 0x2e
 8006f1a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	1c5a      	adds	r2, r3, #1
 8006f20:	613a      	str	r2, [r7, #16]
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	4413      	add	r3, r2
 8006f26:	7bfa      	ldrb	r2, [r7, #15]
 8006f28:	725a      	strb	r2, [r3, #9]
 8006f2a:	e000      	b.n	8006f2e <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 8006f2c:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2b0a      	cmp	r3, #10
 8006f32:	d9d9      	bls.n	8006ee8 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	4413      	add	r3, r2
 8006f3a:	3309      	adds	r3, #9
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	7ada      	ldrb	r2, [r3, #11]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	331c      	adds	r3, #28
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fe fea9 	bl	8005ca8 <ld_dword>
 8006f56:	4602      	mov	r2, r0
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a1b      	ldr	r3, [r3, #32]
 8006f60:	3316      	adds	r3, #22
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fe fea0 	bl	8005ca8 <ld_dword>
 8006f68:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	80da      	strh	r2, [r3, #6]
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	0c1b      	lsrs	r3, r3, #16
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	809a      	strh	r2, [r3, #4]
 8006f7c:	e000      	b.n	8006f80 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006f7e:	bf00      	nop
}
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
	...

08006f88 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b088      	sub	sp, #32
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	3324      	adds	r3, #36	@ 0x24
 8006f9c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006f9e:	220b      	movs	r2, #11
 8006fa0:	2120      	movs	r1, #32
 8006fa2:	68b8      	ldr	r0, [r7, #8]
 8006fa4:	f7fe ff0b 	bl	8005dbe <mem_set>
	si = i = 0; ni = 8;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	613b      	str	r3, [r7, #16]
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	61fb      	str	r3, [r7, #28]
 8006fb0:	2308      	movs	r3, #8
 8006fb2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	61fa      	str	r2, [r7, #28]
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006fc2:	7efb      	ldrb	r3, [r7, #27]
 8006fc4:	2b20      	cmp	r3, #32
 8006fc6:	d94e      	bls.n	8007066 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006fc8:	7efb      	ldrb	r3, [r7, #27]
 8006fca:	2b2f      	cmp	r3, #47	@ 0x2f
 8006fcc:	d006      	beq.n	8006fdc <create_name+0x54>
 8006fce:	7efb      	ldrb	r3, [r7, #27]
 8006fd0:	2b5c      	cmp	r3, #92	@ 0x5c
 8006fd2:	d110      	bne.n	8006ff6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006fd4:	e002      	b.n	8006fdc <create_name+0x54>
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	61fb      	str	r3, [r7, #28]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	2b2f      	cmp	r3, #47	@ 0x2f
 8006fe6:	d0f6      	beq.n	8006fd6 <create_name+0x4e>
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	4413      	add	r3, r2
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	2b5c      	cmp	r3, #92	@ 0x5c
 8006ff2:	d0f0      	beq.n	8006fd6 <create_name+0x4e>
			break;
 8006ff4:	e038      	b.n	8007068 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006ff6:	7efb      	ldrb	r3, [r7, #27]
 8006ff8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ffa:	d003      	beq.n	8007004 <create_name+0x7c>
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	429a      	cmp	r2, r3
 8007002:	d30c      	bcc.n	800701e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	2b0b      	cmp	r3, #11
 8007008:	d002      	beq.n	8007010 <create_name+0x88>
 800700a:	7efb      	ldrb	r3, [r7, #27]
 800700c:	2b2e      	cmp	r3, #46	@ 0x2e
 800700e:	d001      	beq.n	8007014 <create_name+0x8c>
 8007010:	2306      	movs	r3, #6
 8007012:	e044      	b.n	800709e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007014:	2308      	movs	r3, #8
 8007016:	613b      	str	r3, [r7, #16]
 8007018:	230b      	movs	r3, #11
 800701a:	617b      	str	r3, [r7, #20]
			continue;
 800701c:	e022      	b.n	8007064 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800701e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007022:	2b00      	cmp	r3, #0
 8007024:	da04      	bge.n	8007030 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007026:	7efb      	ldrb	r3, [r7, #27]
 8007028:	3b80      	subs	r3, #128	@ 0x80
 800702a:	4a1f      	ldr	r2, [pc, #124]	@ (80070a8 <create_name+0x120>)
 800702c:	5cd3      	ldrb	r3, [r2, r3]
 800702e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007030:	7efb      	ldrb	r3, [r7, #27]
 8007032:	4619      	mov	r1, r3
 8007034:	481d      	ldr	r0, [pc, #116]	@ (80070ac <create_name+0x124>)
 8007036:	f7fe ff04 	bl	8005e42 <chk_chr>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d001      	beq.n	8007044 <create_name+0xbc>
 8007040:	2306      	movs	r3, #6
 8007042:	e02c      	b.n	800709e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007044:	7efb      	ldrb	r3, [r7, #27]
 8007046:	2b60      	cmp	r3, #96	@ 0x60
 8007048:	d905      	bls.n	8007056 <create_name+0xce>
 800704a:	7efb      	ldrb	r3, [r7, #27]
 800704c:	2b7a      	cmp	r3, #122	@ 0x7a
 800704e:	d802      	bhi.n	8007056 <create_name+0xce>
 8007050:	7efb      	ldrb	r3, [r7, #27]
 8007052:	3b20      	subs	r3, #32
 8007054:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	613a      	str	r2, [r7, #16]
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	4413      	add	r3, r2
 8007060:	7efa      	ldrb	r2, [r7, #27]
 8007062:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007064:	e7a6      	b.n	8006fb4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007066:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	441a      	add	r2, r3
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <create_name+0xf4>
 8007078:	2306      	movs	r3, #6
 800707a:	e010      	b.n	800709e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	2be5      	cmp	r3, #229	@ 0xe5
 8007082:	d102      	bne.n	800708a <create_name+0x102>
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2205      	movs	r2, #5
 8007088:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800708a:	7efb      	ldrb	r3, [r7, #27]
 800708c:	2b20      	cmp	r3, #32
 800708e:	d801      	bhi.n	8007094 <create_name+0x10c>
 8007090:	2204      	movs	r2, #4
 8007092:	e000      	b.n	8007096 <create_name+0x10e>
 8007094:	2200      	movs	r2, #0
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	330b      	adds	r3, #11
 800709a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800709c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3720      	adds	r7, #32
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	0800fb10 	.word	0x0800fb10
 80070ac:	0800faac 	.word	0x0800faac

080070b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80070c4:	e002      	b.n	80070cc <follow_path+0x1c>
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	3301      	adds	r3, #1
 80070ca:	603b      	str	r3, [r7, #0]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80070d2:	d0f8      	beq.n	80070c6 <follow_path+0x16>
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	2b5c      	cmp	r3, #92	@ 0x5c
 80070da:	d0f4      	beq.n	80070c6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	2200      	movs	r2, #0
 80070e0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	2b1f      	cmp	r3, #31
 80070e8:	d80a      	bhi.n	8007100 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2280      	movs	r2, #128	@ 0x80
 80070ee:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80070f2:	2100      	movs	r1, #0
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7ff fc1e 	bl	8006936 <dir_sdi>
 80070fa:	4603      	mov	r3, r0
 80070fc:	75fb      	strb	r3, [r7, #23]
 80070fe:	e043      	b.n	8007188 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007100:	463b      	mov	r3, r7
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7ff ff3f 	bl	8006f88 <create_name>
 800710a:	4603      	mov	r3, r0
 800710c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800710e:	7dfb      	ldrb	r3, [r7, #23]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d134      	bne.n	800717e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7ff fe31 	bl	8006d7c <dir_find>
 800711a:	4603      	mov	r3, r0
 800711c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007124:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007126:	7dfb      	ldrb	r3, [r7, #23]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00a      	beq.n	8007142 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800712c:	7dfb      	ldrb	r3, [r7, #23]
 800712e:	2b04      	cmp	r3, #4
 8007130:	d127      	bne.n	8007182 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007132:	7afb      	ldrb	r3, [r7, #11]
 8007134:	f003 0304 	and.w	r3, r3, #4
 8007138:	2b00      	cmp	r3, #0
 800713a:	d122      	bne.n	8007182 <follow_path+0xd2>
 800713c:	2305      	movs	r3, #5
 800713e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007140:	e01f      	b.n	8007182 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007142:	7afb      	ldrb	r3, [r7, #11]
 8007144:	f003 0304 	and.w	r3, r3, #4
 8007148:	2b00      	cmp	r3, #0
 800714a:	d11c      	bne.n	8007186 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	799b      	ldrb	r3, [r3, #6]
 8007150:	f003 0310 	and.w	r3, r3, #16
 8007154:	2b00      	cmp	r3, #0
 8007156:	d102      	bne.n	800715e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007158:	2305      	movs	r3, #5
 800715a:	75fb      	strb	r3, [r7, #23]
 800715c:	e014      	b.n	8007188 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716c:	4413      	add	r3, r2
 800716e:	4619      	mov	r1, r3
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f7ff fd67 	bl	8006c44 <ld_clust>
 8007176:	4602      	mov	r2, r0
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800717c:	e7c0      	b.n	8007100 <follow_path+0x50>
			if (res != FR_OK) break;
 800717e:	bf00      	nop
 8007180:	e002      	b.n	8007188 <follow_path+0xd8>
				break;
 8007182:	bf00      	nop
 8007184:	e000      	b.n	8007188 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007186:	bf00      	nop
			}
		}
	}

	return res;
 8007188:	7dfb      	ldrb	r3, [r7, #23]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007192:	b480      	push	{r7}
 8007194:	b087      	sub	sp, #28
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800719a:	f04f 33ff 	mov.w	r3, #4294967295
 800719e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d031      	beq.n	800720c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	617b      	str	r3, [r7, #20]
 80071ae:	e002      	b.n	80071b6 <get_ldnumber+0x24>
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	3301      	adds	r3, #1
 80071b4:	617b      	str	r3, [r7, #20]
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	2b20      	cmp	r3, #32
 80071bc:	d903      	bls.n	80071c6 <get_ldnumber+0x34>
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	2b3a      	cmp	r3, #58	@ 0x3a
 80071c4:	d1f4      	bne.n	80071b0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	2b3a      	cmp	r3, #58	@ 0x3a
 80071cc:	d11c      	bne.n	8007208 <get_ldnumber+0x76>
			tp = *path;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	1c5a      	adds	r2, r3, #1
 80071d8:	60fa      	str	r2, [r7, #12]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	3b30      	subs	r3, #48	@ 0x30
 80071de:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	2b09      	cmp	r3, #9
 80071e4:	d80e      	bhi.n	8007204 <get_ldnumber+0x72>
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d10a      	bne.n	8007204 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d107      	bne.n	8007204 <get_ldnumber+0x72>
					vol = (int)i;
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	3301      	adds	r3, #1
 80071fc:	617b      	str	r3, [r7, #20]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	e002      	b.n	800720e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007208:	2300      	movs	r3, #0
 800720a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800720c:	693b      	ldr	r3, [r7, #16]
}
 800720e:	4618      	mov	r0, r3
 8007210:	371c      	adds	r7, #28
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
	...

0800721c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	70da      	strb	r2, [r3, #3]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f04f 32ff 	mov.w	r2, #4294967295
 8007232:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7ff f800 	bl	800623c <move_window>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <check_fs+0x2a>
 8007242:	2304      	movs	r3, #4
 8007244:	e038      	b.n	80072b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	3334      	adds	r3, #52	@ 0x34
 800724a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800724e:	4618      	mov	r0, r3
 8007250:	f7fe fd12 	bl	8005c78 <ld_word>
 8007254:	4603      	mov	r3, r0
 8007256:	461a      	mov	r2, r3
 8007258:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800725c:	429a      	cmp	r2, r3
 800725e:	d001      	beq.n	8007264 <check_fs+0x48>
 8007260:	2303      	movs	r3, #3
 8007262:	e029      	b.n	80072b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800726a:	2be9      	cmp	r3, #233	@ 0xe9
 800726c:	d009      	beq.n	8007282 <check_fs+0x66>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007274:	2beb      	cmp	r3, #235	@ 0xeb
 8007276:	d11e      	bne.n	80072b6 <check_fs+0x9a>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800727e:	2b90      	cmp	r3, #144	@ 0x90
 8007280:	d119      	bne.n	80072b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	3334      	adds	r3, #52	@ 0x34
 8007286:	3336      	adds	r3, #54	@ 0x36
 8007288:	4618      	mov	r0, r3
 800728a:	f7fe fd0d 	bl	8005ca8 <ld_dword>
 800728e:	4603      	mov	r3, r0
 8007290:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007294:	4a0a      	ldr	r2, [pc, #40]	@ (80072c0 <check_fs+0xa4>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d101      	bne.n	800729e <check_fs+0x82>
 800729a:	2300      	movs	r3, #0
 800729c:	e00c      	b.n	80072b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	3334      	adds	r3, #52	@ 0x34
 80072a2:	3352      	adds	r3, #82	@ 0x52
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7fe fcff 	bl	8005ca8 <ld_dword>
 80072aa:	4603      	mov	r3, r0
 80072ac:	4a05      	ldr	r2, [pc, #20]	@ (80072c4 <check_fs+0xa8>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d101      	bne.n	80072b6 <check_fs+0x9a>
 80072b2:	2300      	movs	r3, #0
 80072b4:	e000      	b.n	80072b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80072b6:	2302      	movs	r3, #2
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	00544146 	.word	0x00544146
 80072c4:	33544146 	.word	0x33544146

080072c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b096      	sub	sp, #88	@ 0x58
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	4613      	mov	r3, r2
 80072d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2200      	movs	r2, #0
 80072da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f7ff ff58 	bl	8007192 <get_ldnumber>
 80072e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80072e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	da01      	bge.n	80072ee <find_volume+0x26>
 80072ea:	230b      	movs	r3, #11
 80072ec:	e235      	b.n	800775a <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80072ee:	4aa5      	ldr	r2, [pc, #660]	@ (8007584 <find_volume+0x2bc>)
 80072f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072f6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80072f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <find_volume+0x3a>
 80072fe:	230c      	movs	r3, #12
 8007300:	e22b      	b.n	800775a <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8007302:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007304:	f7fe fdb8 	bl	8005e78 <lock_fs>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <find_volume+0x4a>
 800730e:	230f      	movs	r3, #15
 8007310:	e223      	b.n	800775a <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007316:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007318:	79fb      	ldrb	r3, [r7, #7]
 800731a:	f023 0301 	bic.w	r3, r3, #1
 800731e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d01a      	beq.n	800735e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8007328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732a:	785b      	ldrb	r3, [r3, #1]
 800732c:	4618      	mov	r0, r3
 800732e:	f7fe fc03 	bl	8005b38 <disk_status>
 8007332:	4603      	mov	r3, r0
 8007334:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007338:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10c      	bne.n	800735e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007344:	79fb      	ldrb	r3, [r7, #7]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d007      	beq.n	800735a <find_volume+0x92>
 800734a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800734e:	f003 0304 	and.w	r3, r3, #4
 8007352:	2b00      	cmp	r3, #0
 8007354:	d001      	beq.n	800735a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8007356:	230a      	movs	r3, #10
 8007358:	e1ff      	b.n	800775a <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800735a:	2300      	movs	r3, #0
 800735c:	e1fd      	b.n	800775a <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800735e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007360:	2200      	movs	r2, #0
 8007362:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007366:	b2da      	uxtb	r2, r3
 8007368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800736c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736e:	785b      	ldrb	r3, [r3, #1]
 8007370:	4618      	mov	r0, r3
 8007372:	f7fe fbfb 	bl	8005b6c <disk_initialize>
 8007376:	4603      	mov	r3, r0
 8007378:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800737c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b00      	cmp	r3, #0
 8007386:	d001      	beq.n	800738c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007388:	2303      	movs	r3, #3
 800738a:	e1e6      	b.n	800775a <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800738c:	79fb      	ldrb	r3, [r7, #7]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d007      	beq.n	80073a2 <find_volume+0xda>
 8007392:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007396:	f003 0304 	and.w	r3, r3, #4
 800739a:	2b00      	cmp	r3, #0
 800739c:	d001      	beq.n	80073a2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800739e:	230a      	movs	r3, #10
 80073a0:	e1db      	b.n	800775a <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80073a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80073a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80073aa:	f7ff ff37 	bl	800721c <check_fs>
 80073ae:	4603      	mov	r3, r0
 80073b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80073b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d149      	bne.n	8007450 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80073bc:	2300      	movs	r3, #0
 80073be:	643b      	str	r3, [r7, #64]	@ 0x40
 80073c0:	e01e      	b.n	8007400 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80073c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80073c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073ca:	011b      	lsls	r3, r3, #4
 80073cc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80073d0:	4413      	add	r3, r2
 80073d2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80073d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d6:	3304      	adds	r3, #4
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d006      	beq.n	80073ec <find_volume+0x124>
 80073de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e0:	3308      	adds	r3, #8
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fe fc60 	bl	8005ca8 <ld_dword>
 80073e8:	4602      	mov	r2, r0
 80073ea:	e000      	b.n	80073ee <find_volume+0x126>
 80073ec:	2200      	movs	r2, #0
 80073ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	3358      	adds	r3, #88	@ 0x58
 80073f4:	443b      	add	r3, r7
 80073f6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80073fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073fc:	3301      	adds	r3, #1
 80073fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8007400:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007402:	2b03      	cmp	r3, #3
 8007404:	d9dd      	bls.n	80073c2 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007406:	2300      	movs	r3, #0
 8007408:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800740a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <find_volume+0x14e>
 8007410:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007412:	3b01      	subs	r3, #1
 8007414:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	3358      	adds	r3, #88	@ 0x58
 800741c:	443b      	add	r3, r7
 800741e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007422:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007424:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007426:	2b00      	cmp	r3, #0
 8007428:	d005      	beq.n	8007436 <find_volume+0x16e>
 800742a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800742c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800742e:	f7ff fef5 	bl	800721c <check_fs>
 8007432:	4603      	mov	r3, r0
 8007434:	e000      	b.n	8007438 <find_volume+0x170>
 8007436:	2303      	movs	r3, #3
 8007438:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800743c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007440:	2b01      	cmp	r3, #1
 8007442:	d905      	bls.n	8007450 <find_volume+0x188>
 8007444:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007446:	3301      	adds	r3, #1
 8007448:	643b      	str	r3, [r7, #64]	@ 0x40
 800744a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800744c:	2b03      	cmp	r3, #3
 800744e:	d9e2      	bls.n	8007416 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007450:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007454:	2b04      	cmp	r3, #4
 8007456:	d101      	bne.n	800745c <find_volume+0x194>
 8007458:	2301      	movs	r3, #1
 800745a:	e17e      	b.n	800775a <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800745c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007460:	2b01      	cmp	r3, #1
 8007462:	d901      	bls.n	8007468 <find_volume+0x1a0>
 8007464:	230d      	movs	r3, #13
 8007466:	e178      	b.n	800775a <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746a:	3334      	adds	r3, #52	@ 0x34
 800746c:	330b      	adds	r3, #11
 800746e:	4618      	mov	r0, r3
 8007470:	f7fe fc02 	bl	8005c78 <ld_word>
 8007474:	4603      	mov	r3, r0
 8007476:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800747a:	d001      	beq.n	8007480 <find_volume+0x1b8>
 800747c:	230d      	movs	r3, #13
 800747e:	e16c      	b.n	800775a <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007482:	3334      	adds	r3, #52	@ 0x34
 8007484:	3316      	adds	r3, #22
 8007486:	4618      	mov	r0, r3
 8007488:	f7fe fbf6 	bl	8005c78 <ld_word>
 800748c:	4603      	mov	r3, r0
 800748e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007492:	2b00      	cmp	r3, #0
 8007494:	d106      	bne.n	80074a4 <find_volume+0x1dc>
 8007496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007498:	3334      	adds	r3, #52	@ 0x34
 800749a:	3324      	adds	r3, #36	@ 0x24
 800749c:	4618      	mov	r0, r3
 800749e:	f7fe fc03 	bl	8005ca8 <ld_dword>
 80074a2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80074a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80074a8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80074aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ac:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80074b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80074b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b6:	789b      	ldrb	r3, [r3, #2]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d005      	beq.n	80074c8 <find_volume+0x200>
 80074bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074be:	789b      	ldrb	r3, [r3, #2]
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d001      	beq.n	80074c8 <find_volume+0x200>
 80074c4:	230d      	movs	r3, #13
 80074c6:	e148      	b.n	800775a <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80074c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ca:	789b      	ldrb	r3, [r3, #2]
 80074cc:	461a      	mov	r2, r3
 80074ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074d0:	fb02 f303 	mul.w	r3, r2, r3
 80074d4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80074d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074dc:	461a      	mov	r2, r3
 80074de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80074e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e4:	895b      	ldrh	r3, [r3, #10]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d008      	beq.n	80074fc <find_volume+0x234>
 80074ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ec:	895b      	ldrh	r3, [r3, #10]
 80074ee:	461a      	mov	r2, r3
 80074f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f2:	895b      	ldrh	r3, [r3, #10]
 80074f4:	3b01      	subs	r3, #1
 80074f6:	4013      	ands	r3, r2
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <find_volume+0x238>
 80074fc:	230d      	movs	r3, #13
 80074fe:	e12c      	b.n	800775a <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007502:	3334      	adds	r3, #52	@ 0x34
 8007504:	3311      	adds	r3, #17
 8007506:	4618      	mov	r0, r3
 8007508:	f7fe fbb6 	bl	8005c78 <ld_word>
 800750c:	4603      	mov	r3, r0
 800750e:	461a      	mov	r2, r3
 8007510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007512:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007516:	891b      	ldrh	r3, [r3, #8]
 8007518:	f003 030f 	and.w	r3, r3, #15
 800751c:	b29b      	uxth	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d001      	beq.n	8007526 <find_volume+0x25e>
 8007522:	230d      	movs	r3, #13
 8007524:	e119      	b.n	800775a <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007528:	3334      	adds	r3, #52	@ 0x34
 800752a:	3313      	adds	r3, #19
 800752c:	4618      	mov	r0, r3
 800752e:	f7fe fba3 	bl	8005c78 <ld_word>
 8007532:	4603      	mov	r3, r0
 8007534:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007536:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007538:	2b00      	cmp	r3, #0
 800753a:	d106      	bne.n	800754a <find_volume+0x282>
 800753c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800753e:	3334      	adds	r3, #52	@ 0x34
 8007540:	3320      	adds	r3, #32
 8007542:	4618      	mov	r0, r3
 8007544:	f7fe fbb0 	bl	8005ca8 <ld_dword>
 8007548:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800754a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800754c:	3334      	adds	r3, #52	@ 0x34
 800754e:	330e      	adds	r3, #14
 8007550:	4618      	mov	r0, r3
 8007552:	f7fe fb91 	bl	8005c78 <ld_word>
 8007556:	4603      	mov	r3, r0
 8007558:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800755a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <find_volume+0x29c>
 8007560:	230d      	movs	r3, #13
 8007562:	e0fa      	b.n	800775a <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007564:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007566:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007568:	4413      	add	r3, r2
 800756a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800756c:	8912      	ldrh	r2, [r2, #8]
 800756e:	0912      	lsrs	r2, r2, #4
 8007570:	b292      	uxth	r2, r2
 8007572:	4413      	add	r3, r2
 8007574:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007576:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757a:	429a      	cmp	r2, r3
 800757c:	d204      	bcs.n	8007588 <find_volume+0x2c0>
 800757e:	230d      	movs	r3, #13
 8007580:	e0eb      	b.n	800775a <find_volume+0x492>
 8007582:	bf00      	nop
 8007584:	20000ae4 	.word	0x20000ae4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007588:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800758a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007590:	8952      	ldrh	r2, [r2, #10]
 8007592:	fbb3 f3f2 	udiv	r3, r3, r2
 8007596:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <find_volume+0x2da>
 800759e:	230d      	movs	r3, #13
 80075a0:	e0db      	b.n	800775a <find_volume+0x492>
		fmt = FS_FAT32;
 80075a2:	2303      	movs	r3, #3
 80075a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80075a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075aa:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d802      	bhi.n	80075b8 <find_volume+0x2f0>
 80075b2:	2302      	movs	r3, #2
 80075b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80075b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ba:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80075be:	4293      	cmp	r3, r2
 80075c0:	d802      	bhi.n	80075c8 <find_volume+0x300>
 80075c2:	2301      	movs	r3, #1
 80075c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80075c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ca:	1c9a      	adds	r2, r3, #2
 80075cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ce:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80075d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80075d4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80075d6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80075d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075da:	441a      	add	r2, r3
 80075dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075de:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80075e0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80075e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e4:	441a      	add	r2, r3
 80075e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e8:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 80075ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	d11e      	bne.n	8007630 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80075f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f4:	3334      	adds	r3, #52	@ 0x34
 80075f6:	332a      	adds	r3, #42	@ 0x2a
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fe fb3d 	bl	8005c78 <ld_word>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <find_volume+0x340>
 8007604:	230d      	movs	r3, #13
 8007606:	e0a8      	b.n	800775a <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760a:	891b      	ldrh	r3, [r3, #8]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <find_volume+0x34c>
 8007610:	230d      	movs	r3, #13
 8007612:	e0a2      	b.n	800775a <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007616:	3334      	adds	r3, #52	@ 0x34
 8007618:	332c      	adds	r3, #44	@ 0x2c
 800761a:	4618      	mov	r0, r3
 800761c:	f7fe fb44 	bl	8005ca8 <ld_dword>
 8007620:	4602      	mov	r2, r0
 8007622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007624:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	647b      	str	r3, [r7, #68]	@ 0x44
 800762e:	e01f      	b.n	8007670 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007632:	891b      	ldrh	r3, [r3, #8]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <find_volume+0x374>
 8007638:	230d      	movs	r3, #13
 800763a:	e08e      	b.n	800775a <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800763c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007640:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007642:	441a      	add	r2, r3
 8007644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007646:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007648:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800764c:	2b02      	cmp	r3, #2
 800764e:	d103      	bne.n	8007658 <find_volume+0x390>
 8007650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	e00a      	b.n	800766e <find_volume+0x3a6>
 8007658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800765a:	699a      	ldr	r2, [r3, #24]
 800765c:	4613      	mov	r3, r2
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	4413      	add	r3, r2
 8007662:	085a      	lsrs	r2, r3, #1
 8007664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800766e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007672:	69da      	ldr	r2, [r3, #28]
 8007674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007676:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800767a:	0a5b      	lsrs	r3, r3, #9
 800767c:	429a      	cmp	r2, r3
 800767e:	d201      	bcs.n	8007684 <find_volume+0x3bc>
 8007680:	230d      	movs	r3, #13
 8007682:	e06a      	b.n	800775a <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007686:	f04f 32ff 	mov.w	r2, #4294967295
 800768a:	615a      	str	r2, [r3, #20]
 800768c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800768e:	695a      	ldr	r2, [r3, #20]
 8007690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007692:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007696:	2280      	movs	r2, #128	@ 0x80
 8007698:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800769a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800769e:	2b03      	cmp	r3, #3
 80076a0:	d149      	bne.n	8007736 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80076a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a4:	3334      	adds	r3, #52	@ 0x34
 80076a6:	3330      	adds	r3, #48	@ 0x30
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7fe fae5 	bl	8005c78 <ld_word>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d140      	bne.n	8007736 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80076b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076b6:	3301      	adds	r3, #1
 80076b8:	4619      	mov	r1, r3
 80076ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80076bc:	f7fe fdbe 	bl	800623c <move_window>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d137      	bne.n	8007736 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 80076c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c8:	2200      	movs	r2, #0
 80076ca:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80076cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ce:	3334      	adds	r3, #52	@ 0x34
 80076d0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fe facf 	bl	8005c78 <ld_word>
 80076da:	4603      	mov	r3, r0
 80076dc:	461a      	mov	r2, r3
 80076de:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d127      	bne.n	8007736 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80076e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e8:	3334      	adds	r3, #52	@ 0x34
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe fadc 	bl	8005ca8 <ld_dword>
 80076f0:	4603      	mov	r3, r0
 80076f2:	4a1c      	ldr	r2, [pc, #112]	@ (8007764 <find_volume+0x49c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d11e      	bne.n	8007736 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80076f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fa:	3334      	adds	r3, #52	@ 0x34
 80076fc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007700:	4618      	mov	r0, r3
 8007702:	f7fe fad1 	bl	8005ca8 <ld_dword>
 8007706:	4603      	mov	r3, r0
 8007708:	4a17      	ldr	r2, [pc, #92]	@ (8007768 <find_volume+0x4a0>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d113      	bne.n	8007736 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800770e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007710:	3334      	adds	r3, #52	@ 0x34
 8007712:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007716:	4618      	mov	r0, r3
 8007718:	f7fe fac6 	bl	8005ca8 <ld_dword>
 800771c:	4602      	mov	r2, r0
 800771e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007720:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007724:	3334      	adds	r3, #52	@ 0x34
 8007726:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe fabc 	bl	8005ca8 <ld_dword>
 8007730:	4602      	mov	r2, r0
 8007732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007734:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007738:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800773c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800773e:	4b0b      	ldr	r3, [pc, #44]	@ (800776c <find_volume+0x4a4>)
 8007740:	881b      	ldrh	r3, [r3, #0]
 8007742:	3301      	adds	r3, #1
 8007744:	b29a      	uxth	r2, r3
 8007746:	4b09      	ldr	r3, [pc, #36]	@ (800776c <find_volume+0x4a4>)
 8007748:	801a      	strh	r2, [r3, #0]
 800774a:	4b08      	ldr	r3, [pc, #32]	@ (800776c <find_volume+0x4a4>)
 800774c:	881a      	ldrh	r2, [r3, #0]
 800774e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007750:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007752:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007754:	f7fe fd0a 	bl	800616c <clear_lock>
#endif
	return FR_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3758      	adds	r7, #88	@ 0x58
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	41615252 	.word	0x41615252
 8007768:	61417272 	.word	0x61417272
 800776c:	20000ae8 	.word	0x20000ae8

08007770 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800777a:	2309      	movs	r3, #9
 800777c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d02e      	beq.n	80077e2 <validate+0x72>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d02a      	beq.n	80077e2 <validate+0x72>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d025      	beq.n	80077e2 <validate+0x72>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	889a      	ldrh	r2, [r3, #4]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	88db      	ldrh	r3, [r3, #6]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d11e      	bne.n	80077e2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fe fb65 	bl	8005e78 <lock_fs>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d014      	beq.n	80077de <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	785b      	ldrb	r3, [r3, #1]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fe f9bc 	bl	8005b38 <disk_status>
 80077c0:	4603      	mov	r3, r0
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d102      	bne.n	80077d0 <validate+0x60>
				res = FR_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	73fb      	strb	r3, [r7, #15]
 80077ce:	e008      	b.n	80077e2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2100      	movs	r1, #0
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fe fb64 	bl	8005ea4 <unlock_fs>
 80077dc:	e001      	b.n	80077e2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80077de:	230f      	movs	r3, #15
 80077e0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d102      	bne.n	80077ee <validate+0x7e>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	e000      	b.n	80077f0 <validate+0x80>
 80077ee:	2300      	movs	r3, #0
 80077f0:	683a      	ldr	r2, [r7, #0]
 80077f2:	6013      	str	r3, [r2, #0]
	return res;
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
	...

08007800 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b088      	sub	sp, #32
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	4613      	mov	r3, r2
 800780c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007812:	f107 0310 	add.w	r3, r7, #16
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff fcbb 	bl	8007192 <get_ldnumber>
 800781c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	2b00      	cmp	r3, #0
 8007822:	da01      	bge.n	8007828 <f_mount+0x28>
 8007824:	230b      	movs	r3, #11
 8007826:	e048      	b.n	80078ba <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007828:	4a26      	ldr	r2, [pc, #152]	@ (80078c4 <f_mount+0xc4>)
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007830:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00f      	beq.n	8007858 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007838:	69b8      	ldr	r0, [r7, #24]
 800783a:	f7fe fc97 	bl	800616c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	4618      	mov	r0, r3
 8007844:	f000 feb1 	bl	80085aa <ff_del_syncobj>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <f_mount+0x52>
 800784e:	2302      	movs	r3, #2
 8007850:	e033      	b.n	80078ba <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	2200      	movs	r2, #0
 8007856:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00f      	beq.n	800787e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	b2da      	uxtb	r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	330c      	adds	r3, #12
 800786c:	4619      	mov	r1, r3
 800786e:	4610      	mov	r0, r2
 8007870:	f000 fe7b 	bl	800856a <ff_cre_syncobj>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d101      	bne.n	800787e <f_mount+0x7e>
 800787a:	2302      	movs	r3, #2
 800787c:	e01d      	b.n	80078ba <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	4910      	ldr	r1, [pc, #64]	@ (80078c4 <f_mount+0xc4>)
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d002      	beq.n	8007894 <f_mount+0x94>
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d001      	beq.n	8007898 <f_mount+0x98>
 8007894:	2300      	movs	r3, #0
 8007896:	e010      	b.n	80078ba <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007898:	f107 010c 	add.w	r1, r7, #12
 800789c:	f107 0308 	add.w	r3, r7, #8
 80078a0:	2200      	movs	r2, #0
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7ff fd10 	bl	80072c8 <find_volume>
 80078a8:	4603      	mov	r3, r0
 80078aa:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	7dfa      	ldrb	r2, [r7, #23]
 80078b0:	4611      	mov	r1, r2
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fe faf6 	bl	8005ea4 <unlock_fs>
 80078b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3720      	adds	r7, #32
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	20000ae4 	.word	0x20000ae4

080078c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b098      	sub	sp, #96	@ 0x60
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	4613      	mov	r3, r2
 80078d4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d101      	bne.n	80078e0 <f_open+0x18>
 80078dc:	2309      	movs	r3, #9
 80078de:	e1b0      	b.n	8007c42 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80078e0:	79fb      	ldrb	r3, [r7, #7]
 80078e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078e6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80078e8:	79fa      	ldrb	r2, [r7, #7]
 80078ea:	f107 0110 	add.w	r1, r7, #16
 80078ee:	f107 0308 	add.w	r3, r7, #8
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7ff fce8 	bl	80072c8 <find_volume>
 80078f8:	4603      	mov	r3, r0
 80078fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80078fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007902:	2b00      	cmp	r3, #0
 8007904:	f040 818d 	bne.w	8007c22 <f_open+0x35a>
		dj.obj.fs = fs;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	f107 0314 	add.w	r3, r7, #20
 8007912:	4611      	mov	r1, r2
 8007914:	4618      	mov	r0, r3
 8007916:	f7ff fbcb 	bl	80070b0 <follow_path>
 800791a:	4603      	mov	r3, r0
 800791c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007920:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007924:	2b00      	cmp	r3, #0
 8007926:	d118      	bne.n	800795a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007928:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800792c:	b25b      	sxtb	r3, r3
 800792e:	2b00      	cmp	r3, #0
 8007930:	da03      	bge.n	800793a <f_open+0x72>
				res = FR_INVALID_NAME;
 8007932:	2306      	movs	r3, #6
 8007934:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007938:	e00f      	b.n	800795a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800793a:	79fb      	ldrb	r3, [r7, #7]
 800793c:	2b01      	cmp	r3, #1
 800793e:	bf8c      	ite	hi
 8007940:	2301      	movhi	r3, #1
 8007942:	2300      	movls	r3, #0
 8007944:	b2db      	uxtb	r3, r3
 8007946:	461a      	mov	r2, r3
 8007948:	f107 0314 	add.w	r3, r7, #20
 800794c:	4611      	mov	r1, r2
 800794e:	4618      	mov	r0, r3
 8007950:	f7fe fac4 	bl	8005edc <chk_lock>
 8007954:	4603      	mov	r3, r0
 8007956:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800795a:	79fb      	ldrb	r3, [r7, #7]
 800795c:	f003 031c 	and.w	r3, r3, #28
 8007960:	2b00      	cmp	r3, #0
 8007962:	d07f      	beq.n	8007a64 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007964:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007968:	2b00      	cmp	r3, #0
 800796a:	d017      	beq.n	800799c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800796c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007970:	2b04      	cmp	r3, #4
 8007972:	d10e      	bne.n	8007992 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007974:	f7fe fb0e 	bl	8005f94 <enq_lock>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d006      	beq.n	800798c <f_open+0xc4>
 800797e:	f107 0314 	add.w	r3, r7, #20
 8007982:	4618      	mov	r0, r3
 8007984:	f7ff fa4f 	bl	8006e26 <dir_register>
 8007988:	4603      	mov	r3, r0
 800798a:	e000      	b.n	800798e <f_open+0xc6>
 800798c:	2312      	movs	r3, #18
 800798e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007992:	79fb      	ldrb	r3, [r7, #7]
 8007994:	f043 0308 	orr.w	r3, r3, #8
 8007998:	71fb      	strb	r3, [r7, #7]
 800799a:	e010      	b.n	80079be <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800799c:	7ebb      	ldrb	r3, [r7, #26]
 800799e:	f003 0311 	and.w	r3, r3, #17
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <f_open+0xe6>
					res = FR_DENIED;
 80079a6:	2307      	movs	r3, #7
 80079a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80079ac:	e007      	b.n	80079be <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80079ae:	79fb      	ldrb	r3, [r7, #7]
 80079b0:	f003 0304 	and.w	r3, r3, #4
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d002      	beq.n	80079be <f_open+0xf6>
 80079b8:	2308      	movs	r3, #8
 80079ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80079be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d168      	bne.n	8007a98 <f_open+0x1d0>
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	f003 0308 	and.w	r3, r3, #8
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d063      	beq.n	8007a98 <f_open+0x1d0>
				dw = GET_FATTIME();
 80079d0:	f7fe f854 	bl	8005a7c <get_fattime>
 80079d4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80079d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079d8:	330e      	adds	r3, #14
 80079da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fe f9a1 	bl	8005d24 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80079e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e4:	3316      	adds	r3, #22
 80079e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fe f99b 	bl	8005d24 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80079ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f0:	330b      	adds	r3, #11
 80079f2:	2220      	movs	r2, #32
 80079f4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079fa:	4611      	mov	r1, r2
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7ff f921 	bl	8006c44 <ld_clust>
 8007a02:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007a08:	2200      	movs	r2, #0
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff f939 	bl	8006c82 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a12:	331c      	adds	r3, #28
 8007a14:	2100      	movs	r1, #0
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fe f984 	bl	8005d24 <st_dword>
					fs->wflag = 1;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007a22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d037      	beq.n	8007a98 <f_open+0x1d0>
						dw = fs->winsect;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a2c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007a2e:	f107 0314 	add.w	r3, r7, #20
 8007a32:	2200      	movs	r2, #0
 8007a34:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fe fe4c 	bl	80066d4 <remove_chain>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8007a42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d126      	bne.n	8007a98 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fe fbf4 	bl	800623c <move_window>
 8007a54:	4603      	mov	r3, r0
 8007a56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a5e:	3a01      	subs	r2, #1
 8007a60:	611a      	str	r2, [r3, #16]
 8007a62:	e019      	b.n	8007a98 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007a64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d115      	bne.n	8007a98 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007a6c:	7ebb      	ldrb	r3, [r7, #26]
 8007a6e:	f003 0310 	and.w	r3, r3, #16
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d003      	beq.n	8007a7e <f_open+0x1b6>
					res = FR_NO_FILE;
 8007a76:	2304      	movs	r3, #4
 8007a78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007a7c:	e00c      	b.n	8007a98 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007a7e:	79fb      	ldrb	r3, [r7, #7]
 8007a80:	f003 0302 	and.w	r3, r3, #2
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d007      	beq.n	8007a98 <f_open+0x1d0>
 8007a88:	7ebb      	ldrb	r3, [r7, #26]
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d002      	beq.n	8007a98 <f_open+0x1d0>
						res = FR_DENIED;
 8007a92:	2307      	movs	r3, #7
 8007a94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007a98:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d126      	bne.n	8007aee <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007aa0:	79fb      	ldrb	r3, [r7, #7]
 8007aa2:	f003 0308 	and.w	r3, r3, #8
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ab0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007aba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007ac0:	79fb      	ldrb	r3, [r7, #7]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	bf8c      	ite	hi
 8007ac6:	2301      	movhi	r3, #1
 8007ac8:	2300      	movls	r3, #0
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	461a      	mov	r2, r3
 8007ace:	f107 0314 	add.w	r3, r7, #20
 8007ad2:	4611      	mov	r1, r2
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7fe fa7f 	bl	8005fd8 <inc_lock>
 8007ada:	4602      	mov	r2, r0
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d102      	bne.n	8007aee <f_open+0x226>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007aee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f040 8095 	bne.w	8007c22 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007afc:	4611      	mov	r1, r2
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7ff f8a0 	bl	8006c44 <ld_clust>
 8007b04:	4602      	mov	r2, r0
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b0c:	331c      	adds	r3, #28
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fe f8ca 	bl	8005ca8 <ld_dword>
 8007b14:	4602      	mov	r2, r0
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	88da      	ldrh	r2, [r3, #6]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	79fa      	ldrb	r2, [r7, #7]
 8007b32:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	3330      	adds	r3, #48	@ 0x30
 8007b4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b4e:	2100      	movs	r1, #0
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7fe f934 	bl	8005dbe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007b56:	79fb      	ldrb	r3, [r7, #7]
 8007b58:	f003 0320 	and.w	r3, r3, #32
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d060      	beq.n	8007c22 <f_open+0x35a>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d05c      	beq.n	8007c22 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	68da      	ldr	r2, [r3, #12]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	895b      	ldrh	r3, [r3, #10]
 8007b74:	025b      	lsls	r3, r3, #9
 8007b76:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b84:	e016      	b.n	8007bb4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fe fc11 	bl	80063b2 <get_fat>
 8007b90:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007b92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d802      	bhi.n	8007b9e <f_open+0x2d6>
 8007b98:	2302      	movs	r3, #2
 8007b9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007b9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba4:	d102      	bne.n	8007bac <f_open+0x2e4>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007bac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007bae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007bb4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d103      	bne.n	8007bc4 <f_open+0x2fc>
 8007bbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007bbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d8e0      	bhi.n	8007b86 <f_open+0x2be>
				}
				fp->clust = clst;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bc8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007bca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d127      	bne.n	8007c22 <f_open+0x35a>
 8007bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d022      	beq.n	8007c22 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fe fbc7 	bl	8006374 <clust2sect>
 8007be6:	6478      	str	r0, [r7, #68]	@ 0x44
 8007be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d103      	bne.n	8007bf6 <f_open+0x32e>
						res = FR_INT_ERR;
 8007bee:	2302      	movs	r3, #2
 8007bf0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007bf4:	e015      	b.n	8007c22 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bf8:	0a5a      	lsrs	r2, r3, #9
 8007bfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bfc:	441a      	add	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	7858      	ldrb	r0, [r3, #1]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a1a      	ldr	r2, [r3, #32]
 8007c10:	2301      	movs	r3, #1
 8007c12:	f7fd ffd3 	bl	8005bbc <disk_read>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d002      	beq.n	8007c22 <f_open+0x35a>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007c22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d002      	beq.n	8007c30 <f_open+0x368>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8007c36:	4611      	mov	r1, r2
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7fe f933 	bl	8005ea4 <unlock_fs>
 8007c3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3760      	adds	r7, #96	@ 0x60
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b08c      	sub	sp, #48	@ 0x30
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	60f8      	str	r0, [r7, #12]
 8007c52:	60b9      	str	r1, [r7, #8]
 8007c54:	607a      	str	r2, [r7, #4]
 8007c56:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f107 0210 	add.w	r2, r7, #16
 8007c68:	4611      	mov	r1, r2
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7ff fd80 	bl	8007770 <validate>
 8007c70:	4603      	mov	r3, r0
 8007c72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007c76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d107      	bne.n	8007c8e <f_write+0x44>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	7d5b      	ldrb	r3, [r3, #21]
 8007c82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007c86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d009      	beq.n	8007ca2 <f_write+0x58>
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007c94:	4611      	mov	r1, r2
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fe f904 	bl	8005ea4 <unlock_fs>
 8007c9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007ca0:	e173      	b.n	8007f8a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	7d1b      	ldrb	r3, [r3, #20]
 8007ca6:	f003 0302 	and.w	r3, r3, #2
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d106      	bne.n	8007cbc <f_write+0x72>
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	2107      	movs	r1, #7
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fe f8f6 	bl	8005ea4 <unlock_fs>
 8007cb8:	2307      	movs	r3, #7
 8007cba:	e166      	b.n	8007f8a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	699a      	ldr	r2, [r3, #24]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	441a      	add	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	f080 814b 	bcs.w	8007f64 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	43db      	mvns	r3, r3
 8007cd4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007cd6:	e145      	b.n	8007f64 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f040 8101 	bne.w	8007ee8 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	0a5b      	lsrs	r3, r3, #9
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	8952      	ldrh	r2, [r2, #10]
 8007cf0:	3a01      	subs	r2, #1
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d14d      	bne.n	8007d98 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10c      	bne.n	8007d1e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d11a      	bne.n	8007d46 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2100      	movs	r1, #0
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fe fd42 	bl	800679e <create_chain>
 8007d1a:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007d1c:	e013      	b.n	8007d46 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d007      	beq.n	8007d36 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f7fe fdce 	bl	80068ce <clmt_clust>
 8007d32:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007d34:	e007      	b.n	8007d46 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	69db      	ldr	r3, [r3, #28]
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	4610      	mov	r0, r2
 8007d40:	f7fe fd2d 	bl	800679e <create_chain>
 8007d44:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f000 8110 	beq.w	8007f6e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d109      	bne.n	8007d68 <f_write+0x11e>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2202      	movs	r2, #2
 8007d58:	755a      	strb	r2, [r3, #21]
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	2102      	movs	r1, #2
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fe f8a0 	bl	8005ea4 <unlock_fs>
 8007d64:	2302      	movs	r3, #2
 8007d66:	e110      	b.n	8007f8a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6e:	d109      	bne.n	8007d84 <f_write+0x13a>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2201      	movs	r2, #1
 8007d74:	755a      	strb	r2, [r3, #21]
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	2101      	movs	r1, #1
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fe f892 	bl	8005ea4 <unlock_fs>
 8007d80:	2301      	movs	r3, #1
 8007d82:	e102      	b.n	8007f8a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d88:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d102      	bne.n	8007d98 <f_write+0x14e>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d96:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	7d1b      	ldrb	r3, [r3, #20]
 8007d9c:	b25b      	sxtb	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	da1d      	bge.n	8007dde <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	7858      	ldrb	r0, [r3, #1]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6a1a      	ldr	r2, [r3, #32]
 8007db0:	2301      	movs	r3, #1
 8007db2:	f7fd ff23 	bl	8005bfc <disk_write>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d009      	beq.n	8007dd0 <f_write+0x186>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	755a      	strb	r2, [r3, #21]
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fe f86c 	bl	8005ea4 <unlock_fs>
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e0dc      	b.n	8007f8a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	7d1b      	ldrb	r3, [r3, #20]
 8007dd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007dde:	693a      	ldr	r2, [r7, #16]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	69db      	ldr	r3, [r3, #28]
 8007de4:	4619      	mov	r1, r3
 8007de6:	4610      	mov	r0, r2
 8007de8:	f7fe fac4 	bl	8006374 <clust2sect>
 8007dec:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d109      	bne.n	8007e08 <f_write+0x1be>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2202      	movs	r2, #2
 8007df8:	755a      	strb	r2, [r3, #21]
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	2102      	movs	r1, #2
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7fe f850 	bl	8005ea4 <unlock_fs>
 8007e04:	2302      	movs	r3, #2
 8007e06:	e0c0      	b.n	8007f8a <f_write+0x340>
			sect += csect;
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	0a5b      	lsrs	r3, r3, #9
 8007e14:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d041      	beq.n	8007ea0 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	4413      	add	r3, r2
 8007e22:	693a      	ldr	r2, [r7, #16]
 8007e24:	8952      	ldrh	r2, [r2, #10]
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d905      	bls.n	8007e36 <f_write+0x1ec>
					cc = fs->csize - csect;
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	895b      	ldrh	r3, [r3, #10]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	7858      	ldrb	r0, [r3, #1]
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	69f9      	ldr	r1, [r7, #28]
 8007e40:	f7fd fedc 	bl	8005bfc <disk_write>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d009      	beq.n	8007e5e <f_write+0x214>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	755a      	strb	r2, [r3, #21]
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	2101      	movs	r1, #1
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7fe f825 	bl	8005ea4 <unlock_fs>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e095      	b.n	8007f8a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6a1a      	ldr	r2, [r3, #32]
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	6a3a      	ldr	r2, [r7, #32]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d915      	bls.n	8007e98 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6a1a      	ldr	r2, [r3, #32]
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	025b      	lsls	r3, r3, #9
 8007e7c:	69fa      	ldr	r2, [r7, #28]
 8007e7e:	4413      	add	r3, r2
 8007e80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e84:	4619      	mov	r1, r3
 8007e86:	f7fd ff79 	bl	8005d7c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	7d1b      	ldrb	r3, [r3, #20]
 8007e8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007e98:	6a3b      	ldr	r3, [r7, #32]
 8007e9a:	025b      	lsls	r3, r3, #9
 8007e9c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8007e9e:	e044      	b.n	8007f2a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6a1b      	ldr	r3, [r3, #32]
 8007ea4:	697a      	ldr	r2, [r7, #20]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d01b      	beq.n	8007ee2 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	699a      	ldr	r2, [r3, #24]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d215      	bcs.n	8007ee2 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	7858      	ldrb	r0, [r3, #1]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	f7fd fe7a 	bl	8005bbc <disk_read>
 8007ec8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d009      	beq.n	8007ee2 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	755a      	strb	r2, [r3, #21]
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	2101      	movs	r1, #1
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fd ffe3 	bl	8005ea4 <unlock_fs>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e053      	b.n	8007f8a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ef0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007ef4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d901      	bls.n	8007f02 <f_write+0x2b8>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f10:	4413      	add	r3, r2
 8007f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f14:	69f9      	ldr	r1, [r7, #28]
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fd ff30 	bl	8005d7c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	7d1b      	ldrb	r3, [r3, #20]
 8007f20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007f24:	b2da      	uxtb	r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007f2a:	69fa      	ldr	r2, [r7, #28]
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2e:	4413      	add	r3, r2
 8007f30:	61fb      	str	r3, [r7, #28]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	699a      	ldr	r2, [r3, #24]
 8007f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f38:	441a      	add	r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	619a      	str	r2, [r3, #24]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	68da      	ldr	r2, [r3, #12]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	699b      	ldr	r3, [r3, #24]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	bf38      	it	cc
 8007f4a:	461a      	movcc	r2, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	60da      	str	r2, [r3, #12]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f56:	441a      	add	r2, r3
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	601a      	str	r2, [r3, #0]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f47f aeb6 	bne.w	8007cd8 <f_write+0x8e>
 8007f6c:	e000      	b.n	8007f70 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007f6e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	7d1b      	ldrb	r3, [r3, #20]
 8007f74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	2100      	movs	r1, #0
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fd ff8e 	bl	8005ea4 <unlock_fs>
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3730      	adds	r7, #48	@ 0x30
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b086      	sub	sp, #24
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f107 0208 	add.w	r2, r7, #8
 8007fa0:	4611      	mov	r1, r2
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7ff fbe4 	bl	8007770 <validate>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007fac:	7dfb      	ldrb	r3, [r7, #23]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d16d      	bne.n	800808e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	7d1b      	ldrb	r3, [r3, #20]
 8007fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d067      	beq.n	800808e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	7d1b      	ldrb	r3, [r3, #20]
 8007fc2:	b25b      	sxtb	r3, r3
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	da1a      	bge.n	8007ffe <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	7858      	ldrb	r0, [r3, #1]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a1a      	ldr	r2, [r3, #32]
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	f7fd fe10 	bl	8005bfc <disk_write>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d006      	beq.n	8007ff0 <f_sync+0x5e>
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fd ff5c 	bl	8005ea4 <unlock_fs>
 8007fec:	2301      	movs	r3, #1
 8007fee:	e055      	b.n	800809c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	7d1b      	ldrb	r3, [r3, #20]
 8007ff4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007ffe:	f7fd fd3d 	bl	8005a7c <get_fattime>
 8008002:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800800a:	4619      	mov	r1, r3
 800800c:	4610      	mov	r0, r2
 800800e:	f7fe f915 	bl	800623c <move_window>
 8008012:	4603      	mov	r3, r0
 8008014:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008016:	7dfb      	ldrb	r3, [r7, #23]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d138      	bne.n	800808e <f_sync+0xfc>
					dir = fp->dir_ptr;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008020:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	330b      	adds	r3, #11
 8008026:	781a      	ldrb	r2, [r3, #0]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	330b      	adds	r3, #11
 800802c:	f042 0220 	orr.w	r2, r2, #32
 8008030:	b2d2      	uxtb	r2, r2
 8008032:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6818      	ldr	r0, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	461a      	mov	r2, r3
 800803e:	68f9      	ldr	r1, [r7, #12]
 8008040:	f7fe fe1f 	bl	8006c82 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f103 021c 	add.w	r2, r3, #28
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	4619      	mov	r1, r3
 8008050:	4610      	mov	r0, r2
 8008052:	f7fd fe67 	bl	8005d24 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	3316      	adds	r3, #22
 800805a:	6939      	ldr	r1, [r7, #16]
 800805c:	4618      	mov	r0, r3
 800805e:	f7fd fe61 	bl	8005d24 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	3312      	adds	r3, #18
 8008066:	2100      	movs	r1, #0
 8008068:	4618      	mov	r0, r3
 800806a:	f7fd fe40 	bl	8005cee <st_word>
					fs->wflag = 1;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	2201      	movs	r2, #1
 8008072:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	4618      	mov	r0, r3
 8008078:	f7fe f90e 	bl	8006298 <sync_fs>
 800807c:	4603      	mov	r3, r0
 800807e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	7d1b      	ldrb	r3, [r3, #20]
 8008084:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008088:	b2da      	uxtb	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	7dfa      	ldrb	r2, [r7, #23]
 8008092:	4611      	mov	r1, r2
 8008094:	4618      	mov	r0, r3
 8008096:	f7fd ff05 	bl	8005ea4 <unlock_fs>
 800809a:	7dfb      	ldrb	r3, [r7, #23]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7ff ff70 	bl	8007f92 <f_sync>
 80080b2:	4603      	mov	r3, r0
 80080b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80080b6:	7bfb      	ldrb	r3, [r7, #15]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d11d      	bne.n	80080f8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f107 0208 	add.w	r2, r7, #8
 80080c2:	4611      	mov	r1, r2
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7ff fb53 	bl	8007770 <validate>
 80080ca:	4603      	mov	r3, r0
 80080cc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80080ce:	7bfb      	ldrb	r3, [r7, #15]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d111      	bne.n	80080f8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	4618      	mov	r0, r3
 80080da:	f7fe f80b 	bl	80060f4 <dec_lock>
 80080de:	4603      	mov	r3, r0
 80080e0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d102      	bne.n	80080ee <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	2100      	movs	r1, #0
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fd fed6 	bl	8005ea4 <unlock_fs>
#endif
		}
	}
	return res;
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b086      	sub	sp, #24
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d101      	bne.n	8008116 <f_opendir+0x14>
 8008112:	2309      	movs	r3, #9
 8008114:	e06a      	b.n	80081ec <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800811a:	f107 010c 	add.w	r1, r7, #12
 800811e:	463b      	mov	r3, r7
 8008120:	2200      	movs	r2, #0
 8008122:	4618      	mov	r0, r3
 8008124:	f7ff f8d0 	bl	80072c8 <find_volume>
 8008128:	4603      	mov	r3, r0
 800812a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800812c:	7dfb      	ldrb	r3, [r7, #23]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d14f      	bne.n	80081d2 <f_opendir+0xd0>
		obj->fs = fs;
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	4619      	mov	r1, r3
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7fe ffb7 	bl	80070b0 <follow_path>
 8008142:	4603      	mov	r3, r0
 8008144:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8008146:	7dfb      	ldrb	r3, [r7, #23]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d13d      	bne.n	80081c8 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008152:	b25b      	sxtb	r3, r3
 8008154:	2b00      	cmp	r3, #0
 8008156:	db12      	blt.n	800817e <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	799b      	ldrb	r3, [r3, #6]
 800815c:	f003 0310 	and.w	r3, r3, #16
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00a      	beq.n	800817a <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	4619      	mov	r1, r3
 800816c:	4610      	mov	r0, r2
 800816e:	f7fe fd69 	bl	8006c44 <ld_clust>
 8008172:	4602      	mov	r2, r0
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	609a      	str	r2, [r3, #8]
 8008178:	e001      	b.n	800817e <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800817a:	2305      	movs	r3, #5
 800817c:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800817e:	7dfb      	ldrb	r3, [r7, #23]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d121      	bne.n	80081c8 <f_opendir+0xc6>
				obj->id = fs->id;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	88da      	ldrh	r2, [r3, #6]
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800818c:	2100      	movs	r1, #0
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7fe fbd1 	bl	8006936 <dir_sdi>
 8008194:	4603      	mov	r3, r0
 8008196:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8008198:	7dfb      	ldrb	r3, [r7, #23]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d114      	bne.n	80081c8 <f_opendir+0xc6>
					if (obj->sclust) {
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00d      	beq.n	80081c2 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80081a6:	2100      	movs	r1, #0
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7fd ff15 	bl	8005fd8 <inc_lock>
 80081ae:	4602      	mov	r2, r0
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d105      	bne.n	80081c8 <f_opendir+0xc6>
 80081bc:	2312      	movs	r3, #18
 80081be:	75fb      	strb	r3, [r7, #23]
 80081c0:	e002      	b.n	80081c8 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	2200      	movs	r2, #0
 80081c6:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
 80081ca:	2b04      	cmp	r3, #4
 80081cc:	d101      	bne.n	80081d2 <f_opendir+0xd0>
 80081ce:	2305      	movs	r3, #5
 80081d0:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80081d2:	7dfb      	ldrb	r3, [r7, #23]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d002      	beq.n	80081de <f_opendir+0xdc>
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	2200      	movs	r2, #0
 80081dc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	7dfa      	ldrb	r2, [r7, #23]
 80081e2:	4611      	mov	r1, r2
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7fd fe5d 	bl	8005ea4 <unlock_fs>
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3718      	adds	r7, #24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f107 0208 	add.w	r2, r7, #8
 8008202:	4611      	mov	r1, r2
 8008204:	4618      	mov	r0, r3
 8008206:	f7ff fab3 	bl	8007770 <validate>
 800820a:	4603      	mov	r3, r0
 800820c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800820e:	7bfb      	ldrb	r3, [r7, #15]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d115      	bne.n	8008240 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d006      	beq.n	800822a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	4618      	mov	r0, r3
 8008222:	f7fd ff67 	bl	80060f4 <dec_lock>
 8008226:	4603      	mov	r3, r0
 8008228:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800822a:	7bfb      	ldrb	r3, [r7, #15]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d102      	bne.n	8008236 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	2100      	movs	r1, #0
 800823a:	4618      	mov	r0, r3
 800823c:	f7fd fe32 	bl	8005ea4 <unlock_fs>
#endif
	}
	return res;
 8008240:	7bfb      	ldrb	r3, [r7, #15]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b084      	sub	sp, #16
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f107 0208 	add.w	r2, r7, #8
 800825a:	4611      	mov	r1, r2
 800825c:	4618      	mov	r0, r3
 800825e:	f7ff fa87 	bl	8007770 <validate>
 8008262:	4603      	mov	r3, r0
 8008264:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008266:	7bfb      	ldrb	r3, [r7, #15]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d126      	bne.n	80082ba <f_readdir+0x70>
		if (!fno) {
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d106      	bne.n	8008280 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008272:	2100      	movs	r1, #0
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f7fe fb5e 	bl	8006936 <dir_sdi>
 800827a:	4603      	mov	r3, r0
 800827c:	73fb      	strb	r3, [r7, #15]
 800827e:	e01c      	b.n	80082ba <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8008280:	2100      	movs	r1, #0
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7fe fd1d 	bl	8006cc2 <dir_read>
 8008288:	4603      	mov	r3, r0
 800828a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800828c:	7bfb      	ldrb	r3, [r7, #15]
 800828e:	2b04      	cmp	r3, #4
 8008290:	d101      	bne.n	8008296 <f_readdir+0x4c>
 8008292:	2300      	movs	r3, #0
 8008294:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8008296:	7bfb      	ldrb	r3, [r7, #15]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10e      	bne.n	80082ba <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800829c:	6839      	ldr	r1, [r7, #0]
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7fe fe11 	bl	8006ec6 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80082a4:	2100      	movs	r1, #0
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7fe fbc0 	bl	8006a2c <dir_next>
 80082ac:	4603      	mov	r3, r0
 80082ae:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
 80082b2:	2b04      	cmp	r3, #4
 80082b4:	d101      	bne.n	80082ba <f_readdir+0x70>
 80082b6:	2300      	movs	r3, #0
 80082b8:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	7bfa      	ldrb	r2, [r7, #15]
 80082be:	4611      	mov	r1, r2
 80082c0:	4618      	mov	r0, r3
 80082c2:	f7fd fdef 	bl	8005ea4 <unlock_fs>
 80082c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b090      	sub	sp, #64	@ 0x40
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80082da:	f107 010c 	add.w	r1, r7, #12
 80082de:	1d3b      	adds	r3, r7, #4
 80082e0:	2200      	movs	r2, #0
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fe fff0 	bl	80072c8 <find_volume>
 80082e8:	4603      	mov	r3, r0
 80082ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 80082ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d11f      	bne.n	8008336 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	f107 030c 	add.w	r3, r7, #12
 80082fc:	4611      	mov	r1, r2
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fe fed6 	bl	80070b0 <follow_path>
 8008304:	4603      	mov	r3, r0
 8008306:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800830a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800830e:	2b00      	cmp	r3, #0
 8008310:	d111      	bne.n	8008336 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8008312:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8008316:	b25b      	sxtb	r3, r3
 8008318:	2b00      	cmp	r3, #0
 800831a:	da03      	bge.n	8008324 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800831c:	2306      	movs	r3, #6
 800831e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008322:	e008      	b.n	8008336 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d005      	beq.n	8008336 <f_stat+0x66>
 800832a:	f107 030c 	add.w	r3, r7, #12
 800832e:	6839      	ldr	r1, [r7, #0]
 8008330:	4618      	mov	r0, r3
 8008332:	f7fe fdc8 	bl	8006ec6 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800833c:	4611      	mov	r1, r2
 800833e:	4618      	mov	r0, r3
 8008340:	f7fd fdb0 	bl	8005ea4 <unlock_fs>
 8008344:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8008348:	4618      	mov	r0, r3
 800834a:	3740      	adds	r7, #64	@ 0x40
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b09e      	sub	sp, #120	@ 0x78
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8008358:	2300      	movs	r3, #0
 800835a:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800835c:	f107 010c 	add.w	r1, r7, #12
 8008360:	1d3b      	adds	r3, r7, #4
 8008362:	2202      	movs	r2, #2
 8008364:	4618      	mov	r0, r3
 8008366:	f7fe ffaf 	bl	80072c8 <find_volume>
 800836a:	4603      	mov	r3, r0
 800836c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 8008374:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008378:	2b00      	cmp	r3, #0
 800837a:	f040 808e 	bne.w	800849a <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008384:	4611      	mov	r1, r2
 8008386:	4618      	mov	r0, r3
 8008388:	f7fe fe92 	bl	80070b0 <follow_path>
 800838c:	4603      	mov	r3, r0
 800838e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8008392:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008396:	2b00      	cmp	r3, #0
 8008398:	d108      	bne.n	80083ac <f_unlink+0x5c>
 800839a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800839e:	2102      	movs	r1, #2
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fd fd9b 	bl	8005edc <chk_lock>
 80083a6:	4603      	mov	r3, r0
 80083a8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80083ac:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d172      	bne.n	800849a <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80083b4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80083b8:	b25b      	sxtb	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	da03      	bge.n	80083c6 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80083be:	2306      	movs	r3, #6
 80083c0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80083c4:	e008      	b.n	80083d8 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80083c6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d002      	beq.n	80083d8 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80083d2:	2307      	movs	r3, #7
 80083d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 80083d8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d134      	bne.n	800844a <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80083e4:	4611      	mov	r1, r2
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fe fc2c 	bl	8006c44 <ld_clust>
 80083ec:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80083ee:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80083f2:	f003 0310 	and.w	r3, r3, #16
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d027      	beq.n	800844a <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80083fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008400:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8008402:	f107 0310 	add.w	r3, r7, #16
 8008406:	2100      	movs	r1, #0
 8008408:	4618      	mov	r0, r3
 800840a:	f7fe fa94 	bl	8006936 <dir_sdi>
 800840e:	4603      	mov	r3, r0
 8008410:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 8008414:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008418:	2b00      	cmp	r3, #0
 800841a:	d116      	bne.n	800844a <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800841c:	f107 0310 	add.w	r3, r7, #16
 8008420:	2100      	movs	r1, #0
 8008422:	4618      	mov	r0, r3
 8008424:	f7fe fc4d 	bl	8006cc2 <dir_read>
 8008428:	4603      	mov	r3, r0
 800842a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800842e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008432:	2b00      	cmp	r3, #0
 8008434:	d102      	bne.n	800843c <f_unlink+0xec>
 8008436:	2307      	movs	r3, #7
 8008438:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800843c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008440:	2b04      	cmp	r3, #4
 8008442:	d102      	bne.n	800844a <f_unlink+0xfa>
 8008444:	2300      	movs	r3, #0
 8008446:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800844a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800844e:	2b00      	cmp	r3, #0
 8008450:	d123      	bne.n	800849a <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8008452:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008456:	4618      	mov	r0, r3
 8008458:	f7fe fd17 	bl	8006e8a <dir_remove>
 800845c:	4603      	mov	r3, r0
 800845e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8008462:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10c      	bne.n	8008484 <f_unlink+0x134>
 800846a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800846c:	2b00      	cmp	r3, #0
 800846e:	d009      	beq.n	8008484 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8008470:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008474:	2200      	movs	r2, #0
 8008476:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8008478:	4618      	mov	r0, r3
 800847a:	f7fe f92b 	bl	80066d4 <remove_chain>
 800847e:	4603      	mov	r3, r0
 8008480:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8008484:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008488:	2b00      	cmp	r3, #0
 800848a:	d106      	bne.n	800849a <f_unlink+0x14a>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	4618      	mov	r0, r3
 8008490:	f7fd ff02 	bl	8006298 <sync_fs>
 8008494:	4603      	mov	r3, r0
 8008496:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 80084a0:	4611      	mov	r1, r2
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fd fcfe 	bl	8005ea4 <unlock_fs>
 80084a8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3778      	adds	r7, #120	@ 0x78
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b087      	sub	sp, #28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	4613      	mov	r3, r2
 80084c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80084c2:	2301      	movs	r3, #1
 80084c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80084c6:	2300      	movs	r3, #0
 80084c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80084ca:	4b1f      	ldr	r3, [pc, #124]	@ (8008548 <FATFS_LinkDriverEx+0x94>)
 80084cc:	7a5b      	ldrb	r3, [r3, #9]
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d131      	bne.n	8008538 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80084d4:	4b1c      	ldr	r3, [pc, #112]	@ (8008548 <FATFS_LinkDriverEx+0x94>)
 80084d6:	7a5b      	ldrb	r3, [r3, #9]
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	461a      	mov	r2, r3
 80084dc:	4b1a      	ldr	r3, [pc, #104]	@ (8008548 <FATFS_LinkDriverEx+0x94>)
 80084de:	2100      	movs	r1, #0
 80084e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80084e2:	4b19      	ldr	r3, [pc, #100]	@ (8008548 <FATFS_LinkDriverEx+0x94>)
 80084e4:	7a5b      	ldrb	r3, [r3, #9]
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	4a17      	ldr	r2, [pc, #92]	@ (8008548 <FATFS_LinkDriverEx+0x94>)
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80084f2:	4b15      	ldr	r3, [pc, #84]	@ (8008548 <FATFS_LinkDriverEx+0x94>)
 80084f4:	7a5b      	ldrb	r3, [r3, #9]
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	461a      	mov	r2, r3
 80084fa:	4b13      	ldr	r3, [pc, #76]	@ (8008548 <FATFS_LinkDriverEx+0x94>)
 80084fc:	4413      	add	r3, r2
 80084fe:	79fa      	ldrb	r2, [r7, #7]
 8008500:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008502:	4b11      	ldr	r3, [pc, #68]	@ (8008548 <FATFS_LinkDriverEx+0x94>)
 8008504:	7a5b      	ldrb	r3, [r3, #9]
 8008506:	b2db      	uxtb	r3, r3
 8008508:	1c5a      	adds	r2, r3, #1
 800850a:	b2d1      	uxtb	r1, r2
 800850c:	4a0e      	ldr	r2, [pc, #56]	@ (8008548 <FATFS_LinkDriverEx+0x94>)
 800850e:	7251      	strb	r1, [r2, #9]
 8008510:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008512:	7dbb      	ldrb	r3, [r7, #22]
 8008514:	3330      	adds	r3, #48	@ 0x30
 8008516:	b2da      	uxtb	r2, r3
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	3301      	adds	r3, #1
 8008520:	223a      	movs	r2, #58	@ 0x3a
 8008522:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	3302      	adds	r3, #2
 8008528:	222f      	movs	r2, #47	@ 0x2f
 800852a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	3303      	adds	r3, #3
 8008530:	2200      	movs	r2, #0
 8008532:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008534:	2300      	movs	r3, #0
 8008536:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008538:	7dfb      	ldrb	r3, [r7, #23]
}
 800853a:	4618      	mov	r0, r3
 800853c:	371c      	adds	r7, #28
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	20000b0c 	.word	0x20000b0c

0800854c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008556:	2200      	movs	r2, #0
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7ff ffaa 	bl	80084b4 <FATFS_LinkDriverEx>
 8008560:	4603      	mov	r3, r0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b086      	sub	sp, #24
 800856e:	af00      	add	r7, sp, #0
 8008570:	4603      	mov	r3, r0
 8008572:	6039      	str	r1, [r7, #0]
 8008574:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8008576:	2300      	movs	r3, #0
 8008578:	60fb      	str	r3, [r7, #12]
 800857a:	2300      	movs	r3, #0
 800857c:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800857e:	f107 030c 	add.w	r3, r7, #12
 8008582:	2101      	movs	r1, #1
 8008584:	4618      	mov	r0, r3
 8008586:	f000 f8cd 	bl	8008724 <osSemaphoreCreate>
 800858a:	4602      	mov	r2, r0
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	bf14      	ite	ne
 8008598:	2301      	movne	r3, #1
 800859a:	2300      	moveq	r3, #0
 800859c:	b2db      	uxtb	r3, r3
 800859e:	617b      	str	r3, [r7, #20]

    return ret;
 80085a0:	697b      	ldr	r3, [r7, #20]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3718      	adds	r7, #24
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b082      	sub	sp, #8
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f96c 	bl	8008890 <osSemaphoreDelete>
#endif
    return 1;
 80085b8:	2301      	movs	r3, #1
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80085ca:	2300      	movs	r3, #0
 80085cc:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80085ce:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f8d8 	bl	8008788 <osSemaphoreWait>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d101      	bne.n	80085e2 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 80085de:	2301      	movs	r3, #1
 80085e0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80085e2:	68fb      	ldr	r3, [r7, #12]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f915 	bl	8008824 <osSemaphoreRelease>
#endif
}
 80085fa:	bf00      	nop
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008602:	b480      	push	{r7}
 8008604:	b085      	sub	sp, #20
 8008606:	af00      	add	r7, sp, #0
 8008608:	4603      	mov	r3, r0
 800860a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800860c:	2300      	movs	r3, #0
 800860e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008610:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008614:	2b84      	cmp	r3, #132	@ 0x84
 8008616:	d005      	beq.n	8008624 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008618:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	4413      	add	r3, r2
 8008620:	3303      	adds	r3, #3
 8008622:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008624:	68fb      	ldr	r3, [r7, #12]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008632:	b480      	push	{r7}
 8008634:	b083      	sub	sp, #12
 8008636:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008638:	f3ef 8305 	mrs	r3, IPSR
 800863c:	607b      	str	r3, [r7, #4]
  return(result);
 800863e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008640:	2b00      	cmp	r3, #0
 8008642:	bf14      	ite	ne
 8008644:	2301      	movne	r3, #1
 8008646:	2300      	moveq	r3, #0
 8008648:	b2db      	uxtb	r3, r3
}
 800864a:	4618      	mov	r0, r3
 800864c:	370c      	adds	r7, #12
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr

08008656 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800865a:	f001 f9a3 	bl	80099a4 <vTaskStartScheduler>
  
  return osOK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	bd80      	pop	{r7, pc}

08008664 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008666:	b089      	sub	sp, #36	@ 0x24
 8008668:	af04      	add	r7, sp, #16
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d020      	beq.n	80086b8 <osThreadCreate+0x54>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d01c      	beq.n	80086b8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	685c      	ldr	r4, [r3, #4]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	691e      	ldr	r6, [r3, #16]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008690:	4618      	mov	r0, r3
 8008692:	f7ff ffb6 	bl	8008602 <makeFreeRtosPriority>
 8008696:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80086a0:	9202      	str	r2, [sp, #8]
 80086a2:	9301      	str	r3, [sp, #4]
 80086a4:	9100      	str	r1, [sp, #0]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	4632      	mov	r2, r6
 80086aa:	4629      	mov	r1, r5
 80086ac:	4620      	mov	r0, r4
 80086ae:	f000 ff93 	bl	80095d8 <xTaskCreateStatic>
 80086b2:	4603      	mov	r3, r0
 80086b4:	60fb      	str	r3, [r7, #12]
 80086b6:	e01c      	b.n	80086f2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685c      	ldr	r4, [r3, #4]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80086c4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7ff ff98 	bl	8008602 <makeFreeRtosPriority>
 80086d2:	4602      	mov	r2, r0
 80086d4:	f107 030c 	add.w	r3, r7, #12
 80086d8:	9301      	str	r3, [sp, #4]
 80086da:	9200      	str	r2, [sp, #0]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	4632      	mov	r2, r6
 80086e0:	4629      	mov	r1, r5
 80086e2:	4620      	mov	r0, r4
 80086e4:	f000 ffd8 	bl	8009698 <xTaskCreate>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d001      	beq.n	80086f2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80086ee:	2300      	movs	r3, #0
 80086f0:	e000      	b.n	80086f4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80086f2:	68fb      	ldr	r3, [r7, #12]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080086fc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <osDelay+0x16>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	e000      	b.n	8008714 <osDelay+0x18>
 8008712:	2301      	movs	r3, #1
 8008714:	4618      	mov	r0, r3
 8008716:	f001 f90f 	bl	8009938 <vTaskDelay>
  
  return osOK;
 800871a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008724:	b580      	push	{r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af02      	add	r7, sp, #8
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00f      	beq.n	8008756 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d10a      	bne.n	8008752 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	2203      	movs	r2, #3
 8008742:	9200      	str	r2, [sp, #0]
 8008744:	2200      	movs	r2, #0
 8008746:	2100      	movs	r1, #0
 8008748:	2001      	movs	r0, #1
 800874a:	f000 f9d3 	bl	8008af4 <xQueueGenericCreateStatic>
 800874e:	4603      	mov	r3, r0
 8008750:	e016      	b.n	8008780 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008752:	2300      	movs	r3, #0
 8008754:	e014      	b.n	8008780 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d110      	bne.n	800877e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800875c:	2203      	movs	r2, #3
 800875e:	2100      	movs	r1, #0
 8008760:	2001      	movs	r0, #1
 8008762:	f000 fa44 	bl	8008bee <xQueueGenericCreate>
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d005      	beq.n	800877a <osSemaphoreCreate+0x56>
 800876e:	2300      	movs	r3, #0
 8008770:	2200      	movs	r2, #0
 8008772:	2100      	movs	r1, #0
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 fa95 	bl	8008ca4 <xQueueGenericSend>
      return sema;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	e000      	b.n	8008780 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800877e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008792:	2300      	movs	r3, #0
 8008794:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d101      	bne.n	80087a0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800879c:	2380      	movs	r3, #128	@ 0x80
 800879e:	e03a      	b.n	8008816 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80087a0:	2300      	movs	r3, #0
 80087a2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087aa:	d103      	bne.n	80087b4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80087ac:	f04f 33ff 	mov.w	r3, #4294967295
 80087b0:	60fb      	str	r3, [r7, #12]
 80087b2:	e009      	b.n	80087c8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d006      	beq.n	80087c8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <osSemaphoreWait+0x40>
      ticks = 1;
 80087c4:	2301      	movs	r3, #1
 80087c6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80087c8:	f7ff ff33 	bl	8008632 <inHandlerMode>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d017      	beq.n	8008802 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80087d2:	f107 0308 	add.w	r3, r7, #8
 80087d6:	461a      	mov	r2, r3
 80087d8:	2100      	movs	r1, #0
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fd04 	bl	80091e8 <xQueueReceiveFromISR>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d001      	beq.n	80087ea <osSemaphoreWait+0x62>
      return osErrorOS;
 80087e6:	23ff      	movs	r3, #255	@ 0xff
 80087e8:	e015      	b.n	8008816 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d011      	beq.n	8008814 <osSemaphoreWait+0x8c>
 80087f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008820 <osSemaphoreWait+0x98>)
 80087f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087f6:	601a      	str	r2, [r3, #0]
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	e008      	b.n	8008814 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008802:	68f9      	ldr	r1, [r7, #12]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fbdf 	bl	8008fc8 <xQueueSemaphoreTake>
 800880a:	4603      	mov	r3, r0
 800880c:	2b01      	cmp	r3, #1
 800880e:	d001      	beq.n	8008814 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008810:	23ff      	movs	r3, #255	@ 0xff
 8008812:	e000      	b.n	8008816 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	e000ed04 	.word	0xe000ed04

08008824 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800882c:	2300      	movs	r3, #0
 800882e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008830:	2300      	movs	r3, #0
 8008832:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008834:	f7ff fefd 	bl	8008632 <inHandlerMode>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d016      	beq.n	800886c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800883e:	f107 0308 	add.w	r3, r7, #8
 8008842:	4619      	mov	r1, r3
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 fb2f 	bl	8008ea8 <xQueueGiveFromISR>
 800884a:	4603      	mov	r3, r0
 800884c:	2b01      	cmp	r3, #1
 800884e:	d001      	beq.n	8008854 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008850:	23ff      	movs	r3, #255	@ 0xff
 8008852:	e017      	b.n	8008884 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d013      	beq.n	8008882 <osSemaphoreRelease+0x5e>
 800885a:	4b0c      	ldr	r3, [pc, #48]	@ (800888c <osSemaphoreRelease+0x68>)
 800885c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008860:	601a      	str	r2, [r3, #0]
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	e00a      	b.n	8008882 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800886c:	2300      	movs	r3, #0
 800886e:	2200      	movs	r2, #0
 8008870:	2100      	movs	r1, #0
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fa16 	bl	8008ca4 <xQueueGenericSend>
 8008878:	4603      	mov	r3, r0
 800887a:	2b01      	cmp	r3, #1
 800887c:	d001      	beq.n	8008882 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800887e:	23ff      	movs	r3, #255	@ 0xff
 8008880:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008882:	68fb      	ldr	r3, [r7, #12]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	e000ed04 	.word	0xe000ed04

08008890 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008898:	f7ff fecb 	bl	8008632 <inHandlerMode>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80088a2:	2382      	movs	r3, #130	@ 0x82
 80088a4:	e003      	b.n	80088ae <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fd20 	bl	80092ec <vQueueDelete>

  return osOK; 
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80088b6:	b480      	push	{r7}
 80088b8:	b083      	sub	sp, #12
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f103 0208 	add.w	r2, r3, #8
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f04f 32ff 	mov.w	r2, #4294967295
 80088ce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f103 0208 	add.w	r2, r3, #8
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f103 0208 	add.w	r2, r3, #8
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80088ea:	bf00      	nop
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80088f6:	b480      	push	{r7}
 80088f8:	b083      	sub	sp, #12
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	689a      	ldr	r2, [r3, #8]
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	683a      	ldr	r2, [r7, #0]
 800893a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	1c5a      	adds	r2, r3, #1
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	601a      	str	r2, [r3, #0]
}
 800894c:	bf00      	nop
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800896e:	d103      	bne.n	8008978 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	60fb      	str	r3, [r7, #12]
 8008976:	e00c      	b.n	8008992 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	3308      	adds	r3, #8
 800897c:	60fb      	str	r3, [r7, #12]
 800897e:	e002      	b.n	8008986 <vListInsert+0x2e>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	60fb      	str	r3, [r7, #12]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	429a      	cmp	r2, r3
 8008990:	d2f6      	bcs.n	8008980 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	685a      	ldr	r2, [r3, #4]
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	683a      	ldr	r2, [r7, #0]
 80089a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	1c5a      	adds	r2, r3, #1
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	601a      	str	r2, [r3, #0]
}
 80089be:	bf00      	nop
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80089ca:	b480      	push	{r7}
 80089cc:	b085      	sub	sp, #20
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	6892      	ldr	r2, [r2, #8]
 80089e0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	6852      	ldr	r2, [r2, #4]
 80089ea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d103      	bne.n	80089fe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	689a      	ldr	r2, [r3, #8]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	1e5a      	subs	r2, r3, #1
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3714      	adds	r7, #20
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
	...

08008a20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10b      	bne.n	8008a4c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a38:	f383 8811 	msr	BASEPRI, r3
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008a46:	bf00      	nop
 8008a48:	bf00      	nop
 8008a4a:	e7fd      	b.n	8008a48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008a4c:	f001 ff24 	bl	800a898 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a58:	68f9      	ldr	r1, [r7, #12]
 8008a5a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008a5c:	fb01 f303 	mul.w	r3, r1, r3
 8008a60:	441a      	add	r2, r3
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	68f9      	ldr	r1, [r7, #12]
 8008a80:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008a82:	fb01 f303 	mul.w	r3, r1, r3
 8008a86:	441a      	add	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	22ff      	movs	r2, #255	@ 0xff
 8008a90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	22ff      	movs	r2, #255	@ 0xff
 8008a98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d114      	bne.n	8008acc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d01a      	beq.n	8008ae0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	3310      	adds	r3, #16
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f001 f9d2 	bl	8009e58 <xTaskRemoveFromEventList>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d012      	beq.n	8008ae0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008aba:	4b0d      	ldr	r3, [pc, #52]	@ (8008af0 <xQueueGenericReset+0xd0>)
 8008abc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ac0:	601a      	str	r2, [r3, #0]
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	e009      	b.n	8008ae0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	3310      	adds	r3, #16
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7ff fef0 	bl	80088b6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	3324      	adds	r3, #36	@ 0x24
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7ff feeb 	bl	80088b6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008ae0:	f001 ff0c 	bl	800a8fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008ae4:	2301      	movs	r3, #1
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	e000ed04 	.word	0xe000ed04

08008af4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b08e      	sub	sp, #56	@ 0x38
 8008af8:	af02      	add	r7, sp, #8
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
 8008b00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10b      	bne.n	8008b20 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008b1a:	bf00      	nop
 8008b1c:	bf00      	nop
 8008b1e:	e7fd      	b.n	8008b1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d10b      	bne.n	8008b3e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008b38:	bf00      	nop
 8008b3a:	bf00      	nop
 8008b3c:	e7fd      	b.n	8008b3a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d002      	beq.n	8008b4a <xQueueGenericCreateStatic+0x56>
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d001      	beq.n	8008b4e <xQueueGenericCreateStatic+0x5a>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e000      	b.n	8008b50 <xQueueGenericCreateStatic+0x5c>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10b      	bne.n	8008b6c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b58:	f383 8811 	msr	BASEPRI, r3
 8008b5c:	f3bf 8f6f 	isb	sy
 8008b60:	f3bf 8f4f 	dsb	sy
 8008b64:	623b      	str	r3, [r7, #32]
}
 8008b66:	bf00      	nop
 8008b68:	bf00      	nop
 8008b6a:	e7fd      	b.n	8008b68 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d102      	bne.n	8008b78 <xQueueGenericCreateStatic+0x84>
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d101      	bne.n	8008b7c <xQueueGenericCreateStatic+0x88>
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e000      	b.n	8008b7e <xQueueGenericCreateStatic+0x8a>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10b      	bne.n	8008b9a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	61fb      	str	r3, [r7, #28]
}
 8008b94:	bf00      	nop
 8008b96:	bf00      	nop
 8008b98:	e7fd      	b.n	8008b96 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008b9a:	2348      	movs	r3, #72	@ 0x48
 8008b9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	2b48      	cmp	r3, #72	@ 0x48
 8008ba2:	d00b      	beq.n	8008bbc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba8:	f383 8811 	msr	BASEPRI, r3
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	61bb      	str	r3, [r7, #24]
}
 8008bb6:	bf00      	nop
 8008bb8:	bf00      	nop
 8008bba:	e7fd      	b.n	8008bb8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008bbc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00d      	beq.n	8008be4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008bd0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	68b9      	ldr	r1, [r7, #8]
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f000 f840 	bl	8008c64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3730      	adds	r7, #48	@ 0x30
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b08a      	sub	sp, #40	@ 0x28
 8008bf2:	af02      	add	r7, sp, #8
 8008bf4:	60f8      	str	r0, [r7, #12]
 8008bf6:	60b9      	str	r1, [r7, #8]
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10b      	bne.n	8008c1a <xQueueGenericCreate+0x2c>
	__asm volatile
 8008c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c06:	f383 8811 	msr	BASEPRI, r3
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	613b      	str	r3, [r7, #16]
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop
 8008c18:	e7fd      	b.n	8008c16 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	fb02 f303 	mul.w	r3, r2, r3
 8008c22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	3348      	adds	r3, #72	@ 0x48
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f001 ff57 	bl	800aadc <pvPortMalloc>
 8008c2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d011      	beq.n	8008c5a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	3348      	adds	r3, #72	@ 0x48
 8008c3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c48:	79fa      	ldrb	r2, [r7, #7]
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	4613      	mov	r3, r2
 8008c50:	697a      	ldr	r2, [r7, #20]
 8008c52:	68b9      	ldr	r1, [r7, #8]
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f000 f805 	bl	8008c64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c5a:	69bb      	ldr	r3, [r7, #24]
	}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3720      	adds	r7, #32
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
 8008c70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d103      	bne.n	8008c80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	69ba      	ldr	r2, [r7, #24]
 8008c7c:	601a      	str	r2, [r3, #0]
 8008c7e:	e002      	b.n	8008c86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008c92:	2101      	movs	r1, #1
 8008c94:	69b8      	ldr	r0, [r7, #24]
 8008c96:	f7ff fec3 	bl	8008a20 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008c9a:	bf00      	nop
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
	...

08008ca4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b08e      	sub	sp, #56	@ 0x38
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
 8008cb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10b      	bne.n	8008cd8 <xQueueGenericSend+0x34>
	__asm volatile
 8008cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008cd2:	bf00      	nop
 8008cd4:	bf00      	nop
 8008cd6:	e7fd      	b.n	8008cd4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d103      	bne.n	8008ce6 <xQueueGenericSend+0x42>
 8008cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d101      	bne.n	8008cea <xQueueGenericSend+0x46>
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e000      	b.n	8008cec <xQueueGenericSend+0x48>
 8008cea:	2300      	movs	r3, #0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d10b      	bne.n	8008d08 <xQueueGenericSend+0x64>
	__asm volatile
 8008cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008d02:	bf00      	nop
 8008d04:	bf00      	nop
 8008d06:	e7fd      	b.n	8008d04 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d103      	bne.n	8008d16 <xQueueGenericSend+0x72>
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d101      	bne.n	8008d1a <xQueueGenericSend+0x76>
 8008d16:	2301      	movs	r3, #1
 8008d18:	e000      	b.n	8008d1c <xQueueGenericSend+0x78>
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10b      	bne.n	8008d38 <xQueueGenericSend+0x94>
	__asm volatile
 8008d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d24:	f383 8811 	msr	BASEPRI, r3
 8008d28:	f3bf 8f6f 	isb	sy
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	623b      	str	r3, [r7, #32]
}
 8008d32:	bf00      	nop
 8008d34:	bf00      	nop
 8008d36:	e7fd      	b.n	8008d34 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d38:	f001 fa54 	bl	800a1e4 <xTaskGetSchedulerState>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d102      	bne.n	8008d48 <xQueueGenericSend+0xa4>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d101      	bne.n	8008d4c <xQueueGenericSend+0xa8>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e000      	b.n	8008d4e <xQueueGenericSend+0xaa>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10b      	bne.n	8008d6a <xQueueGenericSend+0xc6>
	__asm volatile
 8008d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d56:	f383 8811 	msr	BASEPRI, r3
 8008d5a:	f3bf 8f6f 	isb	sy
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	61fb      	str	r3, [r7, #28]
}
 8008d64:	bf00      	nop
 8008d66:	bf00      	nop
 8008d68:	e7fd      	b.n	8008d66 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d6a:	f001 fd95 	bl	800a898 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d302      	bcc.n	8008d80 <xQueueGenericSend+0xdc>
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d129      	bne.n	8008dd4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d80:	683a      	ldr	r2, [r7, #0]
 8008d82:	68b9      	ldr	r1, [r7, #8]
 8008d84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d86:	f000 faed 	bl	8009364 <prvCopyDataToQueue>
 8008d8a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d010      	beq.n	8008db6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d96:	3324      	adds	r3, #36	@ 0x24
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f001 f85d 	bl	8009e58 <xTaskRemoveFromEventList>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d013      	beq.n	8008dcc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008da4:	4b3f      	ldr	r3, [pc, #252]	@ (8008ea4 <xQueueGenericSend+0x200>)
 8008da6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008daa:	601a      	str	r2, [r3, #0]
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	e00a      	b.n	8008dcc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d007      	beq.n	8008dcc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008dbc:	4b39      	ldr	r3, [pc, #228]	@ (8008ea4 <xQueueGenericSend+0x200>)
 8008dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008dcc:	f001 fd96 	bl	800a8fc <vPortExitCritical>
				return pdPASS;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e063      	b.n	8008e9c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d103      	bne.n	8008de2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008dda:	f001 fd8f 	bl	800a8fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008dde:	2300      	movs	r3, #0
 8008de0:	e05c      	b.n	8008e9c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d106      	bne.n	8008df6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008de8:	f107 0314 	add.w	r3, r7, #20
 8008dec:	4618      	mov	r0, r3
 8008dee:	f001 f897 	bl	8009f20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008df2:	2301      	movs	r3, #1
 8008df4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008df6:	f001 fd81 	bl	800a8fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008dfa:	f000 fe3d 	bl	8009a78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dfe:	f001 fd4b 	bl	800a898 <vPortEnterCritical>
 8008e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e08:	b25b      	sxtb	r3, r3
 8008e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0e:	d103      	bne.n	8008e18 <xQueueGenericSend+0x174>
 8008e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e12:	2200      	movs	r2, #0
 8008e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e1e:	b25b      	sxtb	r3, r3
 8008e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e24:	d103      	bne.n	8008e2e <xQueueGenericSend+0x18a>
 8008e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e2e:	f001 fd65 	bl	800a8fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e32:	1d3a      	adds	r2, r7, #4
 8008e34:	f107 0314 	add.w	r3, r7, #20
 8008e38:	4611      	mov	r1, r2
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f001 f886 	bl	8009f4c <xTaskCheckForTimeOut>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d124      	bne.n	8008e90 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008e46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e48:	f000 fb84 	bl	8009554 <prvIsQueueFull>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d018      	beq.n	8008e84 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e54:	3310      	adds	r3, #16
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	4611      	mov	r1, r2
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 ffd6 	bl	8009e0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008e60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e62:	f000 fb0f 	bl	8009484 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008e66:	f000 fe15 	bl	8009a94 <xTaskResumeAll>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f47f af7c 	bne.w	8008d6a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008e72:	4b0c      	ldr	r3, [pc, #48]	@ (8008ea4 <xQueueGenericSend+0x200>)
 8008e74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e78:	601a      	str	r2, [r3, #0]
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	e772      	b.n	8008d6a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008e84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e86:	f000 fafd 	bl	8009484 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e8a:	f000 fe03 	bl	8009a94 <xTaskResumeAll>
 8008e8e:	e76c      	b.n	8008d6a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008e90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e92:	f000 faf7 	bl	8009484 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e96:	f000 fdfd 	bl	8009a94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008e9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3738      	adds	r7, #56	@ 0x38
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	e000ed04 	.word	0xe000ed04

08008ea8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b08e      	sub	sp, #56	@ 0x38
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10b      	bne.n	8008ed4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec0:	f383 8811 	msr	BASEPRI, r3
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	623b      	str	r3, [r7, #32]
}
 8008ece:	bf00      	nop
 8008ed0:	bf00      	nop
 8008ed2:	e7fd      	b.n	8008ed0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00b      	beq.n	8008ef4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee0:	f383 8811 	msr	BASEPRI, r3
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	61fb      	str	r3, [r7, #28]
}
 8008eee:	bf00      	nop
 8008ef0:	bf00      	nop
 8008ef2:	e7fd      	b.n	8008ef0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d103      	bne.n	8008f04 <xQueueGiveFromISR+0x5c>
 8008efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d101      	bne.n	8008f08 <xQueueGiveFromISR+0x60>
 8008f04:	2301      	movs	r3, #1
 8008f06:	e000      	b.n	8008f0a <xQueueGiveFromISR+0x62>
 8008f08:	2300      	movs	r3, #0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d10b      	bne.n	8008f26 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	61bb      	str	r3, [r7, #24]
}
 8008f20:	bf00      	nop
 8008f22:	bf00      	nop
 8008f24:	e7fd      	b.n	8008f22 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f26:	f001 fd97 	bl	800aa58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008f2a:	f3ef 8211 	mrs	r2, BASEPRI
 8008f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	617a      	str	r2, [r7, #20]
 8008f40:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008f42:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f4a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d22b      	bcs.n	8008fae <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f62:	1c5a      	adds	r2, r3, #1
 8008f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f66:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008f68:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f70:	d112      	bne.n	8008f98 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d016      	beq.n	8008fa8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7c:	3324      	adds	r3, #36	@ 0x24
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f000 ff6a 	bl	8009e58 <xTaskRemoveFromEventList>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00e      	beq.n	8008fa8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00b      	beq.n	8008fa8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	2201      	movs	r2, #1
 8008f94:	601a      	str	r2, [r3, #0]
 8008f96:	e007      	b.n	8008fa8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	b25a      	sxtb	r2, r3
 8008fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fac:	e001      	b.n	8008fb2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008fbc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3738      	adds	r7, #56	@ 0x38
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08e      	sub	sp, #56	@ 0x38
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10b      	bne.n	8008ffc <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe8:	f383 8811 	msr	BASEPRI, r3
 8008fec:	f3bf 8f6f 	isb	sy
 8008ff0:	f3bf 8f4f 	dsb	sy
 8008ff4:	623b      	str	r3, [r7, #32]
}
 8008ff6:	bf00      	nop
 8008ff8:	bf00      	nop
 8008ffa:	e7fd      	b.n	8008ff8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00b      	beq.n	800901c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	61fb      	str	r3, [r7, #28]
}
 8009016:	bf00      	nop
 8009018:	bf00      	nop
 800901a:	e7fd      	b.n	8009018 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800901c:	f001 f8e2 	bl	800a1e4 <xTaskGetSchedulerState>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d102      	bne.n	800902c <xQueueSemaphoreTake+0x64>
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d101      	bne.n	8009030 <xQueueSemaphoreTake+0x68>
 800902c:	2301      	movs	r3, #1
 800902e:	e000      	b.n	8009032 <xQueueSemaphoreTake+0x6a>
 8009030:	2300      	movs	r3, #0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d10b      	bne.n	800904e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8009036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800903a:	f383 8811 	msr	BASEPRI, r3
 800903e:	f3bf 8f6f 	isb	sy
 8009042:	f3bf 8f4f 	dsb	sy
 8009046:	61bb      	str	r3, [r7, #24]
}
 8009048:	bf00      	nop
 800904a:	bf00      	nop
 800904c:	e7fd      	b.n	800904a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800904e:	f001 fc23 	bl	800a898 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009056:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800905a:	2b00      	cmp	r3, #0
 800905c:	d024      	beq.n	80090a8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800905e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009060:	1e5a      	subs	r2, r3, #1
 8009062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009064:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d104      	bne.n	8009078 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800906e:	f001 fa65 	bl	800a53c <pvTaskIncrementMutexHeldCount>
 8009072:	4602      	mov	r2, r0
 8009074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009076:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00f      	beq.n	80090a0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009082:	3310      	adds	r3, #16
 8009084:	4618      	mov	r0, r3
 8009086:	f000 fee7 	bl	8009e58 <xTaskRemoveFromEventList>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d007      	beq.n	80090a0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009090:	4b54      	ldr	r3, [pc, #336]	@ (80091e4 <xQueueSemaphoreTake+0x21c>)
 8009092:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009096:	601a      	str	r2, [r3, #0]
 8009098:	f3bf 8f4f 	dsb	sy
 800909c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80090a0:	f001 fc2c 	bl	800a8fc <vPortExitCritical>
				return pdPASS;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e098      	b.n	80091da <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d112      	bne.n	80090d4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80090ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00b      	beq.n	80090cc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80090b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b8:	f383 8811 	msr	BASEPRI, r3
 80090bc:	f3bf 8f6f 	isb	sy
 80090c0:	f3bf 8f4f 	dsb	sy
 80090c4:	617b      	str	r3, [r7, #20]
}
 80090c6:	bf00      	nop
 80090c8:	bf00      	nop
 80090ca:	e7fd      	b.n	80090c8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80090cc:	f001 fc16 	bl	800a8fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80090d0:	2300      	movs	r3, #0
 80090d2:	e082      	b.n	80091da <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d106      	bne.n	80090e8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090da:	f107 030c 	add.w	r3, r7, #12
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 ff1e 	bl	8009f20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090e4:	2301      	movs	r3, #1
 80090e6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090e8:	f001 fc08 	bl	800a8fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090ec:	f000 fcc4 	bl	8009a78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090f0:	f001 fbd2 	bl	800a898 <vPortEnterCritical>
 80090f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80090fa:	b25b      	sxtb	r3, r3
 80090fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009100:	d103      	bne.n	800910a <xQueueSemaphoreTake+0x142>
 8009102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009104:	2200      	movs	r2, #0
 8009106:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800910a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800910c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009110:	b25b      	sxtb	r3, r3
 8009112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009116:	d103      	bne.n	8009120 <xQueueSemaphoreTake+0x158>
 8009118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800911a:	2200      	movs	r2, #0
 800911c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009120:	f001 fbec 	bl	800a8fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009124:	463a      	mov	r2, r7
 8009126:	f107 030c 	add.w	r3, r7, #12
 800912a:	4611      	mov	r1, r2
 800912c:	4618      	mov	r0, r3
 800912e:	f000 ff0d 	bl	8009f4c <xTaskCheckForTimeOut>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d132      	bne.n	800919e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009138:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800913a:	f000 f9f5 	bl	8009528 <prvIsQueueEmpty>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d026      	beq.n	8009192 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d109      	bne.n	8009160 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800914c:	f001 fba4 	bl	800a898 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	4618      	mov	r0, r3
 8009156:	f001 f863 	bl	800a220 <xTaskPriorityInherit>
 800915a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800915c:	f001 fbce 	bl	800a8fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009162:	3324      	adds	r3, #36	@ 0x24
 8009164:	683a      	ldr	r2, [r7, #0]
 8009166:	4611      	mov	r1, r2
 8009168:	4618      	mov	r0, r3
 800916a:	f000 fe4f 	bl	8009e0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800916e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009170:	f000 f988 	bl	8009484 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009174:	f000 fc8e 	bl	8009a94 <xTaskResumeAll>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	f47f af67 	bne.w	800904e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009180:	4b18      	ldr	r3, [pc, #96]	@ (80091e4 <xQueueSemaphoreTake+0x21c>)
 8009182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009186:	601a      	str	r2, [r3, #0]
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	e75d      	b.n	800904e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009192:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009194:	f000 f976 	bl	8009484 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009198:	f000 fc7c 	bl	8009a94 <xTaskResumeAll>
 800919c:	e757      	b.n	800904e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800919e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80091a0:	f000 f970 	bl	8009484 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091a4:	f000 fc76 	bl	8009a94 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80091aa:	f000 f9bd 	bl	8009528 <prvIsQueueEmpty>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f43f af4c 	beq.w	800904e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80091b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00d      	beq.n	80091d8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80091bc:	f001 fb6c 	bl	800a898 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80091c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80091c2:	f000 f8b7 	bl	8009334 <prvGetDisinheritPriorityAfterTimeout>
 80091c6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80091c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80091ce:	4618      	mov	r0, r3
 80091d0:	f001 f924 	bl	800a41c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80091d4:	f001 fb92 	bl	800a8fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80091d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3738      	adds	r7, #56	@ 0x38
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	e000ed04 	.word	0xe000ed04

080091e8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b08e      	sub	sp, #56	@ 0x38
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80091f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10b      	bne.n	8009216 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80091fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	623b      	str	r3, [r7, #32]
}
 8009210:	bf00      	nop
 8009212:	bf00      	nop
 8009214:	e7fd      	b.n	8009212 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d103      	bne.n	8009224 <xQueueReceiveFromISR+0x3c>
 800921c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009220:	2b00      	cmp	r3, #0
 8009222:	d101      	bne.n	8009228 <xQueueReceiveFromISR+0x40>
 8009224:	2301      	movs	r3, #1
 8009226:	e000      	b.n	800922a <xQueueReceiveFromISR+0x42>
 8009228:	2300      	movs	r3, #0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10b      	bne.n	8009246 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	61fb      	str	r3, [r7, #28]
}
 8009240:	bf00      	nop
 8009242:	bf00      	nop
 8009244:	e7fd      	b.n	8009242 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009246:	f001 fc07 	bl	800aa58 <vPortValidateInterruptPriority>
	__asm volatile
 800924a:	f3ef 8211 	mrs	r2, BASEPRI
 800924e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009252:	f383 8811 	msr	BASEPRI, r3
 8009256:	f3bf 8f6f 	isb	sy
 800925a:	f3bf 8f4f 	dsb	sy
 800925e:	61ba      	str	r2, [r7, #24]
 8009260:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009262:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009264:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800926a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800926c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800926e:	2b00      	cmp	r3, #0
 8009270:	d02f      	beq.n	80092d2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009274:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009278:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800927c:	68b9      	ldr	r1, [r7, #8]
 800927e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009280:	f000 f8da 	bl	8009438 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009286:	1e5a      	subs	r2, r3, #1
 8009288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800928a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800928c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009294:	d112      	bne.n	80092bc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d016      	beq.n	80092cc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800929e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a0:	3310      	adds	r3, #16
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 fdd8 	bl	8009e58 <xTaskRemoveFromEventList>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00e      	beq.n	80092cc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00b      	beq.n	80092cc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	601a      	str	r2, [r3, #0]
 80092ba:	e007      	b.n	80092cc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80092bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092c0:	3301      	adds	r3, #1
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	b25a      	sxtb	r2, r3
 80092c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80092cc:	2301      	movs	r3, #1
 80092ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80092d0:	e001      	b.n	80092d6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80092d2:	2300      	movs	r3, #0
 80092d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80092d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	f383 8811 	msr	BASEPRI, r3
}
 80092e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3738      	adds	r7, #56	@ 0x38
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d10b      	bne.n	8009316 <vQueueDelete+0x2a>
	__asm volatile
 80092fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	60bb      	str	r3, [r7, #8]
}
 8009310:	bf00      	nop
 8009312:	bf00      	nop
 8009314:	e7fd      	b.n	8009312 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f000 f934 	bl	8009584 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009322:	2b00      	cmp	r3, #0
 8009324:	d102      	bne.n	800932c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f001 fca6 	bl	800ac78 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800932c:	bf00      	nop
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009340:	2b00      	cmp	r3, #0
 8009342:	d006      	beq.n	8009352 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f1c3 0307 	rsb	r3, r3, #7
 800934e:	60fb      	str	r3, [r7, #12]
 8009350:	e001      	b.n	8009356 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009352:	2300      	movs	r3, #0
 8009354:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009356:	68fb      	ldr	r3, [r7, #12]
	}
 8009358:	4618      	mov	r0, r3
 800935a:	3714      	adds	r7, #20
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009370:	2300      	movs	r3, #0
 8009372:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009378:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800937e:	2b00      	cmp	r3, #0
 8009380:	d10d      	bne.n	800939e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d14d      	bne.n	8009426 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	4618      	mov	r0, r3
 8009390:	f000 ffbc 	bl	800a30c <xTaskPriorityDisinherit>
 8009394:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	609a      	str	r2, [r3, #8]
 800939c:	e043      	b.n	8009426 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d119      	bne.n	80093d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6858      	ldr	r0, [r3, #4]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ac:	461a      	mov	r2, r3
 80093ae:	68b9      	ldr	r1, [r7, #8]
 80093b0:	f002 fe1d 	bl	800bfee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	685a      	ldr	r2, [r3, #4]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093bc:	441a      	add	r2, r3
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	685a      	ldr	r2, [r3, #4]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d32b      	bcc.n	8009426 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	605a      	str	r2, [r3, #4]
 80093d6:	e026      	b.n	8009426 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	68d8      	ldr	r0, [r3, #12]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093e0:	461a      	mov	r2, r3
 80093e2:	68b9      	ldr	r1, [r7, #8]
 80093e4:	f002 fe03 	bl	800bfee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	68da      	ldr	r2, [r3, #12]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093f0:	425b      	negs	r3, r3
 80093f2:	441a      	add	r2, r3
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	68da      	ldr	r2, [r3, #12]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	429a      	cmp	r2, r3
 8009402:	d207      	bcs.n	8009414 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	689a      	ldr	r2, [r3, #8]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800940c:	425b      	negs	r3, r3
 800940e:	441a      	add	r2, r3
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2b02      	cmp	r3, #2
 8009418:	d105      	bne.n	8009426 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d002      	beq.n	8009426 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	3b01      	subs	r3, #1
 8009424:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	1c5a      	adds	r2, r3, #1
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800942e:	697b      	ldr	r3, [r7, #20]
}
 8009430:	4618      	mov	r0, r3
 8009432:	3718      	adds	r7, #24
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009446:	2b00      	cmp	r3, #0
 8009448:	d018      	beq.n	800947c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	68da      	ldr	r2, [r3, #12]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009452:	441a      	add	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	68da      	ldr	r2, [r3, #12]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	429a      	cmp	r2, r3
 8009462:	d303      	bcc.n	800946c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	68d9      	ldr	r1, [r3, #12]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009474:	461a      	mov	r2, r3
 8009476:	6838      	ldr	r0, [r7, #0]
 8009478:	f002 fdb9 	bl	800bfee <memcpy>
	}
}
 800947c:	bf00      	nop
 800947e:	3708      	adds	r7, #8
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800948c:	f001 fa04 	bl	800a898 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009496:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009498:	e011      	b.n	80094be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d012      	beq.n	80094c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	3324      	adds	r3, #36	@ 0x24
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 fcd6 	bl	8009e58 <xTaskRemoveFromEventList>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d001      	beq.n	80094b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80094b2:	f000 fdaf 	bl	800a014 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
 80094b8:	3b01      	subs	r3, #1
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	dce9      	bgt.n	800949a <prvUnlockQueue+0x16>
 80094c6:	e000      	b.n	80094ca <prvUnlockQueue+0x46>
					break;
 80094c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	22ff      	movs	r2, #255	@ 0xff
 80094ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80094d2:	f001 fa13 	bl	800a8fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80094d6:	f001 f9df 	bl	800a898 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80094e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094e2:	e011      	b.n	8009508 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d012      	beq.n	8009512 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	3310      	adds	r3, #16
 80094f0:	4618      	mov	r0, r3
 80094f2:	f000 fcb1 	bl	8009e58 <xTaskRemoveFromEventList>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d001      	beq.n	8009500 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80094fc:	f000 fd8a 	bl	800a014 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009500:	7bbb      	ldrb	r3, [r7, #14]
 8009502:	3b01      	subs	r3, #1
 8009504:	b2db      	uxtb	r3, r3
 8009506:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800950c:	2b00      	cmp	r3, #0
 800950e:	dce9      	bgt.n	80094e4 <prvUnlockQueue+0x60>
 8009510:	e000      	b.n	8009514 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009512:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	22ff      	movs	r2, #255	@ 0xff
 8009518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800951c:	f001 f9ee 	bl	800a8fc <vPortExitCritical>
}
 8009520:	bf00      	nop
 8009522:	3710      	adds	r7, #16
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009530:	f001 f9b2 	bl	800a898 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009538:	2b00      	cmp	r3, #0
 800953a:	d102      	bne.n	8009542 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800953c:	2301      	movs	r3, #1
 800953e:	60fb      	str	r3, [r7, #12]
 8009540:	e001      	b.n	8009546 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009542:	2300      	movs	r3, #0
 8009544:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009546:	f001 f9d9 	bl	800a8fc <vPortExitCritical>

	return xReturn;
 800954a:	68fb      	ldr	r3, [r7, #12]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800955c:	f001 f99c 	bl	800a898 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009568:	429a      	cmp	r2, r3
 800956a:	d102      	bne.n	8009572 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800956c:	2301      	movs	r3, #1
 800956e:	60fb      	str	r3, [r7, #12]
 8009570:	e001      	b.n	8009576 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009572:	2300      	movs	r3, #0
 8009574:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009576:	f001 f9c1 	bl	800a8fc <vPortExitCritical>

	return xReturn;
 800957a:	68fb      	ldr	r3, [r7, #12]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800958c:	2300      	movs	r3, #0
 800958e:	60fb      	str	r3, [r7, #12]
 8009590:	e016      	b.n	80095c0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009592:	4a10      	ldr	r2, [pc, #64]	@ (80095d4 <vQueueUnregisterQueue+0x50>)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	00db      	lsls	r3, r3, #3
 8009598:	4413      	add	r3, r2
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d10b      	bne.n	80095ba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80095a2:	4a0c      	ldr	r2, [pc, #48]	@ (80095d4 <vQueueUnregisterQueue+0x50>)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2100      	movs	r1, #0
 80095a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80095ac:	4a09      	ldr	r2, [pc, #36]	@ (80095d4 <vQueueUnregisterQueue+0x50>)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	00db      	lsls	r3, r3, #3
 80095b2:	4413      	add	r3, r2
 80095b4:	2200      	movs	r2, #0
 80095b6:	605a      	str	r2, [r3, #4]
				break;
 80095b8:	e006      	b.n	80095c8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	3301      	adds	r3, #1
 80095be:	60fb      	str	r3, [r7, #12]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2b07      	cmp	r3, #7
 80095c4:	d9e5      	bls.n	8009592 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80095c6:	bf00      	nop
 80095c8:	bf00      	nop
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr
 80095d4:	20000b18 	.word	0x20000b18

080095d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b08e      	sub	sp, #56	@ 0x38
 80095dc:	af04      	add	r7, sp, #16
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
 80095e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80095e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10b      	bne.n	8009604 <xTaskCreateStatic+0x2c>
	__asm volatile
 80095ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f0:	f383 8811 	msr	BASEPRI, r3
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	623b      	str	r3, [r7, #32]
}
 80095fe:	bf00      	nop
 8009600:	bf00      	nop
 8009602:	e7fd      	b.n	8009600 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10b      	bne.n	8009622 <xTaskCreateStatic+0x4a>
	__asm volatile
 800960a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800960e:	f383 8811 	msr	BASEPRI, r3
 8009612:	f3bf 8f6f 	isb	sy
 8009616:	f3bf 8f4f 	dsb	sy
 800961a:	61fb      	str	r3, [r7, #28]
}
 800961c:	bf00      	nop
 800961e:	bf00      	nop
 8009620:	e7fd      	b.n	800961e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009622:	23a0      	movs	r3, #160	@ 0xa0
 8009624:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	2ba0      	cmp	r3, #160	@ 0xa0
 800962a:	d00b      	beq.n	8009644 <xTaskCreateStatic+0x6c>
	__asm volatile
 800962c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009630:	f383 8811 	msr	BASEPRI, r3
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	f3bf 8f4f 	dsb	sy
 800963c:	61bb      	str	r3, [r7, #24]
}
 800963e:	bf00      	nop
 8009640:	bf00      	nop
 8009642:	e7fd      	b.n	8009640 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009644:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009648:	2b00      	cmp	r3, #0
 800964a:	d01e      	beq.n	800968a <xTaskCreateStatic+0xb2>
 800964c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800964e:	2b00      	cmp	r3, #0
 8009650:	d01b      	beq.n	800968a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009654:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009658:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800965a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800965c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800965e:	2202      	movs	r2, #2
 8009660:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009664:	2300      	movs	r3, #0
 8009666:	9303      	str	r3, [sp, #12]
 8009668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966a:	9302      	str	r3, [sp, #8]
 800966c:	f107 0314 	add.w	r3, r7, #20
 8009670:	9301      	str	r3, [sp, #4]
 8009672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009674:	9300      	str	r3, [sp, #0]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	68b9      	ldr	r1, [r7, #8]
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f000 f851 	bl	8009724 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009682:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009684:	f000 f8ee 	bl	8009864 <prvAddNewTaskToReadyList>
 8009688:	e001      	b.n	800968e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800968a:	2300      	movs	r3, #0
 800968c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800968e:	697b      	ldr	r3, [r7, #20]
	}
 8009690:	4618      	mov	r0, r3
 8009692:	3728      	adds	r7, #40	@ 0x28
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009698:	b580      	push	{r7, lr}
 800969a:	b08c      	sub	sp, #48	@ 0x30
 800969c:	af04      	add	r7, sp, #16
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	603b      	str	r3, [r7, #0]
 80096a4:	4613      	mov	r3, r2
 80096a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80096a8:	88fb      	ldrh	r3, [r7, #6]
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4618      	mov	r0, r3
 80096ae:	f001 fa15 	bl	800aadc <pvPortMalloc>
 80096b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00e      	beq.n	80096d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80096ba:	20a0      	movs	r0, #160	@ 0xa0
 80096bc:	f001 fa0e 	bl	800aadc <pvPortMalloc>
 80096c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d003      	beq.n	80096d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	697a      	ldr	r2, [r7, #20]
 80096cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80096ce:	e005      	b.n	80096dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80096d0:	6978      	ldr	r0, [r7, #20]
 80096d2:	f001 fad1 	bl	800ac78 <vPortFree>
 80096d6:	e001      	b.n	80096dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80096d8:	2300      	movs	r3, #0
 80096da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d017      	beq.n	8009712 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80096ea:	88fa      	ldrh	r2, [r7, #6]
 80096ec:	2300      	movs	r3, #0
 80096ee:	9303      	str	r3, [sp, #12]
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	9302      	str	r3, [sp, #8]
 80096f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f6:	9301      	str	r3, [sp, #4]
 80096f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096fa:	9300      	str	r3, [sp, #0]
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	68b9      	ldr	r1, [r7, #8]
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f000 f80f 	bl	8009724 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009706:	69f8      	ldr	r0, [r7, #28]
 8009708:	f000 f8ac 	bl	8009864 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800970c:	2301      	movs	r3, #1
 800970e:	61bb      	str	r3, [r7, #24]
 8009710:	e002      	b.n	8009718 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009712:	f04f 33ff 	mov.w	r3, #4294967295
 8009716:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009718:	69bb      	ldr	r3, [r7, #24]
	}
 800971a:	4618      	mov	r0, r3
 800971c:	3720      	adds	r7, #32
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
	...

08009724 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b088      	sub	sp, #32
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]
 8009730:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009734:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800973c:	3b01      	subs	r3, #1
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	4413      	add	r3, r2
 8009742:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	f023 0307 	bic.w	r3, r3, #7
 800974a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	f003 0307 	and.w	r3, r3, #7
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00b      	beq.n	800976e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8009756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800975a:	f383 8811 	msr	BASEPRI, r3
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	f3bf 8f4f 	dsb	sy
 8009766:	617b      	str	r3, [r7, #20]
}
 8009768:	bf00      	nop
 800976a:	bf00      	nop
 800976c:	e7fd      	b.n	800976a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d01f      	beq.n	80097b4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009774:	2300      	movs	r3, #0
 8009776:	61fb      	str	r3, [r7, #28]
 8009778:	e012      	b.n	80097a0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	4413      	add	r3, r2
 8009780:	7819      	ldrb	r1, [r3, #0]
 8009782:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	4413      	add	r3, r2
 8009788:	3334      	adds	r3, #52	@ 0x34
 800978a:	460a      	mov	r2, r1
 800978c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	4413      	add	r3, r2
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d006      	beq.n	80097a8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	3301      	adds	r3, #1
 800979e:	61fb      	str	r3, [r7, #28]
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	2b0f      	cmp	r3, #15
 80097a4:	d9e9      	bls.n	800977a <prvInitialiseNewTask+0x56>
 80097a6:	e000      	b.n	80097aa <prvInitialiseNewTask+0x86>
			{
				break;
 80097a8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80097aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80097b2:	e003      	b.n	80097bc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80097b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80097bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097be:	2b06      	cmp	r3, #6
 80097c0:	d901      	bls.n	80097c6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80097c2:	2306      	movs	r3, #6
 80097c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80097c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097ca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80097cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097d0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80097d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d4:	2200      	movs	r2, #0
 80097d6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80097d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097da:	3304      	adds	r3, #4
 80097dc:	4618      	mov	r0, r3
 80097de:	f7ff f88a 	bl	80088f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80097e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e4:	3318      	adds	r3, #24
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7ff f885 	bl	80088f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80097ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f4:	f1c3 0207 	rsb	r2, r3, #7
 80097f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80097fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009800:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009804:	2200      	movs	r2, #0
 8009806:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800980a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800980c:	2200      	movs	r2, #0
 800980e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009814:	334c      	adds	r3, #76	@ 0x4c
 8009816:	224c      	movs	r2, #76	@ 0x4c
 8009818:	2100      	movs	r1, #0
 800981a:	4618      	mov	r0, r3
 800981c:	f002 fb11 	bl	800be42 <memset>
 8009820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009822:	4a0d      	ldr	r2, [pc, #52]	@ (8009858 <prvInitialiseNewTask+0x134>)
 8009824:	651a      	str	r2, [r3, #80]	@ 0x50
 8009826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009828:	4a0c      	ldr	r2, [pc, #48]	@ (800985c <prvInitialiseNewTask+0x138>)
 800982a:	655a      	str	r2, [r3, #84]	@ 0x54
 800982c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800982e:	4a0c      	ldr	r2, [pc, #48]	@ (8009860 <prvInitialiseNewTask+0x13c>)
 8009830:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009832:	683a      	ldr	r2, [r7, #0]
 8009834:	68f9      	ldr	r1, [r7, #12]
 8009836:	69b8      	ldr	r0, [r7, #24]
 8009838:	f000 fefa 	bl	800a630 <pxPortInitialiseStack>
 800983c:	4602      	mov	r2, r0
 800983e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009840:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009844:	2b00      	cmp	r3, #0
 8009846:	d002      	beq.n	800984e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800984a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800984c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800984e:	bf00      	nop
 8009850:	3720      	adds	r7, #32
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	200048ac 	.word	0x200048ac
 800985c:	20004914 	.word	0x20004914
 8009860:	2000497c 	.word	0x2000497c

08009864 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800986c:	f001 f814 	bl	800a898 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009870:	4b2a      	ldr	r3, [pc, #168]	@ (800991c <prvAddNewTaskToReadyList+0xb8>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	3301      	adds	r3, #1
 8009876:	4a29      	ldr	r2, [pc, #164]	@ (800991c <prvAddNewTaskToReadyList+0xb8>)
 8009878:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800987a:	4b29      	ldr	r3, [pc, #164]	@ (8009920 <prvAddNewTaskToReadyList+0xbc>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d109      	bne.n	8009896 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009882:	4a27      	ldr	r2, [pc, #156]	@ (8009920 <prvAddNewTaskToReadyList+0xbc>)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009888:	4b24      	ldr	r3, [pc, #144]	@ (800991c <prvAddNewTaskToReadyList+0xb8>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2b01      	cmp	r3, #1
 800988e:	d110      	bne.n	80098b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009890:	f000 fbe4 	bl	800a05c <prvInitialiseTaskLists>
 8009894:	e00d      	b.n	80098b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009896:	4b23      	ldr	r3, [pc, #140]	@ (8009924 <prvAddNewTaskToReadyList+0xc0>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d109      	bne.n	80098b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800989e:	4b20      	ldr	r3, [pc, #128]	@ (8009920 <prvAddNewTaskToReadyList+0xbc>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d802      	bhi.n	80098b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80098ac:	4a1c      	ldr	r2, [pc, #112]	@ (8009920 <prvAddNewTaskToReadyList+0xbc>)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80098b2:	4b1d      	ldr	r3, [pc, #116]	@ (8009928 <prvAddNewTaskToReadyList+0xc4>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	3301      	adds	r3, #1
 80098b8:	4a1b      	ldr	r2, [pc, #108]	@ (8009928 <prvAddNewTaskToReadyList+0xc4>)
 80098ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c0:	2201      	movs	r2, #1
 80098c2:	409a      	lsls	r2, r3
 80098c4:	4b19      	ldr	r3, [pc, #100]	@ (800992c <prvAddNewTaskToReadyList+0xc8>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4313      	orrs	r3, r2
 80098ca:	4a18      	ldr	r2, [pc, #96]	@ (800992c <prvAddNewTaskToReadyList+0xc8>)
 80098cc:	6013      	str	r3, [r2, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098d2:	4613      	mov	r3, r2
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	4413      	add	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	4a15      	ldr	r2, [pc, #84]	@ (8009930 <prvAddNewTaskToReadyList+0xcc>)
 80098dc:	441a      	add	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	3304      	adds	r3, #4
 80098e2:	4619      	mov	r1, r3
 80098e4:	4610      	mov	r0, r2
 80098e6:	f7ff f813 	bl	8008910 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80098ea:	f001 f807 	bl	800a8fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80098ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009924 <prvAddNewTaskToReadyList+0xc0>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00e      	beq.n	8009914 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80098f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009920 <prvAddNewTaskToReadyList+0xbc>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009900:	429a      	cmp	r2, r3
 8009902:	d207      	bcs.n	8009914 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009904:	4b0b      	ldr	r3, [pc, #44]	@ (8009934 <prvAddNewTaskToReadyList+0xd0>)
 8009906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800990a:	601a      	str	r2, [r3, #0]
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009914:	bf00      	nop
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	20000c58 	.word	0x20000c58
 8009920:	20000b58 	.word	0x20000b58
 8009924:	20000c64 	.word	0x20000c64
 8009928:	20000c74 	.word	0x20000c74
 800992c:	20000c60 	.word	0x20000c60
 8009930:	20000b5c 	.word	0x20000b5c
 8009934:	e000ed04 	.word	0xe000ed04

08009938 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009940:	2300      	movs	r3, #0
 8009942:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d018      	beq.n	800997c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800994a:	4b14      	ldr	r3, [pc, #80]	@ (800999c <vTaskDelay+0x64>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00b      	beq.n	800996a <vTaskDelay+0x32>
	__asm volatile
 8009952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009956:	f383 8811 	msr	BASEPRI, r3
 800995a:	f3bf 8f6f 	isb	sy
 800995e:	f3bf 8f4f 	dsb	sy
 8009962:	60bb      	str	r3, [r7, #8]
}
 8009964:	bf00      	nop
 8009966:	bf00      	nop
 8009968:	e7fd      	b.n	8009966 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800996a:	f000 f885 	bl	8009a78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800996e:	2100      	movs	r1, #0
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 fdf7 	bl	800a564 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009976:	f000 f88d 	bl	8009a94 <xTaskResumeAll>
 800997a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d107      	bne.n	8009992 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009982:	4b07      	ldr	r3, [pc, #28]	@ (80099a0 <vTaskDelay+0x68>)
 8009984:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009988:	601a      	str	r2, [r3, #0]
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009992:	bf00      	nop
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	20000c80 	.word	0x20000c80
 80099a0:	e000ed04 	.word	0xe000ed04

080099a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b08a      	sub	sp, #40	@ 0x28
 80099a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80099aa:	2300      	movs	r3, #0
 80099ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80099ae:	2300      	movs	r3, #0
 80099b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80099b2:	463a      	mov	r2, r7
 80099b4:	1d39      	adds	r1, r7, #4
 80099b6:	f107 0308 	add.w	r3, r7, #8
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7f8 fc52 	bl	8002264 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80099c0:	6839      	ldr	r1, [r7, #0]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	68ba      	ldr	r2, [r7, #8]
 80099c6:	9202      	str	r2, [sp, #8]
 80099c8:	9301      	str	r3, [sp, #4]
 80099ca:	2300      	movs	r3, #0
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	2300      	movs	r3, #0
 80099d0:	460a      	mov	r2, r1
 80099d2:	4921      	ldr	r1, [pc, #132]	@ (8009a58 <vTaskStartScheduler+0xb4>)
 80099d4:	4821      	ldr	r0, [pc, #132]	@ (8009a5c <vTaskStartScheduler+0xb8>)
 80099d6:	f7ff fdff 	bl	80095d8 <xTaskCreateStatic>
 80099da:	4603      	mov	r3, r0
 80099dc:	4a20      	ldr	r2, [pc, #128]	@ (8009a60 <vTaskStartScheduler+0xbc>)
 80099de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80099e0:	4b1f      	ldr	r3, [pc, #124]	@ (8009a60 <vTaskStartScheduler+0xbc>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d002      	beq.n	80099ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80099e8:	2301      	movs	r3, #1
 80099ea:	617b      	str	r3, [r7, #20]
 80099ec:	e001      	b.n	80099f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80099ee:	2300      	movs	r3, #0
 80099f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d11b      	bne.n	8009a30 <vTaskStartScheduler+0x8c>
	__asm volatile
 80099f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099fc:	f383 8811 	msr	BASEPRI, r3
 8009a00:	f3bf 8f6f 	isb	sy
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	613b      	str	r3, [r7, #16]
}
 8009a0a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009a0c:	4b15      	ldr	r3, [pc, #84]	@ (8009a64 <vTaskStartScheduler+0xc0>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	334c      	adds	r3, #76	@ 0x4c
 8009a12:	4a15      	ldr	r2, [pc, #84]	@ (8009a68 <vTaskStartScheduler+0xc4>)
 8009a14:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009a16:	4b15      	ldr	r3, [pc, #84]	@ (8009a6c <vTaskStartScheduler+0xc8>)
 8009a18:	f04f 32ff 	mov.w	r2, #4294967295
 8009a1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009a1e:	4b14      	ldr	r3, [pc, #80]	@ (8009a70 <vTaskStartScheduler+0xcc>)
 8009a20:	2201      	movs	r2, #1
 8009a22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009a24:	4b13      	ldr	r3, [pc, #76]	@ (8009a74 <vTaskStartScheduler+0xd0>)
 8009a26:	2200      	movs	r2, #0
 8009a28:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009a2a:	f000 fe91 	bl	800a750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a2e:	e00f      	b.n	8009a50 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a36:	d10b      	bne.n	8009a50 <vTaskStartScheduler+0xac>
	__asm volatile
 8009a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a3c:	f383 8811 	msr	BASEPRI, r3
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	60fb      	str	r3, [r7, #12]
}
 8009a4a:	bf00      	nop
 8009a4c:	bf00      	nop
 8009a4e:	e7fd      	b.n	8009a4c <vTaskStartScheduler+0xa8>
}
 8009a50:	bf00      	nop
 8009a52:	3718      	adds	r7, #24
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	0800faf0 	.word	0x0800faf0
 8009a5c:	0800a02d 	.word	0x0800a02d
 8009a60:	20000c7c 	.word	0x20000c7c
 8009a64:	20000b58 	.word	0x20000b58
 8009a68:	20000034 	.word	0x20000034
 8009a6c:	20000c78 	.word	0x20000c78
 8009a70:	20000c64 	.word	0x20000c64
 8009a74:	20000c5c 	.word	0x20000c5c

08009a78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a78:	b480      	push	{r7}
 8009a7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009a7c:	4b04      	ldr	r3, [pc, #16]	@ (8009a90 <vTaskSuspendAll+0x18>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	3301      	adds	r3, #1
 8009a82:	4a03      	ldr	r2, [pc, #12]	@ (8009a90 <vTaskSuspendAll+0x18>)
 8009a84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a86:	bf00      	nop
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr
 8009a90:	20000c80 	.word	0x20000c80

08009a94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009aa2:	4b42      	ldr	r3, [pc, #264]	@ (8009bac <xTaskResumeAll+0x118>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10b      	bne.n	8009ac2 <xTaskResumeAll+0x2e>
	__asm volatile
 8009aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aae:	f383 8811 	msr	BASEPRI, r3
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	603b      	str	r3, [r7, #0]
}
 8009abc:	bf00      	nop
 8009abe:	bf00      	nop
 8009ac0:	e7fd      	b.n	8009abe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009ac2:	f000 fee9 	bl	800a898 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ac6:	4b39      	ldr	r3, [pc, #228]	@ (8009bac <xTaskResumeAll+0x118>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	3b01      	subs	r3, #1
 8009acc:	4a37      	ldr	r2, [pc, #220]	@ (8009bac <xTaskResumeAll+0x118>)
 8009ace:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ad0:	4b36      	ldr	r3, [pc, #216]	@ (8009bac <xTaskResumeAll+0x118>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d161      	bne.n	8009b9c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ad8:	4b35      	ldr	r3, [pc, #212]	@ (8009bb0 <xTaskResumeAll+0x11c>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d05d      	beq.n	8009b9c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ae0:	e02e      	b.n	8009b40 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ae2:	4b34      	ldr	r3, [pc, #208]	@ (8009bb4 <xTaskResumeAll+0x120>)
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	3318      	adds	r3, #24
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fe ff6b 	bl	80089ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	3304      	adds	r3, #4
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7fe ff66 	bl	80089ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b02:	2201      	movs	r2, #1
 8009b04:	409a      	lsls	r2, r3
 8009b06:	4b2c      	ldr	r3, [pc, #176]	@ (8009bb8 <xTaskResumeAll+0x124>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	4a2a      	ldr	r2, [pc, #168]	@ (8009bb8 <xTaskResumeAll+0x124>)
 8009b0e:	6013      	str	r3, [r2, #0]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b14:	4613      	mov	r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4413      	add	r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	4a27      	ldr	r2, [pc, #156]	@ (8009bbc <xTaskResumeAll+0x128>)
 8009b1e:	441a      	add	r2, r3
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	3304      	adds	r3, #4
 8009b24:	4619      	mov	r1, r3
 8009b26:	4610      	mov	r0, r2
 8009b28:	f7fe fef2 	bl	8008910 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b30:	4b23      	ldr	r3, [pc, #140]	@ (8009bc0 <xTaskResumeAll+0x12c>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d302      	bcc.n	8009b40 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009b3a:	4b22      	ldr	r3, [pc, #136]	@ (8009bc4 <xTaskResumeAll+0x130>)
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b40:	4b1c      	ldr	r3, [pc, #112]	@ (8009bb4 <xTaskResumeAll+0x120>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1cc      	bne.n	8009ae2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d001      	beq.n	8009b52 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b4e:	f000 fb29 	bl	800a1a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009b52:	4b1d      	ldr	r3, [pc, #116]	@ (8009bc8 <xTaskResumeAll+0x134>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d010      	beq.n	8009b80 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b5e:	f000 f837 	bl	8009bd0 <xTaskIncrementTick>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d002      	beq.n	8009b6e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009b68:	4b16      	ldr	r3, [pc, #88]	@ (8009bc4 <xTaskResumeAll+0x130>)
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	3b01      	subs	r3, #1
 8009b72:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1f1      	bne.n	8009b5e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009b7a:	4b13      	ldr	r3, [pc, #76]	@ (8009bc8 <xTaskResumeAll+0x134>)
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b80:	4b10      	ldr	r3, [pc, #64]	@ (8009bc4 <xTaskResumeAll+0x130>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d009      	beq.n	8009b9c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8009bcc <xTaskResumeAll+0x138>)
 8009b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b92:	601a      	str	r2, [r3, #0]
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b9c:	f000 feae 	bl	800a8fc <vPortExitCritical>

	return xAlreadyYielded;
 8009ba0:	68bb      	ldr	r3, [r7, #8]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	20000c80 	.word	0x20000c80
 8009bb0:	20000c58 	.word	0x20000c58
 8009bb4:	20000c18 	.word	0x20000c18
 8009bb8:	20000c60 	.word	0x20000c60
 8009bbc:	20000b5c 	.word	0x20000b5c
 8009bc0:	20000b58 	.word	0x20000b58
 8009bc4:	20000c6c 	.word	0x20000c6c
 8009bc8:	20000c68 	.word	0x20000c68
 8009bcc:	e000ed04 	.word	0xe000ed04

08009bd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bda:	4b4f      	ldr	r3, [pc, #316]	@ (8009d18 <xTaskIncrementTick+0x148>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	f040 808f 	bne.w	8009d02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009be4:	4b4d      	ldr	r3, [pc, #308]	@ (8009d1c <xTaskIncrementTick+0x14c>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	3301      	adds	r3, #1
 8009bea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009bec:	4a4b      	ldr	r2, [pc, #300]	@ (8009d1c <xTaskIncrementTick+0x14c>)
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d121      	bne.n	8009c3c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009bf8:	4b49      	ldr	r3, [pc, #292]	@ (8009d20 <xTaskIncrementTick+0x150>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00b      	beq.n	8009c1a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c06:	f383 8811 	msr	BASEPRI, r3
 8009c0a:	f3bf 8f6f 	isb	sy
 8009c0e:	f3bf 8f4f 	dsb	sy
 8009c12:	603b      	str	r3, [r7, #0]
}
 8009c14:	bf00      	nop
 8009c16:	bf00      	nop
 8009c18:	e7fd      	b.n	8009c16 <xTaskIncrementTick+0x46>
 8009c1a:	4b41      	ldr	r3, [pc, #260]	@ (8009d20 <xTaskIncrementTick+0x150>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	60fb      	str	r3, [r7, #12]
 8009c20:	4b40      	ldr	r3, [pc, #256]	@ (8009d24 <xTaskIncrementTick+0x154>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a3e      	ldr	r2, [pc, #248]	@ (8009d20 <xTaskIncrementTick+0x150>)
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	4a3e      	ldr	r2, [pc, #248]	@ (8009d24 <xTaskIncrementTick+0x154>)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	6013      	str	r3, [r2, #0]
 8009c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8009d28 <xTaskIncrementTick+0x158>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	3301      	adds	r3, #1
 8009c34:	4a3c      	ldr	r2, [pc, #240]	@ (8009d28 <xTaskIncrementTick+0x158>)
 8009c36:	6013      	str	r3, [r2, #0]
 8009c38:	f000 fab4 	bl	800a1a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8009d2c <xTaskIncrementTick+0x15c>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d348      	bcc.n	8009cd8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c46:	4b36      	ldr	r3, [pc, #216]	@ (8009d20 <xTaskIncrementTick+0x150>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d104      	bne.n	8009c5a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c50:	4b36      	ldr	r3, [pc, #216]	@ (8009d2c <xTaskIncrementTick+0x15c>)
 8009c52:	f04f 32ff 	mov.w	r2, #4294967295
 8009c56:	601a      	str	r2, [r3, #0]
					break;
 8009c58:	e03e      	b.n	8009cd8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c5a:	4b31      	ldr	r3, [pc, #196]	@ (8009d20 <xTaskIncrementTick+0x150>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c6a:	693a      	ldr	r2, [r7, #16]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d203      	bcs.n	8009c7a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c72:	4a2e      	ldr	r2, [pc, #184]	@ (8009d2c <xTaskIncrementTick+0x15c>)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c78:	e02e      	b.n	8009cd8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	3304      	adds	r3, #4
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7fe fea3 	bl	80089ca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d004      	beq.n	8009c96 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	3318      	adds	r3, #24
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fe fe9a 	bl	80089ca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	409a      	lsls	r2, r3
 8009c9e:	4b24      	ldr	r3, [pc, #144]	@ (8009d30 <xTaskIncrementTick+0x160>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	4a22      	ldr	r2, [pc, #136]	@ (8009d30 <xTaskIncrementTick+0x160>)
 8009ca6:	6013      	str	r3, [r2, #0]
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cac:	4613      	mov	r3, r2
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	4413      	add	r3, r2
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8009d34 <xTaskIncrementTick+0x164>)
 8009cb6:	441a      	add	r2, r3
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	3304      	adds	r3, #4
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	4610      	mov	r0, r2
 8009cc0:	f7fe fe26 	bl	8008910 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8009d38 <xTaskIncrementTick+0x168>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d3b9      	bcc.n	8009c46 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cd6:	e7b6      	b.n	8009c46 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009cd8:	4b17      	ldr	r3, [pc, #92]	@ (8009d38 <xTaskIncrementTick+0x168>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cde:	4915      	ldr	r1, [pc, #84]	@ (8009d34 <xTaskIncrementTick+0x164>)
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	4413      	add	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	440b      	add	r3, r1
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d901      	bls.n	8009cf4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009cf4:	4b11      	ldr	r3, [pc, #68]	@ (8009d3c <xTaskIncrementTick+0x16c>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d007      	beq.n	8009d0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	617b      	str	r3, [r7, #20]
 8009d00:	e004      	b.n	8009d0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009d02:	4b0f      	ldr	r3, [pc, #60]	@ (8009d40 <xTaskIncrementTick+0x170>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	3301      	adds	r3, #1
 8009d08:	4a0d      	ldr	r2, [pc, #52]	@ (8009d40 <xTaskIncrementTick+0x170>)
 8009d0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009d0c:	697b      	ldr	r3, [r7, #20]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3718      	adds	r7, #24
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	20000c80 	.word	0x20000c80
 8009d1c:	20000c5c 	.word	0x20000c5c
 8009d20:	20000c10 	.word	0x20000c10
 8009d24:	20000c14 	.word	0x20000c14
 8009d28:	20000c70 	.word	0x20000c70
 8009d2c:	20000c78 	.word	0x20000c78
 8009d30:	20000c60 	.word	0x20000c60
 8009d34:	20000b5c 	.word	0x20000b5c
 8009d38:	20000b58 	.word	0x20000b58
 8009d3c:	20000c6c 	.word	0x20000c6c
 8009d40:	20000c68 	.word	0x20000c68

08009d44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d44:	b480      	push	{r7}
 8009d46:	b087      	sub	sp, #28
 8009d48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8009df4 <vTaskSwitchContext+0xb0>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d003      	beq.n	8009d5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d52:	4b29      	ldr	r3, [pc, #164]	@ (8009df8 <vTaskSwitchContext+0xb4>)
 8009d54:	2201      	movs	r2, #1
 8009d56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d58:	e045      	b.n	8009de6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8009d5a:	4b27      	ldr	r3, [pc, #156]	@ (8009df8 <vTaskSwitchContext+0xb4>)
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d60:	4b26      	ldr	r3, [pc, #152]	@ (8009dfc <vTaskSwitchContext+0xb8>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	fab3 f383 	clz	r3, r3
 8009d6c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009d6e:	7afb      	ldrb	r3, [r7, #11]
 8009d70:	f1c3 031f 	rsb	r3, r3, #31
 8009d74:	617b      	str	r3, [r7, #20]
 8009d76:	4922      	ldr	r1, [pc, #136]	@ (8009e00 <vTaskSwitchContext+0xbc>)
 8009d78:	697a      	ldr	r2, [r7, #20]
 8009d7a:	4613      	mov	r3, r2
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4413      	add	r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	440b      	add	r3, r1
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d10b      	bne.n	8009da2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8009d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d8e:	f383 8811 	msr	BASEPRI, r3
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	f3bf 8f4f 	dsb	sy
 8009d9a:	607b      	str	r3, [r7, #4]
}
 8009d9c:	bf00      	nop
 8009d9e:	bf00      	nop
 8009da0:	e7fd      	b.n	8009d9e <vTaskSwitchContext+0x5a>
 8009da2:	697a      	ldr	r2, [r7, #20]
 8009da4:	4613      	mov	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4a14      	ldr	r2, [pc, #80]	@ (8009e00 <vTaskSwitchContext+0xbc>)
 8009dae:	4413      	add	r3, r2
 8009db0:	613b      	str	r3, [r7, #16]
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	685a      	ldr	r2, [r3, #4]
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	605a      	str	r2, [r3, #4]
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	685a      	ldr	r2, [r3, #4]
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	3308      	adds	r3, #8
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d104      	bne.n	8009dd2 <vTaskSwitchContext+0x8e>
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	685a      	ldr	r2, [r3, #4]
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	605a      	str	r2, [r3, #4]
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8009e04 <vTaskSwitchContext+0xc0>)
 8009dda:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ddc:	4b09      	ldr	r3, [pc, #36]	@ (8009e04 <vTaskSwitchContext+0xc0>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	334c      	adds	r3, #76	@ 0x4c
 8009de2:	4a09      	ldr	r2, [pc, #36]	@ (8009e08 <vTaskSwitchContext+0xc4>)
 8009de4:	6013      	str	r3, [r2, #0]
}
 8009de6:	bf00      	nop
 8009de8:	371c      	adds	r7, #28
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	20000c80 	.word	0x20000c80
 8009df8:	20000c6c 	.word	0x20000c6c
 8009dfc:	20000c60 	.word	0x20000c60
 8009e00:	20000b5c 	.word	0x20000b5c
 8009e04:	20000b58 	.word	0x20000b58
 8009e08:	20000034 	.word	0x20000034

08009e0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d10b      	bne.n	8009e34 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	60fb      	str	r3, [r7, #12]
}
 8009e2e:	bf00      	nop
 8009e30:	bf00      	nop
 8009e32:	e7fd      	b.n	8009e30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e34:	4b07      	ldr	r3, [pc, #28]	@ (8009e54 <vTaskPlaceOnEventList+0x48>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	3318      	adds	r3, #24
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f7fe fd8b 	bl	8008958 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e42:	2101      	movs	r1, #1
 8009e44:	6838      	ldr	r0, [r7, #0]
 8009e46:	f000 fb8d 	bl	800a564 <prvAddCurrentTaskToDelayedList>
}
 8009e4a:	bf00      	nop
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	20000b58 	.word	0x20000b58

08009e58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d10b      	bne.n	8009e86 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e72:	f383 8811 	msr	BASEPRI, r3
 8009e76:	f3bf 8f6f 	isb	sy
 8009e7a:	f3bf 8f4f 	dsb	sy
 8009e7e:	60fb      	str	r3, [r7, #12]
}
 8009e80:	bf00      	nop
 8009e82:	bf00      	nop
 8009e84:	e7fd      	b.n	8009e82 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	3318      	adds	r3, #24
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7fe fd9d 	bl	80089ca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e90:	4b1d      	ldr	r3, [pc, #116]	@ (8009f08 <xTaskRemoveFromEventList+0xb0>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d11c      	bne.n	8009ed2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	3304      	adds	r3, #4
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7fe fd94 	bl	80089ca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	409a      	lsls	r2, r3
 8009eaa:	4b18      	ldr	r3, [pc, #96]	@ (8009f0c <xTaskRemoveFromEventList+0xb4>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	4a16      	ldr	r2, [pc, #88]	@ (8009f0c <xTaskRemoveFromEventList+0xb4>)
 8009eb2:	6013      	str	r3, [r2, #0]
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eb8:	4613      	mov	r3, r2
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	4413      	add	r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4a13      	ldr	r2, [pc, #76]	@ (8009f10 <xTaskRemoveFromEventList+0xb8>)
 8009ec2:	441a      	add	r2, r3
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	3304      	adds	r3, #4
 8009ec8:	4619      	mov	r1, r3
 8009eca:	4610      	mov	r0, r2
 8009ecc:	f7fe fd20 	bl	8008910 <vListInsertEnd>
 8009ed0:	e005      	b.n	8009ede <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	3318      	adds	r3, #24
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	480e      	ldr	r0, [pc, #56]	@ (8009f14 <xTaskRemoveFromEventList+0xbc>)
 8009eda:	f7fe fd19 	bl	8008910 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8009f18 <xTaskRemoveFromEventList+0xc0>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d905      	bls.n	8009ef8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009eec:	2301      	movs	r3, #1
 8009eee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8009f1c <xTaskRemoveFromEventList+0xc4>)
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	601a      	str	r2, [r3, #0]
 8009ef6:	e001      	b.n	8009efc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009efc:	697b      	ldr	r3, [r7, #20]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3718      	adds	r7, #24
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	20000c80 	.word	0x20000c80
 8009f0c:	20000c60 	.word	0x20000c60
 8009f10:	20000b5c 	.word	0x20000b5c
 8009f14:	20000c18 	.word	0x20000c18
 8009f18:	20000b58 	.word	0x20000b58
 8009f1c:	20000c6c 	.word	0x20000c6c

08009f20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f28:	4b06      	ldr	r3, [pc, #24]	@ (8009f44 <vTaskInternalSetTimeOutState+0x24>)
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f30:	4b05      	ldr	r3, [pc, #20]	@ (8009f48 <vTaskInternalSetTimeOutState+0x28>)
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	605a      	str	r2, [r3, #4]
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr
 8009f44:	20000c70 	.word	0x20000c70
 8009f48:	20000c5c 	.word	0x20000c5c

08009f4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b088      	sub	sp, #32
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d10b      	bne.n	8009f74 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	613b      	str	r3, [r7, #16]
}
 8009f6e:	bf00      	nop
 8009f70:	bf00      	nop
 8009f72:	e7fd      	b.n	8009f70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10b      	bne.n	8009f92 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	60fb      	str	r3, [r7, #12]
}
 8009f8c:	bf00      	nop
 8009f8e:	bf00      	nop
 8009f90:	e7fd      	b.n	8009f8e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009f92:	f000 fc81 	bl	800a898 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009f96:	4b1d      	ldr	r3, [pc, #116]	@ (800a00c <xTaskCheckForTimeOut+0xc0>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	69ba      	ldr	r2, [r7, #24]
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fae:	d102      	bne.n	8009fb6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	61fb      	str	r3, [r7, #28]
 8009fb4:	e023      	b.n	8009ffe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	4b15      	ldr	r3, [pc, #84]	@ (800a010 <xTaskCheckForTimeOut+0xc4>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d007      	beq.n	8009fd2 <xTaskCheckForTimeOut+0x86>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	69ba      	ldr	r2, [r7, #24]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d302      	bcc.n	8009fd2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	61fb      	str	r3, [r7, #28]
 8009fd0:	e015      	b.n	8009ffe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	697a      	ldr	r2, [r7, #20]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d20b      	bcs.n	8009ff4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	1ad2      	subs	r2, r2, r3
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f7ff ff99 	bl	8009f20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	61fb      	str	r3, [r7, #28]
 8009ff2:	e004      	b.n	8009ffe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009ffe:	f000 fc7d 	bl	800a8fc <vPortExitCritical>

	return xReturn;
 800a002:	69fb      	ldr	r3, [r7, #28]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3720      	adds	r7, #32
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	20000c5c 	.word	0x20000c5c
 800a010:	20000c70 	.word	0x20000c70

0800a014 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a014:	b480      	push	{r7}
 800a016:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a018:	4b03      	ldr	r3, [pc, #12]	@ (800a028 <vTaskMissedYield+0x14>)
 800a01a:	2201      	movs	r2, #1
 800a01c:	601a      	str	r2, [r3, #0]
}
 800a01e:	bf00      	nop
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr
 800a028:	20000c6c 	.word	0x20000c6c

0800a02c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a034:	f000 f852 	bl	800a0dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a038:	4b06      	ldr	r3, [pc, #24]	@ (800a054 <prvIdleTask+0x28>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d9f9      	bls.n	800a034 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a040:	4b05      	ldr	r3, [pc, #20]	@ (800a058 <prvIdleTask+0x2c>)
 800a042:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a046:	601a      	str	r2, [r3, #0]
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a050:	e7f0      	b.n	800a034 <prvIdleTask+0x8>
 800a052:	bf00      	nop
 800a054:	20000b5c 	.word	0x20000b5c
 800a058:	e000ed04 	.word	0xe000ed04

0800a05c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a062:	2300      	movs	r3, #0
 800a064:	607b      	str	r3, [r7, #4]
 800a066:	e00c      	b.n	800a082 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	4613      	mov	r3, r2
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	4413      	add	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4a12      	ldr	r2, [pc, #72]	@ (800a0bc <prvInitialiseTaskLists+0x60>)
 800a074:	4413      	add	r3, r2
 800a076:	4618      	mov	r0, r3
 800a078:	f7fe fc1d 	bl	80088b6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	3301      	adds	r3, #1
 800a080:	607b      	str	r3, [r7, #4]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2b06      	cmp	r3, #6
 800a086:	d9ef      	bls.n	800a068 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a088:	480d      	ldr	r0, [pc, #52]	@ (800a0c0 <prvInitialiseTaskLists+0x64>)
 800a08a:	f7fe fc14 	bl	80088b6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a08e:	480d      	ldr	r0, [pc, #52]	@ (800a0c4 <prvInitialiseTaskLists+0x68>)
 800a090:	f7fe fc11 	bl	80088b6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a094:	480c      	ldr	r0, [pc, #48]	@ (800a0c8 <prvInitialiseTaskLists+0x6c>)
 800a096:	f7fe fc0e 	bl	80088b6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a09a:	480c      	ldr	r0, [pc, #48]	@ (800a0cc <prvInitialiseTaskLists+0x70>)
 800a09c:	f7fe fc0b 	bl	80088b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a0a0:	480b      	ldr	r0, [pc, #44]	@ (800a0d0 <prvInitialiseTaskLists+0x74>)
 800a0a2:	f7fe fc08 	bl	80088b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a0a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a0d4 <prvInitialiseTaskLists+0x78>)
 800a0a8:	4a05      	ldr	r2, [pc, #20]	@ (800a0c0 <prvInitialiseTaskLists+0x64>)
 800a0aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a0ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a0d8 <prvInitialiseTaskLists+0x7c>)
 800a0ae:	4a05      	ldr	r2, [pc, #20]	@ (800a0c4 <prvInitialiseTaskLists+0x68>)
 800a0b0:	601a      	str	r2, [r3, #0]
}
 800a0b2:	bf00      	nop
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	20000b5c 	.word	0x20000b5c
 800a0c0:	20000be8 	.word	0x20000be8
 800a0c4:	20000bfc 	.word	0x20000bfc
 800a0c8:	20000c18 	.word	0x20000c18
 800a0cc:	20000c2c 	.word	0x20000c2c
 800a0d0:	20000c44 	.word	0x20000c44
 800a0d4:	20000c10 	.word	0x20000c10
 800a0d8:	20000c14 	.word	0x20000c14

0800a0dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0e2:	e019      	b.n	800a118 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a0e4:	f000 fbd8 	bl	800a898 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0e8:	4b10      	ldr	r3, [pc, #64]	@ (800a12c <prvCheckTasksWaitingTermination+0x50>)
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	3304      	adds	r3, #4
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7fe fc68 	bl	80089ca <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a0fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a130 <prvCheckTasksWaitingTermination+0x54>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	3b01      	subs	r3, #1
 800a100:	4a0b      	ldr	r2, [pc, #44]	@ (800a130 <prvCheckTasksWaitingTermination+0x54>)
 800a102:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a104:	4b0b      	ldr	r3, [pc, #44]	@ (800a134 <prvCheckTasksWaitingTermination+0x58>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	3b01      	subs	r3, #1
 800a10a:	4a0a      	ldr	r2, [pc, #40]	@ (800a134 <prvCheckTasksWaitingTermination+0x58>)
 800a10c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a10e:	f000 fbf5 	bl	800a8fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f810 	bl	800a138 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a118:	4b06      	ldr	r3, [pc, #24]	@ (800a134 <prvCheckTasksWaitingTermination+0x58>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d1e1      	bne.n	800a0e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a120:	bf00      	nop
 800a122:	bf00      	nop
 800a124:	3708      	adds	r7, #8
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	20000c2c 	.word	0x20000c2c
 800a130:	20000c58 	.word	0x20000c58
 800a134:	20000c40 	.word	0x20000c40

0800a138 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	334c      	adds	r3, #76	@ 0x4c
 800a144:	4618      	mov	r0, r3
 800a146:	f001 fe99 	bl	800be7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800a150:	2b00      	cmp	r3, #0
 800a152:	d108      	bne.n	800a166 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a158:	4618      	mov	r0, r3
 800a15a:	f000 fd8d 	bl	800ac78 <vPortFree>
				vPortFree( pxTCB );
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 fd8a 	bl	800ac78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a164:	e019      	b.n	800a19a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d103      	bne.n	800a178 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 fd81 	bl	800ac78 <vPortFree>
	}
 800a176:	e010      	b.n	800a19a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800a17e:	2b02      	cmp	r3, #2
 800a180:	d00b      	beq.n	800a19a <prvDeleteTCB+0x62>
	__asm volatile
 800a182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a186:	f383 8811 	msr	BASEPRI, r3
 800a18a:	f3bf 8f6f 	isb	sy
 800a18e:	f3bf 8f4f 	dsb	sy
 800a192:	60fb      	str	r3, [r7, #12]
}
 800a194:	bf00      	nop
 800a196:	bf00      	nop
 800a198:	e7fd      	b.n	800a196 <prvDeleteTCB+0x5e>
	}
 800a19a:	bf00      	nop
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
	...

0800a1a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1aa:	4b0c      	ldr	r3, [pc, #48]	@ (800a1dc <prvResetNextTaskUnblockTime+0x38>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d104      	bne.n	800a1be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a1b4:	4b0a      	ldr	r3, [pc, #40]	@ (800a1e0 <prvResetNextTaskUnblockTime+0x3c>)
 800a1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a1bc:	e008      	b.n	800a1d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1be:	4b07      	ldr	r3, [pc, #28]	@ (800a1dc <prvResetNextTaskUnblockTime+0x38>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	4a04      	ldr	r2, [pc, #16]	@ (800a1e0 <prvResetNextTaskUnblockTime+0x3c>)
 800a1ce:	6013      	str	r3, [r2, #0]
}
 800a1d0:	bf00      	nop
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr
 800a1dc:	20000c10 	.word	0x20000c10
 800a1e0:	20000c78 	.word	0x20000c78

0800a1e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a1ea:	4b0b      	ldr	r3, [pc, #44]	@ (800a218 <xTaskGetSchedulerState+0x34>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d102      	bne.n	800a1f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	607b      	str	r3, [r7, #4]
 800a1f6:	e008      	b.n	800a20a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1f8:	4b08      	ldr	r3, [pc, #32]	@ (800a21c <xTaskGetSchedulerState+0x38>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d102      	bne.n	800a206 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a200:	2302      	movs	r3, #2
 800a202:	607b      	str	r3, [r7, #4]
 800a204:	e001      	b.n	800a20a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a206:	2300      	movs	r3, #0
 800a208:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a20a:	687b      	ldr	r3, [r7, #4]
	}
 800a20c:	4618      	mov	r0, r3
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr
 800a218:	20000c64 	.word	0x20000c64
 800a21c:	20000c80 	.word	0x20000c80

0800a220 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a22c:	2300      	movs	r3, #0
 800a22e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d05e      	beq.n	800a2f4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a23a:	4b31      	ldr	r3, [pc, #196]	@ (800a300 <xTaskPriorityInherit+0xe0>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a240:	429a      	cmp	r2, r3
 800a242:	d24e      	bcs.n	800a2e2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	699b      	ldr	r3, [r3, #24]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	db06      	blt.n	800a25a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a24c:	4b2c      	ldr	r3, [pc, #176]	@ (800a300 <xTaskPriorityInherit+0xe0>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a252:	f1c3 0207 	rsb	r2, r3, #7
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	6959      	ldr	r1, [r3, #20]
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a262:	4613      	mov	r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4413      	add	r3, r2
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	4a26      	ldr	r2, [pc, #152]	@ (800a304 <xTaskPriorityInherit+0xe4>)
 800a26c:	4413      	add	r3, r2
 800a26e:	4299      	cmp	r1, r3
 800a270:	d12f      	bne.n	800a2d2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	3304      	adds	r3, #4
 800a276:	4618      	mov	r0, r3
 800a278:	f7fe fba7 	bl	80089ca <uxListRemove>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d10a      	bne.n	800a298 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a286:	2201      	movs	r2, #1
 800a288:	fa02 f303 	lsl.w	r3, r2, r3
 800a28c:	43da      	mvns	r2, r3
 800a28e:	4b1e      	ldr	r3, [pc, #120]	@ (800a308 <xTaskPriorityInherit+0xe8>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4013      	ands	r3, r2
 800a294:	4a1c      	ldr	r2, [pc, #112]	@ (800a308 <xTaskPriorityInherit+0xe8>)
 800a296:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a298:	4b19      	ldr	r3, [pc, #100]	@ (800a300 <xTaskPriorityInherit+0xe0>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	409a      	lsls	r2, r3
 800a2aa:	4b17      	ldr	r3, [pc, #92]	@ (800a308 <xTaskPriorityInherit+0xe8>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	4a15      	ldr	r2, [pc, #84]	@ (800a308 <xTaskPriorityInherit+0xe8>)
 800a2b2:	6013      	str	r3, [r2, #0]
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4413      	add	r3, r2
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	4a10      	ldr	r2, [pc, #64]	@ (800a304 <xTaskPriorityInherit+0xe4>)
 800a2c2:	441a      	add	r2, r3
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	3304      	adds	r3, #4
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	4610      	mov	r0, r2
 800a2cc:	f7fe fb20 	bl	8008910 <vListInsertEnd>
 800a2d0:	e004      	b.n	800a2dc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a2d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a300 <xTaskPriorityInherit+0xe0>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	60fb      	str	r3, [r7, #12]
 800a2e0:	e008      	b.n	800a2f4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a2e6:	4b06      	ldr	r3, [pc, #24]	@ (800a300 <xTaskPriorityInherit+0xe0>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d201      	bcs.n	800a2f4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
	}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	20000b58 	.word	0x20000b58
 800a304:	20000b5c 	.word	0x20000b5c
 800a308:	20000c60 	.word	0x20000c60

0800a30c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b086      	sub	sp, #24
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a318:	2300      	movs	r3, #0
 800a31a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d070      	beq.n	800a404 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a322:	4b3b      	ldr	r3, [pc, #236]	@ (800a410 <xTaskPriorityDisinherit+0x104>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	693a      	ldr	r2, [r7, #16]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d00b      	beq.n	800a344 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a330:	f383 8811 	msr	BASEPRI, r3
 800a334:	f3bf 8f6f 	isb	sy
 800a338:	f3bf 8f4f 	dsb	sy
 800a33c:	60fb      	str	r3, [r7, #12]
}
 800a33e:	bf00      	nop
 800a340:	bf00      	nop
 800a342:	e7fd      	b.n	800a340 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d10b      	bne.n	800a364 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a34c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a350:	f383 8811 	msr	BASEPRI, r3
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	f3bf 8f4f 	dsb	sy
 800a35c:	60bb      	str	r3, [r7, #8]
}
 800a35e:	bf00      	nop
 800a360:	bf00      	nop
 800a362:	e7fd      	b.n	800a360 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a368:	1e5a      	subs	r2, r3, #1
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a376:	429a      	cmp	r2, r3
 800a378:	d044      	beq.n	800a404 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d140      	bne.n	800a404 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	3304      	adds	r3, #4
 800a386:	4618      	mov	r0, r3
 800a388:	f7fe fb1f 	bl	80089ca <uxListRemove>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d115      	bne.n	800a3be <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a396:	491f      	ldr	r1, [pc, #124]	@ (800a414 <xTaskPriorityDisinherit+0x108>)
 800a398:	4613      	mov	r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	4413      	add	r3, r2
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	440b      	add	r3, r1
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d10a      	bne.n	800a3be <xTaskPriorityDisinherit+0xb2>
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a3b2:	43da      	mvns	r2, r3
 800a3b4:	4b18      	ldr	r3, [pc, #96]	@ (800a418 <xTaskPriorityDisinherit+0x10c>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4013      	ands	r3, r2
 800a3ba:	4a17      	ldr	r2, [pc, #92]	@ (800a418 <xTaskPriorityDisinherit+0x10c>)
 800a3bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ca:	f1c3 0207 	rsb	r2, r3, #7
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	409a      	lsls	r2, r3
 800a3da:	4b0f      	ldr	r3, [pc, #60]	@ (800a418 <xTaskPriorityDisinherit+0x10c>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	4a0d      	ldr	r2, [pc, #52]	@ (800a418 <xTaskPriorityDisinherit+0x10c>)
 800a3e2:	6013      	str	r3, [r2, #0]
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4413      	add	r3, r2
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	4a08      	ldr	r2, [pc, #32]	@ (800a414 <xTaskPriorityDisinherit+0x108>)
 800a3f2:	441a      	add	r2, r3
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	3304      	adds	r3, #4
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	4610      	mov	r0, r2
 800a3fc:	f7fe fa88 	bl	8008910 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a400:	2301      	movs	r3, #1
 800a402:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a404:	697b      	ldr	r3, [r7, #20]
	}
 800a406:	4618      	mov	r0, r3
 800a408:	3718      	adds	r7, #24
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	20000b58 	.word	0x20000b58
 800a414:	20000b5c 	.word	0x20000b5c
 800a418:	20000c60 	.word	0x20000c60

0800a41c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b088      	sub	sp, #32
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a42a:	2301      	movs	r3, #1
 800a42c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d079      	beq.n	800a528 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d10b      	bne.n	800a454 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a43c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a440:	f383 8811 	msr	BASEPRI, r3
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	60fb      	str	r3, [r7, #12]
}
 800a44e:	bf00      	nop
 800a450:	bf00      	nop
 800a452:	e7fd      	b.n	800a450 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a458:	683a      	ldr	r2, [r7, #0]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d902      	bls.n	800a464 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	61fb      	str	r3, [r7, #28]
 800a462:	e002      	b.n	800a46a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a468:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a46e:	69fa      	ldr	r2, [r7, #28]
 800a470:	429a      	cmp	r2, r3
 800a472:	d059      	beq.n	800a528 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a478:	697a      	ldr	r2, [r7, #20]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d154      	bne.n	800a528 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a47e:	4b2c      	ldr	r3, [pc, #176]	@ (800a530 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	69ba      	ldr	r2, [r7, #24]
 800a484:	429a      	cmp	r2, r3
 800a486:	d10b      	bne.n	800a4a0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48c:	f383 8811 	msr	BASEPRI, r3
 800a490:	f3bf 8f6f 	isb	sy
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	60bb      	str	r3, [r7, #8]
}
 800a49a:	bf00      	nop
 800a49c:	bf00      	nop
 800a49e:	e7fd      	b.n	800a49c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4a4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	69fa      	ldr	r2, [r7, #28]
 800a4aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	699b      	ldr	r3, [r3, #24]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	db04      	blt.n	800a4be <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	f1c3 0207 	rsb	r2, r3, #7
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	6959      	ldr	r1, [r3, #20]
 800a4c2:	693a      	ldr	r2, [r7, #16]
 800a4c4:	4613      	mov	r3, r2
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	4413      	add	r3, r2
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	4a19      	ldr	r2, [pc, #100]	@ (800a534 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a4ce:	4413      	add	r3, r2
 800a4d0:	4299      	cmp	r1, r3
 800a4d2:	d129      	bne.n	800a528 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	3304      	adds	r3, #4
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7fe fa76 	bl	80089ca <uxListRemove>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10a      	bne.n	800a4fa <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a4e4:	69bb      	ldr	r3, [r7, #24]
 800a4e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ee:	43da      	mvns	r2, r3
 800a4f0:	4b11      	ldr	r3, [pc, #68]	@ (800a538 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	4a10      	ldr	r2, [pc, #64]	@ (800a538 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a4f8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4fe:	2201      	movs	r2, #1
 800a500:	409a      	lsls	r2, r3
 800a502:	4b0d      	ldr	r3, [pc, #52]	@ (800a538 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4313      	orrs	r3, r2
 800a508:	4a0b      	ldr	r2, [pc, #44]	@ (800a538 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a50a:	6013      	str	r3, [r2, #0]
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a510:	4613      	mov	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4413      	add	r3, r2
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	4a06      	ldr	r2, [pc, #24]	@ (800a534 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a51a:	441a      	add	r2, r3
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	3304      	adds	r3, #4
 800a520:	4619      	mov	r1, r3
 800a522:	4610      	mov	r0, r2
 800a524:	f7fe f9f4 	bl	8008910 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a528:	bf00      	nop
 800a52a:	3720      	adds	r7, #32
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	20000b58 	.word	0x20000b58
 800a534:	20000b5c 	.word	0x20000b5c
 800a538:	20000c60 	.word	0x20000c60

0800a53c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a53c:	b480      	push	{r7}
 800a53e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a540:	4b07      	ldr	r3, [pc, #28]	@ (800a560 <pvTaskIncrementMutexHeldCount+0x24>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d004      	beq.n	800a552 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a548:	4b05      	ldr	r3, [pc, #20]	@ (800a560 <pvTaskIncrementMutexHeldCount+0x24>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a54e:	3201      	adds	r2, #1
 800a550:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800a552:	4b03      	ldr	r3, [pc, #12]	@ (800a560 <pvTaskIncrementMutexHeldCount+0x24>)
 800a554:	681b      	ldr	r3, [r3, #0]
	}
 800a556:	4618      	mov	r0, r3
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr
 800a560:	20000b58 	.word	0x20000b58

0800a564 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a56e:	4b29      	ldr	r3, [pc, #164]	@ (800a614 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a574:	4b28      	ldr	r3, [pc, #160]	@ (800a618 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	3304      	adds	r3, #4
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7fe fa25 	bl	80089ca <uxListRemove>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d10b      	bne.n	800a59e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a586:	4b24      	ldr	r3, [pc, #144]	@ (800a618 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a58c:	2201      	movs	r2, #1
 800a58e:	fa02 f303 	lsl.w	r3, r2, r3
 800a592:	43da      	mvns	r2, r3
 800a594:	4b21      	ldr	r3, [pc, #132]	@ (800a61c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4013      	ands	r3, r2
 800a59a:	4a20      	ldr	r2, [pc, #128]	@ (800a61c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a59c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a4:	d10a      	bne.n	800a5bc <prvAddCurrentTaskToDelayedList+0x58>
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d007      	beq.n	800a5bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5ac:	4b1a      	ldr	r3, [pc, #104]	@ (800a618 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	481a      	ldr	r0, [pc, #104]	@ (800a620 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a5b6:	f7fe f9ab 	bl	8008910 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a5ba:	e026      	b.n	800a60a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a5c4:	4b14      	ldr	r3, [pc, #80]	@ (800a618 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	68ba      	ldr	r2, [r7, #8]
 800a5ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a5cc:	68ba      	ldr	r2, [r7, #8]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d209      	bcs.n	800a5e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5d4:	4b13      	ldr	r3, [pc, #76]	@ (800a624 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	4b0f      	ldr	r3, [pc, #60]	@ (800a618 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	3304      	adds	r3, #4
 800a5de:	4619      	mov	r1, r3
 800a5e0:	4610      	mov	r0, r2
 800a5e2:	f7fe f9b9 	bl	8008958 <vListInsert>
}
 800a5e6:	e010      	b.n	800a60a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5e8:	4b0f      	ldr	r3, [pc, #60]	@ (800a628 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a618 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	f7fe f9af 	bl	8008958 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a5fa:	4b0c      	ldr	r3, [pc, #48]	@ (800a62c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	429a      	cmp	r2, r3
 800a602:	d202      	bcs.n	800a60a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a604:	4a09      	ldr	r2, [pc, #36]	@ (800a62c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	6013      	str	r3, [r2, #0]
}
 800a60a:	bf00      	nop
 800a60c:	3710      	adds	r7, #16
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	20000c5c 	.word	0x20000c5c
 800a618:	20000b58 	.word	0x20000b58
 800a61c:	20000c60 	.word	0x20000c60
 800a620:	20000c44 	.word	0x20000c44
 800a624:	20000c14 	.word	0x20000c14
 800a628:	20000c10 	.word	0x20000c10
 800a62c:	20000c78 	.word	0x20000c78

0800a630 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	3b04      	subs	r3, #4
 800a640:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a648:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	3b04      	subs	r3, #4
 800a64e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	f023 0201 	bic.w	r2, r3, #1
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	3b04      	subs	r3, #4
 800a65e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a660:	4a0c      	ldr	r2, [pc, #48]	@ (800a694 <pxPortInitialiseStack+0x64>)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	3b14      	subs	r3, #20
 800a66a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	3b04      	subs	r3, #4
 800a676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f06f 0202 	mvn.w	r2, #2
 800a67e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	3b20      	subs	r3, #32
 800a684:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a686:	68fb      	ldr	r3, [r7, #12]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3714      	adds	r7, #20
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr
 800a694:	0800a699 	.word	0x0800a699

0800a698 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a698:	b480      	push	{r7}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a6a2:	4b13      	ldr	r3, [pc, #76]	@ (800a6f0 <prvTaskExitError+0x58>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6aa:	d00b      	beq.n	800a6c4 <prvTaskExitError+0x2c>
	__asm volatile
 800a6ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6b0:	f383 8811 	msr	BASEPRI, r3
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	f3bf 8f4f 	dsb	sy
 800a6bc:	60fb      	str	r3, [r7, #12]
}
 800a6be:	bf00      	nop
 800a6c0:	bf00      	nop
 800a6c2:	e7fd      	b.n	800a6c0 <prvTaskExitError+0x28>
	__asm volatile
 800a6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	60bb      	str	r3, [r7, #8]
}
 800a6d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a6d8:	bf00      	nop
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d0fc      	beq.n	800a6da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a6e0:	bf00      	nop
 800a6e2:	bf00      	nop
 800a6e4:	3714      	adds	r7, #20
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop
 800a6f0:	20000024 	.word	0x20000024
	...

0800a700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a700:	4b07      	ldr	r3, [pc, #28]	@ (800a720 <pxCurrentTCBConst2>)
 800a702:	6819      	ldr	r1, [r3, #0]
 800a704:	6808      	ldr	r0, [r1, #0]
 800a706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70a:	f380 8809 	msr	PSP, r0
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f04f 0000 	mov.w	r0, #0
 800a716:	f380 8811 	msr	BASEPRI, r0
 800a71a:	4770      	bx	lr
 800a71c:	f3af 8000 	nop.w

0800a720 <pxCurrentTCBConst2>:
 800a720:	20000b58 	.word	0x20000b58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a724:	bf00      	nop
 800a726:	bf00      	nop

0800a728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a728:	4808      	ldr	r0, [pc, #32]	@ (800a74c <prvPortStartFirstTask+0x24>)
 800a72a:	6800      	ldr	r0, [r0, #0]
 800a72c:	6800      	ldr	r0, [r0, #0]
 800a72e:	f380 8808 	msr	MSP, r0
 800a732:	f04f 0000 	mov.w	r0, #0
 800a736:	f380 8814 	msr	CONTROL, r0
 800a73a:	b662      	cpsie	i
 800a73c:	b661      	cpsie	f
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	df00      	svc	0
 800a748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a74a:	bf00      	nop
 800a74c:	e000ed08 	.word	0xe000ed08

0800a750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a756:	4b47      	ldr	r3, [pc, #284]	@ (800a874 <xPortStartScheduler+0x124>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a47      	ldr	r2, [pc, #284]	@ (800a878 <xPortStartScheduler+0x128>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d10b      	bne.n	800a778 <xPortStartScheduler+0x28>
	__asm volatile
 800a760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	613b      	str	r3, [r7, #16]
}
 800a772:	bf00      	nop
 800a774:	bf00      	nop
 800a776:	e7fd      	b.n	800a774 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a778:	4b3e      	ldr	r3, [pc, #248]	@ (800a874 <xPortStartScheduler+0x124>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a3f      	ldr	r2, [pc, #252]	@ (800a87c <xPortStartScheduler+0x12c>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d10b      	bne.n	800a79a <xPortStartScheduler+0x4a>
	__asm volatile
 800a782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	60fb      	str	r3, [r7, #12]
}
 800a794:	bf00      	nop
 800a796:	bf00      	nop
 800a798:	e7fd      	b.n	800a796 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a79a:	4b39      	ldr	r3, [pc, #228]	@ (800a880 <xPortStartScheduler+0x130>)
 800a79c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	22ff      	movs	r2, #255	@ 0xff
 800a7aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a7b4:	78fb      	ldrb	r3, [r7, #3]
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a7bc:	b2da      	uxtb	r2, r3
 800a7be:	4b31      	ldr	r3, [pc, #196]	@ (800a884 <xPortStartScheduler+0x134>)
 800a7c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a7c2:	4b31      	ldr	r3, [pc, #196]	@ (800a888 <xPortStartScheduler+0x138>)
 800a7c4:	2207      	movs	r2, #7
 800a7c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a7c8:	e009      	b.n	800a7de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a7ca:	4b2f      	ldr	r3, [pc, #188]	@ (800a888 <xPortStartScheduler+0x138>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	4a2d      	ldr	r2, [pc, #180]	@ (800a888 <xPortStartScheduler+0x138>)
 800a7d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a7d4:	78fb      	ldrb	r3, [r7, #3]
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	005b      	lsls	r3, r3, #1
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a7de:	78fb      	ldrb	r3, [r7, #3]
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7e6:	2b80      	cmp	r3, #128	@ 0x80
 800a7e8:	d0ef      	beq.n	800a7ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a7ea:	4b27      	ldr	r3, [pc, #156]	@ (800a888 <xPortStartScheduler+0x138>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f1c3 0307 	rsb	r3, r3, #7
 800a7f2:	2b04      	cmp	r3, #4
 800a7f4:	d00b      	beq.n	800a80e <xPortStartScheduler+0xbe>
	__asm volatile
 800a7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7fa:	f383 8811 	msr	BASEPRI, r3
 800a7fe:	f3bf 8f6f 	isb	sy
 800a802:	f3bf 8f4f 	dsb	sy
 800a806:	60bb      	str	r3, [r7, #8]
}
 800a808:	bf00      	nop
 800a80a:	bf00      	nop
 800a80c:	e7fd      	b.n	800a80a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a80e:	4b1e      	ldr	r3, [pc, #120]	@ (800a888 <xPortStartScheduler+0x138>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	021b      	lsls	r3, r3, #8
 800a814:	4a1c      	ldr	r2, [pc, #112]	@ (800a888 <xPortStartScheduler+0x138>)
 800a816:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a818:	4b1b      	ldr	r3, [pc, #108]	@ (800a888 <xPortStartScheduler+0x138>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a820:	4a19      	ldr	r2, [pc, #100]	@ (800a888 <xPortStartScheduler+0x138>)
 800a822:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	b2da      	uxtb	r2, r3
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a82c:	4b17      	ldr	r3, [pc, #92]	@ (800a88c <xPortStartScheduler+0x13c>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a16      	ldr	r2, [pc, #88]	@ (800a88c <xPortStartScheduler+0x13c>)
 800a832:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a836:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a838:	4b14      	ldr	r3, [pc, #80]	@ (800a88c <xPortStartScheduler+0x13c>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a13      	ldr	r2, [pc, #76]	@ (800a88c <xPortStartScheduler+0x13c>)
 800a83e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a842:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a844:	f000 f8da 	bl	800a9fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a848:	4b11      	ldr	r3, [pc, #68]	@ (800a890 <xPortStartScheduler+0x140>)
 800a84a:	2200      	movs	r2, #0
 800a84c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a84e:	f000 f8f9 	bl	800aa44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a852:	4b10      	ldr	r3, [pc, #64]	@ (800a894 <xPortStartScheduler+0x144>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a0f      	ldr	r2, [pc, #60]	@ (800a894 <xPortStartScheduler+0x144>)
 800a858:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a85c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a85e:	f7ff ff63 	bl	800a728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a862:	f7ff fa6f 	bl	8009d44 <vTaskSwitchContext>
	prvTaskExitError();
 800a866:	f7ff ff17 	bl	800a698 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a86a:	2300      	movs	r3, #0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3718      	adds	r7, #24
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	e000ed00 	.word	0xe000ed00
 800a878:	410fc271 	.word	0x410fc271
 800a87c:	410fc270 	.word	0x410fc270
 800a880:	e000e400 	.word	0xe000e400
 800a884:	20000c84 	.word	0x20000c84
 800a888:	20000c88 	.word	0x20000c88
 800a88c:	e000ed20 	.word	0xe000ed20
 800a890:	20000024 	.word	0x20000024
 800a894:	e000ef34 	.word	0xe000ef34

0800a898 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
	__asm volatile
 800a89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8a2:	f383 8811 	msr	BASEPRI, r3
 800a8a6:	f3bf 8f6f 	isb	sy
 800a8aa:	f3bf 8f4f 	dsb	sy
 800a8ae:	607b      	str	r3, [r7, #4]
}
 800a8b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a8b2:	4b10      	ldr	r3, [pc, #64]	@ (800a8f4 <vPortEnterCritical+0x5c>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	4a0e      	ldr	r2, [pc, #56]	@ (800a8f4 <vPortEnterCritical+0x5c>)
 800a8ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a8bc:	4b0d      	ldr	r3, [pc, #52]	@ (800a8f4 <vPortEnterCritical+0x5c>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d110      	bne.n	800a8e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a8c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a8f8 <vPortEnterCritical+0x60>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00b      	beq.n	800a8e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	603b      	str	r3, [r7, #0]
}
 800a8e0:	bf00      	nop
 800a8e2:	bf00      	nop
 800a8e4:	e7fd      	b.n	800a8e2 <vPortEnterCritical+0x4a>
	}
}
 800a8e6:	bf00      	nop
 800a8e8:	370c      	adds	r7, #12
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr
 800a8f2:	bf00      	nop
 800a8f4:	20000024 	.word	0x20000024
 800a8f8:	e000ed04 	.word	0xe000ed04

0800a8fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a902:	4b12      	ldr	r3, [pc, #72]	@ (800a94c <vPortExitCritical+0x50>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10b      	bne.n	800a922 <vPortExitCritical+0x26>
	__asm volatile
 800a90a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a90e:	f383 8811 	msr	BASEPRI, r3
 800a912:	f3bf 8f6f 	isb	sy
 800a916:	f3bf 8f4f 	dsb	sy
 800a91a:	607b      	str	r3, [r7, #4]
}
 800a91c:	bf00      	nop
 800a91e:	bf00      	nop
 800a920:	e7fd      	b.n	800a91e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a922:	4b0a      	ldr	r3, [pc, #40]	@ (800a94c <vPortExitCritical+0x50>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	3b01      	subs	r3, #1
 800a928:	4a08      	ldr	r2, [pc, #32]	@ (800a94c <vPortExitCritical+0x50>)
 800a92a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a92c:	4b07      	ldr	r3, [pc, #28]	@ (800a94c <vPortExitCritical+0x50>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d105      	bne.n	800a940 <vPortExitCritical+0x44>
 800a934:	2300      	movs	r3, #0
 800a936:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	f383 8811 	msr	BASEPRI, r3
}
 800a93e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a940:	bf00      	nop
 800a942:	370c      	adds	r7, #12
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr
 800a94c:	20000024 	.word	0x20000024

0800a950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a950:	f3ef 8009 	mrs	r0, PSP
 800a954:	f3bf 8f6f 	isb	sy
 800a958:	4b15      	ldr	r3, [pc, #84]	@ (800a9b0 <pxCurrentTCBConst>)
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	f01e 0f10 	tst.w	lr, #16
 800a960:	bf08      	it	eq
 800a962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a96a:	6010      	str	r0, [r2, #0]
 800a96c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a970:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a974:	f380 8811 	msr	BASEPRI, r0
 800a978:	f3bf 8f4f 	dsb	sy
 800a97c:	f3bf 8f6f 	isb	sy
 800a980:	f7ff f9e0 	bl	8009d44 <vTaskSwitchContext>
 800a984:	f04f 0000 	mov.w	r0, #0
 800a988:	f380 8811 	msr	BASEPRI, r0
 800a98c:	bc09      	pop	{r0, r3}
 800a98e:	6819      	ldr	r1, [r3, #0]
 800a990:	6808      	ldr	r0, [r1, #0]
 800a992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a996:	f01e 0f10 	tst.w	lr, #16
 800a99a:	bf08      	it	eq
 800a99c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a9a0:	f380 8809 	msr	PSP, r0
 800a9a4:	f3bf 8f6f 	isb	sy
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	f3af 8000 	nop.w

0800a9b0 <pxCurrentTCBConst>:
 800a9b0:	20000b58 	.word	0x20000b58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a9b4:	bf00      	nop
 800a9b6:	bf00      	nop

0800a9b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c2:	f383 8811 	msr	BASEPRI, r3
 800a9c6:	f3bf 8f6f 	isb	sy
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	607b      	str	r3, [r7, #4]
}
 800a9d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a9d2:	f7ff f8fd 	bl	8009bd0 <xTaskIncrementTick>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d003      	beq.n	800a9e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a9dc:	4b06      	ldr	r3, [pc, #24]	@ (800a9f8 <SysTick_Handler+0x40>)
 800a9de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9e2:	601a      	str	r2, [r3, #0]
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	f383 8811 	msr	BASEPRI, r3
}
 800a9ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a9f0:	bf00      	nop
 800a9f2:	3708      	adds	r7, #8
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	e000ed04 	.word	0xe000ed04

0800a9fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa00:	4b0b      	ldr	r3, [pc, #44]	@ (800aa30 <vPortSetupTimerInterrupt+0x34>)
 800aa02:	2200      	movs	r2, #0
 800aa04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa06:	4b0b      	ldr	r3, [pc, #44]	@ (800aa34 <vPortSetupTimerInterrupt+0x38>)
 800aa08:	2200      	movs	r2, #0
 800aa0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa0c:	4b0a      	ldr	r3, [pc, #40]	@ (800aa38 <vPortSetupTimerInterrupt+0x3c>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a0a      	ldr	r2, [pc, #40]	@ (800aa3c <vPortSetupTimerInterrupt+0x40>)
 800aa12:	fba2 2303 	umull	r2, r3, r2, r3
 800aa16:	099b      	lsrs	r3, r3, #6
 800aa18:	4a09      	ldr	r2, [pc, #36]	@ (800aa40 <vPortSetupTimerInterrupt+0x44>)
 800aa1a:	3b01      	subs	r3, #1
 800aa1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa1e:	4b04      	ldr	r3, [pc, #16]	@ (800aa30 <vPortSetupTimerInterrupt+0x34>)
 800aa20:	2207      	movs	r2, #7
 800aa22:	601a      	str	r2, [r3, #0]
}
 800aa24:	bf00      	nop
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	e000e010 	.word	0xe000e010
 800aa34:	e000e018 	.word	0xe000e018
 800aa38:	20000004 	.word	0x20000004
 800aa3c:	10624dd3 	.word	0x10624dd3
 800aa40:	e000e014 	.word	0xe000e014

0800aa44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aa44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800aa54 <vPortEnableVFP+0x10>
 800aa48:	6801      	ldr	r1, [r0, #0]
 800aa4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800aa4e:	6001      	str	r1, [r0, #0]
 800aa50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa52:	bf00      	nop
 800aa54:	e000ed88 	.word	0xe000ed88

0800aa58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aa58:	b480      	push	{r7}
 800aa5a:	b085      	sub	sp, #20
 800aa5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aa5e:	f3ef 8305 	mrs	r3, IPSR
 800aa62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2b0f      	cmp	r3, #15
 800aa68:	d915      	bls.n	800aa96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aa6a:	4a18      	ldr	r2, [pc, #96]	@ (800aacc <vPortValidateInterruptPriority+0x74>)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	4413      	add	r3, r2
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aa74:	4b16      	ldr	r3, [pc, #88]	@ (800aad0 <vPortValidateInterruptPriority+0x78>)
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	7afa      	ldrb	r2, [r7, #11]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d20b      	bcs.n	800aa96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800aa7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa82:	f383 8811 	msr	BASEPRI, r3
 800aa86:	f3bf 8f6f 	isb	sy
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	607b      	str	r3, [r7, #4]
}
 800aa90:	bf00      	nop
 800aa92:	bf00      	nop
 800aa94:	e7fd      	b.n	800aa92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aa96:	4b0f      	ldr	r3, [pc, #60]	@ (800aad4 <vPortValidateInterruptPriority+0x7c>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800aa9e:	4b0e      	ldr	r3, [pc, #56]	@ (800aad8 <vPortValidateInterruptPriority+0x80>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d90b      	bls.n	800aabe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800aaa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaaa:	f383 8811 	msr	BASEPRI, r3
 800aaae:	f3bf 8f6f 	isb	sy
 800aab2:	f3bf 8f4f 	dsb	sy
 800aab6:	603b      	str	r3, [r7, #0]
}
 800aab8:	bf00      	nop
 800aaba:	bf00      	nop
 800aabc:	e7fd      	b.n	800aaba <vPortValidateInterruptPriority+0x62>
	}
 800aabe:	bf00      	nop
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	e000e3f0 	.word	0xe000e3f0
 800aad0:	20000c84 	.word	0x20000c84
 800aad4:	e000ed0c 	.word	0xe000ed0c
 800aad8:	20000c88 	.word	0x20000c88

0800aadc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b08a      	sub	sp, #40	@ 0x28
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aae4:	2300      	movs	r3, #0
 800aae6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aae8:	f7fe ffc6 	bl	8009a78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aaec:	4b5c      	ldr	r3, [pc, #368]	@ (800ac60 <pvPortMalloc+0x184>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d101      	bne.n	800aaf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aaf4:	f000 f924 	bl	800ad40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aaf8:	4b5a      	ldr	r3, [pc, #360]	@ (800ac64 <pvPortMalloc+0x188>)
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4013      	ands	r3, r2
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f040 8095 	bne.w	800ac30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d01e      	beq.n	800ab4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ab0c:	2208      	movs	r2, #8
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	4413      	add	r3, r2
 800ab12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f003 0307 	and.w	r3, r3, #7
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d015      	beq.n	800ab4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f023 0307 	bic.w	r3, r3, #7
 800ab24:	3308      	adds	r3, #8
 800ab26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f003 0307 	and.w	r3, r3, #7
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d00b      	beq.n	800ab4a <pvPortMalloc+0x6e>
	__asm volatile
 800ab32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab36:	f383 8811 	msr	BASEPRI, r3
 800ab3a:	f3bf 8f6f 	isb	sy
 800ab3e:	f3bf 8f4f 	dsb	sy
 800ab42:	617b      	str	r3, [r7, #20]
}
 800ab44:	bf00      	nop
 800ab46:	bf00      	nop
 800ab48:	e7fd      	b.n	800ab46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d06f      	beq.n	800ac30 <pvPortMalloc+0x154>
 800ab50:	4b45      	ldr	r3, [pc, #276]	@ (800ac68 <pvPortMalloc+0x18c>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d86a      	bhi.n	800ac30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ab5a:	4b44      	ldr	r3, [pc, #272]	@ (800ac6c <pvPortMalloc+0x190>)
 800ab5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ab5e:	4b43      	ldr	r3, [pc, #268]	@ (800ac6c <pvPortMalloc+0x190>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab64:	e004      	b.n	800ab70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ab66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ab6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d903      	bls.n	800ab82 <pvPortMalloc+0xa6>
 800ab7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d1f1      	bne.n	800ab66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ab82:	4b37      	ldr	r3, [pc, #220]	@ (800ac60 <pvPortMalloc+0x184>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d051      	beq.n	800ac30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ab8c:	6a3b      	ldr	r3, [r7, #32]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2208      	movs	r2, #8
 800ab92:	4413      	add	r3, r2
 800ab94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ab96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	6a3b      	ldr	r3, [r7, #32]
 800ab9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ab9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba0:	685a      	ldr	r2, [r3, #4]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	1ad2      	subs	r2, r2, r3
 800aba6:	2308      	movs	r3, #8
 800aba8:	005b      	lsls	r3, r3, #1
 800abaa:	429a      	cmp	r2, r3
 800abac:	d920      	bls.n	800abf0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800abae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4413      	add	r3, r2
 800abb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	f003 0307 	and.w	r3, r3, #7
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d00b      	beq.n	800abd8 <pvPortMalloc+0xfc>
	__asm volatile
 800abc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc4:	f383 8811 	msr	BASEPRI, r3
 800abc8:	f3bf 8f6f 	isb	sy
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	613b      	str	r3, [r7, #16]
}
 800abd2:	bf00      	nop
 800abd4:	bf00      	nop
 800abd6:	e7fd      	b.n	800abd4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800abd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abda:	685a      	ldr	r2, [r3, #4]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	1ad2      	subs	r2, r2, r3
 800abe0:	69bb      	ldr	r3, [r7, #24]
 800abe2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800abe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800abea:	69b8      	ldr	r0, [r7, #24]
 800abec:	f000 f90a 	bl	800ae04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800abf0:	4b1d      	ldr	r3, [pc, #116]	@ (800ac68 <pvPortMalloc+0x18c>)
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	1ad3      	subs	r3, r2, r3
 800abfa:	4a1b      	ldr	r2, [pc, #108]	@ (800ac68 <pvPortMalloc+0x18c>)
 800abfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800abfe:	4b1a      	ldr	r3, [pc, #104]	@ (800ac68 <pvPortMalloc+0x18c>)
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	4b1b      	ldr	r3, [pc, #108]	@ (800ac70 <pvPortMalloc+0x194>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d203      	bcs.n	800ac12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac0a:	4b17      	ldr	r3, [pc, #92]	@ (800ac68 <pvPortMalloc+0x18c>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a18      	ldr	r2, [pc, #96]	@ (800ac70 <pvPortMalloc+0x194>)
 800ac10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac14:	685a      	ldr	r2, [r3, #4]
 800ac16:	4b13      	ldr	r3, [pc, #76]	@ (800ac64 <pvPortMalloc+0x188>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	431a      	orrs	r2, r3
 800ac1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac22:	2200      	movs	r2, #0
 800ac24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ac26:	4b13      	ldr	r3, [pc, #76]	@ (800ac74 <pvPortMalloc+0x198>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	4a11      	ldr	r2, [pc, #68]	@ (800ac74 <pvPortMalloc+0x198>)
 800ac2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac30:	f7fe ff30 	bl	8009a94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	f003 0307 	and.w	r3, r3, #7
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00b      	beq.n	800ac56 <pvPortMalloc+0x17a>
	__asm volatile
 800ac3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac42:	f383 8811 	msr	BASEPRI, r3
 800ac46:	f3bf 8f6f 	isb	sy
 800ac4a:	f3bf 8f4f 	dsb	sy
 800ac4e:	60fb      	str	r3, [r7, #12]
}
 800ac50:	bf00      	nop
 800ac52:	bf00      	nop
 800ac54:	e7fd      	b.n	800ac52 <pvPortMalloc+0x176>
	return pvReturn;
 800ac56:	69fb      	ldr	r3, [r7, #28]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3728      	adds	r7, #40	@ 0x28
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	20004894 	.word	0x20004894
 800ac64:	200048a8 	.word	0x200048a8
 800ac68:	20004898 	.word	0x20004898
 800ac6c:	2000488c 	.word	0x2000488c
 800ac70:	2000489c 	.word	0x2000489c
 800ac74:	200048a0 	.word	0x200048a0

0800ac78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b086      	sub	sp, #24
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d04f      	beq.n	800ad2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ac8a:	2308      	movs	r3, #8
 800ac8c:	425b      	negs	r3, r3
 800ac8e:	697a      	ldr	r2, [r7, #20]
 800ac90:	4413      	add	r3, r2
 800ac92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	685a      	ldr	r2, [r3, #4]
 800ac9c:	4b25      	ldr	r3, [pc, #148]	@ (800ad34 <vPortFree+0xbc>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4013      	ands	r3, r2
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d10b      	bne.n	800acbe <vPortFree+0x46>
	__asm volatile
 800aca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acaa:	f383 8811 	msr	BASEPRI, r3
 800acae:	f3bf 8f6f 	isb	sy
 800acb2:	f3bf 8f4f 	dsb	sy
 800acb6:	60fb      	str	r3, [r7, #12]
}
 800acb8:	bf00      	nop
 800acba:	bf00      	nop
 800acbc:	e7fd      	b.n	800acba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d00b      	beq.n	800acde <vPortFree+0x66>
	__asm volatile
 800acc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acca:	f383 8811 	msr	BASEPRI, r3
 800acce:	f3bf 8f6f 	isb	sy
 800acd2:	f3bf 8f4f 	dsb	sy
 800acd6:	60bb      	str	r3, [r7, #8]
}
 800acd8:	bf00      	nop
 800acda:	bf00      	nop
 800acdc:	e7fd      	b.n	800acda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	685a      	ldr	r2, [r3, #4]
 800ace2:	4b14      	ldr	r3, [pc, #80]	@ (800ad34 <vPortFree+0xbc>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4013      	ands	r3, r2
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d01e      	beq.n	800ad2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d11a      	bne.n	800ad2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	685a      	ldr	r2, [r3, #4]
 800acf8:	4b0e      	ldr	r3, [pc, #56]	@ (800ad34 <vPortFree+0xbc>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	43db      	mvns	r3, r3
 800acfe:	401a      	ands	r2, r3
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad04:	f7fe feb8 	bl	8009a78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	685a      	ldr	r2, [r3, #4]
 800ad0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ad38 <vPortFree+0xc0>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4413      	add	r3, r2
 800ad12:	4a09      	ldr	r2, [pc, #36]	@ (800ad38 <vPortFree+0xc0>)
 800ad14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad16:	6938      	ldr	r0, [r7, #16]
 800ad18:	f000 f874 	bl	800ae04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ad1c:	4b07      	ldr	r3, [pc, #28]	@ (800ad3c <vPortFree+0xc4>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	3301      	adds	r3, #1
 800ad22:	4a06      	ldr	r2, [pc, #24]	@ (800ad3c <vPortFree+0xc4>)
 800ad24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ad26:	f7fe feb5 	bl	8009a94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad2a:	bf00      	nop
 800ad2c:	3718      	adds	r7, #24
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	200048a8 	.word	0x200048a8
 800ad38:	20004898 	.word	0x20004898
 800ad3c:	200048a4 	.word	0x200048a4

0800ad40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad40:	b480      	push	{r7}
 800ad42:	b085      	sub	sp, #20
 800ad44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad46:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ad4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad4c:	4b27      	ldr	r3, [pc, #156]	@ (800adec <prvHeapInit+0xac>)
 800ad4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f003 0307 	and.w	r3, r3, #7
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00c      	beq.n	800ad74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	3307      	adds	r3, #7
 800ad5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f023 0307 	bic.w	r3, r3, #7
 800ad66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ad68:	68ba      	ldr	r2, [r7, #8]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	1ad3      	subs	r3, r2, r3
 800ad6e:	4a1f      	ldr	r2, [pc, #124]	@ (800adec <prvHeapInit+0xac>)
 800ad70:	4413      	add	r3, r2
 800ad72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ad78:	4a1d      	ldr	r2, [pc, #116]	@ (800adf0 <prvHeapInit+0xb0>)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ad7e:	4b1c      	ldr	r3, [pc, #112]	@ (800adf0 <prvHeapInit+0xb0>)
 800ad80:	2200      	movs	r2, #0
 800ad82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	68ba      	ldr	r2, [r7, #8]
 800ad88:	4413      	add	r3, r2
 800ad8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ad8c:	2208      	movs	r2, #8
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	1a9b      	subs	r3, r3, r2
 800ad92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f023 0307 	bic.w	r3, r3, #7
 800ad9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	4a15      	ldr	r2, [pc, #84]	@ (800adf4 <prvHeapInit+0xb4>)
 800ada0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ada2:	4b14      	ldr	r3, [pc, #80]	@ (800adf4 <prvHeapInit+0xb4>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2200      	movs	r2, #0
 800ada8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800adaa:	4b12      	ldr	r3, [pc, #72]	@ (800adf4 <prvHeapInit+0xb4>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2200      	movs	r2, #0
 800adb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	1ad2      	subs	r2, r2, r3
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800adc0:	4b0c      	ldr	r3, [pc, #48]	@ (800adf4 <prvHeapInit+0xb4>)
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	4a0a      	ldr	r2, [pc, #40]	@ (800adf8 <prvHeapInit+0xb8>)
 800adce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	4a09      	ldr	r2, [pc, #36]	@ (800adfc <prvHeapInit+0xbc>)
 800add6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800add8:	4b09      	ldr	r3, [pc, #36]	@ (800ae00 <prvHeapInit+0xc0>)
 800adda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800adde:	601a      	str	r2, [r3, #0]
}
 800ade0:	bf00      	nop
 800ade2:	3714      	adds	r7, #20
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr
 800adec:	20000c8c 	.word	0x20000c8c
 800adf0:	2000488c 	.word	0x2000488c
 800adf4:	20004894 	.word	0x20004894
 800adf8:	2000489c 	.word	0x2000489c
 800adfc:	20004898 	.word	0x20004898
 800ae00:	200048a8 	.word	0x200048a8

0800ae04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae0c:	4b28      	ldr	r3, [pc, #160]	@ (800aeb0 <prvInsertBlockIntoFreeList+0xac>)
 800ae0e:	60fb      	str	r3, [r7, #12]
 800ae10:	e002      	b.n	800ae18 <prvInsertBlockIntoFreeList+0x14>
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	60fb      	str	r3, [r7, #12]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d8f7      	bhi.n	800ae12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	68ba      	ldr	r2, [r7, #8]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d108      	bne.n	800ae46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	685a      	ldr	r2, [r3, #4]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	441a      	add	r2, r3
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	68ba      	ldr	r2, [r7, #8]
 800ae50:	441a      	add	r2, r3
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d118      	bne.n	800ae8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	4b15      	ldr	r3, [pc, #84]	@ (800aeb4 <prvInsertBlockIntoFreeList+0xb0>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d00d      	beq.n	800ae82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	685a      	ldr	r2, [r3, #4]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	441a      	add	r2, r3
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	601a      	str	r2, [r3, #0]
 800ae80:	e008      	b.n	800ae94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ae82:	4b0c      	ldr	r3, [pc, #48]	@ (800aeb4 <prvInsertBlockIntoFreeList+0xb0>)
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	601a      	str	r2, [r3, #0]
 800ae8a:	e003      	b.n	800ae94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d002      	beq.n	800aea2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aea2:	bf00      	nop
 800aea4:	3714      	adds	r7, #20
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	2000488c 	.word	0x2000488c
 800aeb4:	20004894 	.word	0x20004894

0800aeb8 <__cvt>:
 800aeb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aebc:	ec57 6b10 	vmov	r6, r7, d0
 800aec0:	2f00      	cmp	r7, #0
 800aec2:	460c      	mov	r4, r1
 800aec4:	4619      	mov	r1, r3
 800aec6:	463b      	mov	r3, r7
 800aec8:	bfbb      	ittet	lt
 800aeca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800aece:	461f      	movlt	r7, r3
 800aed0:	2300      	movge	r3, #0
 800aed2:	232d      	movlt	r3, #45	@ 0x2d
 800aed4:	700b      	strb	r3, [r1, #0]
 800aed6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aed8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800aedc:	4691      	mov	r9, r2
 800aede:	f023 0820 	bic.w	r8, r3, #32
 800aee2:	bfbc      	itt	lt
 800aee4:	4632      	movlt	r2, r6
 800aee6:	4616      	movlt	r6, r2
 800aee8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aeec:	d005      	beq.n	800aefa <__cvt+0x42>
 800aeee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800aef2:	d100      	bne.n	800aef6 <__cvt+0x3e>
 800aef4:	3401      	adds	r4, #1
 800aef6:	2102      	movs	r1, #2
 800aef8:	e000      	b.n	800aefc <__cvt+0x44>
 800aefa:	2103      	movs	r1, #3
 800aefc:	ab03      	add	r3, sp, #12
 800aefe:	9301      	str	r3, [sp, #4]
 800af00:	ab02      	add	r3, sp, #8
 800af02:	9300      	str	r3, [sp, #0]
 800af04:	ec47 6b10 	vmov	d0, r6, r7
 800af08:	4653      	mov	r3, sl
 800af0a:	4622      	mov	r2, r4
 800af0c:	f001 f90c 	bl	800c128 <_dtoa_r>
 800af10:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800af14:	4605      	mov	r5, r0
 800af16:	d119      	bne.n	800af4c <__cvt+0x94>
 800af18:	f019 0f01 	tst.w	r9, #1
 800af1c:	d00e      	beq.n	800af3c <__cvt+0x84>
 800af1e:	eb00 0904 	add.w	r9, r0, r4
 800af22:	2200      	movs	r2, #0
 800af24:	2300      	movs	r3, #0
 800af26:	4630      	mov	r0, r6
 800af28:	4639      	mov	r1, r7
 800af2a:	f7f5 fdfd 	bl	8000b28 <__aeabi_dcmpeq>
 800af2e:	b108      	cbz	r0, 800af34 <__cvt+0x7c>
 800af30:	f8cd 900c 	str.w	r9, [sp, #12]
 800af34:	2230      	movs	r2, #48	@ 0x30
 800af36:	9b03      	ldr	r3, [sp, #12]
 800af38:	454b      	cmp	r3, r9
 800af3a:	d31e      	bcc.n	800af7a <__cvt+0xc2>
 800af3c:	9b03      	ldr	r3, [sp, #12]
 800af3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af40:	1b5b      	subs	r3, r3, r5
 800af42:	4628      	mov	r0, r5
 800af44:	6013      	str	r3, [r2, #0]
 800af46:	b004      	add	sp, #16
 800af48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af4c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800af50:	eb00 0904 	add.w	r9, r0, r4
 800af54:	d1e5      	bne.n	800af22 <__cvt+0x6a>
 800af56:	7803      	ldrb	r3, [r0, #0]
 800af58:	2b30      	cmp	r3, #48	@ 0x30
 800af5a:	d10a      	bne.n	800af72 <__cvt+0xba>
 800af5c:	2200      	movs	r2, #0
 800af5e:	2300      	movs	r3, #0
 800af60:	4630      	mov	r0, r6
 800af62:	4639      	mov	r1, r7
 800af64:	f7f5 fde0 	bl	8000b28 <__aeabi_dcmpeq>
 800af68:	b918      	cbnz	r0, 800af72 <__cvt+0xba>
 800af6a:	f1c4 0401 	rsb	r4, r4, #1
 800af6e:	f8ca 4000 	str.w	r4, [sl]
 800af72:	f8da 3000 	ldr.w	r3, [sl]
 800af76:	4499      	add	r9, r3
 800af78:	e7d3      	b.n	800af22 <__cvt+0x6a>
 800af7a:	1c59      	adds	r1, r3, #1
 800af7c:	9103      	str	r1, [sp, #12]
 800af7e:	701a      	strb	r2, [r3, #0]
 800af80:	e7d9      	b.n	800af36 <__cvt+0x7e>

0800af82 <__exponent>:
 800af82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af84:	2900      	cmp	r1, #0
 800af86:	bfba      	itte	lt
 800af88:	4249      	neglt	r1, r1
 800af8a:	232d      	movlt	r3, #45	@ 0x2d
 800af8c:	232b      	movge	r3, #43	@ 0x2b
 800af8e:	2909      	cmp	r1, #9
 800af90:	7002      	strb	r2, [r0, #0]
 800af92:	7043      	strb	r3, [r0, #1]
 800af94:	dd29      	ble.n	800afea <__exponent+0x68>
 800af96:	f10d 0307 	add.w	r3, sp, #7
 800af9a:	461d      	mov	r5, r3
 800af9c:	270a      	movs	r7, #10
 800af9e:	461a      	mov	r2, r3
 800afa0:	fbb1 f6f7 	udiv	r6, r1, r7
 800afa4:	fb07 1416 	mls	r4, r7, r6, r1
 800afa8:	3430      	adds	r4, #48	@ 0x30
 800afaa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800afae:	460c      	mov	r4, r1
 800afb0:	2c63      	cmp	r4, #99	@ 0x63
 800afb2:	f103 33ff 	add.w	r3, r3, #4294967295
 800afb6:	4631      	mov	r1, r6
 800afb8:	dcf1      	bgt.n	800af9e <__exponent+0x1c>
 800afba:	3130      	adds	r1, #48	@ 0x30
 800afbc:	1e94      	subs	r4, r2, #2
 800afbe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800afc2:	1c41      	adds	r1, r0, #1
 800afc4:	4623      	mov	r3, r4
 800afc6:	42ab      	cmp	r3, r5
 800afc8:	d30a      	bcc.n	800afe0 <__exponent+0x5e>
 800afca:	f10d 0309 	add.w	r3, sp, #9
 800afce:	1a9b      	subs	r3, r3, r2
 800afd0:	42ac      	cmp	r4, r5
 800afd2:	bf88      	it	hi
 800afd4:	2300      	movhi	r3, #0
 800afd6:	3302      	adds	r3, #2
 800afd8:	4403      	add	r3, r0
 800afda:	1a18      	subs	r0, r3, r0
 800afdc:	b003      	add	sp, #12
 800afde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afe0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800afe4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800afe8:	e7ed      	b.n	800afc6 <__exponent+0x44>
 800afea:	2330      	movs	r3, #48	@ 0x30
 800afec:	3130      	adds	r1, #48	@ 0x30
 800afee:	7083      	strb	r3, [r0, #2]
 800aff0:	70c1      	strb	r1, [r0, #3]
 800aff2:	1d03      	adds	r3, r0, #4
 800aff4:	e7f1      	b.n	800afda <__exponent+0x58>
	...

0800aff8 <_printf_float>:
 800aff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800affc:	b08d      	sub	sp, #52	@ 0x34
 800affe:	460c      	mov	r4, r1
 800b000:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b004:	4616      	mov	r6, r2
 800b006:	461f      	mov	r7, r3
 800b008:	4605      	mov	r5, r0
 800b00a:	f000 ff23 	bl	800be54 <_localeconv_r>
 800b00e:	6803      	ldr	r3, [r0, #0]
 800b010:	9304      	str	r3, [sp, #16]
 800b012:	4618      	mov	r0, r3
 800b014:	f7f5 f95c 	bl	80002d0 <strlen>
 800b018:	2300      	movs	r3, #0
 800b01a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b01c:	f8d8 3000 	ldr.w	r3, [r8]
 800b020:	9005      	str	r0, [sp, #20]
 800b022:	3307      	adds	r3, #7
 800b024:	f023 0307 	bic.w	r3, r3, #7
 800b028:	f103 0208 	add.w	r2, r3, #8
 800b02c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b030:	f8d4 b000 	ldr.w	fp, [r4]
 800b034:	f8c8 2000 	str.w	r2, [r8]
 800b038:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b03c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b040:	9307      	str	r3, [sp, #28]
 800b042:	f8cd 8018 	str.w	r8, [sp, #24]
 800b046:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b04a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b04e:	4b9c      	ldr	r3, [pc, #624]	@ (800b2c0 <_printf_float+0x2c8>)
 800b050:	f04f 32ff 	mov.w	r2, #4294967295
 800b054:	f7f5 fd9a 	bl	8000b8c <__aeabi_dcmpun>
 800b058:	bb70      	cbnz	r0, 800b0b8 <_printf_float+0xc0>
 800b05a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b05e:	4b98      	ldr	r3, [pc, #608]	@ (800b2c0 <_printf_float+0x2c8>)
 800b060:	f04f 32ff 	mov.w	r2, #4294967295
 800b064:	f7f5 fd74 	bl	8000b50 <__aeabi_dcmple>
 800b068:	bb30      	cbnz	r0, 800b0b8 <_printf_float+0xc0>
 800b06a:	2200      	movs	r2, #0
 800b06c:	2300      	movs	r3, #0
 800b06e:	4640      	mov	r0, r8
 800b070:	4649      	mov	r1, r9
 800b072:	f7f5 fd63 	bl	8000b3c <__aeabi_dcmplt>
 800b076:	b110      	cbz	r0, 800b07e <_printf_float+0x86>
 800b078:	232d      	movs	r3, #45	@ 0x2d
 800b07a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b07e:	4a91      	ldr	r2, [pc, #580]	@ (800b2c4 <_printf_float+0x2cc>)
 800b080:	4b91      	ldr	r3, [pc, #580]	@ (800b2c8 <_printf_float+0x2d0>)
 800b082:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b086:	bf94      	ite	ls
 800b088:	4690      	movls	r8, r2
 800b08a:	4698      	movhi	r8, r3
 800b08c:	2303      	movs	r3, #3
 800b08e:	6123      	str	r3, [r4, #16]
 800b090:	f02b 0304 	bic.w	r3, fp, #4
 800b094:	6023      	str	r3, [r4, #0]
 800b096:	f04f 0900 	mov.w	r9, #0
 800b09a:	9700      	str	r7, [sp, #0]
 800b09c:	4633      	mov	r3, r6
 800b09e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b0a0:	4621      	mov	r1, r4
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	f000 f9d2 	bl	800b44c <_printf_common>
 800b0a8:	3001      	adds	r0, #1
 800b0aa:	f040 808d 	bne.w	800b1c8 <_printf_float+0x1d0>
 800b0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b2:	b00d      	add	sp, #52	@ 0x34
 800b0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b8:	4642      	mov	r2, r8
 800b0ba:	464b      	mov	r3, r9
 800b0bc:	4640      	mov	r0, r8
 800b0be:	4649      	mov	r1, r9
 800b0c0:	f7f5 fd64 	bl	8000b8c <__aeabi_dcmpun>
 800b0c4:	b140      	cbz	r0, 800b0d8 <_printf_float+0xe0>
 800b0c6:	464b      	mov	r3, r9
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	bfbc      	itt	lt
 800b0cc:	232d      	movlt	r3, #45	@ 0x2d
 800b0ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b0d2:	4a7e      	ldr	r2, [pc, #504]	@ (800b2cc <_printf_float+0x2d4>)
 800b0d4:	4b7e      	ldr	r3, [pc, #504]	@ (800b2d0 <_printf_float+0x2d8>)
 800b0d6:	e7d4      	b.n	800b082 <_printf_float+0x8a>
 800b0d8:	6863      	ldr	r3, [r4, #4]
 800b0da:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b0de:	9206      	str	r2, [sp, #24]
 800b0e0:	1c5a      	adds	r2, r3, #1
 800b0e2:	d13b      	bne.n	800b15c <_printf_float+0x164>
 800b0e4:	2306      	movs	r3, #6
 800b0e6:	6063      	str	r3, [r4, #4]
 800b0e8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	6022      	str	r2, [r4, #0]
 800b0f0:	9303      	str	r3, [sp, #12]
 800b0f2:	ab0a      	add	r3, sp, #40	@ 0x28
 800b0f4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b0f8:	ab09      	add	r3, sp, #36	@ 0x24
 800b0fa:	9300      	str	r3, [sp, #0]
 800b0fc:	6861      	ldr	r1, [r4, #4]
 800b0fe:	ec49 8b10 	vmov	d0, r8, r9
 800b102:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b106:	4628      	mov	r0, r5
 800b108:	f7ff fed6 	bl	800aeb8 <__cvt>
 800b10c:	9b06      	ldr	r3, [sp, #24]
 800b10e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b110:	2b47      	cmp	r3, #71	@ 0x47
 800b112:	4680      	mov	r8, r0
 800b114:	d129      	bne.n	800b16a <_printf_float+0x172>
 800b116:	1cc8      	adds	r0, r1, #3
 800b118:	db02      	blt.n	800b120 <_printf_float+0x128>
 800b11a:	6863      	ldr	r3, [r4, #4]
 800b11c:	4299      	cmp	r1, r3
 800b11e:	dd41      	ble.n	800b1a4 <_printf_float+0x1ac>
 800b120:	f1aa 0a02 	sub.w	sl, sl, #2
 800b124:	fa5f fa8a 	uxtb.w	sl, sl
 800b128:	3901      	subs	r1, #1
 800b12a:	4652      	mov	r2, sl
 800b12c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b130:	9109      	str	r1, [sp, #36]	@ 0x24
 800b132:	f7ff ff26 	bl	800af82 <__exponent>
 800b136:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b138:	1813      	adds	r3, r2, r0
 800b13a:	2a01      	cmp	r2, #1
 800b13c:	4681      	mov	r9, r0
 800b13e:	6123      	str	r3, [r4, #16]
 800b140:	dc02      	bgt.n	800b148 <_printf_float+0x150>
 800b142:	6822      	ldr	r2, [r4, #0]
 800b144:	07d2      	lsls	r2, r2, #31
 800b146:	d501      	bpl.n	800b14c <_printf_float+0x154>
 800b148:	3301      	adds	r3, #1
 800b14a:	6123      	str	r3, [r4, #16]
 800b14c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b150:	2b00      	cmp	r3, #0
 800b152:	d0a2      	beq.n	800b09a <_printf_float+0xa2>
 800b154:	232d      	movs	r3, #45	@ 0x2d
 800b156:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b15a:	e79e      	b.n	800b09a <_printf_float+0xa2>
 800b15c:	9a06      	ldr	r2, [sp, #24]
 800b15e:	2a47      	cmp	r2, #71	@ 0x47
 800b160:	d1c2      	bne.n	800b0e8 <_printf_float+0xf0>
 800b162:	2b00      	cmp	r3, #0
 800b164:	d1c0      	bne.n	800b0e8 <_printf_float+0xf0>
 800b166:	2301      	movs	r3, #1
 800b168:	e7bd      	b.n	800b0e6 <_printf_float+0xee>
 800b16a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b16e:	d9db      	bls.n	800b128 <_printf_float+0x130>
 800b170:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b174:	d118      	bne.n	800b1a8 <_printf_float+0x1b0>
 800b176:	2900      	cmp	r1, #0
 800b178:	6863      	ldr	r3, [r4, #4]
 800b17a:	dd0b      	ble.n	800b194 <_printf_float+0x19c>
 800b17c:	6121      	str	r1, [r4, #16]
 800b17e:	b913      	cbnz	r3, 800b186 <_printf_float+0x18e>
 800b180:	6822      	ldr	r2, [r4, #0]
 800b182:	07d0      	lsls	r0, r2, #31
 800b184:	d502      	bpl.n	800b18c <_printf_float+0x194>
 800b186:	3301      	adds	r3, #1
 800b188:	440b      	add	r3, r1
 800b18a:	6123      	str	r3, [r4, #16]
 800b18c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b18e:	f04f 0900 	mov.w	r9, #0
 800b192:	e7db      	b.n	800b14c <_printf_float+0x154>
 800b194:	b913      	cbnz	r3, 800b19c <_printf_float+0x1a4>
 800b196:	6822      	ldr	r2, [r4, #0]
 800b198:	07d2      	lsls	r2, r2, #31
 800b19a:	d501      	bpl.n	800b1a0 <_printf_float+0x1a8>
 800b19c:	3302      	adds	r3, #2
 800b19e:	e7f4      	b.n	800b18a <_printf_float+0x192>
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e7f2      	b.n	800b18a <_printf_float+0x192>
 800b1a4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b1a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1aa:	4299      	cmp	r1, r3
 800b1ac:	db05      	blt.n	800b1ba <_printf_float+0x1c2>
 800b1ae:	6823      	ldr	r3, [r4, #0]
 800b1b0:	6121      	str	r1, [r4, #16]
 800b1b2:	07d8      	lsls	r0, r3, #31
 800b1b4:	d5ea      	bpl.n	800b18c <_printf_float+0x194>
 800b1b6:	1c4b      	adds	r3, r1, #1
 800b1b8:	e7e7      	b.n	800b18a <_printf_float+0x192>
 800b1ba:	2900      	cmp	r1, #0
 800b1bc:	bfd4      	ite	le
 800b1be:	f1c1 0202 	rsble	r2, r1, #2
 800b1c2:	2201      	movgt	r2, #1
 800b1c4:	4413      	add	r3, r2
 800b1c6:	e7e0      	b.n	800b18a <_printf_float+0x192>
 800b1c8:	6823      	ldr	r3, [r4, #0]
 800b1ca:	055a      	lsls	r2, r3, #21
 800b1cc:	d407      	bmi.n	800b1de <_printf_float+0x1e6>
 800b1ce:	6923      	ldr	r3, [r4, #16]
 800b1d0:	4642      	mov	r2, r8
 800b1d2:	4631      	mov	r1, r6
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	47b8      	blx	r7
 800b1d8:	3001      	adds	r0, #1
 800b1da:	d12b      	bne.n	800b234 <_printf_float+0x23c>
 800b1dc:	e767      	b.n	800b0ae <_printf_float+0xb6>
 800b1de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b1e2:	f240 80dd 	bls.w	800b3a0 <_printf_float+0x3a8>
 800b1e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	f7f5 fc9b 	bl	8000b28 <__aeabi_dcmpeq>
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	d033      	beq.n	800b25e <_printf_float+0x266>
 800b1f6:	4a37      	ldr	r2, [pc, #220]	@ (800b2d4 <_printf_float+0x2dc>)
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	4631      	mov	r1, r6
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	47b8      	blx	r7
 800b200:	3001      	adds	r0, #1
 800b202:	f43f af54 	beq.w	800b0ae <_printf_float+0xb6>
 800b206:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b20a:	4543      	cmp	r3, r8
 800b20c:	db02      	blt.n	800b214 <_printf_float+0x21c>
 800b20e:	6823      	ldr	r3, [r4, #0]
 800b210:	07d8      	lsls	r0, r3, #31
 800b212:	d50f      	bpl.n	800b234 <_printf_float+0x23c>
 800b214:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b218:	4631      	mov	r1, r6
 800b21a:	4628      	mov	r0, r5
 800b21c:	47b8      	blx	r7
 800b21e:	3001      	adds	r0, #1
 800b220:	f43f af45 	beq.w	800b0ae <_printf_float+0xb6>
 800b224:	f04f 0900 	mov.w	r9, #0
 800b228:	f108 38ff 	add.w	r8, r8, #4294967295
 800b22c:	f104 0a1a 	add.w	sl, r4, #26
 800b230:	45c8      	cmp	r8, r9
 800b232:	dc09      	bgt.n	800b248 <_printf_float+0x250>
 800b234:	6823      	ldr	r3, [r4, #0]
 800b236:	079b      	lsls	r3, r3, #30
 800b238:	f100 8103 	bmi.w	800b442 <_printf_float+0x44a>
 800b23c:	68e0      	ldr	r0, [r4, #12]
 800b23e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b240:	4298      	cmp	r0, r3
 800b242:	bfb8      	it	lt
 800b244:	4618      	movlt	r0, r3
 800b246:	e734      	b.n	800b0b2 <_printf_float+0xba>
 800b248:	2301      	movs	r3, #1
 800b24a:	4652      	mov	r2, sl
 800b24c:	4631      	mov	r1, r6
 800b24e:	4628      	mov	r0, r5
 800b250:	47b8      	blx	r7
 800b252:	3001      	adds	r0, #1
 800b254:	f43f af2b 	beq.w	800b0ae <_printf_float+0xb6>
 800b258:	f109 0901 	add.w	r9, r9, #1
 800b25c:	e7e8      	b.n	800b230 <_printf_float+0x238>
 800b25e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b260:	2b00      	cmp	r3, #0
 800b262:	dc39      	bgt.n	800b2d8 <_printf_float+0x2e0>
 800b264:	4a1b      	ldr	r2, [pc, #108]	@ (800b2d4 <_printf_float+0x2dc>)
 800b266:	2301      	movs	r3, #1
 800b268:	4631      	mov	r1, r6
 800b26a:	4628      	mov	r0, r5
 800b26c:	47b8      	blx	r7
 800b26e:	3001      	adds	r0, #1
 800b270:	f43f af1d 	beq.w	800b0ae <_printf_float+0xb6>
 800b274:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b278:	ea59 0303 	orrs.w	r3, r9, r3
 800b27c:	d102      	bne.n	800b284 <_printf_float+0x28c>
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	07d9      	lsls	r1, r3, #31
 800b282:	d5d7      	bpl.n	800b234 <_printf_float+0x23c>
 800b284:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b288:	4631      	mov	r1, r6
 800b28a:	4628      	mov	r0, r5
 800b28c:	47b8      	blx	r7
 800b28e:	3001      	adds	r0, #1
 800b290:	f43f af0d 	beq.w	800b0ae <_printf_float+0xb6>
 800b294:	f04f 0a00 	mov.w	sl, #0
 800b298:	f104 0b1a 	add.w	fp, r4, #26
 800b29c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b29e:	425b      	negs	r3, r3
 800b2a0:	4553      	cmp	r3, sl
 800b2a2:	dc01      	bgt.n	800b2a8 <_printf_float+0x2b0>
 800b2a4:	464b      	mov	r3, r9
 800b2a6:	e793      	b.n	800b1d0 <_printf_float+0x1d8>
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	465a      	mov	r2, fp
 800b2ac:	4631      	mov	r1, r6
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	47b8      	blx	r7
 800b2b2:	3001      	adds	r0, #1
 800b2b4:	f43f aefb 	beq.w	800b0ae <_printf_float+0xb6>
 800b2b8:	f10a 0a01 	add.w	sl, sl, #1
 800b2bc:	e7ee      	b.n	800b29c <_printf_float+0x2a4>
 800b2be:	bf00      	nop
 800b2c0:	7fefffff 	.word	0x7fefffff
 800b2c4:	0800fb90 	.word	0x0800fb90
 800b2c8:	0800fb94 	.word	0x0800fb94
 800b2cc:	0800fb98 	.word	0x0800fb98
 800b2d0:	0800fb9c 	.word	0x0800fb9c
 800b2d4:	0800fba0 	.word	0x0800fba0
 800b2d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b2da:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b2de:	4553      	cmp	r3, sl
 800b2e0:	bfa8      	it	ge
 800b2e2:	4653      	movge	r3, sl
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	4699      	mov	r9, r3
 800b2e8:	dc36      	bgt.n	800b358 <_printf_float+0x360>
 800b2ea:	f04f 0b00 	mov.w	fp, #0
 800b2ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2f2:	f104 021a 	add.w	r2, r4, #26
 800b2f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b2f8:	9306      	str	r3, [sp, #24]
 800b2fa:	eba3 0309 	sub.w	r3, r3, r9
 800b2fe:	455b      	cmp	r3, fp
 800b300:	dc31      	bgt.n	800b366 <_printf_float+0x36e>
 800b302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b304:	459a      	cmp	sl, r3
 800b306:	dc3a      	bgt.n	800b37e <_printf_float+0x386>
 800b308:	6823      	ldr	r3, [r4, #0]
 800b30a:	07da      	lsls	r2, r3, #31
 800b30c:	d437      	bmi.n	800b37e <_printf_float+0x386>
 800b30e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b310:	ebaa 0903 	sub.w	r9, sl, r3
 800b314:	9b06      	ldr	r3, [sp, #24]
 800b316:	ebaa 0303 	sub.w	r3, sl, r3
 800b31a:	4599      	cmp	r9, r3
 800b31c:	bfa8      	it	ge
 800b31e:	4699      	movge	r9, r3
 800b320:	f1b9 0f00 	cmp.w	r9, #0
 800b324:	dc33      	bgt.n	800b38e <_printf_float+0x396>
 800b326:	f04f 0800 	mov.w	r8, #0
 800b32a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b32e:	f104 0b1a 	add.w	fp, r4, #26
 800b332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b334:	ebaa 0303 	sub.w	r3, sl, r3
 800b338:	eba3 0309 	sub.w	r3, r3, r9
 800b33c:	4543      	cmp	r3, r8
 800b33e:	f77f af79 	ble.w	800b234 <_printf_float+0x23c>
 800b342:	2301      	movs	r3, #1
 800b344:	465a      	mov	r2, fp
 800b346:	4631      	mov	r1, r6
 800b348:	4628      	mov	r0, r5
 800b34a:	47b8      	blx	r7
 800b34c:	3001      	adds	r0, #1
 800b34e:	f43f aeae 	beq.w	800b0ae <_printf_float+0xb6>
 800b352:	f108 0801 	add.w	r8, r8, #1
 800b356:	e7ec      	b.n	800b332 <_printf_float+0x33a>
 800b358:	4642      	mov	r2, r8
 800b35a:	4631      	mov	r1, r6
 800b35c:	4628      	mov	r0, r5
 800b35e:	47b8      	blx	r7
 800b360:	3001      	adds	r0, #1
 800b362:	d1c2      	bne.n	800b2ea <_printf_float+0x2f2>
 800b364:	e6a3      	b.n	800b0ae <_printf_float+0xb6>
 800b366:	2301      	movs	r3, #1
 800b368:	4631      	mov	r1, r6
 800b36a:	4628      	mov	r0, r5
 800b36c:	9206      	str	r2, [sp, #24]
 800b36e:	47b8      	blx	r7
 800b370:	3001      	adds	r0, #1
 800b372:	f43f ae9c 	beq.w	800b0ae <_printf_float+0xb6>
 800b376:	9a06      	ldr	r2, [sp, #24]
 800b378:	f10b 0b01 	add.w	fp, fp, #1
 800b37c:	e7bb      	b.n	800b2f6 <_printf_float+0x2fe>
 800b37e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b382:	4631      	mov	r1, r6
 800b384:	4628      	mov	r0, r5
 800b386:	47b8      	blx	r7
 800b388:	3001      	adds	r0, #1
 800b38a:	d1c0      	bne.n	800b30e <_printf_float+0x316>
 800b38c:	e68f      	b.n	800b0ae <_printf_float+0xb6>
 800b38e:	9a06      	ldr	r2, [sp, #24]
 800b390:	464b      	mov	r3, r9
 800b392:	4442      	add	r2, r8
 800b394:	4631      	mov	r1, r6
 800b396:	4628      	mov	r0, r5
 800b398:	47b8      	blx	r7
 800b39a:	3001      	adds	r0, #1
 800b39c:	d1c3      	bne.n	800b326 <_printf_float+0x32e>
 800b39e:	e686      	b.n	800b0ae <_printf_float+0xb6>
 800b3a0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b3a4:	f1ba 0f01 	cmp.w	sl, #1
 800b3a8:	dc01      	bgt.n	800b3ae <_printf_float+0x3b6>
 800b3aa:	07db      	lsls	r3, r3, #31
 800b3ac:	d536      	bpl.n	800b41c <_printf_float+0x424>
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	4642      	mov	r2, r8
 800b3b2:	4631      	mov	r1, r6
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	47b8      	blx	r7
 800b3b8:	3001      	adds	r0, #1
 800b3ba:	f43f ae78 	beq.w	800b0ae <_printf_float+0xb6>
 800b3be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3c2:	4631      	mov	r1, r6
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	47b8      	blx	r7
 800b3c8:	3001      	adds	r0, #1
 800b3ca:	f43f ae70 	beq.w	800b0ae <_printf_float+0xb6>
 800b3ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3da:	f7f5 fba5 	bl	8000b28 <__aeabi_dcmpeq>
 800b3de:	b9c0      	cbnz	r0, 800b412 <_printf_float+0x41a>
 800b3e0:	4653      	mov	r3, sl
 800b3e2:	f108 0201 	add.w	r2, r8, #1
 800b3e6:	4631      	mov	r1, r6
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	47b8      	blx	r7
 800b3ec:	3001      	adds	r0, #1
 800b3ee:	d10c      	bne.n	800b40a <_printf_float+0x412>
 800b3f0:	e65d      	b.n	800b0ae <_printf_float+0xb6>
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	465a      	mov	r2, fp
 800b3f6:	4631      	mov	r1, r6
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	47b8      	blx	r7
 800b3fc:	3001      	adds	r0, #1
 800b3fe:	f43f ae56 	beq.w	800b0ae <_printf_float+0xb6>
 800b402:	f108 0801 	add.w	r8, r8, #1
 800b406:	45d0      	cmp	r8, sl
 800b408:	dbf3      	blt.n	800b3f2 <_printf_float+0x3fa>
 800b40a:	464b      	mov	r3, r9
 800b40c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b410:	e6df      	b.n	800b1d2 <_printf_float+0x1da>
 800b412:	f04f 0800 	mov.w	r8, #0
 800b416:	f104 0b1a 	add.w	fp, r4, #26
 800b41a:	e7f4      	b.n	800b406 <_printf_float+0x40e>
 800b41c:	2301      	movs	r3, #1
 800b41e:	4642      	mov	r2, r8
 800b420:	e7e1      	b.n	800b3e6 <_printf_float+0x3ee>
 800b422:	2301      	movs	r3, #1
 800b424:	464a      	mov	r2, r9
 800b426:	4631      	mov	r1, r6
 800b428:	4628      	mov	r0, r5
 800b42a:	47b8      	blx	r7
 800b42c:	3001      	adds	r0, #1
 800b42e:	f43f ae3e 	beq.w	800b0ae <_printf_float+0xb6>
 800b432:	f108 0801 	add.w	r8, r8, #1
 800b436:	68e3      	ldr	r3, [r4, #12]
 800b438:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b43a:	1a5b      	subs	r3, r3, r1
 800b43c:	4543      	cmp	r3, r8
 800b43e:	dcf0      	bgt.n	800b422 <_printf_float+0x42a>
 800b440:	e6fc      	b.n	800b23c <_printf_float+0x244>
 800b442:	f04f 0800 	mov.w	r8, #0
 800b446:	f104 0919 	add.w	r9, r4, #25
 800b44a:	e7f4      	b.n	800b436 <_printf_float+0x43e>

0800b44c <_printf_common>:
 800b44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b450:	4616      	mov	r6, r2
 800b452:	4698      	mov	r8, r3
 800b454:	688a      	ldr	r2, [r1, #8]
 800b456:	690b      	ldr	r3, [r1, #16]
 800b458:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b45c:	4293      	cmp	r3, r2
 800b45e:	bfb8      	it	lt
 800b460:	4613      	movlt	r3, r2
 800b462:	6033      	str	r3, [r6, #0]
 800b464:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b468:	4607      	mov	r7, r0
 800b46a:	460c      	mov	r4, r1
 800b46c:	b10a      	cbz	r2, 800b472 <_printf_common+0x26>
 800b46e:	3301      	adds	r3, #1
 800b470:	6033      	str	r3, [r6, #0]
 800b472:	6823      	ldr	r3, [r4, #0]
 800b474:	0699      	lsls	r1, r3, #26
 800b476:	bf42      	ittt	mi
 800b478:	6833      	ldrmi	r3, [r6, #0]
 800b47a:	3302      	addmi	r3, #2
 800b47c:	6033      	strmi	r3, [r6, #0]
 800b47e:	6825      	ldr	r5, [r4, #0]
 800b480:	f015 0506 	ands.w	r5, r5, #6
 800b484:	d106      	bne.n	800b494 <_printf_common+0x48>
 800b486:	f104 0a19 	add.w	sl, r4, #25
 800b48a:	68e3      	ldr	r3, [r4, #12]
 800b48c:	6832      	ldr	r2, [r6, #0]
 800b48e:	1a9b      	subs	r3, r3, r2
 800b490:	42ab      	cmp	r3, r5
 800b492:	dc26      	bgt.n	800b4e2 <_printf_common+0x96>
 800b494:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b498:	6822      	ldr	r2, [r4, #0]
 800b49a:	3b00      	subs	r3, #0
 800b49c:	bf18      	it	ne
 800b49e:	2301      	movne	r3, #1
 800b4a0:	0692      	lsls	r2, r2, #26
 800b4a2:	d42b      	bmi.n	800b4fc <_printf_common+0xb0>
 800b4a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b4a8:	4641      	mov	r1, r8
 800b4aa:	4638      	mov	r0, r7
 800b4ac:	47c8      	blx	r9
 800b4ae:	3001      	adds	r0, #1
 800b4b0:	d01e      	beq.n	800b4f0 <_printf_common+0xa4>
 800b4b2:	6823      	ldr	r3, [r4, #0]
 800b4b4:	6922      	ldr	r2, [r4, #16]
 800b4b6:	f003 0306 	and.w	r3, r3, #6
 800b4ba:	2b04      	cmp	r3, #4
 800b4bc:	bf02      	ittt	eq
 800b4be:	68e5      	ldreq	r5, [r4, #12]
 800b4c0:	6833      	ldreq	r3, [r6, #0]
 800b4c2:	1aed      	subeq	r5, r5, r3
 800b4c4:	68a3      	ldr	r3, [r4, #8]
 800b4c6:	bf0c      	ite	eq
 800b4c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4cc:	2500      	movne	r5, #0
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	bfc4      	itt	gt
 800b4d2:	1a9b      	subgt	r3, r3, r2
 800b4d4:	18ed      	addgt	r5, r5, r3
 800b4d6:	2600      	movs	r6, #0
 800b4d8:	341a      	adds	r4, #26
 800b4da:	42b5      	cmp	r5, r6
 800b4dc:	d11a      	bne.n	800b514 <_printf_common+0xc8>
 800b4de:	2000      	movs	r0, #0
 800b4e0:	e008      	b.n	800b4f4 <_printf_common+0xa8>
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	4652      	mov	r2, sl
 800b4e6:	4641      	mov	r1, r8
 800b4e8:	4638      	mov	r0, r7
 800b4ea:	47c8      	blx	r9
 800b4ec:	3001      	adds	r0, #1
 800b4ee:	d103      	bne.n	800b4f8 <_printf_common+0xac>
 800b4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4f8:	3501      	adds	r5, #1
 800b4fa:	e7c6      	b.n	800b48a <_printf_common+0x3e>
 800b4fc:	18e1      	adds	r1, r4, r3
 800b4fe:	1c5a      	adds	r2, r3, #1
 800b500:	2030      	movs	r0, #48	@ 0x30
 800b502:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b506:	4422      	add	r2, r4
 800b508:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b50c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b510:	3302      	adds	r3, #2
 800b512:	e7c7      	b.n	800b4a4 <_printf_common+0x58>
 800b514:	2301      	movs	r3, #1
 800b516:	4622      	mov	r2, r4
 800b518:	4641      	mov	r1, r8
 800b51a:	4638      	mov	r0, r7
 800b51c:	47c8      	blx	r9
 800b51e:	3001      	adds	r0, #1
 800b520:	d0e6      	beq.n	800b4f0 <_printf_common+0xa4>
 800b522:	3601      	adds	r6, #1
 800b524:	e7d9      	b.n	800b4da <_printf_common+0x8e>
	...

0800b528 <_printf_i>:
 800b528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b52c:	7e0f      	ldrb	r7, [r1, #24]
 800b52e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b530:	2f78      	cmp	r7, #120	@ 0x78
 800b532:	4691      	mov	r9, r2
 800b534:	4680      	mov	r8, r0
 800b536:	460c      	mov	r4, r1
 800b538:	469a      	mov	sl, r3
 800b53a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b53e:	d807      	bhi.n	800b550 <_printf_i+0x28>
 800b540:	2f62      	cmp	r7, #98	@ 0x62
 800b542:	d80a      	bhi.n	800b55a <_printf_i+0x32>
 800b544:	2f00      	cmp	r7, #0
 800b546:	f000 80d2 	beq.w	800b6ee <_printf_i+0x1c6>
 800b54a:	2f58      	cmp	r7, #88	@ 0x58
 800b54c:	f000 80b9 	beq.w	800b6c2 <_printf_i+0x19a>
 800b550:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b554:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b558:	e03a      	b.n	800b5d0 <_printf_i+0xa8>
 800b55a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b55e:	2b15      	cmp	r3, #21
 800b560:	d8f6      	bhi.n	800b550 <_printf_i+0x28>
 800b562:	a101      	add	r1, pc, #4	@ (adr r1, 800b568 <_printf_i+0x40>)
 800b564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b568:	0800b5c1 	.word	0x0800b5c1
 800b56c:	0800b5d5 	.word	0x0800b5d5
 800b570:	0800b551 	.word	0x0800b551
 800b574:	0800b551 	.word	0x0800b551
 800b578:	0800b551 	.word	0x0800b551
 800b57c:	0800b551 	.word	0x0800b551
 800b580:	0800b5d5 	.word	0x0800b5d5
 800b584:	0800b551 	.word	0x0800b551
 800b588:	0800b551 	.word	0x0800b551
 800b58c:	0800b551 	.word	0x0800b551
 800b590:	0800b551 	.word	0x0800b551
 800b594:	0800b6d5 	.word	0x0800b6d5
 800b598:	0800b5ff 	.word	0x0800b5ff
 800b59c:	0800b68f 	.word	0x0800b68f
 800b5a0:	0800b551 	.word	0x0800b551
 800b5a4:	0800b551 	.word	0x0800b551
 800b5a8:	0800b6f7 	.word	0x0800b6f7
 800b5ac:	0800b551 	.word	0x0800b551
 800b5b0:	0800b5ff 	.word	0x0800b5ff
 800b5b4:	0800b551 	.word	0x0800b551
 800b5b8:	0800b551 	.word	0x0800b551
 800b5bc:	0800b697 	.word	0x0800b697
 800b5c0:	6833      	ldr	r3, [r6, #0]
 800b5c2:	1d1a      	adds	r2, r3, #4
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	6032      	str	r2, [r6, #0]
 800b5c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b5cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	e09d      	b.n	800b710 <_printf_i+0x1e8>
 800b5d4:	6833      	ldr	r3, [r6, #0]
 800b5d6:	6820      	ldr	r0, [r4, #0]
 800b5d8:	1d19      	adds	r1, r3, #4
 800b5da:	6031      	str	r1, [r6, #0]
 800b5dc:	0606      	lsls	r6, r0, #24
 800b5de:	d501      	bpl.n	800b5e4 <_printf_i+0xbc>
 800b5e0:	681d      	ldr	r5, [r3, #0]
 800b5e2:	e003      	b.n	800b5ec <_printf_i+0xc4>
 800b5e4:	0645      	lsls	r5, r0, #25
 800b5e6:	d5fb      	bpl.n	800b5e0 <_printf_i+0xb8>
 800b5e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b5ec:	2d00      	cmp	r5, #0
 800b5ee:	da03      	bge.n	800b5f8 <_printf_i+0xd0>
 800b5f0:	232d      	movs	r3, #45	@ 0x2d
 800b5f2:	426d      	negs	r5, r5
 800b5f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5f8:	4859      	ldr	r0, [pc, #356]	@ (800b760 <_printf_i+0x238>)
 800b5fa:	230a      	movs	r3, #10
 800b5fc:	e011      	b.n	800b622 <_printf_i+0xfa>
 800b5fe:	6821      	ldr	r1, [r4, #0]
 800b600:	6833      	ldr	r3, [r6, #0]
 800b602:	0608      	lsls	r0, r1, #24
 800b604:	f853 5b04 	ldr.w	r5, [r3], #4
 800b608:	d402      	bmi.n	800b610 <_printf_i+0xe8>
 800b60a:	0649      	lsls	r1, r1, #25
 800b60c:	bf48      	it	mi
 800b60e:	b2ad      	uxthmi	r5, r5
 800b610:	2f6f      	cmp	r7, #111	@ 0x6f
 800b612:	4853      	ldr	r0, [pc, #332]	@ (800b760 <_printf_i+0x238>)
 800b614:	6033      	str	r3, [r6, #0]
 800b616:	bf14      	ite	ne
 800b618:	230a      	movne	r3, #10
 800b61a:	2308      	moveq	r3, #8
 800b61c:	2100      	movs	r1, #0
 800b61e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b622:	6866      	ldr	r6, [r4, #4]
 800b624:	60a6      	str	r6, [r4, #8]
 800b626:	2e00      	cmp	r6, #0
 800b628:	bfa2      	ittt	ge
 800b62a:	6821      	ldrge	r1, [r4, #0]
 800b62c:	f021 0104 	bicge.w	r1, r1, #4
 800b630:	6021      	strge	r1, [r4, #0]
 800b632:	b90d      	cbnz	r5, 800b638 <_printf_i+0x110>
 800b634:	2e00      	cmp	r6, #0
 800b636:	d04b      	beq.n	800b6d0 <_printf_i+0x1a8>
 800b638:	4616      	mov	r6, r2
 800b63a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b63e:	fb03 5711 	mls	r7, r3, r1, r5
 800b642:	5dc7      	ldrb	r7, [r0, r7]
 800b644:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b648:	462f      	mov	r7, r5
 800b64a:	42bb      	cmp	r3, r7
 800b64c:	460d      	mov	r5, r1
 800b64e:	d9f4      	bls.n	800b63a <_printf_i+0x112>
 800b650:	2b08      	cmp	r3, #8
 800b652:	d10b      	bne.n	800b66c <_printf_i+0x144>
 800b654:	6823      	ldr	r3, [r4, #0]
 800b656:	07df      	lsls	r7, r3, #31
 800b658:	d508      	bpl.n	800b66c <_printf_i+0x144>
 800b65a:	6923      	ldr	r3, [r4, #16]
 800b65c:	6861      	ldr	r1, [r4, #4]
 800b65e:	4299      	cmp	r1, r3
 800b660:	bfde      	ittt	le
 800b662:	2330      	movle	r3, #48	@ 0x30
 800b664:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b668:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b66c:	1b92      	subs	r2, r2, r6
 800b66e:	6122      	str	r2, [r4, #16]
 800b670:	f8cd a000 	str.w	sl, [sp]
 800b674:	464b      	mov	r3, r9
 800b676:	aa03      	add	r2, sp, #12
 800b678:	4621      	mov	r1, r4
 800b67a:	4640      	mov	r0, r8
 800b67c:	f7ff fee6 	bl	800b44c <_printf_common>
 800b680:	3001      	adds	r0, #1
 800b682:	d14a      	bne.n	800b71a <_printf_i+0x1f2>
 800b684:	f04f 30ff 	mov.w	r0, #4294967295
 800b688:	b004      	add	sp, #16
 800b68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b68e:	6823      	ldr	r3, [r4, #0]
 800b690:	f043 0320 	orr.w	r3, r3, #32
 800b694:	6023      	str	r3, [r4, #0]
 800b696:	4833      	ldr	r0, [pc, #204]	@ (800b764 <_printf_i+0x23c>)
 800b698:	2778      	movs	r7, #120	@ 0x78
 800b69a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b69e:	6823      	ldr	r3, [r4, #0]
 800b6a0:	6831      	ldr	r1, [r6, #0]
 800b6a2:	061f      	lsls	r7, r3, #24
 800b6a4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b6a8:	d402      	bmi.n	800b6b0 <_printf_i+0x188>
 800b6aa:	065f      	lsls	r7, r3, #25
 800b6ac:	bf48      	it	mi
 800b6ae:	b2ad      	uxthmi	r5, r5
 800b6b0:	6031      	str	r1, [r6, #0]
 800b6b2:	07d9      	lsls	r1, r3, #31
 800b6b4:	bf44      	itt	mi
 800b6b6:	f043 0320 	orrmi.w	r3, r3, #32
 800b6ba:	6023      	strmi	r3, [r4, #0]
 800b6bc:	b11d      	cbz	r5, 800b6c6 <_printf_i+0x19e>
 800b6be:	2310      	movs	r3, #16
 800b6c0:	e7ac      	b.n	800b61c <_printf_i+0xf4>
 800b6c2:	4827      	ldr	r0, [pc, #156]	@ (800b760 <_printf_i+0x238>)
 800b6c4:	e7e9      	b.n	800b69a <_printf_i+0x172>
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	f023 0320 	bic.w	r3, r3, #32
 800b6cc:	6023      	str	r3, [r4, #0]
 800b6ce:	e7f6      	b.n	800b6be <_printf_i+0x196>
 800b6d0:	4616      	mov	r6, r2
 800b6d2:	e7bd      	b.n	800b650 <_printf_i+0x128>
 800b6d4:	6833      	ldr	r3, [r6, #0]
 800b6d6:	6825      	ldr	r5, [r4, #0]
 800b6d8:	6961      	ldr	r1, [r4, #20]
 800b6da:	1d18      	adds	r0, r3, #4
 800b6dc:	6030      	str	r0, [r6, #0]
 800b6de:	062e      	lsls	r6, r5, #24
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	d501      	bpl.n	800b6e8 <_printf_i+0x1c0>
 800b6e4:	6019      	str	r1, [r3, #0]
 800b6e6:	e002      	b.n	800b6ee <_printf_i+0x1c6>
 800b6e8:	0668      	lsls	r0, r5, #25
 800b6ea:	d5fb      	bpl.n	800b6e4 <_printf_i+0x1bc>
 800b6ec:	8019      	strh	r1, [r3, #0]
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	6123      	str	r3, [r4, #16]
 800b6f2:	4616      	mov	r6, r2
 800b6f4:	e7bc      	b.n	800b670 <_printf_i+0x148>
 800b6f6:	6833      	ldr	r3, [r6, #0]
 800b6f8:	1d1a      	adds	r2, r3, #4
 800b6fa:	6032      	str	r2, [r6, #0]
 800b6fc:	681e      	ldr	r6, [r3, #0]
 800b6fe:	6862      	ldr	r2, [r4, #4]
 800b700:	2100      	movs	r1, #0
 800b702:	4630      	mov	r0, r6
 800b704:	f7f4 fd94 	bl	8000230 <memchr>
 800b708:	b108      	cbz	r0, 800b70e <_printf_i+0x1e6>
 800b70a:	1b80      	subs	r0, r0, r6
 800b70c:	6060      	str	r0, [r4, #4]
 800b70e:	6863      	ldr	r3, [r4, #4]
 800b710:	6123      	str	r3, [r4, #16]
 800b712:	2300      	movs	r3, #0
 800b714:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b718:	e7aa      	b.n	800b670 <_printf_i+0x148>
 800b71a:	6923      	ldr	r3, [r4, #16]
 800b71c:	4632      	mov	r2, r6
 800b71e:	4649      	mov	r1, r9
 800b720:	4640      	mov	r0, r8
 800b722:	47d0      	blx	sl
 800b724:	3001      	adds	r0, #1
 800b726:	d0ad      	beq.n	800b684 <_printf_i+0x15c>
 800b728:	6823      	ldr	r3, [r4, #0]
 800b72a:	079b      	lsls	r3, r3, #30
 800b72c:	d413      	bmi.n	800b756 <_printf_i+0x22e>
 800b72e:	68e0      	ldr	r0, [r4, #12]
 800b730:	9b03      	ldr	r3, [sp, #12]
 800b732:	4298      	cmp	r0, r3
 800b734:	bfb8      	it	lt
 800b736:	4618      	movlt	r0, r3
 800b738:	e7a6      	b.n	800b688 <_printf_i+0x160>
 800b73a:	2301      	movs	r3, #1
 800b73c:	4632      	mov	r2, r6
 800b73e:	4649      	mov	r1, r9
 800b740:	4640      	mov	r0, r8
 800b742:	47d0      	blx	sl
 800b744:	3001      	adds	r0, #1
 800b746:	d09d      	beq.n	800b684 <_printf_i+0x15c>
 800b748:	3501      	adds	r5, #1
 800b74a:	68e3      	ldr	r3, [r4, #12]
 800b74c:	9903      	ldr	r1, [sp, #12]
 800b74e:	1a5b      	subs	r3, r3, r1
 800b750:	42ab      	cmp	r3, r5
 800b752:	dcf2      	bgt.n	800b73a <_printf_i+0x212>
 800b754:	e7eb      	b.n	800b72e <_printf_i+0x206>
 800b756:	2500      	movs	r5, #0
 800b758:	f104 0619 	add.w	r6, r4, #25
 800b75c:	e7f5      	b.n	800b74a <_printf_i+0x222>
 800b75e:	bf00      	nop
 800b760:	0800fba2 	.word	0x0800fba2
 800b764:	0800fbb3 	.word	0x0800fbb3

0800b768 <_scanf_float>:
 800b768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76c:	b087      	sub	sp, #28
 800b76e:	4617      	mov	r7, r2
 800b770:	9303      	str	r3, [sp, #12]
 800b772:	688b      	ldr	r3, [r1, #8]
 800b774:	1e5a      	subs	r2, r3, #1
 800b776:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b77a:	bf81      	itttt	hi
 800b77c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b780:	eb03 0b05 	addhi.w	fp, r3, r5
 800b784:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b788:	608b      	strhi	r3, [r1, #8]
 800b78a:	680b      	ldr	r3, [r1, #0]
 800b78c:	460a      	mov	r2, r1
 800b78e:	f04f 0500 	mov.w	r5, #0
 800b792:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b796:	f842 3b1c 	str.w	r3, [r2], #28
 800b79a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b79e:	4680      	mov	r8, r0
 800b7a0:	460c      	mov	r4, r1
 800b7a2:	bf98      	it	ls
 800b7a4:	f04f 0b00 	movls.w	fp, #0
 800b7a8:	9201      	str	r2, [sp, #4]
 800b7aa:	4616      	mov	r6, r2
 800b7ac:	46aa      	mov	sl, r5
 800b7ae:	46a9      	mov	r9, r5
 800b7b0:	9502      	str	r5, [sp, #8]
 800b7b2:	68a2      	ldr	r2, [r4, #8]
 800b7b4:	b152      	cbz	r2, 800b7cc <_scanf_float+0x64>
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	2b4e      	cmp	r3, #78	@ 0x4e
 800b7bc:	d864      	bhi.n	800b888 <_scanf_float+0x120>
 800b7be:	2b40      	cmp	r3, #64	@ 0x40
 800b7c0:	d83c      	bhi.n	800b83c <_scanf_float+0xd4>
 800b7c2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b7c6:	b2c8      	uxtb	r0, r1
 800b7c8:	280e      	cmp	r0, #14
 800b7ca:	d93a      	bls.n	800b842 <_scanf_float+0xda>
 800b7cc:	f1b9 0f00 	cmp.w	r9, #0
 800b7d0:	d003      	beq.n	800b7da <_scanf_float+0x72>
 800b7d2:	6823      	ldr	r3, [r4, #0]
 800b7d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7d8:	6023      	str	r3, [r4, #0]
 800b7da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7de:	f1ba 0f01 	cmp.w	sl, #1
 800b7e2:	f200 8117 	bhi.w	800ba14 <_scanf_float+0x2ac>
 800b7e6:	9b01      	ldr	r3, [sp, #4]
 800b7e8:	429e      	cmp	r6, r3
 800b7ea:	f200 8108 	bhi.w	800b9fe <_scanf_float+0x296>
 800b7ee:	2001      	movs	r0, #1
 800b7f0:	b007      	add	sp, #28
 800b7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b7fa:	2a0d      	cmp	r2, #13
 800b7fc:	d8e6      	bhi.n	800b7cc <_scanf_float+0x64>
 800b7fe:	a101      	add	r1, pc, #4	@ (adr r1, 800b804 <_scanf_float+0x9c>)
 800b800:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b804:	0800b94b 	.word	0x0800b94b
 800b808:	0800b7cd 	.word	0x0800b7cd
 800b80c:	0800b7cd 	.word	0x0800b7cd
 800b810:	0800b7cd 	.word	0x0800b7cd
 800b814:	0800b9ab 	.word	0x0800b9ab
 800b818:	0800b983 	.word	0x0800b983
 800b81c:	0800b7cd 	.word	0x0800b7cd
 800b820:	0800b7cd 	.word	0x0800b7cd
 800b824:	0800b959 	.word	0x0800b959
 800b828:	0800b7cd 	.word	0x0800b7cd
 800b82c:	0800b7cd 	.word	0x0800b7cd
 800b830:	0800b7cd 	.word	0x0800b7cd
 800b834:	0800b7cd 	.word	0x0800b7cd
 800b838:	0800b911 	.word	0x0800b911
 800b83c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b840:	e7db      	b.n	800b7fa <_scanf_float+0x92>
 800b842:	290e      	cmp	r1, #14
 800b844:	d8c2      	bhi.n	800b7cc <_scanf_float+0x64>
 800b846:	a001      	add	r0, pc, #4	@ (adr r0, 800b84c <_scanf_float+0xe4>)
 800b848:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b84c:	0800b901 	.word	0x0800b901
 800b850:	0800b7cd 	.word	0x0800b7cd
 800b854:	0800b901 	.word	0x0800b901
 800b858:	0800b997 	.word	0x0800b997
 800b85c:	0800b7cd 	.word	0x0800b7cd
 800b860:	0800b8a9 	.word	0x0800b8a9
 800b864:	0800b8e7 	.word	0x0800b8e7
 800b868:	0800b8e7 	.word	0x0800b8e7
 800b86c:	0800b8e7 	.word	0x0800b8e7
 800b870:	0800b8e7 	.word	0x0800b8e7
 800b874:	0800b8e7 	.word	0x0800b8e7
 800b878:	0800b8e7 	.word	0x0800b8e7
 800b87c:	0800b8e7 	.word	0x0800b8e7
 800b880:	0800b8e7 	.word	0x0800b8e7
 800b884:	0800b8e7 	.word	0x0800b8e7
 800b888:	2b6e      	cmp	r3, #110	@ 0x6e
 800b88a:	d809      	bhi.n	800b8a0 <_scanf_float+0x138>
 800b88c:	2b60      	cmp	r3, #96	@ 0x60
 800b88e:	d8b2      	bhi.n	800b7f6 <_scanf_float+0x8e>
 800b890:	2b54      	cmp	r3, #84	@ 0x54
 800b892:	d07b      	beq.n	800b98c <_scanf_float+0x224>
 800b894:	2b59      	cmp	r3, #89	@ 0x59
 800b896:	d199      	bne.n	800b7cc <_scanf_float+0x64>
 800b898:	2d07      	cmp	r5, #7
 800b89a:	d197      	bne.n	800b7cc <_scanf_float+0x64>
 800b89c:	2508      	movs	r5, #8
 800b89e:	e02c      	b.n	800b8fa <_scanf_float+0x192>
 800b8a0:	2b74      	cmp	r3, #116	@ 0x74
 800b8a2:	d073      	beq.n	800b98c <_scanf_float+0x224>
 800b8a4:	2b79      	cmp	r3, #121	@ 0x79
 800b8a6:	e7f6      	b.n	800b896 <_scanf_float+0x12e>
 800b8a8:	6821      	ldr	r1, [r4, #0]
 800b8aa:	05c8      	lsls	r0, r1, #23
 800b8ac:	d51b      	bpl.n	800b8e6 <_scanf_float+0x17e>
 800b8ae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b8b2:	6021      	str	r1, [r4, #0]
 800b8b4:	f109 0901 	add.w	r9, r9, #1
 800b8b8:	f1bb 0f00 	cmp.w	fp, #0
 800b8bc:	d003      	beq.n	800b8c6 <_scanf_float+0x15e>
 800b8be:	3201      	adds	r2, #1
 800b8c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b8c4:	60a2      	str	r2, [r4, #8]
 800b8c6:	68a3      	ldr	r3, [r4, #8]
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	60a3      	str	r3, [r4, #8]
 800b8cc:	6923      	ldr	r3, [r4, #16]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	6123      	str	r3, [r4, #16]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	3b01      	subs	r3, #1
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	607b      	str	r3, [r7, #4]
 800b8da:	f340 8087 	ble.w	800b9ec <_scanf_float+0x284>
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	603b      	str	r3, [r7, #0]
 800b8e4:	e765      	b.n	800b7b2 <_scanf_float+0x4a>
 800b8e6:	eb1a 0105 	adds.w	r1, sl, r5
 800b8ea:	f47f af6f 	bne.w	800b7cc <_scanf_float+0x64>
 800b8ee:	6822      	ldr	r2, [r4, #0]
 800b8f0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b8f4:	6022      	str	r2, [r4, #0]
 800b8f6:	460d      	mov	r5, r1
 800b8f8:	468a      	mov	sl, r1
 800b8fa:	f806 3b01 	strb.w	r3, [r6], #1
 800b8fe:	e7e2      	b.n	800b8c6 <_scanf_float+0x15e>
 800b900:	6822      	ldr	r2, [r4, #0]
 800b902:	0610      	lsls	r0, r2, #24
 800b904:	f57f af62 	bpl.w	800b7cc <_scanf_float+0x64>
 800b908:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b90c:	6022      	str	r2, [r4, #0]
 800b90e:	e7f4      	b.n	800b8fa <_scanf_float+0x192>
 800b910:	f1ba 0f00 	cmp.w	sl, #0
 800b914:	d10e      	bne.n	800b934 <_scanf_float+0x1cc>
 800b916:	f1b9 0f00 	cmp.w	r9, #0
 800b91a:	d10e      	bne.n	800b93a <_scanf_float+0x1d2>
 800b91c:	6822      	ldr	r2, [r4, #0]
 800b91e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b922:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b926:	d108      	bne.n	800b93a <_scanf_float+0x1d2>
 800b928:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b92c:	6022      	str	r2, [r4, #0]
 800b92e:	f04f 0a01 	mov.w	sl, #1
 800b932:	e7e2      	b.n	800b8fa <_scanf_float+0x192>
 800b934:	f1ba 0f02 	cmp.w	sl, #2
 800b938:	d055      	beq.n	800b9e6 <_scanf_float+0x27e>
 800b93a:	2d01      	cmp	r5, #1
 800b93c:	d002      	beq.n	800b944 <_scanf_float+0x1dc>
 800b93e:	2d04      	cmp	r5, #4
 800b940:	f47f af44 	bne.w	800b7cc <_scanf_float+0x64>
 800b944:	3501      	adds	r5, #1
 800b946:	b2ed      	uxtb	r5, r5
 800b948:	e7d7      	b.n	800b8fa <_scanf_float+0x192>
 800b94a:	f1ba 0f01 	cmp.w	sl, #1
 800b94e:	f47f af3d 	bne.w	800b7cc <_scanf_float+0x64>
 800b952:	f04f 0a02 	mov.w	sl, #2
 800b956:	e7d0      	b.n	800b8fa <_scanf_float+0x192>
 800b958:	b97d      	cbnz	r5, 800b97a <_scanf_float+0x212>
 800b95a:	f1b9 0f00 	cmp.w	r9, #0
 800b95e:	f47f af38 	bne.w	800b7d2 <_scanf_float+0x6a>
 800b962:	6822      	ldr	r2, [r4, #0]
 800b964:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b968:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b96c:	f040 8108 	bne.w	800bb80 <_scanf_float+0x418>
 800b970:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b974:	6022      	str	r2, [r4, #0]
 800b976:	2501      	movs	r5, #1
 800b978:	e7bf      	b.n	800b8fa <_scanf_float+0x192>
 800b97a:	2d03      	cmp	r5, #3
 800b97c:	d0e2      	beq.n	800b944 <_scanf_float+0x1dc>
 800b97e:	2d05      	cmp	r5, #5
 800b980:	e7de      	b.n	800b940 <_scanf_float+0x1d8>
 800b982:	2d02      	cmp	r5, #2
 800b984:	f47f af22 	bne.w	800b7cc <_scanf_float+0x64>
 800b988:	2503      	movs	r5, #3
 800b98a:	e7b6      	b.n	800b8fa <_scanf_float+0x192>
 800b98c:	2d06      	cmp	r5, #6
 800b98e:	f47f af1d 	bne.w	800b7cc <_scanf_float+0x64>
 800b992:	2507      	movs	r5, #7
 800b994:	e7b1      	b.n	800b8fa <_scanf_float+0x192>
 800b996:	6822      	ldr	r2, [r4, #0]
 800b998:	0591      	lsls	r1, r2, #22
 800b99a:	f57f af17 	bpl.w	800b7cc <_scanf_float+0x64>
 800b99e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b9a2:	6022      	str	r2, [r4, #0]
 800b9a4:	f8cd 9008 	str.w	r9, [sp, #8]
 800b9a8:	e7a7      	b.n	800b8fa <_scanf_float+0x192>
 800b9aa:	6822      	ldr	r2, [r4, #0]
 800b9ac:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b9b0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b9b4:	d006      	beq.n	800b9c4 <_scanf_float+0x25c>
 800b9b6:	0550      	lsls	r0, r2, #21
 800b9b8:	f57f af08 	bpl.w	800b7cc <_scanf_float+0x64>
 800b9bc:	f1b9 0f00 	cmp.w	r9, #0
 800b9c0:	f000 80de 	beq.w	800bb80 <_scanf_float+0x418>
 800b9c4:	0591      	lsls	r1, r2, #22
 800b9c6:	bf58      	it	pl
 800b9c8:	9902      	ldrpl	r1, [sp, #8]
 800b9ca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b9ce:	bf58      	it	pl
 800b9d0:	eba9 0101 	subpl.w	r1, r9, r1
 800b9d4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b9d8:	bf58      	it	pl
 800b9da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b9de:	6022      	str	r2, [r4, #0]
 800b9e0:	f04f 0900 	mov.w	r9, #0
 800b9e4:	e789      	b.n	800b8fa <_scanf_float+0x192>
 800b9e6:	f04f 0a03 	mov.w	sl, #3
 800b9ea:	e786      	b.n	800b8fa <_scanf_float+0x192>
 800b9ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b9f0:	4639      	mov	r1, r7
 800b9f2:	4640      	mov	r0, r8
 800b9f4:	4798      	blx	r3
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	f43f aedb 	beq.w	800b7b2 <_scanf_float+0x4a>
 800b9fc:	e6e6      	b.n	800b7cc <_scanf_float+0x64>
 800b9fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ba02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ba06:	463a      	mov	r2, r7
 800ba08:	4640      	mov	r0, r8
 800ba0a:	4798      	blx	r3
 800ba0c:	6923      	ldr	r3, [r4, #16]
 800ba0e:	3b01      	subs	r3, #1
 800ba10:	6123      	str	r3, [r4, #16]
 800ba12:	e6e8      	b.n	800b7e6 <_scanf_float+0x7e>
 800ba14:	1e6b      	subs	r3, r5, #1
 800ba16:	2b06      	cmp	r3, #6
 800ba18:	d824      	bhi.n	800ba64 <_scanf_float+0x2fc>
 800ba1a:	2d02      	cmp	r5, #2
 800ba1c:	d836      	bhi.n	800ba8c <_scanf_float+0x324>
 800ba1e:	9b01      	ldr	r3, [sp, #4]
 800ba20:	429e      	cmp	r6, r3
 800ba22:	f67f aee4 	bls.w	800b7ee <_scanf_float+0x86>
 800ba26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ba2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ba2e:	463a      	mov	r2, r7
 800ba30:	4640      	mov	r0, r8
 800ba32:	4798      	blx	r3
 800ba34:	6923      	ldr	r3, [r4, #16]
 800ba36:	3b01      	subs	r3, #1
 800ba38:	6123      	str	r3, [r4, #16]
 800ba3a:	e7f0      	b.n	800ba1e <_scanf_float+0x2b6>
 800ba3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ba40:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ba44:	463a      	mov	r2, r7
 800ba46:	4640      	mov	r0, r8
 800ba48:	4798      	blx	r3
 800ba4a:	6923      	ldr	r3, [r4, #16]
 800ba4c:	3b01      	subs	r3, #1
 800ba4e:	6123      	str	r3, [r4, #16]
 800ba50:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba54:	fa5f fa8a 	uxtb.w	sl, sl
 800ba58:	f1ba 0f02 	cmp.w	sl, #2
 800ba5c:	d1ee      	bne.n	800ba3c <_scanf_float+0x2d4>
 800ba5e:	3d03      	subs	r5, #3
 800ba60:	b2ed      	uxtb	r5, r5
 800ba62:	1b76      	subs	r6, r6, r5
 800ba64:	6823      	ldr	r3, [r4, #0]
 800ba66:	05da      	lsls	r2, r3, #23
 800ba68:	d530      	bpl.n	800bacc <_scanf_float+0x364>
 800ba6a:	055b      	lsls	r3, r3, #21
 800ba6c:	d511      	bpl.n	800ba92 <_scanf_float+0x32a>
 800ba6e:	9b01      	ldr	r3, [sp, #4]
 800ba70:	429e      	cmp	r6, r3
 800ba72:	f67f aebc 	bls.w	800b7ee <_scanf_float+0x86>
 800ba76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ba7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ba7e:	463a      	mov	r2, r7
 800ba80:	4640      	mov	r0, r8
 800ba82:	4798      	blx	r3
 800ba84:	6923      	ldr	r3, [r4, #16]
 800ba86:	3b01      	subs	r3, #1
 800ba88:	6123      	str	r3, [r4, #16]
 800ba8a:	e7f0      	b.n	800ba6e <_scanf_float+0x306>
 800ba8c:	46aa      	mov	sl, r5
 800ba8e:	46b3      	mov	fp, r6
 800ba90:	e7de      	b.n	800ba50 <_scanf_float+0x2e8>
 800ba92:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ba96:	6923      	ldr	r3, [r4, #16]
 800ba98:	2965      	cmp	r1, #101	@ 0x65
 800ba9a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ba9e:	f106 35ff 	add.w	r5, r6, #4294967295
 800baa2:	6123      	str	r3, [r4, #16]
 800baa4:	d00c      	beq.n	800bac0 <_scanf_float+0x358>
 800baa6:	2945      	cmp	r1, #69	@ 0x45
 800baa8:	d00a      	beq.n	800bac0 <_scanf_float+0x358>
 800baaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800baae:	463a      	mov	r2, r7
 800bab0:	4640      	mov	r0, r8
 800bab2:	4798      	blx	r3
 800bab4:	6923      	ldr	r3, [r4, #16]
 800bab6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800baba:	3b01      	subs	r3, #1
 800babc:	1eb5      	subs	r5, r6, #2
 800babe:	6123      	str	r3, [r4, #16]
 800bac0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bac4:	463a      	mov	r2, r7
 800bac6:	4640      	mov	r0, r8
 800bac8:	4798      	blx	r3
 800baca:	462e      	mov	r6, r5
 800bacc:	6822      	ldr	r2, [r4, #0]
 800bace:	f012 0210 	ands.w	r2, r2, #16
 800bad2:	d001      	beq.n	800bad8 <_scanf_float+0x370>
 800bad4:	2000      	movs	r0, #0
 800bad6:	e68b      	b.n	800b7f0 <_scanf_float+0x88>
 800bad8:	7032      	strb	r2, [r6, #0]
 800bada:	6823      	ldr	r3, [r4, #0]
 800badc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bae0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bae4:	d11c      	bne.n	800bb20 <_scanf_float+0x3b8>
 800bae6:	9b02      	ldr	r3, [sp, #8]
 800bae8:	454b      	cmp	r3, r9
 800baea:	eba3 0209 	sub.w	r2, r3, r9
 800baee:	d123      	bne.n	800bb38 <_scanf_float+0x3d0>
 800baf0:	9901      	ldr	r1, [sp, #4]
 800baf2:	2200      	movs	r2, #0
 800baf4:	4640      	mov	r0, r8
 800baf6:	f002 fc8f 	bl	800e418 <_strtod_r>
 800bafa:	9b03      	ldr	r3, [sp, #12]
 800bafc:	6821      	ldr	r1, [r4, #0]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f011 0f02 	tst.w	r1, #2
 800bb04:	ec57 6b10 	vmov	r6, r7, d0
 800bb08:	f103 0204 	add.w	r2, r3, #4
 800bb0c:	d01f      	beq.n	800bb4e <_scanf_float+0x3e6>
 800bb0e:	9903      	ldr	r1, [sp, #12]
 800bb10:	600a      	str	r2, [r1, #0]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	e9c3 6700 	strd	r6, r7, [r3]
 800bb18:	68e3      	ldr	r3, [r4, #12]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	60e3      	str	r3, [r4, #12]
 800bb1e:	e7d9      	b.n	800bad4 <_scanf_float+0x36c>
 800bb20:	9b04      	ldr	r3, [sp, #16]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d0e4      	beq.n	800baf0 <_scanf_float+0x388>
 800bb26:	9905      	ldr	r1, [sp, #20]
 800bb28:	230a      	movs	r3, #10
 800bb2a:	3101      	adds	r1, #1
 800bb2c:	4640      	mov	r0, r8
 800bb2e:	f002 fcf3 	bl	800e518 <_strtol_r>
 800bb32:	9b04      	ldr	r3, [sp, #16]
 800bb34:	9e05      	ldr	r6, [sp, #20]
 800bb36:	1ac2      	subs	r2, r0, r3
 800bb38:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800bb3c:	429e      	cmp	r6, r3
 800bb3e:	bf28      	it	cs
 800bb40:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bb44:	4910      	ldr	r1, [pc, #64]	@ (800bb88 <_scanf_float+0x420>)
 800bb46:	4630      	mov	r0, r6
 800bb48:	f000 f918 	bl	800bd7c <siprintf>
 800bb4c:	e7d0      	b.n	800baf0 <_scanf_float+0x388>
 800bb4e:	f011 0f04 	tst.w	r1, #4
 800bb52:	9903      	ldr	r1, [sp, #12]
 800bb54:	600a      	str	r2, [r1, #0]
 800bb56:	d1dc      	bne.n	800bb12 <_scanf_float+0x3aa>
 800bb58:	681d      	ldr	r5, [r3, #0]
 800bb5a:	4632      	mov	r2, r6
 800bb5c:	463b      	mov	r3, r7
 800bb5e:	4630      	mov	r0, r6
 800bb60:	4639      	mov	r1, r7
 800bb62:	f7f5 f813 	bl	8000b8c <__aeabi_dcmpun>
 800bb66:	b128      	cbz	r0, 800bb74 <_scanf_float+0x40c>
 800bb68:	4808      	ldr	r0, [pc, #32]	@ (800bb8c <_scanf_float+0x424>)
 800bb6a:	f000 fa4f 	bl	800c00c <nanf>
 800bb6e:	ed85 0a00 	vstr	s0, [r5]
 800bb72:	e7d1      	b.n	800bb18 <_scanf_float+0x3b0>
 800bb74:	4630      	mov	r0, r6
 800bb76:	4639      	mov	r1, r7
 800bb78:	f7f5 f866 	bl	8000c48 <__aeabi_d2f>
 800bb7c:	6028      	str	r0, [r5, #0]
 800bb7e:	e7cb      	b.n	800bb18 <_scanf_float+0x3b0>
 800bb80:	f04f 0900 	mov.w	r9, #0
 800bb84:	e629      	b.n	800b7da <_scanf_float+0x72>
 800bb86:	bf00      	nop
 800bb88:	0800fbc4 	.word	0x0800fbc4
 800bb8c:	0800ff5d 	.word	0x0800ff5d

0800bb90 <std>:
 800bb90:	2300      	movs	r3, #0
 800bb92:	b510      	push	{r4, lr}
 800bb94:	4604      	mov	r4, r0
 800bb96:	e9c0 3300 	strd	r3, r3, [r0]
 800bb9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb9e:	6083      	str	r3, [r0, #8]
 800bba0:	8181      	strh	r1, [r0, #12]
 800bba2:	6643      	str	r3, [r0, #100]	@ 0x64
 800bba4:	81c2      	strh	r2, [r0, #14]
 800bba6:	6183      	str	r3, [r0, #24]
 800bba8:	4619      	mov	r1, r3
 800bbaa:	2208      	movs	r2, #8
 800bbac:	305c      	adds	r0, #92	@ 0x5c
 800bbae:	f000 f948 	bl	800be42 <memset>
 800bbb2:	4b0d      	ldr	r3, [pc, #52]	@ (800bbe8 <std+0x58>)
 800bbb4:	6263      	str	r3, [r4, #36]	@ 0x24
 800bbb6:	4b0d      	ldr	r3, [pc, #52]	@ (800bbec <std+0x5c>)
 800bbb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bbba:	4b0d      	ldr	r3, [pc, #52]	@ (800bbf0 <std+0x60>)
 800bbbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bbbe:	4b0d      	ldr	r3, [pc, #52]	@ (800bbf4 <std+0x64>)
 800bbc0:	6323      	str	r3, [r4, #48]	@ 0x30
 800bbc2:	4b0d      	ldr	r3, [pc, #52]	@ (800bbf8 <std+0x68>)
 800bbc4:	6224      	str	r4, [r4, #32]
 800bbc6:	429c      	cmp	r4, r3
 800bbc8:	d006      	beq.n	800bbd8 <std+0x48>
 800bbca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bbce:	4294      	cmp	r4, r2
 800bbd0:	d002      	beq.n	800bbd8 <std+0x48>
 800bbd2:	33d0      	adds	r3, #208	@ 0xd0
 800bbd4:	429c      	cmp	r4, r3
 800bbd6:	d105      	bne.n	800bbe4 <std+0x54>
 800bbd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bbdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbe0:	f000 ba02 	b.w	800bfe8 <__retarget_lock_init_recursive>
 800bbe4:	bd10      	pop	{r4, pc}
 800bbe6:	bf00      	nop
 800bbe8:	0800bdbd 	.word	0x0800bdbd
 800bbec:	0800bddf 	.word	0x0800bddf
 800bbf0:	0800be17 	.word	0x0800be17
 800bbf4:	0800be3b 	.word	0x0800be3b
 800bbf8:	200048ac 	.word	0x200048ac

0800bbfc <stdio_exit_handler>:
 800bbfc:	4a02      	ldr	r2, [pc, #8]	@ (800bc08 <stdio_exit_handler+0xc>)
 800bbfe:	4903      	ldr	r1, [pc, #12]	@ (800bc0c <stdio_exit_handler+0x10>)
 800bc00:	4803      	ldr	r0, [pc, #12]	@ (800bc10 <stdio_exit_handler+0x14>)
 800bc02:	f000 b869 	b.w	800bcd8 <_fwalk_sglue>
 800bc06:	bf00      	nop
 800bc08:	20000028 	.word	0x20000028
 800bc0c:	0800e8d5 	.word	0x0800e8d5
 800bc10:	20000038 	.word	0x20000038

0800bc14 <cleanup_stdio>:
 800bc14:	6841      	ldr	r1, [r0, #4]
 800bc16:	4b0c      	ldr	r3, [pc, #48]	@ (800bc48 <cleanup_stdio+0x34>)
 800bc18:	4299      	cmp	r1, r3
 800bc1a:	b510      	push	{r4, lr}
 800bc1c:	4604      	mov	r4, r0
 800bc1e:	d001      	beq.n	800bc24 <cleanup_stdio+0x10>
 800bc20:	f002 fe58 	bl	800e8d4 <_fflush_r>
 800bc24:	68a1      	ldr	r1, [r4, #8]
 800bc26:	4b09      	ldr	r3, [pc, #36]	@ (800bc4c <cleanup_stdio+0x38>)
 800bc28:	4299      	cmp	r1, r3
 800bc2a:	d002      	beq.n	800bc32 <cleanup_stdio+0x1e>
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	f002 fe51 	bl	800e8d4 <_fflush_r>
 800bc32:	68e1      	ldr	r1, [r4, #12]
 800bc34:	4b06      	ldr	r3, [pc, #24]	@ (800bc50 <cleanup_stdio+0x3c>)
 800bc36:	4299      	cmp	r1, r3
 800bc38:	d004      	beq.n	800bc44 <cleanup_stdio+0x30>
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc40:	f002 be48 	b.w	800e8d4 <_fflush_r>
 800bc44:	bd10      	pop	{r4, pc}
 800bc46:	bf00      	nop
 800bc48:	200048ac 	.word	0x200048ac
 800bc4c:	20004914 	.word	0x20004914
 800bc50:	2000497c 	.word	0x2000497c

0800bc54 <global_stdio_init.part.0>:
 800bc54:	b510      	push	{r4, lr}
 800bc56:	4b0b      	ldr	r3, [pc, #44]	@ (800bc84 <global_stdio_init.part.0+0x30>)
 800bc58:	4c0b      	ldr	r4, [pc, #44]	@ (800bc88 <global_stdio_init.part.0+0x34>)
 800bc5a:	4a0c      	ldr	r2, [pc, #48]	@ (800bc8c <global_stdio_init.part.0+0x38>)
 800bc5c:	601a      	str	r2, [r3, #0]
 800bc5e:	4620      	mov	r0, r4
 800bc60:	2200      	movs	r2, #0
 800bc62:	2104      	movs	r1, #4
 800bc64:	f7ff ff94 	bl	800bb90 <std>
 800bc68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	2109      	movs	r1, #9
 800bc70:	f7ff ff8e 	bl	800bb90 <std>
 800bc74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bc78:	2202      	movs	r2, #2
 800bc7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc7e:	2112      	movs	r1, #18
 800bc80:	f7ff bf86 	b.w	800bb90 <std>
 800bc84:	200049e4 	.word	0x200049e4
 800bc88:	200048ac 	.word	0x200048ac
 800bc8c:	0800bbfd 	.word	0x0800bbfd

0800bc90 <__sfp_lock_acquire>:
 800bc90:	4801      	ldr	r0, [pc, #4]	@ (800bc98 <__sfp_lock_acquire+0x8>)
 800bc92:	f000 b9aa 	b.w	800bfea <__retarget_lock_acquire_recursive>
 800bc96:	bf00      	nop
 800bc98:	200049ed 	.word	0x200049ed

0800bc9c <__sfp_lock_release>:
 800bc9c:	4801      	ldr	r0, [pc, #4]	@ (800bca4 <__sfp_lock_release+0x8>)
 800bc9e:	f000 b9a5 	b.w	800bfec <__retarget_lock_release_recursive>
 800bca2:	bf00      	nop
 800bca4:	200049ed 	.word	0x200049ed

0800bca8 <__sinit>:
 800bca8:	b510      	push	{r4, lr}
 800bcaa:	4604      	mov	r4, r0
 800bcac:	f7ff fff0 	bl	800bc90 <__sfp_lock_acquire>
 800bcb0:	6a23      	ldr	r3, [r4, #32]
 800bcb2:	b11b      	cbz	r3, 800bcbc <__sinit+0x14>
 800bcb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcb8:	f7ff bff0 	b.w	800bc9c <__sfp_lock_release>
 800bcbc:	4b04      	ldr	r3, [pc, #16]	@ (800bcd0 <__sinit+0x28>)
 800bcbe:	6223      	str	r3, [r4, #32]
 800bcc0:	4b04      	ldr	r3, [pc, #16]	@ (800bcd4 <__sinit+0x2c>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d1f5      	bne.n	800bcb4 <__sinit+0xc>
 800bcc8:	f7ff ffc4 	bl	800bc54 <global_stdio_init.part.0>
 800bccc:	e7f2      	b.n	800bcb4 <__sinit+0xc>
 800bcce:	bf00      	nop
 800bcd0:	0800bc15 	.word	0x0800bc15
 800bcd4:	200049e4 	.word	0x200049e4

0800bcd8 <_fwalk_sglue>:
 800bcd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcdc:	4607      	mov	r7, r0
 800bcde:	4688      	mov	r8, r1
 800bce0:	4614      	mov	r4, r2
 800bce2:	2600      	movs	r6, #0
 800bce4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bce8:	f1b9 0901 	subs.w	r9, r9, #1
 800bcec:	d505      	bpl.n	800bcfa <_fwalk_sglue+0x22>
 800bcee:	6824      	ldr	r4, [r4, #0]
 800bcf0:	2c00      	cmp	r4, #0
 800bcf2:	d1f7      	bne.n	800bce4 <_fwalk_sglue+0xc>
 800bcf4:	4630      	mov	r0, r6
 800bcf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcfa:	89ab      	ldrh	r3, [r5, #12]
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d907      	bls.n	800bd10 <_fwalk_sglue+0x38>
 800bd00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd04:	3301      	adds	r3, #1
 800bd06:	d003      	beq.n	800bd10 <_fwalk_sglue+0x38>
 800bd08:	4629      	mov	r1, r5
 800bd0a:	4638      	mov	r0, r7
 800bd0c:	47c0      	blx	r8
 800bd0e:	4306      	orrs	r6, r0
 800bd10:	3568      	adds	r5, #104	@ 0x68
 800bd12:	e7e9      	b.n	800bce8 <_fwalk_sglue+0x10>

0800bd14 <sniprintf>:
 800bd14:	b40c      	push	{r2, r3}
 800bd16:	b530      	push	{r4, r5, lr}
 800bd18:	4b17      	ldr	r3, [pc, #92]	@ (800bd78 <sniprintf+0x64>)
 800bd1a:	1e0c      	subs	r4, r1, #0
 800bd1c:	681d      	ldr	r5, [r3, #0]
 800bd1e:	b09d      	sub	sp, #116	@ 0x74
 800bd20:	da08      	bge.n	800bd34 <sniprintf+0x20>
 800bd22:	238b      	movs	r3, #139	@ 0x8b
 800bd24:	602b      	str	r3, [r5, #0]
 800bd26:	f04f 30ff 	mov.w	r0, #4294967295
 800bd2a:	b01d      	add	sp, #116	@ 0x74
 800bd2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd30:	b002      	add	sp, #8
 800bd32:	4770      	bx	lr
 800bd34:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bd38:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bd3c:	bf14      	ite	ne
 800bd3e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bd42:	4623      	moveq	r3, r4
 800bd44:	9304      	str	r3, [sp, #16]
 800bd46:	9307      	str	r3, [sp, #28]
 800bd48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bd4c:	9002      	str	r0, [sp, #8]
 800bd4e:	9006      	str	r0, [sp, #24]
 800bd50:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bd54:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bd56:	ab21      	add	r3, sp, #132	@ 0x84
 800bd58:	a902      	add	r1, sp, #8
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	9301      	str	r3, [sp, #4]
 800bd5e:	f002 fc39 	bl	800e5d4 <_svfiprintf_r>
 800bd62:	1c43      	adds	r3, r0, #1
 800bd64:	bfbc      	itt	lt
 800bd66:	238b      	movlt	r3, #139	@ 0x8b
 800bd68:	602b      	strlt	r3, [r5, #0]
 800bd6a:	2c00      	cmp	r4, #0
 800bd6c:	d0dd      	beq.n	800bd2a <sniprintf+0x16>
 800bd6e:	9b02      	ldr	r3, [sp, #8]
 800bd70:	2200      	movs	r2, #0
 800bd72:	701a      	strb	r2, [r3, #0]
 800bd74:	e7d9      	b.n	800bd2a <sniprintf+0x16>
 800bd76:	bf00      	nop
 800bd78:	20000034 	.word	0x20000034

0800bd7c <siprintf>:
 800bd7c:	b40e      	push	{r1, r2, r3}
 800bd7e:	b500      	push	{lr}
 800bd80:	b09c      	sub	sp, #112	@ 0x70
 800bd82:	ab1d      	add	r3, sp, #116	@ 0x74
 800bd84:	9002      	str	r0, [sp, #8]
 800bd86:	9006      	str	r0, [sp, #24]
 800bd88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bd8c:	4809      	ldr	r0, [pc, #36]	@ (800bdb4 <siprintf+0x38>)
 800bd8e:	9107      	str	r1, [sp, #28]
 800bd90:	9104      	str	r1, [sp, #16]
 800bd92:	4909      	ldr	r1, [pc, #36]	@ (800bdb8 <siprintf+0x3c>)
 800bd94:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd98:	9105      	str	r1, [sp, #20]
 800bd9a:	6800      	ldr	r0, [r0, #0]
 800bd9c:	9301      	str	r3, [sp, #4]
 800bd9e:	a902      	add	r1, sp, #8
 800bda0:	f002 fc18 	bl	800e5d4 <_svfiprintf_r>
 800bda4:	9b02      	ldr	r3, [sp, #8]
 800bda6:	2200      	movs	r2, #0
 800bda8:	701a      	strb	r2, [r3, #0]
 800bdaa:	b01c      	add	sp, #112	@ 0x70
 800bdac:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdb0:	b003      	add	sp, #12
 800bdb2:	4770      	bx	lr
 800bdb4:	20000034 	.word	0x20000034
 800bdb8:	ffff0208 	.word	0xffff0208

0800bdbc <__sread>:
 800bdbc:	b510      	push	{r4, lr}
 800bdbe:	460c      	mov	r4, r1
 800bdc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdc4:	f000 f8c2 	bl	800bf4c <_read_r>
 800bdc8:	2800      	cmp	r0, #0
 800bdca:	bfab      	itete	ge
 800bdcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bdce:	89a3      	ldrhlt	r3, [r4, #12]
 800bdd0:	181b      	addge	r3, r3, r0
 800bdd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bdd6:	bfac      	ite	ge
 800bdd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bdda:	81a3      	strhlt	r3, [r4, #12]
 800bddc:	bd10      	pop	{r4, pc}

0800bdde <__swrite>:
 800bdde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bde2:	461f      	mov	r7, r3
 800bde4:	898b      	ldrh	r3, [r1, #12]
 800bde6:	05db      	lsls	r3, r3, #23
 800bde8:	4605      	mov	r5, r0
 800bdea:	460c      	mov	r4, r1
 800bdec:	4616      	mov	r6, r2
 800bdee:	d505      	bpl.n	800bdfc <__swrite+0x1e>
 800bdf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdf4:	2302      	movs	r3, #2
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	f000 f896 	bl	800bf28 <_lseek_r>
 800bdfc:	89a3      	ldrh	r3, [r4, #12]
 800bdfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800be06:	81a3      	strh	r3, [r4, #12]
 800be08:	4632      	mov	r2, r6
 800be0a:	463b      	mov	r3, r7
 800be0c:	4628      	mov	r0, r5
 800be0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be12:	f000 b8ad 	b.w	800bf70 <_write_r>

0800be16 <__sseek>:
 800be16:	b510      	push	{r4, lr}
 800be18:	460c      	mov	r4, r1
 800be1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be1e:	f000 f883 	bl	800bf28 <_lseek_r>
 800be22:	1c43      	adds	r3, r0, #1
 800be24:	89a3      	ldrh	r3, [r4, #12]
 800be26:	bf15      	itete	ne
 800be28:	6560      	strne	r0, [r4, #84]	@ 0x54
 800be2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800be2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800be32:	81a3      	strheq	r3, [r4, #12]
 800be34:	bf18      	it	ne
 800be36:	81a3      	strhne	r3, [r4, #12]
 800be38:	bd10      	pop	{r4, pc}

0800be3a <__sclose>:
 800be3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be3e:	f000 b80d 	b.w	800be5c <_close_r>

0800be42 <memset>:
 800be42:	4402      	add	r2, r0
 800be44:	4603      	mov	r3, r0
 800be46:	4293      	cmp	r3, r2
 800be48:	d100      	bne.n	800be4c <memset+0xa>
 800be4a:	4770      	bx	lr
 800be4c:	f803 1b01 	strb.w	r1, [r3], #1
 800be50:	e7f9      	b.n	800be46 <memset+0x4>
	...

0800be54 <_localeconv_r>:
 800be54:	4800      	ldr	r0, [pc, #0]	@ (800be58 <_localeconv_r+0x4>)
 800be56:	4770      	bx	lr
 800be58:	20000174 	.word	0x20000174

0800be5c <_close_r>:
 800be5c:	b538      	push	{r3, r4, r5, lr}
 800be5e:	4d06      	ldr	r5, [pc, #24]	@ (800be78 <_close_r+0x1c>)
 800be60:	2300      	movs	r3, #0
 800be62:	4604      	mov	r4, r0
 800be64:	4608      	mov	r0, r1
 800be66:	602b      	str	r3, [r5, #0]
 800be68:	f7f6 ff02 	bl	8002c70 <_close>
 800be6c:	1c43      	adds	r3, r0, #1
 800be6e:	d102      	bne.n	800be76 <_close_r+0x1a>
 800be70:	682b      	ldr	r3, [r5, #0]
 800be72:	b103      	cbz	r3, 800be76 <_close_r+0x1a>
 800be74:	6023      	str	r3, [r4, #0]
 800be76:	bd38      	pop	{r3, r4, r5, pc}
 800be78:	200049e8 	.word	0x200049e8

0800be7c <_reclaim_reent>:
 800be7c:	4b29      	ldr	r3, [pc, #164]	@ (800bf24 <_reclaim_reent+0xa8>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4283      	cmp	r3, r0
 800be82:	b570      	push	{r4, r5, r6, lr}
 800be84:	4604      	mov	r4, r0
 800be86:	d04b      	beq.n	800bf20 <_reclaim_reent+0xa4>
 800be88:	69c3      	ldr	r3, [r0, #28]
 800be8a:	b1ab      	cbz	r3, 800beb8 <_reclaim_reent+0x3c>
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	b16b      	cbz	r3, 800beac <_reclaim_reent+0x30>
 800be90:	2500      	movs	r5, #0
 800be92:	69e3      	ldr	r3, [r4, #28]
 800be94:	68db      	ldr	r3, [r3, #12]
 800be96:	5959      	ldr	r1, [r3, r5]
 800be98:	2900      	cmp	r1, #0
 800be9a:	d13b      	bne.n	800bf14 <_reclaim_reent+0x98>
 800be9c:	3504      	adds	r5, #4
 800be9e:	2d80      	cmp	r5, #128	@ 0x80
 800bea0:	d1f7      	bne.n	800be92 <_reclaim_reent+0x16>
 800bea2:	69e3      	ldr	r3, [r4, #28]
 800bea4:	4620      	mov	r0, r4
 800bea6:	68d9      	ldr	r1, [r3, #12]
 800bea8:	f000 ff02 	bl	800ccb0 <_free_r>
 800beac:	69e3      	ldr	r3, [r4, #28]
 800beae:	6819      	ldr	r1, [r3, #0]
 800beb0:	b111      	cbz	r1, 800beb8 <_reclaim_reent+0x3c>
 800beb2:	4620      	mov	r0, r4
 800beb4:	f000 fefc 	bl	800ccb0 <_free_r>
 800beb8:	6961      	ldr	r1, [r4, #20]
 800beba:	b111      	cbz	r1, 800bec2 <_reclaim_reent+0x46>
 800bebc:	4620      	mov	r0, r4
 800bebe:	f000 fef7 	bl	800ccb0 <_free_r>
 800bec2:	69e1      	ldr	r1, [r4, #28]
 800bec4:	b111      	cbz	r1, 800becc <_reclaim_reent+0x50>
 800bec6:	4620      	mov	r0, r4
 800bec8:	f000 fef2 	bl	800ccb0 <_free_r>
 800becc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bece:	b111      	cbz	r1, 800bed6 <_reclaim_reent+0x5a>
 800bed0:	4620      	mov	r0, r4
 800bed2:	f000 feed 	bl	800ccb0 <_free_r>
 800bed6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bed8:	b111      	cbz	r1, 800bee0 <_reclaim_reent+0x64>
 800beda:	4620      	mov	r0, r4
 800bedc:	f000 fee8 	bl	800ccb0 <_free_r>
 800bee0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bee2:	b111      	cbz	r1, 800beea <_reclaim_reent+0x6e>
 800bee4:	4620      	mov	r0, r4
 800bee6:	f000 fee3 	bl	800ccb0 <_free_r>
 800beea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800beec:	b111      	cbz	r1, 800bef4 <_reclaim_reent+0x78>
 800beee:	4620      	mov	r0, r4
 800bef0:	f000 fede 	bl	800ccb0 <_free_r>
 800bef4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bef6:	b111      	cbz	r1, 800befe <_reclaim_reent+0x82>
 800bef8:	4620      	mov	r0, r4
 800befa:	f000 fed9 	bl	800ccb0 <_free_r>
 800befe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bf00:	b111      	cbz	r1, 800bf08 <_reclaim_reent+0x8c>
 800bf02:	4620      	mov	r0, r4
 800bf04:	f000 fed4 	bl	800ccb0 <_free_r>
 800bf08:	6a23      	ldr	r3, [r4, #32]
 800bf0a:	b14b      	cbz	r3, 800bf20 <_reclaim_reent+0xa4>
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf12:	4718      	bx	r3
 800bf14:	680e      	ldr	r6, [r1, #0]
 800bf16:	4620      	mov	r0, r4
 800bf18:	f000 feca 	bl	800ccb0 <_free_r>
 800bf1c:	4631      	mov	r1, r6
 800bf1e:	e7bb      	b.n	800be98 <_reclaim_reent+0x1c>
 800bf20:	bd70      	pop	{r4, r5, r6, pc}
 800bf22:	bf00      	nop
 800bf24:	20000034 	.word	0x20000034

0800bf28 <_lseek_r>:
 800bf28:	b538      	push	{r3, r4, r5, lr}
 800bf2a:	4d07      	ldr	r5, [pc, #28]	@ (800bf48 <_lseek_r+0x20>)
 800bf2c:	4604      	mov	r4, r0
 800bf2e:	4608      	mov	r0, r1
 800bf30:	4611      	mov	r1, r2
 800bf32:	2200      	movs	r2, #0
 800bf34:	602a      	str	r2, [r5, #0]
 800bf36:	461a      	mov	r2, r3
 800bf38:	f7f6 fec1 	bl	8002cbe <_lseek>
 800bf3c:	1c43      	adds	r3, r0, #1
 800bf3e:	d102      	bne.n	800bf46 <_lseek_r+0x1e>
 800bf40:	682b      	ldr	r3, [r5, #0]
 800bf42:	b103      	cbz	r3, 800bf46 <_lseek_r+0x1e>
 800bf44:	6023      	str	r3, [r4, #0]
 800bf46:	bd38      	pop	{r3, r4, r5, pc}
 800bf48:	200049e8 	.word	0x200049e8

0800bf4c <_read_r>:
 800bf4c:	b538      	push	{r3, r4, r5, lr}
 800bf4e:	4d07      	ldr	r5, [pc, #28]	@ (800bf6c <_read_r+0x20>)
 800bf50:	4604      	mov	r4, r0
 800bf52:	4608      	mov	r0, r1
 800bf54:	4611      	mov	r1, r2
 800bf56:	2200      	movs	r2, #0
 800bf58:	602a      	str	r2, [r5, #0]
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	f7f6 fe4f 	bl	8002bfe <_read>
 800bf60:	1c43      	adds	r3, r0, #1
 800bf62:	d102      	bne.n	800bf6a <_read_r+0x1e>
 800bf64:	682b      	ldr	r3, [r5, #0]
 800bf66:	b103      	cbz	r3, 800bf6a <_read_r+0x1e>
 800bf68:	6023      	str	r3, [r4, #0]
 800bf6a:	bd38      	pop	{r3, r4, r5, pc}
 800bf6c:	200049e8 	.word	0x200049e8

0800bf70 <_write_r>:
 800bf70:	b538      	push	{r3, r4, r5, lr}
 800bf72:	4d07      	ldr	r5, [pc, #28]	@ (800bf90 <_write_r+0x20>)
 800bf74:	4604      	mov	r4, r0
 800bf76:	4608      	mov	r0, r1
 800bf78:	4611      	mov	r1, r2
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	602a      	str	r2, [r5, #0]
 800bf7e:	461a      	mov	r2, r3
 800bf80:	f7f6 fe5a 	bl	8002c38 <_write>
 800bf84:	1c43      	adds	r3, r0, #1
 800bf86:	d102      	bne.n	800bf8e <_write_r+0x1e>
 800bf88:	682b      	ldr	r3, [r5, #0]
 800bf8a:	b103      	cbz	r3, 800bf8e <_write_r+0x1e>
 800bf8c:	6023      	str	r3, [r4, #0]
 800bf8e:	bd38      	pop	{r3, r4, r5, pc}
 800bf90:	200049e8 	.word	0x200049e8

0800bf94 <__errno>:
 800bf94:	4b01      	ldr	r3, [pc, #4]	@ (800bf9c <__errno+0x8>)
 800bf96:	6818      	ldr	r0, [r3, #0]
 800bf98:	4770      	bx	lr
 800bf9a:	bf00      	nop
 800bf9c:	20000034 	.word	0x20000034

0800bfa0 <__libc_init_array>:
 800bfa0:	b570      	push	{r4, r5, r6, lr}
 800bfa2:	4d0d      	ldr	r5, [pc, #52]	@ (800bfd8 <__libc_init_array+0x38>)
 800bfa4:	4c0d      	ldr	r4, [pc, #52]	@ (800bfdc <__libc_init_array+0x3c>)
 800bfa6:	1b64      	subs	r4, r4, r5
 800bfa8:	10a4      	asrs	r4, r4, #2
 800bfaa:	2600      	movs	r6, #0
 800bfac:	42a6      	cmp	r6, r4
 800bfae:	d109      	bne.n	800bfc4 <__libc_init_array+0x24>
 800bfb0:	4d0b      	ldr	r5, [pc, #44]	@ (800bfe0 <__libc_init_array+0x40>)
 800bfb2:	4c0c      	ldr	r4, [pc, #48]	@ (800bfe4 <__libc_init_array+0x44>)
 800bfb4:	f003 fb72 	bl	800f69c <_init>
 800bfb8:	1b64      	subs	r4, r4, r5
 800bfba:	10a4      	asrs	r4, r4, #2
 800bfbc:	2600      	movs	r6, #0
 800bfbe:	42a6      	cmp	r6, r4
 800bfc0:	d105      	bne.n	800bfce <__libc_init_array+0x2e>
 800bfc2:	bd70      	pop	{r4, r5, r6, pc}
 800bfc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfc8:	4798      	blx	r3
 800bfca:	3601      	adds	r6, #1
 800bfcc:	e7ee      	b.n	800bfac <__libc_init_array+0xc>
 800bfce:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfd2:	4798      	blx	r3
 800bfd4:	3601      	adds	r6, #1
 800bfd6:	e7f2      	b.n	800bfbe <__libc_init_array+0x1e>
 800bfd8:	0800ffc8 	.word	0x0800ffc8
 800bfdc:	0800ffc8 	.word	0x0800ffc8
 800bfe0:	0800ffc8 	.word	0x0800ffc8
 800bfe4:	0800ffcc 	.word	0x0800ffcc

0800bfe8 <__retarget_lock_init_recursive>:
 800bfe8:	4770      	bx	lr

0800bfea <__retarget_lock_acquire_recursive>:
 800bfea:	4770      	bx	lr

0800bfec <__retarget_lock_release_recursive>:
 800bfec:	4770      	bx	lr

0800bfee <memcpy>:
 800bfee:	440a      	add	r2, r1
 800bff0:	4291      	cmp	r1, r2
 800bff2:	f100 33ff 	add.w	r3, r0, #4294967295
 800bff6:	d100      	bne.n	800bffa <memcpy+0xc>
 800bff8:	4770      	bx	lr
 800bffa:	b510      	push	{r4, lr}
 800bffc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c000:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c004:	4291      	cmp	r1, r2
 800c006:	d1f9      	bne.n	800bffc <memcpy+0xe>
 800c008:	bd10      	pop	{r4, pc}
	...

0800c00c <nanf>:
 800c00c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c014 <nanf+0x8>
 800c010:	4770      	bx	lr
 800c012:	bf00      	nop
 800c014:	7fc00000 	.word	0x7fc00000

0800c018 <quorem>:
 800c018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c01c:	6903      	ldr	r3, [r0, #16]
 800c01e:	690c      	ldr	r4, [r1, #16]
 800c020:	42a3      	cmp	r3, r4
 800c022:	4607      	mov	r7, r0
 800c024:	db7e      	blt.n	800c124 <quorem+0x10c>
 800c026:	3c01      	subs	r4, #1
 800c028:	f101 0814 	add.w	r8, r1, #20
 800c02c:	00a3      	lsls	r3, r4, #2
 800c02e:	f100 0514 	add.w	r5, r0, #20
 800c032:	9300      	str	r3, [sp, #0]
 800c034:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c038:	9301      	str	r3, [sp, #4]
 800c03a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c03e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c042:	3301      	adds	r3, #1
 800c044:	429a      	cmp	r2, r3
 800c046:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c04a:	fbb2 f6f3 	udiv	r6, r2, r3
 800c04e:	d32e      	bcc.n	800c0ae <quorem+0x96>
 800c050:	f04f 0a00 	mov.w	sl, #0
 800c054:	46c4      	mov	ip, r8
 800c056:	46ae      	mov	lr, r5
 800c058:	46d3      	mov	fp, sl
 800c05a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c05e:	b298      	uxth	r0, r3
 800c060:	fb06 a000 	mla	r0, r6, r0, sl
 800c064:	0c02      	lsrs	r2, r0, #16
 800c066:	0c1b      	lsrs	r3, r3, #16
 800c068:	fb06 2303 	mla	r3, r6, r3, r2
 800c06c:	f8de 2000 	ldr.w	r2, [lr]
 800c070:	b280      	uxth	r0, r0
 800c072:	b292      	uxth	r2, r2
 800c074:	1a12      	subs	r2, r2, r0
 800c076:	445a      	add	r2, fp
 800c078:	f8de 0000 	ldr.w	r0, [lr]
 800c07c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c080:	b29b      	uxth	r3, r3
 800c082:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c086:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c08a:	b292      	uxth	r2, r2
 800c08c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c090:	45e1      	cmp	r9, ip
 800c092:	f84e 2b04 	str.w	r2, [lr], #4
 800c096:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c09a:	d2de      	bcs.n	800c05a <quorem+0x42>
 800c09c:	9b00      	ldr	r3, [sp, #0]
 800c09e:	58eb      	ldr	r3, [r5, r3]
 800c0a0:	b92b      	cbnz	r3, 800c0ae <quorem+0x96>
 800c0a2:	9b01      	ldr	r3, [sp, #4]
 800c0a4:	3b04      	subs	r3, #4
 800c0a6:	429d      	cmp	r5, r3
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	d32f      	bcc.n	800c10c <quorem+0xf4>
 800c0ac:	613c      	str	r4, [r7, #16]
 800c0ae:	4638      	mov	r0, r7
 800c0b0:	f001 f9c2 	bl	800d438 <__mcmp>
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	db25      	blt.n	800c104 <quorem+0xec>
 800c0b8:	4629      	mov	r1, r5
 800c0ba:	2000      	movs	r0, #0
 800c0bc:	f858 2b04 	ldr.w	r2, [r8], #4
 800c0c0:	f8d1 c000 	ldr.w	ip, [r1]
 800c0c4:	fa1f fe82 	uxth.w	lr, r2
 800c0c8:	fa1f f38c 	uxth.w	r3, ip
 800c0cc:	eba3 030e 	sub.w	r3, r3, lr
 800c0d0:	4403      	add	r3, r0
 800c0d2:	0c12      	lsrs	r2, r2, #16
 800c0d4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c0d8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0e2:	45c1      	cmp	r9, r8
 800c0e4:	f841 3b04 	str.w	r3, [r1], #4
 800c0e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c0ec:	d2e6      	bcs.n	800c0bc <quorem+0xa4>
 800c0ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0f6:	b922      	cbnz	r2, 800c102 <quorem+0xea>
 800c0f8:	3b04      	subs	r3, #4
 800c0fa:	429d      	cmp	r5, r3
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	d30b      	bcc.n	800c118 <quorem+0x100>
 800c100:	613c      	str	r4, [r7, #16]
 800c102:	3601      	adds	r6, #1
 800c104:	4630      	mov	r0, r6
 800c106:	b003      	add	sp, #12
 800c108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c10c:	6812      	ldr	r2, [r2, #0]
 800c10e:	3b04      	subs	r3, #4
 800c110:	2a00      	cmp	r2, #0
 800c112:	d1cb      	bne.n	800c0ac <quorem+0x94>
 800c114:	3c01      	subs	r4, #1
 800c116:	e7c6      	b.n	800c0a6 <quorem+0x8e>
 800c118:	6812      	ldr	r2, [r2, #0]
 800c11a:	3b04      	subs	r3, #4
 800c11c:	2a00      	cmp	r2, #0
 800c11e:	d1ef      	bne.n	800c100 <quorem+0xe8>
 800c120:	3c01      	subs	r4, #1
 800c122:	e7ea      	b.n	800c0fa <quorem+0xe2>
 800c124:	2000      	movs	r0, #0
 800c126:	e7ee      	b.n	800c106 <quorem+0xee>

0800c128 <_dtoa_r>:
 800c128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c12c:	69c7      	ldr	r7, [r0, #28]
 800c12e:	b099      	sub	sp, #100	@ 0x64
 800c130:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c134:	ec55 4b10 	vmov	r4, r5, d0
 800c138:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c13a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c13c:	4683      	mov	fp, r0
 800c13e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c140:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c142:	b97f      	cbnz	r7, 800c164 <_dtoa_r+0x3c>
 800c144:	2010      	movs	r0, #16
 800c146:	f000 fdfd 	bl	800cd44 <malloc>
 800c14a:	4602      	mov	r2, r0
 800c14c:	f8cb 001c 	str.w	r0, [fp, #28]
 800c150:	b920      	cbnz	r0, 800c15c <_dtoa_r+0x34>
 800c152:	4ba7      	ldr	r3, [pc, #668]	@ (800c3f0 <_dtoa_r+0x2c8>)
 800c154:	21ef      	movs	r1, #239	@ 0xef
 800c156:	48a7      	ldr	r0, [pc, #668]	@ (800c3f4 <_dtoa_r+0x2cc>)
 800c158:	f002 fc2a 	bl	800e9b0 <__assert_func>
 800c15c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c160:	6007      	str	r7, [r0, #0]
 800c162:	60c7      	str	r7, [r0, #12]
 800c164:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c168:	6819      	ldr	r1, [r3, #0]
 800c16a:	b159      	cbz	r1, 800c184 <_dtoa_r+0x5c>
 800c16c:	685a      	ldr	r2, [r3, #4]
 800c16e:	604a      	str	r2, [r1, #4]
 800c170:	2301      	movs	r3, #1
 800c172:	4093      	lsls	r3, r2
 800c174:	608b      	str	r3, [r1, #8]
 800c176:	4658      	mov	r0, fp
 800c178:	f000 feda 	bl	800cf30 <_Bfree>
 800c17c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c180:	2200      	movs	r2, #0
 800c182:	601a      	str	r2, [r3, #0]
 800c184:	1e2b      	subs	r3, r5, #0
 800c186:	bfb9      	ittee	lt
 800c188:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c18c:	9303      	strlt	r3, [sp, #12]
 800c18e:	2300      	movge	r3, #0
 800c190:	6033      	strge	r3, [r6, #0]
 800c192:	9f03      	ldr	r7, [sp, #12]
 800c194:	4b98      	ldr	r3, [pc, #608]	@ (800c3f8 <_dtoa_r+0x2d0>)
 800c196:	bfbc      	itt	lt
 800c198:	2201      	movlt	r2, #1
 800c19a:	6032      	strlt	r2, [r6, #0]
 800c19c:	43bb      	bics	r3, r7
 800c19e:	d112      	bne.n	800c1c6 <_dtoa_r+0x9e>
 800c1a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c1a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c1a6:	6013      	str	r3, [r2, #0]
 800c1a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c1ac:	4323      	orrs	r3, r4
 800c1ae:	f000 854d 	beq.w	800cc4c <_dtoa_r+0xb24>
 800c1b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c1b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c40c <_dtoa_r+0x2e4>
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	f000 854f 	beq.w	800cc5c <_dtoa_r+0xb34>
 800c1be:	f10a 0303 	add.w	r3, sl, #3
 800c1c2:	f000 bd49 	b.w	800cc58 <_dtoa_r+0xb30>
 800c1c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	ec51 0b17 	vmov	r0, r1, d7
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c1d6:	f7f4 fca7 	bl	8000b28 <__aeabi_dcmpeq>
 800c1da:	4680      	mov	r8, r0
 800c1dc:	b158      	cbz	r0, 800c1f6 <_dtoa_r+0xce>
 800c1de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	6013      	str	r3, [r2, #0]
 800c1e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c1e6:	b113      	cbz	r3, 800c1ee <_dtoa_r+0xc6>
 800c1e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c1ea:	4b84      	ldr	r3, [pc, #528]	@ (800c3fc <_dtoa_r+0x2d4>)
 800c1ec:	6013      	str	r3, [r2, #0]
 800c1ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c410 <_dtoa_r+0x2e8>
 800c1f2:	f000 bd33 	b.w	800cc5c <_dtoa_r+0xb34>
 800c1f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c1fa:	aa16      	add	r2, sp, #88	@ 0x58
 800c1fc:	a917      	add	r1, sp, #92	@ 0x5c
 800c1fe:	4658      	mov	r0, fp
 800c200:	f001 fa3a 	bl	800d678 <__d2b>
 800c204:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c208:	4681      	mov	r9, r0
 800c20a:	2e00      	cmp	r6, #0
 800c20c:	d077      	beq.n	800c2fe <_dtoa_r+0x1d6>
 800c20e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c210:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c218:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c21c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c220:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c224:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c228:	4619      	mov	r1, r3
 800c22a:	2200      	movs	r2, #0
 800c22c:	4b74      	ldr	r3, [pc, #464]	@ (800c400 <_dtoa_r+0x2d8>)
 800c22e:	f7f4 f85b 	bl	80002e8 <__aeabi_dsub>
 800c232:	a369      	add	r3, pc, #420	@ (adr r3, 800c3d8 <_dtoa_r+0x2b0>)
 800c234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c238:	f7f4 fa0e 	bl	8000658 <__aeabi_dmul>
 800c23c:	a368      	add	r3, pc, #416	@ (adr r3, 800c3e0 <_dtoa_r+0x2b8>)
 800c23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c242:	f7f4 f853 	bl	80002ec <__adddf3>
 800c246:	4604      	mov	r4, r0
 800c248:	4630      	mov	r0, r6
 800c24a:	460d      	mov	r5, r1
 800c24c:	f7f4 f99a 	bl	8000584 <__aeabi_i2d>
 800c250:	a365      	add	r3, pc, #404	@ (adr r3, 800c3e8 <_dtoa_r+0x2c0>)
 800c252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c256:	f7f4 f9ff 	bl	8000658 <__aeabi_dmul>
 800c25a:	4602      	mov	r2, r0
 800c25c:	460b      	mov	r3, r1
 800c25e:	4620      	mov	r0, r4
 800c260:	4629      	mov	r1, r5
 800c262:	f7f4 f843 	bl	80002ec <__adddf3>
 800c266:	4604      	mov	r4, r0
 800c268:	460d      	mov	r5, r1
 800c26a:	f7f4 fca5 	bl	8000bb8 <__aeabi_d2iz>
 800c26e:	2200      	movs	r2, #0
 800c270:	4607      	mov	r7, r0
 800c272:	2300      	movs	r3, #0
 800c274:	4620      	mov	r0, r4
 800c276:	4629      	mov	r1, r5
 800c278:	f7f4 fc60 	bl	8000b3c <__aeabi_dcmplt>
 800c27c:	b140      	cbz	r0, 800c290 <_dtoa_r+0x168>
 800c27e:	4638      	mov	r0, r7
 800c280:	f7f4 f980 	bl	8000584 <__aeabi_i2d>
 800c284:	4622      	mov	r2, r4
 800c286:	462b      	mov	r3, r5
 800c288:	f7f4 fc4e 	bl	8000b28 <__aeabi_dcmpeq>
 800c28c:	b900      	cbnz	r0, 800c290 <_dtoa_r+0x168>
 800c28e:	3f01      	subs	r7, #1
 800c290:	2f16      	cmp	r7, #22
 800c292:	d851      	bhi.n	800c338 <_dtoa_r+0x210>
 800c294:	4b5b      	ldr	r3, [pc, #364]	@ (800c404 <_dtoa_r+0x2dc>)
 800c296:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c2a2:	f7f4 fc4b 	bl	8000b3c <__aeabi_dcmplt>
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	d048      	beq.n	800c33c <_dtoa_r+0x214>
 800c2aa:	3f01      	subs	r7, #1
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	9312      	str	r3, [sp, #72]	@ 0x48
 800c2b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c2b2:	1b9b      	subs	r3, r3, r6
 800c2b4:	1e5a      	subs	r2, r3, #1
 800c2b6:	bf44      	itt	mi
 800c2b8:	f1c3 0801 	rsbmi	r8, r3, #1
 800c2bc:	2300      	movmi	r3, #0
 800c2be:	9208      	str	r2, [sp, #32]
 800c2c0:	bf54      	ite	pl
 800c2c2:	f04f 0800 	movpl.w	r8, #0
 800c2c6:	9308      	strmi	r3, [sp, #32]
 800c2c8:	2f00      	cmp	r7, #0
 800c2ca:	db39      	blt.n	800c340 <_dtoa_r+0x218>
 800c2cc:	9b08      	ldr	r3, [sp, #32]
 800c2ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c2d0:	443b      	add	r3, r7
 800c2d2:	9308      	str	r3, [sp, #32]
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2da:	2b09      	cmp	r3, #9
 800c2dc:	d864      	bhi.n	800c3a8 <_dtoa_r+0x280>
 800c2de:	2b05      	cmp	r3, #5
 800c2e0:	bfc4      	itt	gt
 800c2e2:	3b04      	subgt	r3, #4
 800c2e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2e8:	f1a3 0302 	sub.w	r3, r3, #2
 800c2ec:	bfcc      	ite	gt
 800c2ee:	2400      	movgt	r4, #0
 800c2f0:	2401      	movle	r4, #1
 800c2f2:	2b03      	cmp	r3, #3
 800c2f4:	d863      	bhi.n	800c3be <_dtoa_r+0x296>
 800c2f6:	e8df f003 	tbb	[pc, r3]
 800c2fa:	372a      	.short	0x372a
 800c2fc:	5535      	.short	0x5535
 800c2fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c302:	441e      	add	r6, r3
 800c304:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c308:	2b20      	cmp	r3, #32
 800c30a:	bfc1      	itttt	gt
 800c30c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c310:	409f      	lslgt	r7, r3
 800c312:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c316:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c31a:	bfd6      	itet	le
 800c31c:	f1c3 0320 	rsble	r3, r3, #32
 800c320:	ea47 0003 	orrgt.w	r0, r7, r3
 800c324:	fa04 f003 	lslle.w	r0, r4, r3
 800c328:	f7f4 f91c 	bl	8000564 <__aeabi_ui2d>
 800c32c:	2201      	movs	r2, #1
 800c32e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c332:	3e01      	subs	r6, #1
 800c334:	9214      	str	r2, [sp, #80]	@ 0x50
 800c336:	e777      	b.n	800c228 <_dtoa_r+0x100>
 800c338:	2301      	movs	r3, #1
 800c33a:	e7b8      	b.n	800c2ae <_dtoa_r+0x186>
 800c33c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c33e:	e7b7      	b.n	800c2b0 <_dtoa_r+0x188>
 800c340:	427b      	negs	r3, r7
 800c342:	930a      	str	r3, [sp, #40]	@ 0x28
 800c344:	2300      	movs	r3, #0
 800c346:	eba8 0807 	sub.w	r8, r8, r7
 800c34a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c34c:	e7c4      	b.n	800c2d8 <_dtoa_r+0x1b0>
 800c34e:	2300      	movs	r3, #0
 800c350:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c352:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c354:	2b00      	cmp	r3, #0
 800c356:	dc35      	bgt.n	800c3c4 <_dtoa_r+0x29c>
 800c358:	2301      	movs	r3, #1
 800c35a:	9300      	str	r3, [sp, #0]
 800c35c:	9307      	str	r3, [sp, #28]
 800c35e:	461a      	mov	r2, r3
 800c360:	920e      	str	r2, [sp, #56]	@ 0x38
 800c362:	e00b      	b.n	800c37c <_dtoa_r+0x254>
 800c364:	2301      	movs	r3, #1
 800c366:	e7f3      	b.n	800c350 <_dtoa_r+0x228>
 800c368:	2300      	movs	r3, #0
 800c36a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c36c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c36e:	18fb      	adds	r3, r7, r3
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	3301      	adds	r3, #1
 800c374:	2b01      	cmp	r3, #1
 800c376:	9307      	str	r3, [sp, #28]
 800c378:	bfb8      	it	lt
 800c37a:	2301      	movlt	r3, #1
 800c37c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c380:	2100      	movs	r1, #0
 800c382:	2204      	movs	r2, #4
 800c384:	f102 0514 	add.w	r5, r2, #20
 800c388:	429d      	cmp	r5, r3
 800c38a:	d91f      	bls.n	800c3cc <_dtoa_r+0x2a4>
 800c38c:	6041      	str	r1, [r0, #4]
 800c38e:	4658      	mov	r0, fp
 800c390:	f000 fd8e 	bl	800ceb0 <_Balloc>
 800c394:	4682      	mov	sl, r0
 800c396:	2800      	cmp	r0, #0
 800c398:	d13c      	bne.n	800c414 <_dtoa_r+0x2ec>
 800c39a:	4b1b      	ldr	r3, [pc, #108]	@ (800c408 <_dtoa_r+0x2e0>)
 800c39c:	4602      	mov	r2, r0
 800c39e:	f240 11af 	movw	r1, #431	@ 0x1af
 800c3a2:	e6d8      	b.n	800c156 <_dtoa_r+0x2e>
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	e7e0      	b.n	800c36a <_dtoa_r+0x242>
 800c3a8:	2401      	movs	r4, #1
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c3b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3b4:	9300      	str	r3, [sp, #0]
 800c3b6:	9307      	str	r3, [sp, #28]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	2312      	movs	r3, #18
 800c3bc:	e7d0      	b.n	800c360 <_dtoa_r+0x238>
 800c3be:	2301      	movs	r3, #1
 800c3c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c3c2:	e7f5      	b.n	800c3b0 <_dtoa_r+0x288>
 800c3c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3c6:	9300      	str	r3, [sp, #0]
 800c3c8:	9307      	str	r3, [sp, #28]
 800c3ca:	e7d7      	b.n	800c37c <_dtoa_r+0x254>
 800c3cc:	3101      	adds	r1, #1
 800c3ce:	0052      	lsls	r2, r2, #1
 800c3d0:	e7d8      	b.n	800c384 <_dtoa_r+0x25c>
 800c3d2:	bf00      	nop
 800c3d4:	f3af 8000 	nop.w
 800c3d8:	636f4361 	.word	0x636f4361
 800c3dc:	3fd287a7 	.word	0x3fd287a7
 800c3e0:	8b60c8b3 	.word	0x8b60c8b3
 800c3e4:	3fc68a28 	.word	0x3fc68a28
 800c3e8:	509f79fb 	.word	0x509f79fb
 800c3ec:	3fd34413 	.word	0x3fd34413
 800c3f0:	0800fbd6 	.word	0x0800fbd6
 800c3f4:	0800fbed 	.word	0x0800fbed
 800c3f8:	7ff00000 	.word	0x7ff00000
 800c3fc:	0800fba1 	.word	0x0800fba1
 800c400:	3ff80000 	.word	0x3ff80000
 800c404:	0800fce8 	.word	0x0800fce8
 800c408:	0800fc45 	.word	0x0800fc45
 800c40c:	0800fbd2 	.word	0x0800fbd2
 800c410:	0800fba0 	.word	0x0800fba0
 800c414:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c418:	6018      	str	r0, [r3, #0]
 800c41a:	9b07      	ldr	r3, [sp, #28]
 800c41c:	2b0e      	cmp	r3, #14
 800c41e:	f200 80a4 	bhi.w	800c56a <_dtoa_r+0x442>
 800c422:	2c00      	cmp	r4, #0
 800c424:	f000 80a1 	beq.w	800c56a <_dtoa_r+0x442>
 800c428:	2f00      	cmp	r7, #0
 800c42a:	dd33      	ble.n	800c494 <_dtoa_r+0x36c>
 800c42c:	4bad      	ldr	r3, [pc, #692]	@ (800c6e4 <_dtoa_r+0x5bc>)
 800c42e:	f007 020f 	and.w	r2, r7, #15
 800c432:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c436:	ed93 7b00 	vldr	d7, [r3]
 800c43a:	05f8      	lsls	r0, r7, #23
 800c43c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c440:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c444:	d516      	bpl.n	800c474 <_dtoa_r+0x34c>
 800c446:	4ba8      	ldr	r3, [pc, #672]	@ (800c6e8 <_dtoa_r+0x5c0>)
 800c448:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c44c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c450:	f7f4 fa2c 	bl	80008ac <__aeabi_ddiv>
 800c454:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c458:	f004 040f 	and.w	r4, r4, #15
 800c45c:	2603      	movs	r6, #3
 800c45e:	4da2      	ldr	r5, [pc, #648]	@ (800c6e8 <_dtoa_r+0x5c0>)
 800c460:	b954      	cbnz	r4, 800c478 <_dtoa_r+0x350>
 800c462:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c46a:	f7f4 fa1f 	bl	80008ac <__aeabi_ddiv>
 800c46e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c472:	e028      	b.n	800c4c6 <_dtoa_r+0x39e>
 800c474:	2602      	movs	r6, #2
 800c476:	e7f2      	b.n	800c45e <_dtoa_r+0x336>
 800c478:	07e1      	lsls	r1, r4, #31
 800c47a:	d508      	bpl.n	800c48e <_dtoa_r+0x366>
 800c47c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c480:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c484:	f7f4 f8e8 	bl	8000658 <__aeabi_dmul>
 800c488:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c48c:	3601      	adds	r6, #1
 800c48e:	1064      	asrs	r4, r4, #1
 800c490:	3508      	adds	r5, #8
 800c492:	e7e5      	b.n	800c460 <_dtoa_r+0x338>
 800c494:	f000 80d2 	beq.w	800c63c <_dtoa_r+0x514>
 800c498:	427c      	negs	r4, r7
 800c49a:	4b92      	ldr	r3, [pc, #584]	@ (800c6e4 <_dtoa_r+0x5bc>)
 800c49c:	4d92      	ldr	r5, [pc, #584]	@ (800c6e8 <_dtoa_r+0x5c0>)
 800c49e:	f004 020f 	and.w	r2, r4, #15
 800c4a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c4ae:	f7f4 f8d3 	bl	8000658 <__aeabi_dmul>
 800c4b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4b6:	1124      	asrs	r4, r4, #4
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	2602      	movs	r6, #2
 800c4bc:	2c00      	cmp	r4, #0
 800c4be:	f040 80b2 	bne.w	800c626 <_dtoa_r+0x4fe>
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d1d3      	bne.n	800c46e <_dtoa_r+0x346>
 800c4c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c4c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	f000 80b7 	beq.w	800c640 <_dtoa_r+0x518>
 800c4d2:	4b86      	ldr	r3, [pc, #536]	@ (800c6ec <_dtoa_r+0x5c4>)
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	4629      	mov	r1, r5
 800c4da:	f7f4 fb2f 	bl	8000b3c <__aeabi_dcmplt>
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	f000 80ae 	beq.w	800c640 <_dtoa_r+0x518>
 800c4e4:	9b07      	ldr	r3, [sp, #28]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f000 80aa 	beq.w	800c640 <_dtoa_r+0x518>
 800c4ec:	9b00      	ldr	r3, [sp, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	dd37      	ble.n	800c562 <_dtoa_r+0x43a>
 800c4f2:	1e7b      	subs	r3, r7, #1
 800c4f4:	9304      	str	r3, [sp, #16]
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	4b7d      	ldr	r3, [pc, #500]	@ (800c6f0 <_dtoa_r+0x5c8>)
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	4629      	mov	r1, r5
 800c4fe:	f7f4 f8ab 	bl	8000658 <__aeabi_dmul>
 800c502:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c506:	9c00      	ldr	r4, [sp, #0]
 800c508:	3601      	adds	r6, #1
 800c50a:	4630      	mov	r0, r6
 800c50c:	f7f4 f83a 	bl	8000584 <__aeabi_i2d>
 800c510:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c514:	f7f4 f8a0 	bl	8000658 <__aeabi_dmul>
 800c518:	4b76      	ldr	r3, [pc, #472]	@ (800c6f4 <_dtoa_r+0x5cc>)
 800c51a:	2200      	movs	r2, #0
 800c51c:	f7f3 fee6 	bl	80002ec <__adddf3>
 800c520:	4605      	mov	r5, r0
 800c522:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c526:	2c00      	cmp	r4, #0
 800c528:	f040 808d 	bne.w	800c646 <_dtoa_r+0x51e>
 800c52c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c530:	4b71      	ldr	r3, [pc, #452]	@ (800c6f8 <_dtoa_r+0x5d0>)
 800c532:	2200      	movs	r2, #0
 800c534:	f7f3 fed8 	bl	80002e8 <__aeabi_dsub>
 800c538:	4602      	mov	r2, r0
 800c53a:	460b      	mov	r3, r1
 800c53c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c540:	462a      	mov	r2, r5
 800c542:	4633      	mov	r3, r6
 800c544:	f7f4 fb18 	bl	8000b78 <__aeabi_dcmpgt>
 800c548:	2800      	cmp	r0, #0
 800c54a:	f040 828b 	bne.w	800ca64 <_dtoa_r+0x93c>
 800c54e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c552:	462a      	mov	r2, r5
 800c554:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c558:	f7f4 faf0 	bl	8000b3c <__aeabi_dcmplt>
 800c55c:	2800      	cmp	r0, #0
 800c55e:	f040 8128 	bne.w	800c7b2 <_dtoa_r+0x68a>
 800c562:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c566:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c56a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	f2c0 815a 	blt.w	800c826 <_dtoa_r+0x6fe>
 800c572:	2f0e      	cmp	r7, #14
 800c574:	f300 8157 	bgt.w	800c826 <_dtoa_r+0x6fe>
 800c578:	4b5a      	ldr	r3, [pc, #360]	@ (800c6e4 <_dtoa_r+0x5bc>)
 800c57a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c57e:	ed93 7b00 	vldr	d7, [r3]
 800c582:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c584:	2b00      	cmp	r3, #0
 800c586:	ed8d 7b00 	vstr	d7, [sp]
 800c58a:	da03      	bge.n	800c594 <_dtoa_r+0x46c>
 800c58c:	9b07      	ldr	r3, [sp, #28]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	f340 8101 	ble.w	800c796 <_dtoa_r+0x66e>
 800c594:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c598:	4656      	mov	r6, sl
 800c59a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c59e:	4620      	mov	r0, r4
 800c5a0:	4629      	mov	r1, r5
 800c5a2:	f7f4 f983 	bl	80008ac <__aeabi_ddiv>
 800c5a6:	f7f4 fb07 	bl	8000bb8 <__aeabi_d2iz>
 800c5aa:	4680      	mov	r8, r0
 800c5ac:	f7f3 ffea 	bl	8000584 <__aeabi_i2d>
 800c5b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5b4:	f7f4 f850 	bl	8000658 <__aeabi_dmul>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	4620      	mov	r0, r4
 800c5be:	4629      	mov	r1, r5
 800c5c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c5c4:	f7f3 fe90 	bl	80002e8 <__aeabi_dsub>
 800c5c8:	f806 4b01 	strb.w	r4, [r6], #1
 800c5cc:	9d07      	ldr	r5, [sp, #28]
 800c5ce:	eba6 040a 	sub.w	r4, r6, sl
 800c5d2:	42a5      	cmp	r5, r4
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	460b      	mov	r3, r1
 800c5d8:	f040 8117 	bne.w	800c80a <_dtoa_r+0x6e2>
 800c5dc:	f7f3 fe86 	bl	80002ec <__adddf3>
 800c5e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5e4:	4604      	mov	r4, r0
 800c5e6:	460d      	mov	r5, r1
 800c5e8:	f7f4 fac6 	bl	8000b78 <__aeabi_dcmpgt>
 800c5ec:	2800      	cmp	r0, #0
 800c5ee:	f040 80f9 	bne.w	800c7e4 <_dtoa_r+0x6bc>
 800c5f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	4629      	mov	r1, r5
 800c5fa:	f7f4 fa95 	bl	8000b28 <__aeabi_dcmpeq>
 800c5fe:	b118      	cbz	r0, 800c608 <_dtoa_r+0x4e0>
 800c600:	f018 0f01 	tst.w	r8, #1
 800c604:	f040 80ee 	bne.w	800c7e4 <_dtoa_r+0x6bc>
 800c608:	4649      	mov	r1, r9
 800c60a:	4658      	mov	r0, fp
 800c60c:	f000 fc90 	bl	800cf30 <_Bfree>
 800c610:	2300      	movs	r3, #0
 800c612:	7033      	strb	r3, [r6, #0]
 800c614:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c616:	3701      	adds	r7, #1
 800c618:	601f      	str	r7, [r3, #0]
 800c61a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	f000 831d 	beq.w	800cc5c <_dtoa_r+0xb34>
 800c622:	601e      	str	r6, [r3, #0]
 800c624:	e31a      	b.n	800cc5c <_dtoa_r+0xb34>
 800c626:	07e2      	lsls	r2, r4, #31
 800c628:	d505      	bpl.n	800c636 <_dtoa_r+0x50e>
 800c62a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c62e:	f7f4 f813 	bl	8000658 <__aeabi_dmul>
 800c632:	3601      	adds	r6, #1
 800c634:	2301      	movs	r3, #1
 800c636:	1064      	asrs	r4, r4, #1
 800c638:	3508      	adds	r5, #8
 800c63a:	e73f      	b.n	800c4bc <_dtoa_r+0x394>
 800c63c:	2602      	movs	r6, #2
 800c63e:	e742      	b.n	800c4c6 <_dtoa_r+0x39e>
 800c640:	9c07      	ldr	r4, [sp, #28]
 800c642:	9704      	str	r7, [sp, #16]
 800c644:	e761      	b.n	800c50a <_dtoa_r+0x3e2>
 800c646:	4b27      	ldr	r3, [pc, #156]	@ (800c6e4 <_dtoa_r+0x5bc>)
 800c648:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c64a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c64e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c652:	4454      	add	r4, sl
 800c654:	2900      	cmp	r1, #0
 800c656:	d053      	beq.n	800c700 <_dtoa_r+0x5d8>
 800c658:	4928      	ldr	r1, [pc, #160]	@ (800c6fc <_dtoa_r+0x5d4>)
 800c65a:	2000      	movs	r0, #0
 800c65c:	f7f4 f926 	bl	80008ac <__aeabi_ddiv>
 800c660:	4633      	mov	r3, r6
 800c662:	462a      	mov	r2, r5
 800c664:	f7f3 fe40 	bl	80002e8 <__aeabi_dsub>
 800c668:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c66c:	4656      	mov	r6, sl
 800c66e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c672:	f7f4 faa1 	bl	8000bb8 <__aeabi_d2iz>
 800c676:	4605      	mov	r5, r0
 800c678:	f7f3 ff84 	bl	8000584 <__aeabi_i2d>
 800c67c:	4602      	mov	r2, r0
 800c67e:	460b      	mov	r3, r1
 800c680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c684:	f7f3 fe30 	bl	80002e8 <__aeabi_dsub>
 800c688:	3530      	adds	r5, #48	@ 0x30
 800c68a:	4602      	mov	r2, r0
 800c68c:	460b      	mov	r3, r1
 800c68e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c692:	f806 5b01 	strb.w	r5, [r6], #1
 800c696:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c69a:	f7f4 fa4f 	bl	8000b3c <__aeabi_dcmplt>
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d171      	bne.n	800c786 <_dtoa_r+0x65e>
 800c6a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6a6:	4911      	ldr	r1, [pc, #68]	@ (800c6ec <_dtoa_r+0x5c4>)
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	f7f3 fe1d 	bl	80002e8 <__aeabi_dsub>
 800c6ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c6b2:	f7f4 fa43 	bl	8000b3c <__aeabi_dcmplt>
 800c6b6:	2800      	cmp	r0, #0
 800c6b8:	f040 8095 	bne.w	800c7e6 <_dtoa_r+0x6be>
 800c6bc:	42a6      	cmp	r6, r4
 800c6be:	f43f af50 	beq.w	800c562 <_dtoa_r+0x43a>
 800c6c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c6c6:	4b0a      	ldr	r3, [pc, #40]	@ (800c6f0 <_dtoa_r+0x5c8>)
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	f7f3 ffc5 	bl	8000658 <__aeabi_dmul>
 800c6ce:	4b08      	ldr	r3, [pc, #32]	@ (800c6f0 <_dtoa_r+0x5c8>)
 800c6d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6da:	f7f3 ffbd 	bl	8000658 <__aeabi_dmul>
 800c6de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6e2:	e7c4      	b.n	800c66e <_dtoa_r+0x546>
 800c6e4:	0800fce8 	.word	0x0800fce8
 800c6e8:	0800fcc0 	.word	0x0800fcc0
 800c6ec:	3ff00000 	.word	0x3ff00000
 800c6f0:	40240000 	.word	0x40240000
 800c6f4:	401c0000 	.word	0x401c0000
 800c6f8:	40140000 	.word	0x40140000
 800c6fc:	3fe00000 	.word	0x3fe00000
 800c700:	4631      	mov	r1, r6
 800c702:	4628      	mov	r0, r5
 800c704:	f7f3 ffa8 	bl	8000658 <__aeabi_dmul>
 800c708:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c70c:	9415      	str	r4, [sp, #84]	@ 0x54
 800c70e:	4656      	mov	r6, sl
 800c710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c714:	f7f4 fa50 	bl	8000bb8 <__aeabi_d2iz>
 800c718:	4605      	mov	r5, r0
 800c71a:	f7f3 ff33 	bl	8000584 <__aeabi_i2d>
 800c71e:	4602      	mov	r2, r0
 800c720:	460b      	mov	r3, r1
 800c722:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c726:	f7f3 fddf 	bl	80002e8 <__aeabi_dsub>
 800c72a:	3530      	adds	r5, #48	@ 0x30
 800c72c:	f806 5b01 	strb.w	r5, [r6], #1
 800c730:	4602      	mov	r2, r0
 800c732:	460b      	mov	r3, r1
 800c734:	42a6      	cmp	r6, r4
 800c736:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c73a:	f04f 0200 	mov.w	r2, #0
 800c73e:	d124      	bne.n	800c78a <_dtoa_r+0x662>
 800c740:	4bac      	ldr	r3, [pc, #688]	@ (800c9f4 <_dtoa_r+0x8cc>)
 800c742:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c746:	f7f3 fdd1 	bl	80002ec <__adddf3>
 800c74a:	4602      	mov	r2, r0
 800c74c:	460b      	mov	r3, r1
 800c74e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c752:	f7f4 fa11 	bl	8000b78 <__aeabi_dcmpgt>
 800c756:	2800      	cmp	r0, #0
 800c758:	d145      	bne.n	800c7e6 <_dtoa_r+0x6be>
 800c75a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c75e:	49a5      	ldr	r1, [pc, #660]	@ (800c9f4 <_dtoa_r+0x8cc>)
 800c760:	2000      	movs	r0, #0
 800c762:	f7f3 fdc1 	bl	80002e8 <__aeabi_dsub>
 800c766:	4602      	mov	r2, r0
 800c768:	460b      	mov	r3, r1
 800c76a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c76e:	f7f4 f9e5 	bl	8000b3c <__aeabi_dcmplt>
 800c772:	2800      	cmp	r0, #0
 800c774:	f43f aef5 	beq.w	800c562 <_dtoa_r+0x43a>
 800c778:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c77a:	1e73      	subs	r3, r6, #1
 800c77c:	9315      	str	r3, [sp, #84]	@ 0x54
 800c77e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c782:	2b30      	cmp	r3, #48	@ 0x30
 800c784:	d0f8      	beq.n	800c778 <_dtoa_r+0x650>
 800c786:	9f04      	ldr	r7, [sp, #16]
 800c788:	e73e      	b.n	800c608 <_dtoa_r+0x4e0>
 800c78a:	4b9b      	ldr	r3, [pc, #620]	@ (800c9f8 <_dtoa_r+0x8d0>)
 800c78c:	f7f3 ff64 	bl	8000658 <__aeabi_dmul>
 800c790:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c794:	e7bc      	b.n	800c710 <_dtoa_r+0x5e8>
 800c796:	d10c      	bne.n	800c7b2 <_dtoa_r+0x68a>
 800c798:	4b98      	ldr	r3, [pc, #608]	@ (800c9fc <_dtoa_r+0x8d4>)
 800c79a:	2200      	movs	r2, #0
 800c79c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7a0:	f7f3 ff5a 	bl	8000658 <__aeabi_dmul>
 800c7a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7a8:	f7f4 f9dc 	bl	8000b64 <__aeabi_dcmpge>
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	f000 8157 	beq.w	800ca60 <_dtoa_r+0x938>
 800c7b2:	2400      	movs	r4, #0
 800c7b4:	4625      	mov	r5, r4
 800c7b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7b8:	43db      	mvns	r3, r3
 800c7ba:	9304      	str	r3, [sp, #16]
 800c7bc:	4656      	mov	r6, sl
 800c7be:	2700      	movs	r7, #0
 800c7c0:	4621      	mov	r1, r4
 800c7c2:	4658      	mov	r0, fp
 800c7c4:	f000 fbb4 	bl	800cf30 <_Bfree>
 800c7c8:	2d00      	cmp	r5, #0
 800c7ca:	d0dc      	beq.n	800c786 <_dtoa_r+0x65e>
 800c7cc:	b12f      	cbz	r7, 800c7da <_dtoa_r+0x6b2>
 800c7ce:	42af      	cmp	r7, r5
 800c7d0:	d003      	beq.n	800c7da <_dtoa_r+0x6b2>
 800c7d2:	4639      	mov	r1, r7
 800c7d4:	4658      	mov	r0, fp
 800c7d6:	f000 fbab 	bl	800cf30 <_Bfree>
 800c7da:	4629      	mov	r1, r5
 800c7dc:	4658      	mov	r0, fp
 800c7de:	f000 fba7 	bl	800cf30 <_Bfree>
 800c7e2:	e7d0      	b.n	800c786 <_dtoa_r+0x65e>
 800c7e4:	9704      	str	r7, [sp, #16]
 800c7e6:	4633      	mov	r3, r6
 800c7e8:	461e      	mov	r6, r3
 800c7ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7ee:	2a39      	cmp	r2, #57	@ 0x39
 800c7f0:	d107      	bne.n	800c802 <_dtoa_r+0x6da>
 800c7f2:	459a      	cmp	sl, r3
 800c7f4:	d1f8      	bne.n	800c7e8 <_dtoa_r+0x6c0>
 800c7f6:	9a04      	ldr	r2, [sp, #16]
 800c7f8:	3201      	adds	r2, #1
 800c7fa:	9204      	str	r2, [sp, #16]
 800c7fc:	2230      	movs	r2, #48	@ 0x30
 800c7fe:	f88a 2000 	strb.w	r2, [sl]
 800c802:	781a      	ldrb	r2, [r3, #0]
 800c804:	3201      	adds	r2, #1
 800c806:	701a      	strb	r2, [r3, #0]
 800c808:	e7bd      	b.n	800c786 <_dtoa_r+0x65e>
 800c80a:	4b7b      	ldr	r3, [pc, #492]	@ (800c9f8 <_dtoa_r+0x8d0>)
 800c80c:	2200      	movs	r2, #0
 800c80e:	f7f3 ff23 	bl	8000658 <__aeabi_dmul>
 800c812:	2200      	movs	r2, #0
 800c814:	2300      	movs	r3, #0
 800c816:	4604      	mov	r4, r0
 800c818:	460d      	mov	r5, r1
 800c81a:	f7f4 f985 	bl	8000b28 <__aeabi_dcmpeq>
 800c81e:	2800      	cmp	r0, #0
 800c820:	f43f aebb 	beq.w	800c59a <_dtoa_r+0x472>
 800c824:	e6f0      	b.n	800c608 <_dtoa_r+0x4e0>
 800c826:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c828:	2a00      	cmp	r2, #0
 800c82a:	f000 80db 	beq.w	800c9e4 <_dtoa_r+0x8bc>
 800c82e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c830:	2a01      	cmp	r2, #1
 800c832:	f300 80bf 	bgt.w	800c9b4 <_dtoa_r+0x88c>
 800c836:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c838:	2a00      	cmp	r2, #0
 800c83a:	f000 80b7 	beq.w	800c9ac <_dtoa_r+0x884>
 800c83e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c842:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c844:	4646      	mov	r6, r8
 800c846:	9a08      	ldr	r2, [sp, #32]
 800c848:	2101      	movs	r1, #1
 800c84a:	441a      	add	r2, r3
 800c84c:	4658      	mov	r0, fp
 800c84e:	4498      	add	r8, r3
 800c850:	9208      	str	r2, [sp, #32]
 800c852:	f000 fc6b 	bl	800d12c <__i2b>
 800c856:	4605      	mov	r5, r0
 800c858:	b15e      	cbz	r6, 800c872 <_dtoa_r+0x74a>
 800c85a:	9b08      	ldr	r3, [sp, #32]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	dd08      	ble.n	800c872 <_dtoa_r+0x74a>
 800c860:	42b3      	cmp	r3, r6
 800c862:	9a08      	ldr	r2, [sp, #32]
 800c864:	bfa8      	it	ge
 800c866:	4633      	movge	r3, r6
 800c868:	eba8 0803 	sub.w	r8, r8, r3
 800c86c:	1af6      	subs	r6, r6, r3
 800c86e:	1ad3      	subs	r3, r2, r3
 800c870:	9308      	str	r3, [sp, #32]
 800c872:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c874:	b1f3      	cbz	r3, 800c8b4 <_dtoa_r+0x78c>
 800c876:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f000 80b7 	beq.w	800c9ec <_dtoa_r+0x8c4>
 800c87e:	b18c      	cbz	r4, 800c8a4 <_dtoa_r+0x77c>
 800c880:	4629      	mov	r1, r5
 800c882:	4622      	mov	r2, r4
 800c884:	4658      	mov	r0, fp
 800c886:	f000 fd11 	bl	800d2ac <__pow5mult>
 800c88a:	464a      	mov	r2, r9
 800c88c:	4601      	mov	r1, r0
 800c88e:	4605      	mov	r5, r0
 800c890:	4658      	mov	r0, fp
 800c892:	f000 fc61 	bl	800d158 <__multiply>
 800c896:	4649      	mov	r1, r9
 800c898:	9004      	str	r0, [sp, #16]
 800c89a:	4658      	mov	r0, fp
 800c89c:	f000 fb48 	bl	800cf30 <_Bfree>
 800c8a0:	9b04      	ldr	r3, [sp, #16]
 800c8a2:	4699      	mov	r9, r3
 800c8a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8a6:	1b1a      	subs	r2, r3, r4
 800c8a8:	d004      	beq.n	800c8b4 <_dtoa_r+0x78c>
 800c8aa:	4649      	mov	r1, r9
 800c8ac:	4658      	mov	r0, fp
 800c8ae:	f000 fcfd 	bl	800d2ac <__pow5mult>
 800c8b2:	4681      	mov	r9, r0
 800c8b4:	2101      	movs	r1, #1
 800c8b6:	4658      	mov	r0, fp
 800c8b8:	f000 fc38 	bl	800d12c <__i2b>
 800c8bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8be:	4604      	mov	r4, r0
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	f000 81cf 	beq.w	800cc64 <_dtoa_r+0xb3c>
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	4601      	mov	r1, r0
 800c8ca:	4658      	mov	r0, fp
 800c8cc:	f000 fcee 	bl	800d2ac <__pow5mult>
 800c8d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	4604      	mov	r4, r0
 800c8d6:	f300 8095 	bgt.w	800ca04 <_dtoa_r+0x8dc>
 800c8da:	9b02      	ldr	r3, [sp, #8]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	f040 8087 	bne.w	800c9f0 <_dtoa_r+0x8c8>
 800c8e2:	9b03      	ldr	r3, [sp, #12]
 800c8e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	f040 8089 	bne.w	800ca00 <_dtoa_r+0x8d8>
 800c8ee:	9b03      	ldr	r3, [sp, #12]
 800c8f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c8f4:	0d1b      	lsrs	r3, r3, #20
 800c8f6:	051b      	lsls	r3, r3, #20
 800c8f8:	b12b      	cbz	r3, 800c906 <_dtoa_r+0x7de>
 800c8fa:	9b08      	ldr	r3, [sp, #32]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	9308      	str	r3, [sp, #32]
 800c900:	f108 0801 	add.w	r8, r8, #1
 800c904:	2301      	movs	r3, #1
 800c906:	930a      	str	r3, [sp, #40]	@ 0x28
 800c908:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	f000 81b0 	beq.w	800cc70 <_dtoa_r+0xb48>
 800c910:	6923      	ldr	r3, [r4, #16]
 800c912:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c916:	6918      	ldr	r0, [r3, #16]
 800c918:	f000 fbbc 	bl	800d094 <__hi0bits>
 800c91c:	f1c0 0020 	rsb	r0, r0, #32
 800c920:	9b08      	ldr	r3, [sp, #32]
 800c922:	4418      	add	r0, r3
 800c924:	f010 001f 	ands.w	r0, r0, #31
 800c928:	d077      	beq.n	800ca1a <_dtoa_r+0x8f2>
 800c92a:	f1c0 0320 	rsb	r3, r0, #32
 800c92e:	2b04      	cmp	r3, #4
 800c930:	dd6b      	ble.n	800ca0a <_dtoa_r+0x8e2>
 800c932:	9b08      	ldr	r3, [sp, #32]
 800c934:	f1c0 001c 	rsb	r0, r0, #28
 800c938:	4403      	add	r3, r0
 800c93a:	4480      	add	r8, r0
 800c93c:	4406      	add	r6, r0
 800c93e:	9308      	str	r3, [sp, #32]
 800c940:	f1b8 0f00 	cmp.w	r8, #0
 800c944:	dd05      	ble.n	800c952 <_dtoa_r+0x82a>
 800c946:	4649      	mov	r1, r9
 800c948:	4642      	mov	r2, r8
 800c94a:	4658      	mov	r0, fp
 800c94c:	f000 fd08 	bl	800d360 <__lshift>
 800c950:	4681      	mov	r9, r0
 800c952:	9b08      	ldr	r3, [sp, #32]
 800c954:	2b00      	cmp	r3, #0
 800c956:	dd05      	ble.n	800c964 <_dtoa_r+0x83c>
 800c958:	4621      	mov	r1, r4
 800c95a:	461a      	mov	r2, r3
 800c95c:	4658      	mov	r0, fp
 800c95e:	f000 fcff 	bl	800d360 <__lshift>
 800c962:	4604      	mov	r4, r0
 800c964:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c966:	2b00      	cmp	r3, #0
 800c968:	d059      	beq.n	800ca1e <_dtoa_r+0x8f6>
 800c96a:	4621      	mov	r1, r4
 800c96c:	4648      	mov	r0, r9
 800c96e:	f000 fd63 	bl	800d438 <__mcmp>
 800c972:	2800      	cmp	r0, #0
 800c974:	da53      	bge.n	800ca1e <_dtoa_r+0x8f6>
 800c976:	1e7b      	subs	r3, r7, #1
 800c978:	9304      	str	r3, [sp, #16]
 800c97a:	4649      	mov	r1, r9
 800c97c:	2300      	movs	r3, #0
 800c97e:	220a      	movs	r2, #10
 800c980:	4658      	mov	r0, fp
 800c982:	f000 faf7 	bl	800cf74 <__multadd>
 800c986:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c988:	4681      	mov	r9, r0
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	f000 8172 	beq.w	800cc74 <_dtoa_r+0xb4c>
 800c990:	2300      	movs	r3, #0
 800c992:	4629      	mov	r1, r5
 800c994:	220a      	movs	r2, #10
 800c996:	4658      	mov	r0, fp
 800c998:	f000 faec 	bl	800cf74 <__multadd>
 800c99c:	9b00      	ldr	r3, [sp, #0]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	4605      	mov	r5, r0
 800c9a2:	dc67      	bgt.n	800ca74 <_dtoa_r+0x94c>
 800c9a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9a6:	2b02      	cmp	r3, #2
 800c9a8:	dc41      	bgt.n	800ca2e <_dtoa_r+0x906>
 800c9aa:	e063      	b.n	800ca74 <_dtoa_r+0x94c>
 800c9ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c9ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c9b2:	e746      	b.n	800c842 <_dtoa_r+0x71a>
 800c9b4:	9b07      	ldr	r3, [sp, #28]
 800c9b6:	1e5c      	subs	r4, r3, #1
 800c9b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9ba:	42a3      	cmp	r3, r4
 800c9bc:	bfbf      	itttt	lt
 800c9be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c9c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c9c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c9c4:	1ae3      	sublt	r3, r4, r3
 800c9c6:	bfb4      	ite	lt
 800c9c8:	18d2      	addlt	r2, r2, r3
 800c9ca:	1b1c      	subge	r4, r3, r4
 800c9cc:	9b07      	ldr	r3, [sp, #28]
 800c9ce:	bfbc      	itt	lt
 800c9d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c9d2:	2400      	movlt	r4, #0
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	bfb5      	itete	lt
 800c9d8:	eba8 0603 	sublt.w	r6, r8, r3
 800c9dc:	9b07      	ldrge	r3, [sp, #28]
 800c9de:	2300      	movlt	r3, #0
 800c9e0:	4646      	movge	r6, r8
 800c9e2:	e730      	b.n	800c846 <_dtoa_r+0x71e>
 800c9e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c9e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c9e8:	4646      	mov	r6, r8
 800c9ea:	e735      	b.n	800c858 <_dtoa_r+0x730>
 800c9ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c9ee:	e75c      	b.n	800c8aa <_dtoa_r+0x782>
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	e788      	b.n	800c906 <_dtoa_r+0x7de>
 800c9f4:	3fe00000 	.word	0x3fe00000
 800c9f8:	40240000 	.word	0x40240000
 800c9fc:	40140000 	.word	0x40140000
 800ca00:	9b02      	ldr	r3, [sp, #8]
 800ca02:	e780      	b.n	800c906 <_dtoa_r+0x7de>
 800ca04:	2300      	movs	r3, #0
 800ca06:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca08:	e782      	b.n	800c910 <_dtoa_r+0x7e8>
 800ca0a:	d099      	beq.n	800c940 <_dtoa_r+0x818>
 800ca0c:	9a08      	ldr	r2, [sp, #32]
 800ca0e:	331c      	adds	r3, #28
 800ca10:	441a      	add	r2, r3
 800ca12:	4498      	add	r8, r3
 800ca14:	441e      	add	r6, r3
 800ca16:	9208      	str	r2, [sp, #32]
 800ca18:	e792      	b.n	800c940 <_dtoa_r+0x818>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	e7f6      	b.n	800ca0c <_dtoa_r+0x8e4>
 800ca1e:	9b07      	ldr	r3, [sp, #28]
 800ca20:	9704      	str	r7, [sp, #16]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	dc20      	bgt.n	800ca68 <_dtoa_r+0x940>
 800ca26:	9300      	str	r3, [sp, #0]
 800ca28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca2a:	2b02      	cmp	r3, #2
 800ca2c:	dd1e      	ble.n	800ca6c <_dtoa_r+0x944>
 800ca2e:	9b00      	ldr	r3, [sp, #0]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	f47f aec0 	bne.w	800c7b6 <_dtoa_r+0x68e>
 800ca36:	4621      	mov	r1, r4
 800ca38:	2205      	movs	r2, #5
 800ca3a:	4658      	mov	r0, fp
 800ca3c:	f000 fa9a 	bl	800cf74 <__multadd>
 800ca40:	4601      	mov	r1, r0
 800ca42:	4604      	mov	r4, r0
 800ca44:	4648      	mov	r0, r9
 800ca46:	f000 fcf7 	bl	800d438 <__mcmp>
 800ca4a:	2800      	cmp	r0, #0
 800ca4c:	f77f aeb3 	ble.w	800c7b6 <_dtoa_r+0x68e>
 800ca50:	4656      	mov	r6, sl
 800ca52:	2331      	movs	r3, #49	@ 0x31
 800ca54:	f806 3b01 	strb.w	r3, [r6], #1
 800ca58:	9b04      	ldr	r3, [sp, #16]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	9304      	str	r3, [sp, #16]
 800ca5e:	e6ae      	b.n	800c7be <_dtoa_r+0x696>
 800ca60:	9c07      	ldr	r4, [sp, #28]
 800ca62:	9704      	str	r7, [sp, #16]
 800ca64:	4625      	mov	r5, r4
 800ca66:	e7f3      	b.n	800ca50 <_dtoa_r+0x928>
 800ca68:	9b07      	ldr	r3, [sp, #28]
 800ca6a:	9300      	str	r3, [sp, #0]
 800ca6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	f000 8104 	beq.w	800cc7c <_dtoa_r+0xb54>
 800ca74:	2e00      	cmp	r6, #0
 800ca76:	dd05      	ble.n	800ca84 <_dtoa_r+0x95c>
 800ca78:	4629      	mov	r1, r5
 800ca7a:	4632      	mov	r2, r6
 800ca7c:	4658      	mov	r0, fp
 800ca7e:	f000 fc6f 	bl	800d360 <__lshift>
 800ca82:	4605      	mov	r5, r0
 800ca84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d05a      	beq.n	800cb40 <_dtoa_r+0xa18>
 800ca8a:	6869      	ldr	r1, [r5, #4]
 800ca8c:	4658      	mov	r0, fp
 800ca8e:	f000 fa0f 	bl	800ceb0 <_Balloc>
 800ca92:	4606      	mov	r6, r0
 800ca94:	b928      	cbnz	r0, 800caa2 <_dtoa_r+0x97a>
 800ca96:	4b84      	ldr	r3, [pc, #528]	@ (800cca8 <_dtoa_r+0xb80>)
 800ca98:	4602      	mov	r2, r0
 800ca9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ca9e:	f7ff bb5a 	b.w	800c156 <_dtoa_r+0x2e>
 800caa2:	692a      	ldr	r2, [r5, #16]
 800caa4:	3202      	adds	r2, #2
 800caa6:	0092      	lsls	r2, r2, #2
 800caa8:	f105 010c 	add.w	r1, r5, #12
 800caac:	300c      	adds	r0, #12
 800caae:	f7ff fa9e 	bl	800bfee <memcpy>
 800cab2:	2201      	movs	r2, #1
 800cab4:	4631      	mov	r1, r6
 800cab6:	4658      	mov	r0, fp
 800cab8:	f000 fc52 	bl	800d360 <__lshift>
 800cabc:	f10a 0301 	add.w	r3, sl, #1
 800cac0:	9307      	str	r3, [sp, #28]
 800cac2:	9b00      	ldr	r3, [sp, #0]
 800cac4:	4453      	add	r3, sl
 800cac6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cac8:	9b02      	ldr	r3, [sp, #8]
 800caca:	f003 0301 	and.w	r3, r3, #1
 800cace:	462f      	mov	r7, r5
 800cad0:	930a      	str	r3, [sp, #40]	@ 0x28
 800cad2:	4605      	mov	r5, r0
 800cad4:	9b07      	ldr	r3, [sp, #28]
 800cad6:	4621      	mov	r1, r4
 800cad8:	3b01      	subs	r3, #1
 800cada:	4648      	mov	r0, r9
 800cadc:	9300      	str	r3, [sp, #0]
 800cade:	f7ff fa9b 	bl	800c018 <quorem>
 800cae2:	4639      	mov	r1, r7
 800cae4:	9002      	str	r0, [sp, #8]
 800cae6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800caea:	4648      	mov	r0, r9
 800caec:	f000 fca4 	bl	800d438 <__mcmp>
 800caf0:	462a      	mov	r2, r5
 800caf2:	9008      	str	r0, [sp, #32]
 800caf4:	4621      	mov	r1, r4
 800caf6:	4658      	mov	r0, fp
 800caf8:	f000 fcba 	bl	800d470 <__mdiff>
 800cafc:	68c2      	ldr	r2, [r0, #12]
 800cafe:	4606      	mov	r6, r0
 800cb00:	bb02      	cbnz	r2, 800cb44 <_dtoa_r+0xa1c>
 800cb02:	4601      	mov	r1, r0
 800cb04:	4648      	mov	r0, r9
 800cb06:	f000 fc97 	bl	800d438 <__mcmp>
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	4631      	mov	r1, r6
 800cb0e:	4658      	mov	r0, fp
 800cb10:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb12:	f000 fa0d 	bl	800cf30 <_Bfree>
 800cb16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb1a:	9e07      	ldr	r6, [sp, #28]
 800cb1c:	ea43 0102 	orr.w	r1, r3, r2
 800cb20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb22:	4319      	orrs	r1, r3
 800cb24:	d110      	bne.n	800cb48 <_dtoa_r+0xa20>
 800cb26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cb2a:	d029      	beq.n	800cb80 <_dtoa_r+0xa58>
 800cb2c:	9b08      	ldr	r3, [sp, #32]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	dd02      	ble.n	800cb38 <_dtoa_r+0xa10>
 800cb32:	9b02      	ldr	r3, [sp, #8]
 800cb34:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cb38:	9b00      	ldr	r3, [sp, #0]
 800cb3a:	f883 8000 	strb.w	r8, [r3]
 800cb3e:	e63f      	b.n	800c7c0 <_dtoa_r+0x698>
 800cb40:	4628      	mov	r0, r5
 800cb42:	e7bb      	b.n	800cabc <_dtoa_r+0x994>
 800cb44:	2201      	movs	r2, #1
 800cb46:	e7e1      	b.n	800cb0c <_dtoa_r+0x9e4>
 800cb48:	9b08      	ldr	r3, [sp, #32]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	db04      	blt.n	800cb58 <_dtoa_r+0xa30>
 800cb4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cb50:	430b      	orrs	r3, r1
 800cb52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cb54:	430b      	orrs	r3, r1
 800cb56:	d120      	bne.n	800cb9a <_dtoa_r+0xa72>
 800cb58:	2a00      	cmp	r2, #0
 800cb5a:	dded      	ble.n	800cb38 <_dtoa_r+0xa10>
 800cb5c:	4649      	mov	r1, r9
 800cb5e:	2201      	movs	r2, #1
 800cb60:	4658      	mov	r0, fp
 800cb62:	f000 fbfd 	bl	800d360 <__lshift>
 800cb66:	4621      	mov	r1, r4
 800cb68:	4681      	mov	r9, r0
 800cb6a:	f000 fc65 	bl	800d438 <__mcmp>
 800cb6e:	2800      	cmp	r0, #0
 800cb70:	dc03      	bgt.n	800cb7a <_dtoa_r+0xa52>
 800cb72:	d1e1      	bne.n	800cb38 <_dtoa_r+0xa10>
 800cb74:	f018 0f01 	tst.w	r8, #1
 800cb78:	d0de      	beq.n	800cb38 <_dtoa_r+0xa10>
 800cb7a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cb7e:	d1d8      	bne.n	800cb32 <_dtoa_r+0xa0a>
 800cb80:	9a00      	ldr	r2, [sp, #0]
 800cb82:	2339      	movs	r3, #57	@ 0x39
 800cb84:	7013      	strb	r3, [r2, #0]
 800cb86:	4633      	mov	r3, r6
 800cb88:	461e      	mov	r6, r3
 800cb8a:	3b01      	subs	r3, #1
 800cb8c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cb90:	2a39      	cmp	r2, #57	@ 0x39
 800cb92:	d052      	beq.n	800cc3a <_dtoa_r+0xb12>
 800cb94:	3201      	adds	r2, #1
 800cb96:	701a      	strb	r2, [r3, #0]
 800cb98:	e612      	b.n	800c7c0 <_dtoa_r+0x698>
 800cb9a:	2a00      	cmp	r2, #0
 800cb9c:	dd07      	ble.n	800cbae <_dtoa_r+0xa86>
 800cb9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cba2:	d0ed      	beq.n	800cb80 <_dtoa_r+0xa58>
 800cba4:	9a00      	ldr	r2, [sp, #0]
 800cba6:	f108 0301 	add.w	r3, r8, #1
 800cbaa:	7013      	strb	r3, [r2, #0]
 800cbac:	e608      	b.n	800c7c0 <_dtoa_r+0x698>
 800cbae:	9b07      	ldr	r3, [sp, #28]
 800cbb0:	9a07      	ldr	r2, [sp, #28]
 800cbb2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cbb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d028      	beq.n	800cc0e <_dtoa_r+0xae6>
 800cbbc:	4649      	mov	r1, r9
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	220a      	movs	r2, #10
 800cbc2:	4658      	mov	r0, fp
 800cbc4:	f000 f9d6 	bl	800cf74 <__multadd>
 800cbc8:	42af      	cmp	r7, r5
 800cbca:	4681      	mov	r9, r0
 800cbcc:	f04f 0300 	mov.w	r3, #0
 800cbd0:	f04f 020a 	mov.w	r2, #10
 800cbd4:	4639      	mov	r1, r7
 800cbd6:	4658      	mov	r0, fp
 800cbd8:	d107      	bne.n	800cbea <_dtoa_r+0xac2>
 800cbda:	f000 f9cb 	bl	800cf74 <__multadd>
 800cbde:	4607      	mov	r7, r0
 800cbe0:	4605      	mov	r5, r0
 800cbe2:	9b07      	ldr	r3, [sp, #28]
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	9307      	str	r3, [sp, #28]
 800cbe8:	e774      	b.n	800cad4 <_dtoa_r+0x9ac>
 800cbea:	f000 f9c3 	bl	800cf74 <__multadd>
 800cbee:	4629      	mov	r1, r5
 800cbf0:	4607      	mov	r7, r0
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	220a      	movs	r2, #10
 800cbf6:	4658      	mov	r0, fp
 800cbf8:	f000 f9bc 	bl	800cf74 <__multadd>
 800cbfc:	4605      	mov	r5, r0
 800cbfe:	e7f0      	b.n	800cbe2 <_dtoa_r+0xaba>
 800cc00:	9b00      	ldr	r3, [sp, #0]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	bfcc      	ite	gt
 800cc06:	461e      	movgt	r6, r3
 800cc08:	2601      	movle	r6, #1
 800cc0a:	4456      	add	r6, sl
 800cc0c:	2700      	movs	r7, #0
 800cc0e:	4649      	mov	r1, r9
 800cc10:	2201      	movs	r2, #1
 800cc12:	4658      	mov	r0, fp
 800cc14:	f000 fba4 	bl	800d360 <__lshift>
 800cc18:	4621      	mov	r1, r4
 800cc1a:	4681      	mov	r9, r0
 800cc1c:	f000 fc0c 	bl	800d438 <__mcmp>
 800cc20:	2800      	cmp	r0, #0
 800cc22:	dcb0      	bgt.n	800cb86 <_dtoa_r+0xa5e>
 800cc24:	d102      	bne.n	800cc2c <_dtoa_r+0xb04>
 800cc26:	f018 0f01 	tst.w	r8, #1
 800cc2a:	d1ac      	bne.n	800cb86 <_dtoa_r+0xa5e>
 800cc2c:	4633      	mov	r3, r6
 800cc2e:	461e      	mov	r6, r3
 800cc30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc34:	2a30      	cmp	r2, #48	@ 0x30
 800cc36:	d0fa      	beq.n	800cc2e <_dtoa_r+0xb06>
 800cc38:	e5c2      	b.n	800c7c0 <_dtoa_r+0x698>
 800cc3a:	459a      	cmp	sl, r3
 800cc3c:	d1a4      	bne.n	800cb88 <_dtoa_r+0xa60>
 800cc3e:	9b04      	ldr	r3, [sp, #16]
 800cc40:	3301      	adds	r3, #1
 800cc42:	9304      	str	r3, [sp, #16]
 800cc44:	2331      	movs	r3, #49	@ 0x31
 800cc46:	f88a 3000 	strb.w	r3, [sl]
 800cc4a:	e5b9      	b.n	800c7c0 <_dtoa_r+0x698>
 800cc4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cc4e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ccac <_dtoa_r+0xb84>
 800cc52:	b11b      	cbz	r3, 800cc5c <_dtoa_r+0xb34>
 800cc54:	f10a 0308 	add.w	r3, sl, #8
 800cc58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cc5a:	6013      	str	r3, [r2, #0]
 800cc5c:	4650      	mov	r0, sl
 800cc5e:	b019      	add	sp, #100	@ 0x64
 800cc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	f77f ae37 	ble.w	800c8da <_dtoa_r+0x7b2>
 800cc6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc70:	2001      	movs	r0, #1
 800cc72:	e655      	b.n	800c920 <_dtoa_r+0x7f8>
 800cc74:	9b00      	ldr	r3, [sp, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	f77f aed6 	ble.w	800ca28 <_dtoa_r+0x900>
 800cc7c:	4656      	mov	r6, sl
 800cc7e:	4621      	mov	r1, r4
 800cc80:	4648      	mov	r0, r9
 800cc82:	f7ff f9c9 	bl	800c018 <quorem>
 800cc86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cc8a:	f806 8b01 	strb.w	r8, [r6], #1
 800cc8e:	9b00      	ldr	r3, [sp, #0]
 800cc90:	eba6 020a 	sub.w	r2, r6, sl
 800cc94:	4293      	cmp	r3, r2
 800cc96:	ddb3      	ble.n	800cc00 <_dtoa_r+0xad8>
 800cc98:	4649      	mov	r1, r9
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	220a      	movs	r2, #10
 800cc9e:	4658      	mov	r0, fp
 800cca0:	f000 f968 	bl	800cf74 <__multadd>
 800cca4:	4681      	mov	r9, r0
 800cca6:	e7ea      	b.n	800cc7e <_dtoa_r+0xb56>
 800cca8:	0800fc45 	.word	0x0800fc45
 800ccac:	0800fbc9 	.word	0x0800fbc9

0800ccb0 <_free_r>:
 800ccb0:	b538      	push	{r3, r4, r5, lr}
 800ccb2:	4605      	mov	r5, r0
 800ccb4:	2900      	cmp	r1, #0
 800ccb6:	d041      	beq.n	800cd3c <_free_r+0x8c>
 800ccb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccbc:	1f0c      	subs	r4, r1, #4
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	bfb8      	it	lt
 800ccc2:	18e4      	addlt	r4, r4, r3
 800ccc4:	f000 f8e8 	bl	800ce98 <__malloc_lock>
 800ccc8:	4a1d      	ldr	r2, [pc, #116]	@ (800cd40 <_free_r+0x90>)
 800ccca:	6813      	ldr	r3, [r2, #0]
 800cccc:	b933      	cbnz	r3, 800ccdc <_free_r+0x2c>
 800ccce:	6063      	str	r3, [r4, #4]
 800ccd0:	6014      	str	r4, [r2, #0]
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccd8:	f000 b8e4 	b.w	800cea4 <__malloc_unlock>
 800ccdc:	42a3      	cmp	r3, r4
 800ccde:	d908      	bls.n	800ccf2 <_free_r+0x42>
 800cce0:	6820      	ldr	r0, [r4, #0]
 800cce2:	1821      	adds	r1, r4, r0
 800cce4:	428b      	cmp	r3, r1
 800cce6:	bf01      	itttt	eq
 800cce8:	6819      	ldreq	r1, [r3, #0]
 800ccea:	685b      	ldreq	r3, [r3, #4]
 800ccec:	1809      	addeq	r1, r1, r0
 800ccee:	6021      	streq	r1, [r4, #0]
 800ccf0:	e7ed      	b.n	800ccce <_free_r+0x1e>
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	b10b      	cbz	r3, 800ccfc <_free_r+0x4c>
 800ccf8:	42a3      	cmp	r3, r4
 800ccfa:	d9fa      	bls.n	800ccf2 <_free_r+0x42>
 800ccfc:	6811      	ldr	r1, [r2, #0]
 800ccfe:	1850      	adds	r0, r2, r1
 800cd00:	42a0      	cmp	r0, r4
 800cd02:	d10b      	bne.n	800cd1c <_free_r+0x6c>
 800cd04:	6820      	ldr	r0, [r4, #0]
 800cd06:	4401      	add	r1, r0
 800cd08:	1850      	adds	r0, r2, r1
 800cd0a:	4283      	cmp	r3, r0
 800cd0c:	6011      	str	r1, [r2, #0]
 800cd0e:	d1e0      	bne.n	800ccd2 <_free_r+0x22>
 800cd10:	6818      	ldr	r0, [r3, #0]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	6053      	str	r3, [r2, #4]
 800cd16:	4408      	add	r0, r1
 800cd18:	6010      	str	r0, [r2, #0]
 800cd1a:	e7da      	b.n	800ccd2 <_free_r+0x22>
 800cd1c:	d902      	bls.n	800cd24 <_free_r+0x74>
 800cd1e:	230c      	movs	r3, #12
 800cd20:	602b      	str	r3, [r5, #0]
 800cd22:	e7d6      	b.n	800ccd2 <_free_r+0x22>
 800cd24:	6820      	ldr	r0, [r4, #0]
 800cd26:	1821      	adds	r1, r4, r0
 800cd28:	428b      	cmp	r3, r1
 800cd2a:	bf04      	itt	eq
 800cd2c:	6819      	ldreq	r1, [r3, #0]
 800cd2e:	685b      	ldreq	r3, [r3, #4]
 800cd30:	6063      	str	r3, [r4, #4]
 800cd32:	bf04      	itt	eq
 800cd34:	1809      	addeq	r1, r1, r0
 800cd36:	6021      	streq	r1, [r4, #0]
 800cd38:	6054      	str	r4, [r2, #4]
 800cd3a:	e7ca      	b.n	800ccd2 <_free_r+0x22>
 800cd3c:	bd38      	pop	{r3, r4, r5, pc}
 800cd3e:	bf00      	nop
 800cd40:	200049f4 	.word	0x200049f4

0800cd44 <malloc>:
 800cd44:	4b02      	ldr	r3, [pc, #8]	@ (800cd50 <malloc+0xc>)
 800cd46:	4601      	mov	r1, r0
 800cd48:	6818      	ldr	r0, [r3, #0]
 800cd4a:	f000 b825 	b.w	800cd98 <_malloc_r>
 800cd4e:	bf00      	nop
 800cd50:	20000034 	.word	0x20000034

0800cd54 <sbrk_aligned>:
 800cd54:	b570      	push	{r4, r5, r6, lr}
 800cd56:	4e0f      	ldr	r6, [pc, #60]	@ (800cd94 <sbrk_aligned+0x40>)
 800cd58:	460c      	mov	r4, r1
 800cd5a:	6831      	ldr	r1, [r6, #0]
 800cd5c:	4605      	mov	r5, r0
 800cd5e:	b911      	cbnz	r1, 800cd66 <sbrk_aligned+0x12>
 800cd60:	f001 fe0c 	bl	800e97c <_sbrk_r>
 800cd64:	6030      	str	r0, [r6, #0]
 800cd66:	4621      	mov	r1, r4
 800cd68:	4628      	mov	r0, r5
 800cd6a:	f001 fe07 	bl	800e97c <_sbrk_r>
 800cd6e:	1c43      	adds	r3, r0, #1
 800cd70:	d103      	bne.n	800cd7a <sbrk_aligned+0x26>
 800cd72:	f04f 34ff 	mov.w	r4, #4294967295
 800cd76:	4620      	mov	r0, r4
 800cd78:	bd70      	pop	{r4, r5, r6, pc}
 800cd7a:	1cc4      	adds	r4, r0, #3
 800cd7c:	f024 0403 	bic.w	r4, r4, #3
 800cd80:	42a0      	cmp	r0, r4
 800cd82:	d0f8      	beq.n	800cd76 <sbrk_aligned+0x22>
 800cd84:	1a21      	subs	r1, r4, r0
 800cd86:	4628      	mov	r0, r5
 800cd88:	f001 fdf8 	bl	800e97c <_sbrk_r>
 800cd8c:	3001      	adds	r0, #1
 800cd8e:	d1f2      	bne.n	800cd76 <sbrk_aligned+0x22>
 800cd90:	e7ef      	b.n	800cd72 <sbrk_aligned+0x1e>
 800cd92:	bf00      	nop
 800cd94:	200049f0 	.word	0x200049f0

0800cd98 <_malloc_r>:
 800cd98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd9c:	1ccd      	adds	r5, r1, #3
 800cd9e:	f025 0503 	bic.w	r5, r5, #3
 800cda2:	3508      	adds	r5, #8
 800cda4:	2d0c      	cmp	r5, #12
 800cda6:	bf38      	it	cc
 800cda8:	250c      	movcc	r5, #12
 800cdaa:	2d00      	cmp	r5, #0
 800cdac:	4606      	mov	r6, r0
 800cdae:	db01      	blt.n	800cdb4 <_malloc_r+0x1c>
 800cdb0:	42a9      	cmp	r1, r5
 800cdb2:	d904      	bls.n	800cdbe <_malloc_r+0x26>
 800cdb4:	230c      	movs	r3, #12
 800cdb6:	6033      	str	r3, [r6, #0]
 800cdb8:	2000      	movs	r0, #0
 800cdba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ce94 <_malloc_r+0xfc>
 800cdc2:	f000 f869 	bl	800ce98 <__malloc_lock>
 800cdc6:	f8d8 3000 	ldr.w	r3, [r8]
 800cdca:	461c      	mov	r4, r3
 800cdcc:	bb44      	cbnz	r4, 800ce20 <_malloc_r+0x88>
 800cdce:	4629      	mov	r1, r5
 800cdd0:	4630      	mov	r0, r6
 800cdd2:	f7ff ffbf 	bl	800cd54 <sbrk_aligned>
 800cdd6:	1c43      	adds	r3, r0, #1
 800cdd8:	4604      	mov	r4, r0
 800cdda:	d158      	bne.n	800ce8e <_malloc_r+0xf6>
 800cddc:	f8d8 4000 	ldr.w	r4, [r8]
 800cde0:	4627      	mov	r7, r4
 800cde2:	2f00      	cmp	r7, #0
 800cde4:	d143      	bne.n	800ce6e <_malloc_r+0xd6>
 800cde6:	2c00      	cmp	r4, #0
 800cde8:	d04b      	beq.n	800ce82 <_malloc_r+0xea>
 800cdea:	6823      	ldr	r3, [r4, #0]
 800cdec:	4639      	mov	r1, r7
 800cdee:	4630      	mov	r0, r6
 800cdf0:	eb04 0903 	add.w	r9, r4, r3
 800cdf4:	f001 fdc2 	bl	800e97c <_sbrk_r>
 800cdf8:	4581      	cmp	r9, r0
 800cdfa:	d142      	bne.n	800ce82 <_malloc_r+0xea>
 800cdfc:	6821      	ldr	r1, [r4, #0]
 800cdfe:	1a6d      	subs	r5, r5, r1
 800ce00:	4629      	mov	r1, r5
 800ce02:	4630      	mov	r0, r6
 800ce04:	f7ff ffa6 	bl	800cd54 <sbrk_aligned>
 800ce08:	3001      	adds	r0, #1
 800ce0a:	d03a      	beq.n	800ce82 <_malloc_r+0xea>
 800ce0c:	6823      	ldr	r3, [r4, #0]
 800ce0e:	442b      	add	r3, r5
 800ce10:	6023      	str	r3, [r4, #0]
 800ce12:	f8d8 3000 	ldr.w	r3, [r8]
 800ce16:	685a      	ldr	r2, [r3, #4]
 800ce18:	bb62      	cbnz	r2, 800ce74 <_malloc_r+0xdc>
 800ce1a:	f8c8 7000 	str.w	r7, [r8]
 800ce1e:	e00f      	b.n	800ce40 <_malloc_r+0xa8>
 800ce20:	6822      	ldr	r2, [r4, #0]
 800ce22:	1b52      	subs	r2, r2, r5
 800ce24:	d420      	bmi.n	800ce68 <_malloc_r+0xd0>
 800ce26:	2a0b      	cmp	r2, #11
 800ce28:	d917      	bls.n	800ce5a <_malloc_r+0xc2>
 800ce2a:	1961      	adds	r1, r4, r5
 800ce2c:	42a3      	cmp	r3, r4
 800ce2e:	6025      	str	r5, [r4, #0]
 800ce30:	bf18      	it	ne
 800ce32:	6059      	strne	r1, [r3, #4]
 800ce34:	6863      	ldr	r3, [r4, #4]
 800ce36:	bf08      	it	eq
 800ce38:	f8c8 1000 	streq.w	r1, [r8]
 800ce3c:	5162      	str	r2, [r4, r5]
 800ce3e:	604b      	str	r3, [r1, #4]
 800ce40:	4630      	mov	r0, r6
 800ce42:	f000 f82f 	bl	800cea4 <__malloc_unlock>
 800ce46:	f104 000b 	add.w	r0, r4, #11
 800ce4a:	1d23      	adds	r3, r4, #4
 800ce4c:	f020 0007 	bic.w	r0, r0, #7
 800ce50:	1ac2      	subs	r2, r0, r3
 800ce52:	bf1c      	itt	ne
 800ce54:	1a1b      	subne	r3, r3, r0
 800ce56:	50a3      	strne	r3, [r4, r2]
 800ce58:	e7af      	b.n	800cdba <_malloc_r+0x22>
 800ce5a:	6862      	ldr	r2, [r4, #4]
 800ce5c:	42a3      	cmp	r3, r4
 800ce5e:	bf0c      	ite	eq
 800ce60:	f8c8 2000 	streq.w	r2, [r8]
 800ce64:	605a      	strne	r2, [r3, #4]
 800ce66:	e7eb      	b.n	800ce40 <_malloc_r+0xa8>
 800ce68:	4623      	mov	r3, r4
 800ce6a:	6864      	ldr	r4, [r4, #4]
 800ce6c:	e7ae      	b.n	800cdcc <_malloc_r+0x34>
 800ce6e:	463c      	mov	r4, r7
 800ce70:	687f      	ldr	r7, [r7, #4]
 800ce72:	e7b6      	b.n	800cde2 <_malloc_r+0x4a>
 800ce74:	461a      	mov	r2, r3
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	42a3      	cmp	r3, r4
 800ce7a:	d1fb      	bne.n	800ce74 <_malloc_r+0xdc>
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	6053      	str	r3, [r2, #4]
 800ce80:	e7de      	b.n	800ce40 <_malloc_r+0xa8>
 800ce82:	230c      	movs	r3, #12
 800ce84:	6033      	str	r3, [r6, #0]
 800ce86:	4630      	mov	r0, r6
 800ce88:	f000 f80c 	bl	800cea4 <__malloc_unlock>
 800ce8c:	e794      	b.n	800cdb8 <_malloc_r+0x20>
 800ce8e:	6005      	str	r5, [r0, #0]
 800ce90:	e7d6      	b.n	800ce40 <_malloc_r+0xa8>
 800ce92:	bf00      	nop
 800ce94:	200049f4 	.word	0x200049f4

0800ce98 <__malloc_lock>:
 800ce98:	4801      	ldr	r0, [pc, #4]	@ (800cea0 <__malloc_lock+0x8>)
 800ce9a:	f7ff b8a6 	b.w	800bfea <__retarget_lock_acquire_recursive>
 800ce9e:	bf00      	nop
 800cea0:	200049ec 	.word	0x200049ec

0800cea4 <__malloc_unlock>:
 800cea4:	4801      	ldr	r0, [pc, #4]	@ (800ceac <__malloc_unlock+0x8>)
 800cea6:	f7ff b8a1 	b.w	800bfec <__retarget_lock_release_recursive>
 800ceaa:	bf00      	nop
 800ceac:	200049ec 	.word	0x200049ec

0800ceb0 <_Balloc>:
 800ceb0:	b570      	push	{r4, r5, r6, lr}
 800ceb2:	69c6      	ldr	r6, [r0, #28]
 800ceb4:	4604      	mov	r4, r0
 800ceb6:	460d      	mov	r5, r1
 800ceb8:	b976      	cbnz	r6, 800ced8 <_Balloc+0x28>
 800ceba:	2010      	movs	r0, #16
 800cebc:	f7ff ff42 	bl	800cd44 <malloc>
 800cec0:	4602      	mov	r2, r0
 800cec2:	61e0      	str	r0, [r4, #28]
 800cec4:	b920      	cbnz	r0, 800ced0 <_Balloc+0x20>
 800cec6:	4b18      	ldr	r3, [pc, #96]	@ (800cf28 <_Balloc+0x78>)
 800cec8:	4818      	ldr	r0, [pc, #96]	@ (800cf2c <_Balloc+0x7c>)
 800ceca:	216b      	movs	r1, #107	@ 0x6b
 800cecc:	f001 fd70 	bl	800e9b0 <__assert_func>
 800ced0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ced4:	6006      	str	r6, [r0, #0]
 800ced6:	60c6      	str	r6, [r0, #12]
 800ced8:	69e6      	ldr	r6, [r4, #28]
 800ceda:	68f3      	ldr	r3, [r6, #12]
 800cedc:	b183      	cbz	r3, 800cf00 <_Balloc+0x50>
 800cede:	69e3      	ldr	r3, [r4, #28]
 800cee0:	68db      	ldr	r3, [r3, #12]
 800cee2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cee6:	b9b8      	cbnz	r0, 800cf18 <_Balloc+0x68>
 800cee8:	2101      	movs	r1, #1
 800ceea:	fa01 f605 	lsl.w	r6, r1, r5
 800ceee:	1d72      	adds	r2, r6, #5
 800cef0:	0092      	lsls	r2, r2, #2
 800cef2:	4620      	mov	r0, r4
 800cef4:	f001 fd7a 	bl	800e9ec <_calloc_r>
 800cef8:	b160      	cbz	r0, 800cf14 <_Balloc+0x64>
 800cefa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cefe:	e00e      	b.n	800cf1e <_Balloc+0x6e>
 800cf00:	2221      	movs	r2, #33	@ 0x21
 800cf02:	2104      	movs	r1, #4
 800cf04:	4620      	mov	r0, r4
 800cf06:	f001 fd71 	bl	800e9ec <_calloc_r>
 800cf0a:	69e3      	ldr	r3, [r4, #28]
 800cf0c:	60f0      	str	r0, [r6, #12]
 800cf0e:	68db      	ldr	r3, [r3, #12]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d1e4      	bne.n	800cede <_Balloc+0x2e>
 800cf14:	2000      	movs	r0, #0
 800cf16:	bd70      	pop	{r4, r5, r6, pc}
 800cf18:	6802      	ldr	r2, [r0, #0]
 800cf1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf1e:	2300      	movs	r3, #0
 800cf20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf24:	e7f7      	b.n	800cf16 <_Balloc+0x66>
 800cf26:	bf00      	nop
 800cf28:	0800fbd6 	.word	0x0800fbd6
 800cf2c:	0800fc56 	.word	0x0800fc56

0800cf30 <_Bfree>:
 800cf30:	b570      	push	{r4, r5, r6, lr}
 800cf32:	69c6      	ldr	r6, [r0, #28]
 800cf34:	4605      	mov	r5, r0
 800cf36:	460c      	mov	r4, r1
 800cf38:	b976      	cbnz	r6, 800cf58 <_Bfree+0x28>
 800cf3a:	2010      	movs	r0, #16
 800cf3c:	f7ff ff02 	bl	800cd44 <malloc>
 800cf40:	4602      	mov	r2, r0
 800cf42:	61e8      	str	r0, [r5, #28]
 800cf44:	b920      	cbnz	r0, 800cf50 <_Bfree+0x20>
 800cf46:	4b09      	ldr	r3, [pc, #36]	@ (800cf6c <_Bfree+0x3c>)
 800cf48:	4809      	ldr	r0, [pc, #36]	@ (800cf70 <_Bfree+0x40>)
 800cf4a:	218f      	movs	r1, #143	@ 0x8f
 800cf4c:	f001 fd30 	bl	800e9b0 <__assert_func>
 800cf50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf54:	6006      	str	r6, [r0, #0]
 800cf56:	60c6      	str	r6, [r0, #12]
 800cf58:	b13c      	cbz	r4, 800cf6a <_Bfree+0x3a>
 800cf5a:	69eb      	ldr	r3, [r5, #28]
 800cf5c:	6862      	ldr	r2, [r4, #4]
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cf64:	6021      	str	r1, [r4, #0]
 800cf66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cf6a:	bd70      	pop	{r4, r5, r6, pc}
 800cf6c:	0800fbd6 	.word	0x0800fbd6
 800cf70:	0800fc56 	.word	0x0800fc56

0800cf74 <__multadd>:
 800cf74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf78:	690d      	ldr	r5, [r1, #16]
 800cf7a:	4607      	mov	r7, r0
 800cf7c:	460c      	mov	r4, r1
 800cf7e:	461e      	mov	r6, r3
 800cf80:	f101 0c14 	add.w	ip, r1, #20
 800cf84:	2000      	movs	r0, #0
 800cf86:	f8dc 3000 	ldr.w	r3, [ip]
 800cf8a:	b299      	uxth	r1, r3
 800cf8c:	fb02 6101 	mla	r1, r2, r1, r6
 800cf90:	0c1e      	lsrs	r6, r3, #16
 800cf92:	0c0b      	lsrs	r3, r1, #16
 800cf94:	fb02 3306 	mla	r3, r2, r6, r3
 800cf98:	b289      	uxth	r1, r1
 800cf9a:	3001      	adds	r0, #1
 800cf9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cfa0:	4285      	cmp	r5, r0
 800cfa2:	f84c 1b04 	str.w	r1, [ip], #4
 800cfa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cfaa:	dcec      	bgt.n	800cf86 <__multadd+0x12>
 800cfac:	b30e      	cbz	r6, 800cff2 <__multadd+0x7e>
 800cfae:	68a3      	ldr	r3, [r4, #8]
 800cfb0:	42ab      	cmp	r3, r5
 800cfb2:	dc19      	bgt.n	800cfe8 <__multadd+0x74>
 800cfb4:	6861      	ldr	r1, [r4, #4]
 800cfb6:	4638      	mov	r0, r7
 800cfb8:	3101      	adds	r1, #1
 800cfba:	f7ff ff79 	bl	800ceb0 <_Balloc>
 800cfbe:	4680      	mov	r8, r0
 800cfc0:	b928      	cbnz	r0, 800cfce <__multadd+0x5a>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	4b0c      	ldr	r3, [pc, #48]	@ (800cff8 <__multadd+0x84>)
 800cfc6:	480d      	ldr	r0, [pc, #52]	@ (800cffc <__multadd+0x88>)
 800cfc8:	21ba      	movs	r1, #186	@ 0xba
 800cfca:	f001 fcf1 	bl	800e9b0 <__assert_func>
 800cfce:	6922      	ldr	r2, [r4, #16]
 800cfd0:	3202      	adds	r2, #2
 800cfd2:	f104 010c 	add.w	r1, r4, #12
 800cfd6:	0092      	lsls	r2, r2, #2
 800cfd8:	300c      	adds	r0, #12
 800cfda:	f7ff f808 	bl	800bfee <memcpy>
 800cfde:	4621      	mov	r1, r4
 800cfe0:	4638      	mov	r0, r7
 800cfe2:	f7ff ffa5 	bl	800cf30 <_Bfree>
 800cfe6:	4644      	mov	r4, r8
 800cfe8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cfec:	3501      	adds	r5, #1
 800cfee:	615e      	str	r6, [r3, #20]
 800cff0:	6125      	str	r5, [r4, #16]
 800cff2:	4620      	mov	r0, r4
 800cff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cff8:	0800fc45 	.word	0x0800fc45
 800cffc:	0800fc56 	.word	0x0800fc56

0800d000 <__s2b>:
 800d000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d004:	460c      	mov	r4, r1
 800d006:	4615      	mov	r5, r2
 800d008:	461f      	mov	r7, r3
 800d00a:	2209      	movs	r2, #9
 800d00c:	3308      	adds	r3, #8
 800d00e:	4606      	mov	r6, r0
 800d010:	fb93 f3f2 	sdiv	r3, r3, r2
 800d014:	2100      	movs	r1, #0
 800d016:	2201      	movs	r2, #1
 800d018:	429a      	cmp	r2, r3
 800d01a:	db09      	blt.n	800d030 <__s2b+0x30>
 800d01c:	4630      	mov	r0, r6
 800d01e:	f7ff ff47 	bl	800ceb0 <_Balloc>
 800d022:	b940      	cbnz	r0, 800d036 <__s2b+0x36>
 800d024:	4602      	mov	r2, r0
 800d026:	4b19      	ldr	r3, [pc, #100]	@ (800d08c <__s2b+0x8c>)
 800d028:	4819      	ldr	r0, [pc, #100]	@ (800d090 <__s2b+0x90>)
 800d02a:	21d3      	movs	r1, #211	@ 0xd3
 800d02c:	f001 fcc0 	bl	800e9b0 <__assert_func>
 800d030:	0052      	lsls	r2, r2, #1
 800d032:	3101      	adds	r1, #1
 800d034:	e7f0      	b.n	800d018 <__s2b+0x18>
 800d036:	9b08      	ldr	r3, [sp, #32]
 800d038:	6143      	str	r3, [r0, #20]
 800d03a:	2d09      	cmp	r5, #9
 800d03c:	f04f 0301 	mov.w	r3, #1
 800d040:	6103      	str	r3, [r0, #16]
 800d042:	dd16      	ble.n	800d072 <__s2b+0x72>
 800d044:	f104 0909 	add.w	r9, r4, #9
 800d048:	46c8      	mov	r8, r9
 800d04a:	442c      	add	r4, r5
 800d04c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d050:	4601      	mov	r1, r0
 800d052:	3b30      	subs	r3, #48	@ 0x30
 800d054:	220a      	movs	r2, #10
 800d056:	4630      	mov	r0, r6
 800d058:	f7ff ff8c 	bl	800cf74 <__multadd>
 800d05c:	45a0      	cmp	r8, r4
 800d05e:	d1f5      	bne.n	800d04c <__s2b+0x4c>
 800d060:	f1a5 0408 	sub.w	r4, r5, #8
 800d064:	444c      	add	r4, r9
 800d066:	1b2d      	subs	r5, r5, r4
 800d068:	1963      	adds	r3, r4, r5
 800d06a:	42bb      	cmp	r3, r7
 800d06c:	db04      	blt.n	800d078 <__s2b+0x78>
 800d06e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d072:	340a      	adds	r4, #10
 800d074:	2509      	movs	r5, #9
 800d076:	e7f6      	b.n	800d066 <__s2b+0x66>
 800d078:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d07c:	4601      	mov	r1, r0
 800d07e:	3b30      	subs	r3, #48	@ 0x30
 800d080:	220a      	movs	r2, #10
 800d082:	4630      	mov	r0, r6
 800d084:	f7ff ff76 	bl	800cf74 <__multadd>
 800d088:	e7ee      	b.n	800d068 <__s2b+0x68>
 800d08a:	bf00      	nop
 800d08c:	0800fc45 	.word	0x0800fc45
 800d090:	0800fc56 	.word	0x0800fc56

0800d094 <__hi0bits>:
 800d094:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d098:	4603      	mov	r3, r0
 800d09a:	bf36      	itet	cc
 800d09c:	0403      	lslcc	r3, r0, #16
 800d09e:	2000      	movcs	r0, #0
 800d0a0:	2010      	movcc	r0, #16
 800d0a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d0a6:	bf3c      	itt	cc
 800d0a8:	021b      	lslcc	r3, r3, #8
 800d0aa:	3008      	addcc	r0, #8
 800d0ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d0b0:	bf3c      	itt	cc
 800d0b2:	011b      	lslcc	r3, r3, #4
 800d0b4:	3004      	addcc	r0, #4
 800d0b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0ba:	bf3c      	itt	cc
 800d0bc:	009b      	lslcc	r3, r3, #2
 800d0be:	3002      	addcc	r0, #2
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	db05      	blt.n	800d0d0 <__hi0bits+0x3c>
 800d0c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d0c8:	f100 0001 	add.w	r0, r0, #1
 800d0cc:	bf08      	it	eq
 800d0ce:	2020      	moveq	r0, #32
 800d0d0:	4770      	bx	lr

0800d0d2 <__lo0bits>:
 800d0d2:	6803      	ldr	r3, [r0, #0]
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	f013 0007 	ands.w	r0, r3, #7
 800d0da:	d00b      	beq.n	800d0f4 <__lo0bits+0x22>
 800d0dc:	07d9      	lsls	r1, r3, #31
 800d0de:	d421      	bmi.n	800d124 <__lo0bits+0x52>
 800d0e0:	0798      	lsls	r0, r3, #30
 800d0e2:	bf49      	itett	mi
 800d0e4:	085b      	lsrmi	r3, r3, #1
 800d0e6:	089b      	lsrpl	r3, r3, #2
 800d0e8:	2001      	movmi	r0, #1
 800d0ea:	6013      	strmi	r3, [r2, #0]
 800d0ec:	bf5c      	itt	pl
 800d0ee:	6013      	strpl	r3, [r2, #0]
 800d0f0:	2002      	movpl	r0, #2
 800d0f2:	4770      	bx	lr
 800d0f4:	b299      	uxth	r1, r3
 800d0f6:	b909      	cbnz	r1, 800d0fc <__lo0bits+0x2a>
 800d0f8:	0c1b      	lsrs	r3, r3, #16
 800d0fa:	2010      	movs	r0, #16
 800d0fc:	b2d9      	uxtb	r1, r3
 800d0fe:	b909      	cbnz	r1, 800d104 <__lo0bits+0x32>
 800d100:	3008      	adds	r0, #8
 800d102:	0a1b      	lsrs	r3, r3, #8
 800d104:	0719      	lsls	r1, r3, #28
 800d106:	bf04      	itt	eq
 800d108:	091b      	lsreq	r3, r3, #4
 800d10a:	3004      	addeq	r0, #4
 800d10c:	0799      	lsls	r1, r3, #30
 800d10e:	bf04      	itt	eq
 800d110:	089b      	lsreq	r3, r3, #2
 800d112:	3002      	addeq	r0, #2
 800d114:	07d9      	lsls	r1, r3, #31
 800d116:	d403      	bmi.n	800d120 <__lo0bits+0x4e>
 800d118:	085b      	lsrs	r3, r3, #1
 800d11a:	f100 0001 	add.w	r0, r0, #1
 800d11e:	d003      	beq.n	800d128 <__lo0bits+0x56>
 800d120:	6013      	str	r3, [r2, #0]
 800d122:	4770      	bx	lr
 800d124:	2000      	movs	r0, #0
 800d126:	4770      	bx	lr
 800d128:	2020      	movs	r0, #32
 800d12a:	4770      	bx	lr

0800d12c <__i2b>:
 800d12c:	b510      	push	{r4, lr}
 800d12e:	460c      	mov	r4, r1
 800d130:	2101      	movs	r1, #1
 800d132:	f7ff febd 	bl	800ceb0 <_Balloc>
 800d136:	4602      	mov	r2, r0
 800d138:	b928      	cbnz	r0, 800d146 <__i2b+0x1a>
 800d13a:	4b05      	ldr	r3, [pc, #20]	@ (800d150 <__i2b+0x24>)
 800d13c:	4805      	ldr	r0, [pc, #20]	@ (800d154 <__i2b+0x28>)
 800d13e:	f240 1145 	movw	r1, #325	@ 0x145
 800d142:	f001 fc35 	bl	800e9b0 <__assert_func>
 800d146:	2301      	movs	r3, #1
 800d148:	6144      	str	r4, [r0, #20]
 800d14a:	6103      	str	r3, [r0, #16]
 800d14c:	bd10      	pop	{r4, pc}
 800d14e:	bf00      	nop
 800d150:	0800fc45 	.word	0x0800fc45
 800d154:	0800fc56 	.word	0x0800fc56

0800d158 <__multiply>:
 800d158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d15c:	4614      	mov	r4, r2
 800d15e:	690a      	ldr	r2, [r1, #16]
 800d160:	6923      	ldr	r3, [r4, #16]
 800d162:	429a      	cmp	r2, r3
 800d164:	bfa8      	it	ge
 800d166:	4623      	movge	r3, r4
 800d168:	460f      	mov	r7, r1
 800d16a:	bfa4      	itt	ge
 800d16c:	460c      	movge	r4, r1
 800d16e:	461f      	movge	r7, r3
 800d170:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d174:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d178:	68a3      	ldr	r3, [r4, #8]
 800d17a:	6861      	ldr	r1, [r4, #4]
 800d17c:	eb0a 0609 	add.w	r6, sl, r9
 800d180:	42b3      	cmp	r3, r6
 800d182:	b085      	sub	sp, #20
 800d184:	bfb8      	it	lt
 800d186:	3101      	addlt	r1, #1
 800d188:	f7ff fe92 	bl	800ceb0 <_Balloc>
 800d18c:	b930      	cbnz	r0, 800d19c <__multiply+0x44>
 800d18e:	4602      	mov	r2, r0
 800d190:	4b44      	ldr	r3, [pc, #272]	@ (800d2a4 <__multiply+0x14c>)
 800d192:	4845      	ldr	r0, [pc, #276]	@ (800d2a8 <__multiply+0x150>)
 800d194:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d198:	f001 fc0a 	bl	800e9b0 <__assert_func>
 800d19c:	f100 0514 	add.w	r5, r0, #20
 800d1a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d1a4:	462b      	mov	r3, r5
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	4543      	cmp	r3, r8
 800d1aa:	d321      	bcc.n	800d1f0 <__multiply+0x98>
 800d1ac:	f107 0114 	add.w	r1, r7, #20
 800d1b0:	f104 0214 	add.w	r2, r4, #20
 800d1b4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d1b8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d1bc:	9302      	str	r3, [sp, #8]
 800d1be:	1b13      	subs	r3, r2, r4
 800d1c0:	3b15      	subs	r3, #21
 800d1c2:	f023 0303 	bic.w	r3, r3, #3
 800d1c6:	3304      	adds	r3, #4
 800d1c8:	f104 0715 	add.w	r7, r4, #21
 800d1cc:	42ba      	cmp	r2, r7
 800d1ce:	bf38      	it	cc
 800d1d0:	2304      	movcc	r3, #4
 800d1d2:	9301      	str	r3, [sp, #4]
 800d1d4:	9b02      	ldr	r3, [sp, #8]
 800d1d6:	9103      	str	r1, [sp, #12]
 800d1d8:	428b      	cmp	r3, r1
 800d1da:	d80c      	bhi.n	800d1f6 <__multiply+0x9e>
 800d1dc:	2e00      	cmp	r6, #0
 800d1de:	dd03      	ble.n	800d1e8 <__multiply+0x90>
 800d1e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d05b      	beq.n	800d2a0 <__multiply+0x148>
 800d1e8:	6106      	str	r6, [r0, #16]
 800d1ea:	b005      	add	sp, #20
 800d1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1f0:	f843 2b04 	str.w	r2, [r3], #4
 800d1f4:	e7d8      	b.n	800d1a8 <__multiply+0x50>
 800d1f6:	f8b1 a000 	ldrh.w	sl, [r1]
 800d1fa:	f1ba 0f00 	cmp.w	sl, #0
 800d1fe:	d024      	beq.n	800d24a <__multiply+0xf2>
 800d200:	f104 0e14 	add.w	lr, r4, #20
 800d204:	46a9      	mov	r9, r5
 800d206:	f04f 0c00 	mov.w	ip, #0
 800d20a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d20e:	f8d9 3000 	ldr.w	r3, [r9]
 800d212:	fa1f fb87 	uxth.w	fp, r7
 800d216:	b29b      	uxth	r3, r3
 800d218:	fb0a 330b 	mla	r3, sl, fp, r3
 800d21c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d220:	f8d9 7000 	ldr.w	r7, [r9]
 800d224:	4463      	add	r3, ip
 800d226:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d22a:	fb0a c70b 	mla	r7, sl, fp, ip
 800d22e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d232:	b29b      	uxth	r3, r3
 800d234:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d238:	4572      	cmp	r2, lr
 800d23a:	f849 3b04 	str.w	r3, [r9], #4
 800d23e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d242:	d8e2      	bhi.n	800d20a <__multiply+0xb2>
 800d244:	9b01      	ldr	r3, [sp, #4]
 800d246:	f845 c003 	str.w	ip, [r5, r3]
 800d24a:	9b03      	ldr	r3, [sp, #12]
 800d24c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d250:	3104      	adds	r1, #4
 800d252:	f1b9 0f00 	cmp.w	r9, #0
 800d256:	d021      	beq.n	800d29c <__multiply+0x144>
 800d258:	682b      	ldr	r3, [r5, #0]
 800d25a:	f104 0c14 	add.w	ip, r4, #20
 800d25e:	46ae      	mov	lr, r5
 800d260:	f04f 0a00 	mov.w	sl, #0
 800d264:	f8bc b000 	ldrh.w	fp, [ip]
 800d268:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d26c:	fb09 770b 	mla	r7, r9, fp, r7
 800d270:	4457      	add	r7, sl
 800d272:	b29b      	uxth	r3, r3
 800d274:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d278:	f84e 3b04 	str.w	r3, [lr], #4
 800d27c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d280:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d284:	f8be 3000 	ldrh.w	r3, [lr]
 800d288:	fb09 330a 	mla	r3, r9, sl, r3
 800d28c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d290:	4562      	cmp	r2, ip
 800d292:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d296:	d8e5      	bhi.n	800d264 <__multiply+0x10c>
 800d298:	9f01      	ldr	r7, [sp, #4]
 800d29a:	51eb      	str	r3, [r5, r7]
 800d29c:	3504      	adds	r5, #4
 800d29e:	e799      	b.n	800d1d4 <__multiply+0x7c>
 800d2a0:	3e01      	subs	r6, #1
 800d2a2:	e79b      	b.n	800d1dc <__multiply+0x84>
 800d2a4:	0800fc45 	.word	0x0800fc45
 800d2a8:	0800fc56 	.word	0x0800fc56

0800d2ac <__pow5mult>:
 800d2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2b0:	4615      	mov	r5, r2
 800d2b2:	f012 0203 	ands.w	r2, r2, #3
 800d2b6:	4607      	mov	r7, r0
 800d2b8:	460e      	mov	r6, r1
 800d2ba:	d007      	beq.n	800d2cc <__pow5mult+0x20>
 800d2bc:	4c25      	ldr	r4, [pc, #148]	@ (800d354 <__pow5mult+0xa8>)
 800d2be:	3a01      	subs	r2, #1
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d2c6:	f7ff fe55 	bl	800cf74 <__multadd>
 800d2ca:	4606      	mov	r6, r0
 800d2cc:	10ad      	asrs	r5, r5, #2
 800d2ce:	d03d      	beq.n	800d34c <__pow5mult+0xa0>
 800d2d0:	69fc      	ldr	r4, [r7, #28]
 800d2d2:	b97c      	cbnz	r4, 800d2f4 <__pow5mult+0x48>
 800d2d4:	2010      	movs	r0, #16
 800d2d6:	f7ff fd35 	bl	800cd44 <malloc>
 800d2da:	4602      	mov	r2, r0
 800d2dc:	61f8      	str	r0, [r7, #28]
 800d2de:	b928      	cbnz	r0, 800d2ec <__pow5mult+0x40>
 800d2e0:	4b1d      	ldr	r3, [pc, #116]	@ (800d358 <__pow5mult+0xac>)
 800d2e2:	481e      	ldr	r0, [pc, #120]	@ (800d35c <__pow5mult+0xb0>)
 800d2e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d2e8:	f001 fb62 	bl	800e9b0 <__assert_func>
 800d2ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2f0:	6004      	str	r4, [r0, #0]
 800d2f2:	60c4      	str	r4, [r0, #12]
 800d2f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d2f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d2fc:	b94c      	cbnz	r4, 800d312 <__pow5mult+0x66>
 800d2fe:	f240 2171 	movw	r1, #625	@ 0x271
 800d302:	4638      	mov	r0, r7
 800d304:	f7ff ff12 	bl	800d12c <__i2b>
 800d308:	2300      	movs	r3, #0
 800d30a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d30e:	4604      	mov	r4, r0
 800d310:	6003      	str	r3, [r0, #0]
 800d312:	f04f 0900 	mov.w	r9, #0
 800d316:	07eb      	lsls	r3, r5, #31
 800d318:	d50a      	bpl.n	800d330 <__pow5mult+0x84>
 800d31a:	4631      	mov	r1, r6
 800d31c:	4622      	mov	r2, r4
 800d31e:	4638      	mov	r0, r7
 800d320:	f7ff ff1a 	bl	800d158 <__multiply>
 800d324:	4631      	mov	r1, r6
 800d326:	4680      	mov	r8, r0
 800d328:	4638      	mov	r0, r7
 800d32a:	f7ff fe01 	bl	800cf30 <_Bfree>
 800d32e:	4646      	mov	r6, r8
 800d330:	106d      	asrs	r5, r5, #1
 800d332:	d00b      	beq.n	800d34c <__pow5mult+0xa0>
 800d334:	6820      	ldr	r0, [r4, #0]
 800d336:	b938      	cbnz	r0, 800d348 <__pow5mult+0x9c>
 800d338:	4622      	mov	r2, r4
 800d33a:	4621      	mov	r1, r4
 800d33c:	4638      	mov	r0, r7
 800d33e:	f7ff ff0b 	bl	800d158 <__multiply>
 800d342:	6020      	str	r0, [r4, #0]
 800d344:	f8c0 9000 	str.w	r9, [r0]
 800d348:	4604      	mov	r4, r0
 800d34a:	e7e4      	b.n	800d316 <__pow5mult+0x6a>
 800d34c:	4630      	mov	r0, r6
 800d34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d352:	bf00      	nop
 800d354:	0800fcb0 	.word	0x0800fcb0
 800d358:	0800fbd6 	.word	0x0800fbd6
 800d35c:	0800fc56 	.word	0x0800fc56

0800d360 <__lshift>:
 800d360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d364:	460c      	mov	r4, r1
 800d366:	6849      	ldr	r1, [r1, #4]
 800d368:	6923      	ldr	r3, [r4, #16]
 800d36a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d36e:	68a3      	ldr	r3, [r4, #8]
 800d370:	4607      	mov	r7, r0
 800d372:	4691      	mov	r9, r2
 800d374:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d378:	f108 0601 	add.w	r6, r8, #1
 800d37c:	42b3      	cmp	r3, r6
 800d37e:	db0b      	blt.n	800d398 <__lshift+0x38>
 800d380:	4638      	mov	r0, r7
 800d382:	f7ff fd95 	bl	800ceb0 <_Balloc>
 800d386:	4605      	mov	r5, r0
 800d388:	b948      	cbnz	r0, 800d39e <__lshift+0x3e>
 800d38a:	4602      	mov	r2, r0
 800d38c:	4b28      	ldr	r3, [pc, #160]	@ (800d430 <__lshift+0xd0>)
 800d38e:	4829      	ldr	r0, [pc, #164]	@ (800d434 <__lshift+0xd4>)
 800d390:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d394:	f001 fb0c 	bl	800e9b0 <__assert_func>
 800d398:	3101      	adds	r1, #1
 800d39a:	005b      	lsls	r3, r3, #1
 800d39c:	e7ee      	b.n	800d37c <__lshift+0x1c>
 800d39e:	2300      	movs	r3, #0
 800d3a0:	f100 0114 	add.w	r1, r0, #20
 800d3a4:	f100 0210 	add.w	r2, r0, #16
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	4553      	cmp	r3, sl
 800d3ac:	db33      	blt.n	800d416 <__lshift+0xb6>
 800d3ae:	6920      	ldr	r0, [r4, #16]
 800d3b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d3b4:	f104 0314 	add.w	r3, r4, #20
 800d3b8:	f019 091f 	ands.w	r9, r9, #31
 800d3bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d3c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d3c4:	d02b      	beq.n	800d41e <__lshift+0xbe>
 800d3c6:	f1c9 0e20 	rsb	lr, r9, #32
 800d3ca:	468a      	mov	sl, r1
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	6818      	ldr	r0, [r3, #0]
 800d3d0:	fa00 f009 	lsl.w	r0, r0, r9
 800d3d4:	4310      	orrs	r0, r2
 800d3d6:	f84a 0b04 	str.w	r0, [sl], #4
 800d3da:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3de:	459c      	cmp	ip, r3
 800d3e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d3e4:	d8f3      	bhi.n	800d3ce <__lshift+0x6e>
 800d3e6:	ebac 0304 	sub.w	r3, ip, r4
 800d3ea:	3b15      	subs	r3, #21
 800d3ec:	f023 0303 	bic.w	r3, r3, #3
 800d3f0:	3304      	adds	r3, #4
 800d3f2:	f104 0015 	add.w	r0, r4, #21
 800d3f6:	4584      	cmp	ip, r0
 800d3f8:	bf38      	it	cc
 800d3fa:	2304      	movcc	r3, #4
 800d3fc:	50ca      	str	r2, [r1, r3]
 800d3fe:	b10a      	cbz	r2, 800d404 <__lshift+0xa4>
 800d400:	f108 0602 	add.w	r6, r8, #2
 800d404:	3e01      	subs	r6, #1
 800d406:	4638      	mov	r0, r7
 800d408:	612e      	str	r6, [r5, #16]
 800d40a:	4621      	mov	r1, r4
 800d40c:	f7ff fd90 	bl	800cf30 <_Bfree>
 800d410:	4628      	mov	r0, r5
 800d412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d416:	f842 0f04 	str.w	r0, [r2, #4]!
 800d41a:	3301      	adds	r3, #1
 800d41c:	e7c5      	b.n	800d3aa <__lshift+0x4a>
 800d41e:	3904      	subs	r1, #4
 800d420:	f853 2b04 	ldr.w	r2, [r3], #4
 800d424:	f841 2f04 	str.w	r2, [r1, #4]!
 800d428:	459c      	cmp	ip, r3
 800d42a:	d8f9      	bhi.n	800d420 <__lshift+0xc0>
 800d42c:	e7ea      	b.n	800d404 <__lshift+0xa4>
 800d42e:	bf00      	nop
 800d430:	0800fc45 	.word	0x0800fc45
 800d434:	0800fc56 	.word	0x0800fc56

0800d438 <__mcmp>:
 800d438:	690a      	ldr	r2, [r1, #16]
 800d43a:	4603      	mov	r3, r0
 800d43c:	6900      	ldr	r0, [r0, #16]
 800d43e:	1a80      	subs	r0, r0, r2
 800d440:	b530      	push	{r4, r5, lr}
 800d442:	d10e      	bne.n	800d462 <__mcmp+0x2a>
 800d444:	3314      	adds	r3, #20
 800d446:	3114      	adds	r1, #20
 800d448:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d44c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d450:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d454:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d458:	4295      	cmp	r5, r2
 800d45a:	d003      	beq.n	800d464 <__mcmp+0x2c>
 800d45c:	d205      	bcs.n	800d46a <__mcmp+0x32>
 800d45e:	f04f 30ff 	mov.w	r0, #4294967295
 800d462:	bd30      	pop	{r4, r5, pc}
 800d464:	42a3      	cmp	r3, r4
 800d466:	d3f3      	bcc.n	800d450 <__mcmp+0x18>
 800d468:	e7fb      	b.n	800d462 <__mcmp+0x2a>
 800d46a:	2001      	movs	r0, #1
 800d46c:	e7f9      	b.n	800d462 <__mcmp+0x2a>
	...

0800d470 <__mdiff>:
 800d470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d474:	4689      	mov	r9, r1
 800d476:	4606      	mov	r6, r0
 800d478:	4611      	mov	r1, r2
 800d47a:	4648      	mov	r0, r9
 800d47c:	4614      	mov	r4, r2
 800d47e:	f7ff ffdb 	bl	800d438 <__mcmp>
 800d482:	1e05      	subs	r5, r0, #0
 800d484:	d112      	bne.n	800d4ac <__mdiff+0x3c>
 800d486:	4629      	mov	r1, r5
 800d488:	4630      	mov	r0, r6
 800d48a:	f7ff fd11 	bl	800ceb0 <_Balloc>
 800d48e:	4602      	mov	r2, r0
 800d490:	b928      	cbnz	r0, 800d49e <__mdiff+0x2e>
 800d492:	4b3f      	ldr	r3, [pc, #252]	@ (800d590 <__mdiff+0x120>)
 800d494:	f240 2137 	movw	r1, #567	@ 0x237
 800d498:	483e      	ldr	r0, [pc, #248]	@ (800d594 <__mdiff+0x124>)
 800d49a:	f001 fa89 	bl	800e9b0 <__assert_func>
 800d49e:	2301      	movs	r3, #1
 800d4a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d4a4:	4610      	mov	r0, r2
 800d4a6:	b003      	add	sp, #12
 800d4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ac:	bfbc      	itt	lt
 800d4ae:	464b      	movlt	r3, r9
 800d4b0:	46a1      	movlt	r9, r4
 800d4b2:	4630      	mov	r0, r6
 800d4b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d4b8:	bfba      	itte	lt
 800d4ba:	461c      	movlt	r4, r3
 800d4bc:	2501      	movlt	r5, #1
 800d4be:	2500      	movge	r5, #0
 800d4c0:	f7ff fcf6 	bl	800ceb0 <_Balloc>
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	b918      	cbnz	r0, 800d4d0 <__mdiff+0x60>
 800d4c8:	4b31      	ldr	r3, [pc, #196]	@ (800d590 <__mdiff+0x120>)
 800d4ca:	f240 2145 	movw	r1, #581	@ 0x245
 800d4ce:	e7e3      	b.n	800d498 <__mdiff+0x28>
 800d4d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d4d4:	6926      	ldr	r6, [r4, #16]
 800d4d6:	60c5      	str	r5, [r0, #12]
 800d4d8:	f109 0310 	add.w	r3, r9, #16
 800d4dc:	f109 0514 	add.w	r5, r9, #20
 800d4e0:	f104 0e14 	add.w	lr, r4, #20
 800d4e4:	f100 0b14 	add.w	fp, r0, #20
 800d4e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d4ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d4f0:	9301      	str	r3, [sp, #4]
 800d4f2:	46d9      	mov	r9, fp
 800d4f4:	f04f 0c00 	mov.w	ip, #0
 800d4f8:	9b01      	ldr	r3, [sp, #4]
 800d4fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d4fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d502:	9301      	str	r3, [sp, #4]
 800d504:	fa1f f38a 	uxth.w	r3, sl
 800d508:	4619      	mov	r1, r3
 800d50a:	b283      	uxth	r3, r0
 800d50c:	1acb      	subs	r3, r1, r3
 800d50e:	0c00      	lsrs	r0, r0, #16
 800d510:	4463      	add	r3, ip
 800d512:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d516:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d51a:	b29b      	uxth	r3, r3
 800d51c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d520:	4576      	cmp	r6, lr
 800d522:	f849 3b04 	str.w	r3, [r9], #4
 800d526:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d52a:	d8e5      	bhi.n	800d4f8 <__mdiff+0x88>
 800d52c:	1b33      	subs	r3, r6, r4
 800d52e:	3b15      	subs	r3, #21
 800d530:	f023 0303 	bic.w	r3, r3, #3
 800d534:	3415      	adds	r4, #21
 800d536:	3304      	adds	r3, #4
 800d538:	42a6      	cmp	r6, r4
 800d53a:	bf38      	it	cc
 800d53c:	2304      	movcc	r3, #4
 800d53e:	441d      	add	r5, r3
 800d540:	445b      	add	r3, fp
 800d542:	461e      	mov	r6, r3
 800d544:	462c      	mov	r4, r5
 800d546:	4544      	cmp	r4, r8
 800d548:	d30e      	bcc.n	800d568 <__mdiff+0xf8>
 800d54a:	f108 0103 	add.w	r1, r8, #3
 800d54e:	1b49      	subs	r1, r1, r5
 800d550:	f021 0103 	bic.w	r1, r1, #3
 800d554:	3d03      	subs	r5, #3
 800d556:	45a8      	cmp	r8, r5
 800d558:	bf38      	it	cc
 800d55a:	2100      	movcc	r1, #0
 800d55c:	440b      	add	r3, r1
 800d55e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d562:	b191      	cbz	r1, 800d58a <__mdiff+0x11a>
 800d564:	6117      	str	r7, [r2, #16]
 800d566:	e79d      	b.n	800d4a4 <__mdiff+0x34>
 800d568:	f854 1b04 	ldr.w	r1, [r4], #4
 800d56c:	46e6      	mov	lr, ip
 800d56e:	0c08      	lsrs	r0, r1, #16
 800d570:	fa1c fc81 	uxtah	ip, ip, r1
 800d574:	4471      	add	r1, lr
 800d576:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d57a:	b289      	uxth	r1, r1
 800d57c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d580:	f846 1b04 	str.w	r1, [r6], #4
 800d584:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d588:	e7dd      	b.n	800d546 <__mdiff+0xd6>
 800d58a:	3f01      	subs	r7, #1
 800d58c:	e7e7      	b.n	800d55e <__mdiff+0xee>
 800d58e:	bf00      	nop
 800d590:	0800fc45 	.word	0x0800fc45
 800d594:	0800fc56 	.word	0x0800fc56

0800d598 <__ulp>:
 800d598:	b082      	sub	sp, #8
 800d59a:	ed8d 0b00 	vstr	d0, [sp]
 800d59e:	9a01      	ldr	r2, [sp, #4]
 800d5a0:	4b0f      	ldr	r3, [pc, #60]	@ (800d5e0 <__ulp+0x48>)
 800d5a2:	4013      	ands	r3, r2
 800d5a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	dc08      	bgt.n	800d5be <__ulp+0x26>
 800d5ac:	425b      	negs	r3, r3
 800d5ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d5b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d5b6:	da04      	bge.n	800d5c2 <__ulp+0x2a>
 800d5b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d5bc:	4113      	asrs	r3, r2
 800d5be:	2200      	movs	r2, #0
 800d5c0:	e008      	b.n	800d5d4 <__ulp+0x3c>
 800d5c2:	f1a2 0314 	sub.w	r3, r2, #20
 800d5c6:	2b1e      	cmp	r3, #30
 800d5c8:	bfda      	itte	le
 800d5ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d5ce:	40da      	lsrle	r2, r3
 800d5d0:	2201      	movgt	r2, #1
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	4610      	mov	r0, r2
 800d5d8:	ec41 0b10 	vmov	d0, r0, r1
 800d5dc:	b002      	add	sp, #8
 800d5de:	4770      	bx	lr
 800d5e0:	7ff00000 	.word	0x7ff00000

0800d5e4 <__b2d>:
 800d5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e8:	6906      	ldr	r6, [r0, #16]
 800d5ea:	f100 0814 	add.w	r8, r0, #20
 800d5ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d5f2:	1f37      	subs	r7, r6, #4
 800d5f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d5f8:	4610      	mov	r0, r2
 800d5fa:	f7ff fd4b 	bl	800d094 <__hi0bits>
 800d5fe:	f1c0 0320 	rsb	r3, r0, #32
 800d602:	280a      	cmp	r0, #10
 800d604:	600b      	str	r3, [r1, #0]
 800d606:	491b      	ldr	r1, [pc, #108]	@ (800d674 <__b2d+0x90>)
 800d608:	dc15      	bgt.n	800d636 <__b2d+0x52>
 800d60a:	f1c0 0c0b 	rsb	ip, r0, #11
 800d60e:	fa22 f30c 	lsr.w	r3, r2, ip
 800d612:	45b8      	cmp	r8, r7
 800d614:	ea43 0501 	orr.w	r5, r3, r1
 800d618:	bf34      	ite	cc
 800d61a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d61e:	2300      	movcs	r3, #0
 800d620:	3015      	adds	r0, #21
 800d622:	fa02 f000 	lsl.w	r0, r2, r0
 800d626:	fa23 f30c 	lsr.w	r3, r3, ip
 800d62a:	4303      	orrs	r3, r0
 800d62c:	461c      	mov	r4, r3
 800d62e:	ec45 4b10 	vmov	d0, r4, r5
 800d632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d636:	45b8      	cmp	r8, r7
 800d638:	bf3a      	itte	cc
 800d63a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d63e:	f1a6 0708 	subcc.w	r7, r6, #8
 800d642:	2300      	movcs	r3, #0
 800d644:	380b      	subs	r0, #11
 800d646:	d012      	beq.n	800d66e <__b2d+0x8a>
 800d648:	f1c0 0120 	rsb	r1, r0, #32
 800d64c:	fa23 f401 	lsr.w	r4, r3, r1
 800d650:	4082      	lsls	r2, r0
 800d652:	4322      	orrs	r2, r4
 800d654:	4547      	cmp	r7, r8
 800d656:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d65a:	bf8c      	ite	hi
 800d65c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d660:	2200      	movls	r2, #0
 800d662:	4083      	lsls	r3, r0
 800d664:	40ca      	lsrs	r2, r1
 800d666:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d66a:	4313      	orrs	r3, r2
 800d66c:	e7de      	b.n	800d62c <__b2d+0x48>
 800d66e:	ea42 0501 	orr.w	r5, r2, r1
 800d672:	e7db      	b.n	800d62c <__b2d+0x48>
 800d674:	3ff00000 	.word	0x3ff00000

0800d678 <__d2b>:
 800d678:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d67c:	460f      	mov	r7, r1
 800d67e:	2101      	movs	r1, #1
 800d680:	ec59 8b10 	vmov	r8, r9, d0
 800d684:	4616      	mov	r6, r2
 800d686:	f7ff fc13 	bl	800ceb0 <_Balloc>
 800d68a:	4604      	mov	r4, r0
 800d68c:	b930      	cbnz	r0, 800d69c <__d2b+0x24>
 800d68e:	4602      	mov	r2, r0
 800d690:	4b23      	ldr	r3, [pc, #140]	@ (800d720 <__d2b+0xa8>)
 800d692:	4824      	ldr	r0, [pc, #144]	@ (800d724 <__d2b+0xac>)
 800d694:	f240 310f 	movw	r1, #783	@ 0x30f
 800d698:	f001 f98a 	bl	800e9b0 <__assert_func>
 800d69c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d6a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d6a4:	b10d      	cbz	r5, 800d6aa <__d2b+0x32>
 800d6a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d6aa:	9301      	str	r3, [sp, #4]
 800d6ac:	f1b8 0300 	subs.w	r3, r8, #0
 800d6b0:	d023      	beq.n	800d6fa <__d2b+0x82>
 800d6b2:	4668      	mov	r0, sp
 800d6b4:	9300      	str	r3, [sp, #0]
 800d6b6:	f7ff fd0c 	bl	800d0d2 <__lo0bits>
 800d6ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d6be:	b1d0      	cbz	r0, 800d6f6 <__d2b+0x7e>
 800d6c0:	f1c0 0320 	rsb	r3, r0, #32
 800d6c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d6c8:	430b      	orrs	r3, r1
 800d6ca:	40c2      	lsrs	r2, r0
 800d6cc:	6163      	str	r3, [r4, #20]
 800d6ce:	9201      	str	r2, [sp, #4]
 800d6d0:	9b01      	ldr	r3, [sp, #4]
 800d6d2:	61a3      	str	r3, [r4, #24]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	bf0c      	ite	eq
 800d6d8:	2201      	moveq	r2, #1
 800d6da:	2202      	movne	r2, #2
 800d6dc:	6122      	str	r2, [r4, #16]
 800d6de:	b1a5      	cbz	r5, 800d70a <__d2b+0x92>
 800d6e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d6e4:	4405      	add	r5, r0
 800d6e6:	603d      	str	r5, [r7, #0]
 800d6e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d6ec:	6030      	str	r0, [r6, #0]
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	b003      	add	sp, #12
 800d6f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6f6:	6161      	str	r1, [r4, #20]
 800d6f8:	e7ea      	b.n	800d6d0 <__d2b+0x58>
 800d6fa:	a801      	add	r0, sp, #4
 800d6fc:	f7ff fce9 	bl	800d0d2 <__lo0bits>
 800d700:	9b01      	ldr	r3, [sp, #4]
 800d702:	6163      	str	r3, [r4, #20]
 800d704:	3020      	adds	r0, #32
 800d706:	2201      	movs	r2, #1
 800d708:	e7e8      	b.n	800d6dc <__d2b+0x64>
 800d70a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d70e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d712:	6038      	str	r0, [r7, #0]
 800d714:	6918      	ldr	r0, [r3, #16]
 800d716:	f7ff fcbd 	bl	800d094 <__hi0bits>
 800d71a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d71e:	e7e5      	b.n	800d6ec <__d2b+0x74>
 800d720:	0800fc45 	.word	0x0800fc45
 800d724:	0800fc56 	.word	0x0800fc56

0800d728 <__ratio>:
 800d728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72c:	b085      	sub	sp, #20
 800d72e:	e9cd 1000 	strd	r1, r0, [sp]
 800d732:	a902      	add	r1, sp, #8
 800d734:	f7ff ff56 	bl	800d5e4 <__b2d>
 800d738:	9800      	ldr	r0, [sp, #0]
 800d73a:	a903      	add	r1, sp, #12
 800d73c:	ec55 4b10 	vmov	r4, r5, d0
 800d740:	f7ff ff50 	bl	800d5e4 <__b2d>
 800d744:	9b01      	ldr	r3, [sp, #4]
 800d746:	6919      	ldr	r1, [r3, #16]
 800d748:	9b00      	ldr	r3, [sp, #0]
 800d74a:	691b      	ldr	r3, [r3, #16]
 800d74c:	1ac9      	subs	r1, r1, r3
 800d74e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d752:	1a9b      	subs	r3, r3, r2
 800d754:	ec5b ab10 	vmov	sl, fp, d0
 800d758:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	bfce      	itee	gt
 800d760:	462a      	movgt	r2, r5
 800d762:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d766:	465a      	movle	r2, fp
 800d768:	462f      	mov	r7, r5
 800d76a:	46d9      	mov	r9, fp
 800d76c:	bfcc      	ite	gt
 800d76e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d772:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d776:	464b      	mov	r3, r9
 800d778:	4652      	mov	r2, sl
 800d77a:	4620      	mov	r0, r4
 800d77c:	4639      	mov	r1, r7
 800d77e:	f7f3 f895 	bl	80008ac <__aeabi_ddiv>
 800d782:	ec41 0b10 	vmov	d0, r0, r1
 800d786:	b005      	add	sp, #20
 800d788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d78c <__copybits>:
 800d78c:	3901      	subs	r1, #1
 800d78e:	b570      	push	{r4, r5, r6, lr}
 800d790:	1149      	asrs	r1, r1, #5
 800d792:	6914      	ldr	r4, [r2, #16]
 800d794:	3101      	adds	r1, #1
 800d796:	f102 0314 	add.w	r3, r2, #20
 800d79a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d79e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d7a2:	1f05      	subs	r5, r0, #4
 800d7a4:	42a3      	cmp	r3, r4
 800d7a6:	d30c      	bcc.n	800d7c2 <__copybits+0x36>
 800d7a8:	1aa3      	subs	r3, r4, r2
 800d7aa:	3b11      	subs	r3, #17
 800d7ac:	f023 0303 	bic.w	r3, r3, #3
 800d7b0:	3211      	adds	r2, #17
 800d7b2:	42a2      	cmp	r2, r4
 800d7b4:	bf88      	it	hi
 800d7b6:	2300      	movhi	r3, #0
 800d7b8:	4418      	add	r0, r3
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	4288      	cmp	r0, r1
 800d7be:	d305      	bcc.n	800d7cc <__copybits+0x40>
 800d7c0:	bd70      	pop	{r4, r5, r6, pc}
 800d7c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800d7c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800d7ca:	e7eb      	b.n	800d7a4 <__copybits+0x18>
 800d7cc:	f840 3b04 	str.w	r3, [r0], #4
 800d7d0:	e7f4      	b.n	800d7bc <__copybits+0x30>

0800d7d2 <__any_on>:
 800d7d2:	f100 0214 	add.w	r2, r0, #20
 800d7d6:	6900      	ldr	r0, [r0, #16]
 800d7d8:	114b      	asrs	r3, r1, #5
 800d7da:	4298      	cmp	r0, r3
 800d7dc:	b510      	push	{r4, lr}
 800d7de:	db11      	blt.n	800d804 <__any_on+0x32>
 800d7e0:	dd0a      	ble.n	800d7f8 <__any_on+0x26>
 800d7e2:	f011 011f 	ands.w	r1, r1, #31
 800d7e6:	d007      	beq.n	800d7f8 <__any_on+0x26>
 800d7e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d7ec:	fa24 f001 	lsr.w	r0, r4, r1
 800d7f0:	fa00 f101 	lsl.w	r1, r0, r1
 800d7f4:	428c      	cmp	r4, r1
 800d7f6:	d10b      	bne.n	800d810 <__any_on+0x3e>
 800d7f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d803      	bhi.n	800d808 <__any_on+0x36>
 800d800:	2000      	movs	r0, #0
 800d802:	bd10      	pop	{r4, pc}
 800d804:	4603      	mov	r3, r0
 800d806:	e7f7      	b.n	800d7f8 <__any_on+0x26>
 800d808:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d80c:	2900      	cmp	r1, #0
 800d80e:	d0f5      	beq.n	800d7fc <__any_on+0x2a>
 800d810:	2001      	movs	r0, #1
 800d812:	e7f6      	b.n	800d802 <__any_on+0x30>

0800d814 <sulp>:
 800d814:	b570      	push	{r4, r5, r6, lr}
 800d816:	4604      	mov	r4, r0
 800d818:	460d      	mov	r5, r1
 800d81a:	ec45 4b10 	vmov	d0, r4, r5
 800d81e:	4616      	mov	r6, r2
 800d820:	f7ff feba 	bl	800d598 <__ulp>
 800d824:	ec51 0b10 	vmov	r0, r1, d0
 800d828:	b17e      	cbz	r6, 800d84a <sulp+0x36>
 800d82a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d82e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d832:	2b00      	cmp	r3, #0
 800d834:	dd09      	ble.n	800d84a <sulp+0x36>
 800d836:	051b      	lsls	r3, r3, #20
 800d838:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d83c:	2400      	movs	r4, #0
 800d83e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d842:	4622      	mov	r2, r4
 800d844:	462b      	mov	r3, r5
 800d846:	f7f2 ff07 	bl	8000658 <__aeabi_dmul>
 800d84a:	ec41 0b10 	vmov	d0, r0, r1
 800d84e:	bd70      	pop	{r4, r5, r6, pc}

0800d850 <_strtod_l>:
 800d850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d854:	b09f      	sub	sp, #124	@ 0x7c
 800d856:	460c      	mov	r4, r1
 800d858:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d85a:	2200      	movs	r2, #0
 800d85c:	921a      	str	r2, [sp, #104]	@ 0x68
 800d85e:	9005      	str	r0, [sp, #20]
 800d860:	f04f 0a00 	mov.w	sl, #0
 800d864:	f04f 0b00 	mov.w	fp, #0
 800d868:	460a      	mov	r2, r1
 800d86a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d86c:	7811      	ldrb	r1, [r2, #0]
 800d86e:	292b      	cmp	r1, #43	@ 0x2b
 800d870:	d04a      	beq.n	800d908 <_strtod_l+0xb8>
 800d872:	d838      	bhi.n	800d8e6 <_strtod_l+0x96>
 800d874:	290d      	cmp	r1, #13
 800d876:	d832      	bhi.n	800d8de <_strtod_l+0x8e>
 800d878:	2908      	cmp	r1, #8
 800d87a:	d832      	bhi.n	800d8e2 <_strtod_l+0x92>
 800d87c:	2900      	cmp	r1, #0
 800d87e:	d03b      	beq.n	800d8f8 <_strtod_l+0xa8>
 800d880:	2200      	movs	r2, #0
 800d882:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d884:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d886:	782a      	ldrb	r2, [r5, #0]
 800d888:	2a30      	cmp	r2, #48	@ 0x30
 800d88a:	f040 80b3 	bne.w	800d9f4 <_strtod_l+0x1a4>
 800d88e:	786a      	ldrb	r2, [r5, #1]
 800d890:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d894:	2a58      	cmp	r2, #88	@ 0x58
 800d896:	d16e      	bne.n	800d976 <_strtod_l+0x126>
 800d898:	9302      	str	r3, [sp, #8]
 800d89a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d89c:	9301      	str	r3, [sp, #4]
 800d89e:	ab1a      	add	r3, sp, #104	@ 0x68
 800d8a0:	9300      	str	r3, [sp, #0]
 800d8a2:	4a8e      	ldr	r2, [pc, #568]	@ (800dadc <_strtod_l+0x28c>)
 800d8a4:	9805      	ldr	r0, [sp, #20]
 800d8a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d8a8:	a919      	add	r1, sp, #100	@ 0x64
 800d8aa:	f001 f91b 	bl	800eae4 <__gethex>
 800d8ae:	f010 060f 	ands.w	r6, r0, #15
 800d8b2:	4604      	mov	r4, r0
 800d8b4:	d005      	beq.n	800d8c2 <_strtod_l+0x72>
 800d8b6:	2e06      	cmp	r6, #6
 800d8b8:	d128      	bne.n	800d90c <_strtod_l+0xbc>
 800d8ba:	3501      	adds	r5, #1
 800d8bc:	2300      	movs	r3, #0
 800d8be:	9519      	str	r5, [sp, #100]	@ 0x64
 800d8c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d8c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	f040 858e 	bne.w	800e3e6 <_strtod_l+0xb96>
 800d8ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d8cc:	b1cb      	cbz	r3, 800d902 <_strtod_l+0xb2>
 800d8ce:	4652      	mov	r2, sl
 800d8d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d8d4:	ec43 2b10 	vmov	d0, r2, r3
 800d8d8:	b01f      	add	sp, #124	@ 0x7c
 800d8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8de:	2920      	cmp	r1, #32
 800d8e0:	d1ce      	bne.n	800d880 <_strtod_l+0x30>
 800d8e2:	3201      	adds	r2, #1
 800d8e4:	e7c1      	b.n	800d86a <_strtod_l+0x1a>
 800d8e6:	292d      	cmp	r1, #45	@ 0x2d
 800d8e8:	d1ca      	bne.n	800d880 <_strtod_l+0x30>
 800d8ea:	2101      	movs	r1, #1
 800d8ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d8ee:	1c51      	adds	r1, r2, #1
 800d8f0:	9119      	str	r1, [sp, #100]	@ 0x64
 800d8f2:	7852      	ldrb	r2, [r2, #1]
 800d8f4:	2a00      	cmp	r2, #0
 800d8f6:	d1c5      	bne.n	800d884 <_strtod_l+0x34>
 800d8f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d8fa:	9419      	str	r4, [sp, #100]	@ 0x64
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	f040 8570 	bne.w	800e3e2 <_strtod_l+0xb92>
 800d902:	4652      	mov	r2, sl
 800d904:	465b      	mov	r3, fp
 800d906:	e7e5      	b.n	800d8d4 <_strtod_l+0x84>
 800d908:	2100      	movs	r1, #0
 800d90a:	e7ef      	b.n	800d8ec <_strtod_l+0x9c>
 800d90c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d90e:	b13a      	cbz	r2, 800d920 <_strtod_l+0xd0>
 800d910:	2135      	movs	r1, #53	@ 0x35
 800d912:	a81c      	add	r0, sp, #112	@ 0x70
 800d914:	f7ff ff3a 	bl	800d78c <__copybits>
 800d918:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d91a:	9805      	ldr	r0, [sp, #20]
 800d91c:	f7ff fb08 	bl	800cf30 <_Bfree>
 800d920:	3e01      	subs	r6, #1
 800d922:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d924:	2e04      	cmp	r6, #4
 800d926:	d806      	bhi.n	800d936 <_strtod_l+0xe6>
 800d928:	e8df f006 	tbb	[pc, r6]
 800d92c:	201d0314 	.word	0x201d0314
 800d930:	14          	.byte	0x14
 800d931:	00          	.byte	0x00
 800d932:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d936:	05e1      	lsls	r1, r4, #23
 800d938:	bf48      	it	mi
 800d93a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d93e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d942:	0d1b      	lsrs	r3, r3, #20
 800d944:	051b      	lsls	r3, r3, #20
 800d946:	2b00      	cmp	r3, #0
 800d948:	d1bb      	bne.n	800d8c2 <_strtod_l+0x72>
 800d94a:	f7fe fb23 	bl	800bf94 <__errno>
 800d94e:	2322      	movs	r3, #34	@ 0x22
 800d950:	6003      	str	r3, [r0, #0]
 800d952:	e7b6      	b.n	800d8c2 <_strtod_l+0x72>
 800d954:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d958:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d95c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d960:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d964:	e7e7      	b.n	800d936 <_strtod_l+0xe6>
 800d966:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800dae4 <_strtod_l+0x294>
 800d96a:	e7e4      	b.n	800d936 <_strtod_l+0xe6>
 800d96c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d970:	f04f 3aff 	mov.w	sl, #4294967295
 800d974:	e7df      	b.n	800d936 <_strtod_l+0xe6>
 800d976:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d978:	1c5a      	adds	r2, r3, #1
 800d97a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d97c:	785b      	ldrb	r3, [r3, #1]
 800d97e:	2b30      	cmp	r3, #48	@ 0x30
 800d980:	d0f9      	beq.n	800d976 <_strtod_l+0x126>
 800d982:	2b00      	cmp	r3, #0
 800d984:	d09d      	beq.n	800d8c2 <_strtod_l+0x72>
 800d986:	2301      	movs	r3, #1
 800d988:	9309      	str	r3, [sp, #36]	@ 0x24
 800d98a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d98c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d98e:	2300      	movs	r3, #0
 800d990:	9308      	str	r3, [sp, #32]
 800d992:	930a      	str	r3, [sp, #40]	@ 0x28
 800d994:	461f      	mov	r7, r3
 800d996:	220a      	movs	r2, #10
 800d998:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d99a:	7805      	ldrb	r5, [r0, #0]
 800d99c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d9a0:	b2d9      	uxtb	r1, r3
 800d9a2:	2909      	cmp	r1, #9
 800d9a4:	d928      	bls.n	800d9f8 <_strtod_l+0x1a8>
 800d9a6:	494e      	ldr	r1, [pc, #312]	@ (800dae0 <_strtod_l+0x290>)
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	f000 ffd5 	bl	800e958 <strncmp>
 800d9ae:	2800      	cmp	r0, #0
 800d9b0:	d032      	beq.n	800da18 <_strtod_l+0x1c8>
 800d9b2:	2000      	movs	r0, #0
 800d9b4:	462a      	mov	r2, r5
 800d9b6:	4681      	mov	r9, r0
 800d9b8:	463d      	mov	r5, r7
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	2a65      	cmp	r2, #101	@ 0x65
 800d9be:	d001      	beq.n	800d9c4 <_strtod_l+0x174>
 800d9c0:	2a45      	cmp	r2, #69	@ 0x45
 800d9c2:	d114      	bne.n	800d9ee <_strtod_l+0x19e>
 800d9c4:	b91d      	cbnz	r5, 800d9ce <_strtod_l+0x17e>
 800d9c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9c8:	4302      	orrs	r2, r0
 800d9ca:	d095      	beq.n	800d8f8 <_strtod_l+0xa8>
 800d9cc:	2500      	movs	r5, #0
 800d9ce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d9d0:	1c62      	adds	r2, r4, #1
 800d9d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d9d4:	7862      	ldrb	r2, [r4, #1]
 800d9d6:	2a2b      	cmp	r2, #43	@ 0x2b
 800d9d8:	d077      	beq.n	800daca <_strtod_l+0x27a>
 800d9da:	2a2d      	cmp	r2, #45	@ 0x2d
 800d9dc:	d07b      	beq.n	800dad6 <_strtod_l+0x286>
 800d9de:	f04f 0c00 	mov.w	ip, #0
 800d9e2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d9e6:	2909      	cmp	r1, #9
 800d9e8:	f240 8082 	bls.w	800daf0 <_strtod_l+0x2a0>
 800d9ec:	9419      	str	r4, [sp, #100]	@ 0x64
 800d9ee:	f04f 0800 	mov.w	r8, #0
 800d9f2:	e0a2      	b.n	800db3a <_strtod_l+0x2ea>
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	e7c7      	b.n	800d988 <_strtod_l+0x138>
 800d9f8:	2f08      	cmp	r7, #8
 800d9fa:	bfd5      	itete	le
 800d9fc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d9fe:	9908      	ldrgt	r1, [sp, #32]
 800da00:	fb02 3301 	mlale	r3, r2, r1, r3
 800da04:	fb02 3301 	mlagt	r3, r2, r1, r3
 800da08:	f100 0001 	add.w	r0, r0, #1
 800da0c:	bfd4      	ite	le
 800da0e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800da10:	9308      	strgt	r3, [sp, #32]
 800da12:	3701      	adds	r7, #1
 800da14:	9019      	str	r0, [sp, #100]	@ 0x64
 800da16:	e7bf      	b.n	800d998 <_strtod_l+0x148>
 800da18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da1a:	1c5a      	adds	r2, r3, #1
 800da1c:	9219      	str	r2, [sp, #100]	@ 0x64
 800da1e:	785a      	ldrb	r2, [r3, #1]
 800da20:	b37f      	cbz	r7, 800da82 <_strtod_l+0x232>
 800da22:	4681      	mov	r9, r0
 800da24:	463d      	mov	r5, r7
 800da26:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800da2a:	2b09      	cmp	r3, #9
 800da2c:	d912      	bls.n	800da54 <_strtod_l+0x204>
 800da2e:	2301      	movs	r3, #1
 800da30:	e7c4      	b.n	800d9bc <_strtod_l+0x16c>
 800da32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da34:	1c5a      	adds	r2, r3, #1
 800da36:	9219      	str	r2, [sp, #100]	@ 0x64
 800da38:	785a      	ldrb	r2, [r3, #1]
 800da3a:	3001      	adds	r0, #1
 800da3c:	2a30      	cmp	r2, #48	@ 0x30
 800da3e:	d0f8      	beq.n	800da32 <_strtod_l+0x1e2>
 800da40:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800da44:	2b08      	cmp	r3, #8
 800da46:	f200 84d3 	bhi.w	800e3f0 <_strtod_l+0xba0>
 800da4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da4c:	930c      	str	r3, [sp, #48]	@ 0x30
 800da4e:	4681      	mov	r9, r0
 800da50:	2000      	movs	r0, #0
 800da52:	4605      	mov	r5, r0
 800da54:	3a30      	subs	r2, #48	@ 0x30
 800da56:	f100 0301 	add.w	r3, r0, #1
 800da5a:	d02a      	beq.n	800dab2 <_strtod_l+0x262>
 800da5c:	4499      	add	r9, r3
 800da5e:	eb00 0c05 	add.w	ip, r0, r5
 800da62:	462b      	mov	r3, r5
 800da64:	210a      	movs	r1, #10
 800da66:	4563      	cmp	r3, ip
 800da68:	d10d      	bne.n	800da86 <_strtod_l+0x236>
 800da6a:	1c69      	adds	r1, r5, #1
 800da6c:	4401      	add	r1, r0
 800da6e:	4428      	add	r0, r5
 800da70:	2808      	cmp	r0, #8
 800da72:	dc16      	bgt.n	800daa2 <_strtod_l+0x252>
 800da74:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800da76:	230a      	movs	r3, #10
 800da78:	fb03 2300 	mla	r3, r3, r0, r2
 800da7c:	930a      	str	r3, [sp, #40]	@ 0x28
 800da7e:	2300      	movs	r3, #0
 800da80:	e018      	b.n	800dab4 <_strtod_l+0x264>
 800da82:	4638      	mov	r0, r7
 800da84:	e7da      	b.n	800da3c <_strtod_l+0x1ec>
 800da86:	2b08      	cmp	r3, #8
 800da88:	f103 0301 	add.w	r3, r3, #1
 800da8c:	dc03      	bgt.n	800da96 <_strtod_l+0x246>
 800da8e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800da90:	434e      	muls	r6, r1
 800da92:	960a      	str	r6, [sp, #40]	@ 0x28
 800da94:	e7e7      	b.n	800da66 <_strtod_l+0x216>
 800da96:	2b10      	cmp	r3, #16
 800da98:	bfde      	ittt	le
 800da9a:	9e08      	ldrle	r6, [sp, #32]
 800da9c:	434e      	mulle	r6, r1
 800da9e:	9608      	strle	r6, [sp, #32]
 800daa0:	e7e1      	b.n	800da66 <_strtod_l+0x216>
 800daa2:	280f      	cmp	r0, #15
 800daa4:	dceb      	bgt.n	800da7e <_strtod_l+0x22e>
 800daa6:	9808      	ldr	r0, [sp, #32]
 800daa8:	230a      	movs	r3, #10
 800daaa:	fb03 2300 	mla	r3, r3, r0, r2
 800daae:	9308      	str	r3, [sp, #32]
 800dab0:	e7e5      	b.n	800da7e <_strtod_l+0x22e>
 800dab2:	4629      	mov	r1, r5
 800dab4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dab6:	1c50      	adds	r0, r2, #1
 800dab8:	9019      	str	r0, [sp, #100]	@ 0x64
 800daba:	7852      	ldrb	r2, [r2, #1]
 800dabc:	4618      	mov	r0, r3
 800dabe:	460d      	mov	r5, r1
 800dac0:	e7b1      	b.n	800da26 <_strtod_l+0x1d6>
 800dac2:	f04f 0900 	mov.w	r9, #0
 800dac6:	2301      	movs	r3, #1
 800dac8:	e77d      	b.n	800d9c6 <_strtod_l+0x176>
 800daca:	f04f 0c00 	mov.w	ip, #0
 800dace:	1ca2      	adds	r2, r4, #2
 800dad0:	9219      	str	r2, [sp, #100]	@ 0x64
 800dad2:	78a2      	ldrb	r2, [r4, #2]
 800dad4:	e785      	b.n	800d9e2 <_strtod_l+0x192>
 800dad6:	f04f 0c01 	mov.w	ip, #1
 800dada:	e7f8      	b.n	800dace <_strtod_l+0x27e>
 800dadc:	0800fdc8 	.word	0x0800fdc8
 800dae0:	0800fdb0 	.word	0x0800fdb0
 800dae4:	7ff00000 	.word	0x7ff00000
 800dae8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800daea:	1c51      	adds	r1, r2, #1
 800daec:	9119      	str	r1, [sp, #100]	@ 0x64
 800daee:	7852      	ldrb	r2, [r2, #1]
 800daf0:	2a30      	cmp	r2, #48	@ 0x30
 800daf2:	d0f9      	beq.n	800dae8 <_strtod_l+0x298>
 800daf4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800daf8:	2908      	cmp	r1, #8
 800dafa:	f63f af78 	bhi.w	800d9ee <_strtod_l+0x19e>
 800dafe:	3a30      	subs	r2, #48	@ 0x30
 800db00:	920e      	str	r2, [sp, #56]	@ 0x38
 800db02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800db04:	920f      	str	r2, [sp, #60]	@ 0x3c
 800db06:	f04f 080a 	mov.w	r8, #10
 800db0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800db0c:	1c56      	adds	r6, r2, #1
 800db0e:	9619      	str	r6, [sp, #100]	@ 0x64
 800db10:	7852      	ldrb	r2, [r2, #1]
 800db12:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800db16:	f1be 0f09 	cmp.w	lr, #9
 800db1a:	d939      	bls.n	800db90 <_strtod_l+0x340>
 800db1c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800db1e:	1a76      	subs	r6, r6, r1
 800db20:	2e08      	cmp	r6, #8
 800db22:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800db26:	dc03      	bgt.n	800db30 <_strtod_l+0x2e0>
 800db28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800db2a:	4588      	cmp	r8, r1
 800db2c:	bfa8      	it	ge
 800db2e:	4688      	movge	r8, r1
 800db30:	f1bc 0f00 	cmp.w	ip, #0
 800db34:	d001      	beq.n	800db3a <_strtod_l+0x2ea>
 800db36:	f1c8 0800 	rsb	r8, r8, #0
 800db3a:	2d00      	cmp	r5, #0
 800db3c:	d14e      	bne.n	800dbdc <_strtod_l+0x38c>
 800db3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800db40:	4308      	orrs	r0, r1
 800db42:	f47f aebe 	bne.w	800d8c2 <_strtod_l+0x72>
 800db46:	2b00      	cmp	r3, #0
 800db48:	f47f aed6 	bne.w	800d8f8 <_strtod_l+0xa8>
 800db4c:	2a69      	cmp	r2, #105	@ 0x69
 800db4e:	d028      	beq.n	800dba2 <_strtod_l+0x352>
 800db50:	dc25      	bgt.n	800db9e <_strtod_l+0x34e>
 800db52:	2a49      	cmp	r2, #73	@ 0x49
 800db54:	d025      	beq.n	800dba2 <_strtod_l+0x352>
 800db56:	2a4e      	cmp	r2, #78	@ 0x4e
 800db58:	f47f aece 	bne.w	800d8f8 <_strtod_l+0xa8>
 800db5c:	499b      	ldr	r1, [pc, #620]	@ (800ddcc <_strtod_l+0x57c>)
 800db5e:	a819      	add	r0, sp, #100	@ 0x64
 800db60:	f001 f9e2 	bl	800ef28 <__match>
 800db64:	2800      	cmp	r0, #0
 800db66:	f43f aec7 	beq.w	800d8f8 <_strtod_l+0xa8>
 800db6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	2b28      	cmp	r3, #40	@ 0x28
 800db70:	d12e      	bne.n	800dbd0 <_strtod_l+0x380>
 800db72:	4997      	ldr	r1, [pc, #604]	@ (800ddd0 <_strtod_l+0x580>)
 800db74:	aa1c      	add	r2, sp, #112	@ 0x70
 800db76:	a819      	add	r0, sp, #100	@ 0x64
 800db78:	f001 f9ea 	bl	800ef50 <__hexnan>
 800db7c:	2805      	cmp	r0, #5
 800db7e:	d127      	bne.n	800dbd0 <_strtod_l+0x380>
 800db80:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800db82:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800db86:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800db8a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800db8e:	e698      	b.n	800d8c2 <_strtod_l+0x72>
 800db90:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800db92:	fb08 2101 	mla	r1, r8, r1, r2
 800db96:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800db9a:	920e      	str	r2, [sp, #56]	@ 0x38
 800db9c:	e7b5      	b.n	800db0a <_strtod_l+0x2ba>
 800db9e:	2a6e      	cmp	r2, #110	@ 0x6e
 800dba0:	e7da      	b.n	800db58 <_strtod_l+0x308>
 800dba2:	498c      	ldr	r1, [pc, #560]	@ (800ddd4 <_strtod_l+0x584>)
 800dba4:	a819      	add	r0, sp, #100	@ 0x64
 800dba6:	f001 f9bf 	bl	800ef28 <__match>
 800dbaa:	2800      	cmp	r0, #0
 800dbac:	f43f aea4 	beq.w	800d8f8 <_strtod_l+0xa8>
 800dbb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dbb2:	4989      	ldr	r1, [pc, #548]	@ (800ddd8 <_strtod_l+0x588>)
 800dbb4:	3b01      	subs	r3, #1
 800dbb6:	a819      	add	r0, sp, #100	@ 0x64
 800dbb8:	9319      	str	r3, [sp, #100]	@ 0x64
 800dbba:	f001 f9b5 	bl	800ef28 <__match>
 800dbbe:	b910      	cbnz	r0, 800dbc6 <_strtod_l+0x376>
 800dbc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	9319      	str	r3, [sp, #100]	@ 0x64
 800dbc6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800dde8 <_strtod_l+0x598>
 800dbca:	f04f 0a00 	mov.w	sl, #0
 800dbce:	e678      	b.n	800d8c2 <_strtod_l+0x72>
 800dbd0:	4882      	ldr	r0, [pc, #520]	@ (800dddc <_strtod_l+0x58c>)
 800dbd2:	f000 fee5 	bl	800e9a0 <nan>
 800dbd6:	ec5b ab10 	vmov	sl, fp, d0
 800dbda:	e672      	b.n	800d8c2 <_strtod_l+0x72>
 800dbdc:	eba8 0309 	sub.w	r3, r8, r9
 800dbe0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dbe2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbe4:	2f00      	cmp	r7, #0
 800dbe6:	bf08      	it	eq
 800dbe8:	462f      	moveq	r7, r5
 800dbea:	2d10      	cmp	r5, #16
 800dbec:	462c      	mov	r4, r5
 800dbee:	bfa8      	it	ge
 800dbf0:	2410      	movge	r4, #16
 800dbf2:	f7f2 fcb7 	bl	8000564 <__aeabi_ui2d>
 800dbf6:	2d09      	cmp	r5, #9
 800dbf8:	4682      	mov	sl, r0
 800dbfa:	468b      	mov	fp, r1
 800dbfc:	dc13      	bgt.n	800dc26 <_strtod_l+0x3d6>
 800dbfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	f43f ae5e 	beq.w	800d8c2 <_strtod_l+0x72>
 800dc06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc08:	dd78      	ble.n	800dcfc <_strtod_l+0x4ac>
 800dc0a:	2b16      	cmp	r3, #22
 800dc0c:	dc5f      	bgt.n	800dcce <_strtod_l+0x47e>
 800dc0e:	4974      	ldr	r1, [pc, #464]	@ (800dde0 <_strtod_l+0x590>)
 800dc10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dc14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc18:	4652      	mov	r2, sl
 800dc1a:	465b      	mov	r3, fp
 800dc1c:	f7f2 fd1c 	bl	8000658 <__aeabi_dmul>
 800dc20:	4682      	mov	sl, r0
 800dc22:	468b      	mov	fp, r1
 800dc24:	e64d      	b.n	800d8c2 <_strtod_l+0x72>
 800dc26:	4b6e      	ldr	r3, [pc, #440]	@ (800dde0 <_strtod_l+0x590>)
 800dc28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc2c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800dc30:	f7f2 fd12 	bl	8000658 <__aeabi_dmul>
 800dc34:	4682      	mov	sl, r0
 800dc36:	9808      	ldr	r0, [sp, #32]
 800dc38:	468b      	mov	fp, r1
 800dc3a:	f7f2 fc93 	bl	8000564 <__aeabi_ui2d>
 800dc3e:	4602      	mov	r2, r0
 800dc40:	460b      	mov	r3, r1
 800dc42:	4650      	mov	r0, sl
 800dc44:	4659      	mov	r1, fp
 800dc46:	f7f2 fb51 	bl	80002ec <__adddf3>
 800dc4a:	2d0f      	cmp	r5, #15
 800dc4c:	4682      	mov	sl, r0
 800dc4e:	468b      	mov	fp, r1
 800dc50:	ddd5      	ble.n	800dbfe <_strtod_l+0x3ae>
 800dc52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc54:	1b2c      	subs	r4, r5, r4
 800dc56:	441c      	add	r4, r3
 800dc58:	2c00      	cmp	r4, #0
 800dc5a:	f340 8096 	ble.w	800dd8a <_strtod_l+0x53a>
 800dc5e:	f014 030f 	ands.w	r3, r4, #15
 800dc62:	d00a      	beq.n	800dc7a <_strtod_l+0x42a>
 800dc64:	495e      	ldr	r1, [pc, #376]	@ (800dde0 <_strtod_l+0x590>)
 800dc66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dc6a:	4652      	mov	r2, sl
 800dc6c:	465b      	mov	r3, fp
 800dc6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc72:	f7f2 fcf1 	bl	8000658 <__aeabi_dmul>
 800dc76:	4682      	mov	sl, r0
 800dc78:	468b      	mov	fp, r1
 800dc7a:	f034 040f 	bics.w	r4, r4, #15
 800dc7e:	d073      	beq.n	800dd68 <_strtod_l+0x518>
 800dc80:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800dc84:	dd48      	ble.n	800dd18 <_strtod_l+0x4c8>
 800dc86:	2400      	movs	r4, #0
 800dc88:	46a0      	mov	r8, r4
 800dc8a:	940a      	str	r4, [sp, #40]	@ 0x28
 800dc8c:	46a1      	mov	r9, r4
 800dc8e:	9a05      	ldr	r2, [sp, #20]
 800dc90:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800dde8 <_strtod_l+0x598>
 800dc94:	2322      	movs	r3, #34	@ 0x22
 800dc96:	6013      	str	r3, [r2, #0]
 800dc98:	f04f 0a00 	mov.w	sl, #0
 800dc9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	f43f ae0f 	beq.w	800d8c2 <_strtod_l+0x72>
 800dca4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dca6:	9805      	ldr	r0, [sp, #20]
 800dca8:	f7ff f942 	bl	800cf30 <_Bfree>
 800dcac:	9805      	ldr	r0, [sp, #20]
 800dcae:	4649      	mov	r1, r9
 800dcb0:	f7ff f93e 	bl	800cf30 <_Bfree>
 800dcb4:	9805      	ldr	r0, [sp, #20]
 800dcb6:	4641      	mov	r1, r8
 800dcb8:	f7ff f93a 	bl	800cf30 <_Bfree>
 800dcbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dcbe:	9805      	ldr	r0, [sp, #20]
 800dcc0:	f7ff f936 	bl	800cf30 <_Bfree>
 800dcc4:	9805      	ldr	r0, [sp, #20]
 800dcc6:	4621      	mov	r1, r4
 800dcc8:	f7ff f932 	bl	800cf30 <_Bfree>
 800dccc:	e5f9      	b.n	800d8c2 <_strtod_l+0x72>
 800dcce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dcd0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	dbbc      	blt.n	800dc52 <_strtod_l+0x402>
 800dcd8:	4c41      	ldr	r4, [pc, #260]	@ (800dde0 <_strtod_l+0x590>)
 800dcda:	f1c5 050f 	rsb	r5, r5, #15
 800dcde:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dce2:	4652      	mov	r2, sl
 800dce4:	465b      	mov	r3, fp
 800dce6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcea:	f7f2 fcb5 	bl	8000658 <__aeabi_dmul>
 800dcee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcf0:	1b5d      	subs	r5, r3, r5
 800dcf2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800dcf6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dcfa:	e78f      	b.n	800dc1c <_strtod_l+0x3cc>
 800dcfc:	3316      	adds	r3, #22
 800dcfe:	dba8      	blt.n	800dc52 <_strtod_l+0x402>
 800dd00:	4b37      	ldr	r3, [pc, #220]	@ (800dde0 <_strtod_l+0x590>)
 800dd02:	eba9 0808 	sub.w	r8, r9, r8
 800dd06:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800dd0a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800dd0e:	4650      	mov	r0, sl
 800dd10:	4659      	mov	r1, fp
 800dd12:	f7f2 fdcb 	bl	80008ac <__aeabi_ddiv>
 800dd16:	e783      	b.n	800dc20 <_strtod_l+0x3d0>
 800dd18:	4b32      	ldr	r3, [pc, #200]	@ (800dde4 <_strtod_l+0x594>)
 800dd1a:	9308      	str	r3, [sp, #32]
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	1124      	asrs	r4, r4, #4
 800dd20:	4650      	mov	r0, sl
 800dd22:	4659      	mov	r1, fp
 800dd24:	461e      	mov	r6, r3
 800dd26:	2c01      	cmp	r4, #1
 800dd28:	dc21      	bgt.n	800dd6e <_strtod_l+0x51e>
 800dd2a:	b10b      	cbz	r3, 800dd30 <_strtod_l+0x4e0>
 800dd2c:	4682      	mov	sl, r0
 800dd2e:	468b      	mov	fp, r1
 800dd30:	492c      	ldr	r1, [pc, #176]	@ (800dde4 <_strtod_l+0x594>)
 800dd32:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800dd36:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800dd3a:	4652      	mov	r2, sl
 800dd3c:	465b      	mov	r3, fp
 800dd3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd42:	f7f2 fc89 	bl	8000658 <__aeabi_dmul>
 800dd46:	4b28      	ldr	r3, [pc, #160]	@ (800dde8 <_strtod_l+0x598>)
 800dd48:	460a      	mov	r2, r1
 800dd4a:	400b      	ands	r3, r1
 800dd4c:	4927      	ldr	r1, [pc, #156]	@ (800ddec <_strtod_l+0x59c>)
 800dd4e:	428b      	cmp	r3, r1
 800dd50:	4682      	mov	sl, r0
 800dd52:	d898      	bhi.n	800dc86 <_strtod_l+0x436>
 800dd54:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800dd58:	428b      	cmp	r3, r1
 800dd5a:	bf86      	itte	hi
 800dd5c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ddf0 <_strtod_l+0x5a0>
 800dd60:	f04f 3aff 	movhi.w	sl, #4294967295
 800dd64:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800dd68:	2300      	movs	r3, #0
 800dd6a:	9308      	str	r3, [sp, #32]
 800dd6c:	e07a      	b.n	800de64 <_strtod_l+0x614>
 800dd6e:	07e2      	lsls	r2, r4, #31
 800dd70:	d505      	bpl.n	800dd7e <_strtod_l+0x52e>
 800dd72:	9b08      	ldr	r3, [sp, #32]
 800dd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd78:	f7f2 fc6e 	bl	8000658 <__aeabi_dmul>
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	9a08      	ldr	r2, [sp, #32]
 800dd80:	3208      	adds	r2, #8
 800dd82:	3601      	adds	r6, #1
 800dd84:	1064      	asrs	r4, r4, #1
 800dd86:	9208      	str	r2, [sp, #32]
 800dd88:	e7cd      	b.n	800dd26 <_strtod_l+0x4d6>
 800dd8a:	d0ed      	beq.n	800dd68 <_strtod_l+0x518>
 800dd8c:	4264      	negs	r4, r4
 800dd8e:	f014 020f 	ands.w	r2, r4, #15
 800dd92:	d00a      	beq.n	800ddaa <_strtod_l+0x55a>
 800dd94:	4b12      	ldr	r3, [pc, #72]	@ (800dde0 <_strtod_l+0x590>)
 800dd96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd9a:	4650      	mov	r0, sl
 800dd9c:	4659      	mov	r1, fp
 800dd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda2:	f7f2 fd83 	bl	80008ac <__aeabi_ddiv>
 800dda6:	4682      	mov	sl, r0
 800dda8:	468b      	mov	fp, r1
 800ddaa:	1124      	asrs	r4, r4, #4
 800ddac:	d0dc      	beq.n	800dd68 <_strtod_l+0x518>
 800ddae:	2c1f      	cmp	r4, #31
 800ddb0:	dd20      	ble.n	800ddf4 <_strtod_l+0x5a4>
 800ddb2:	2400      	movs	r4, #0
 800ddb4:	46a0      	mov	r8, r4
 800ddb6:	940a      	str	r4, [sp, #40]	@ 0x28
 800ddb8:	46a1      	mov	r9, r4
 800ddba:	9a05      	ldr	r2, [sp, #20]
 800ddbc:	2322      	movs	r3, #34	@ 0x22
 800ddbe:	f04f 0a00 	mov.w	sl, #0
 800ddc2:	f04f 0b00 	mov.w	fp, #0
 800ddc6:	6013      	str	r3, [r2, #0]
 800ddc8:	e768      	b.n	800dc9c <_strtod_l+0x44c>
 800ddca:	bf00      	nop
 800ddcc:	0800fb9d 	.word	0x0800fb9d
 800ddd0:	0800fdb4 	.word	0x0800fdb4
 800ddd4:	0800fb95 	.word	0x0800fb95
 800ddd8:	0800fbcc 	.word	0x0800fbcc
 800dddc:	0800ff5d 	.word	0x0800ff5d
 800dde0:	0800fce8 	.word	0x0800fce8
 800dde4:	0800fcc0 	.word	0x0800fcc0
 800dde8:	7ff00000 	.word	0x7ff00000
 800ddec:	7ca00000 	.word	0x7ca00000
 800ddf0:	7fefffff 	.word	0x7fefffff
 800ddf4:	f014 0310 	ands.w	r3, r4, #16
 800ddf8:	bf18      	it	ne
 800ddfa:	236a      	movne	r3, #106	@ 0x6a
 800ddfc:	4ea9      	ldr	r6, [pc, #676]	@ (800e0a4 <_strtod_l+0x854>)
 800ddfe:	9308      	str	r3, [sp, #32]
 800de00:	4650      	mov	r0, sl
 800de02:	4659      	mov	r1, fp
 800de04:	2300      	movs	r3, #0
 800de06:	07e2      	lsls	r2, r4, #31
 800de08:	d504      	bpl.n	800de14 <_strtod_l+0x5c4>
 800de0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800de0e:	f7f2 fc23 	bl	8000658 <__aeabi_dmul>
 800de12:	2301      	movs	r3, #1
 800de14:	1064      	asrs	r4, r4, #1
 800de16:	f106 0608 	add.w	r6, r6, #8
 800de1a:	d1f4      	bne.n	800de06 <_strtod_l+0x5b6>
 800de1c:	b10b      	cbz	r3, 800de22 <_strtod_l+0x5d2>
 800de1e:	4682      	mov	sl, r0
 800de20:	468b      	mov	fp, r1
 800de22:	9b08      	ldr	r3, [sp, #32]
 800de24:	b1b3      	cbz	r3, 800de54 <_strtod_l+0x604>
 800de26:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800de2a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800de2e:	2b00      	cmp	r3, #0
 800de30:	4659      	mov	r1, fp
 800de32:	dd0f      	ble.n	800de54 <_strtod_l+0x604>
 800de34:	2b1f      	cmp	r3, #31
 800de36:	dd55      	ble.n	800dee4 <_strtod_l+0x694>
 800de38:	2b34      	cmp	r3, #52	@ 0x34
 800de3a:	bfde      	ittt	le
 800de3c:	f04f 33ff 	movle.w	r3, #4294967295
 800de40:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800de44:	4093      	lslle	r3, r2
 800de46:	f04f 0a00 	mov.w	sl, #0
 800de4a:	bfcc      	ite	gt
 800de4c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800de50:	ea03 0b01 	andle.w	fp, r3, r1
 800de54:	2200      	movs	r2, #0
 800de56:	2300      	movs	r3, #0
 800de58:	4650      	mov	r0, sl
 800de5a:	4659      	mov	r1, fp
 800de5c:	f7f2 fe64 	bl	8000b28 <__aeabi_dcmpeq>
 800de60:	2800      	cmp	r0, #0
 800de62:	d1a6      	bne.n	800ddb2 <_strtod_l+0x562>
 800de64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de66:	9300      	str	r3, [sp, #0]
 800de68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800de6a:	9805      	ldr	r0, [sp, #20]
 800de6c:	462b      	mov	r3, r5
 800de6e:	463a      	mov	r2, r7
 800de70:	f7ff f8c6 	bl	800d000 <__s2b>
 800de74:	900a      	str	r0, [sp, #40]	@ 0x28
 800de76:	2800      	cmp	r0, #0
 800de78:	f43f af05 	beq.w	800dc86 <_strtod_l+0x436>
 800de7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de7e:	2a00      	cmp	r2, #0
 800de80:	eba9 0308 	sub.w	r3, r9, r8
 800de84:	bfa8      	it	ge
 800de86:	2300      	movge	r3, #0
 800de88:	9312      	str	r3, [sp, #72]	@ 0x48
 800de8a:	2400      	movs	r4, #0
 800de8c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800de90:	9316      	str	r3, [sp, #88]	@ 0x58
 800de92:	46a0      	mov	r8, r4
 800de94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de96:	9805      	ldr	r0, [sp, #20]
 800de98:	6859      	ldr	r1, [r3, #4]
 800de9a:	f7ff f809 	bl	800ceb0 <_Balloc>
 800de9e:	4681      	mov	r9, r0
 800dea0:	2800      	cmp	r0, #0
 800dea2:	f43f aef4 	beq.w	800dc8e <_strtod_l+0x43e>
 800dea6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dea8:	691a      	ldr	r2, [r3, #16]
 800deaa:	3202      	adds	r2, #2
 800deac:	f103 010c 	add.w	r1, r3, #12
 800deb0:	0092      	lsls	r2, r2, #2
 800deb2:	300c      	adds	r0, #12
 800deb4:	f7fe f89b 	bl	800bfee <memcpy>
 800deb8:	ec4b ab10 	vmov	d0, sl, fp
 800debc:	9805      	ldr	r0, [sp, #20]
 800debe:	aa1c      	add	r2, sp, #112	@ 0x70
 800dec0:	a91b      	add	r1, sp, #108	@ 0x6c
 800dec2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800dec6:	f7ff fbd7 	bl	800d678 <__d2b>
 800deca:	901a      	str	r0, [sp, #104]	@ 0x68
 800decc:	2800      	cmp	r0, #0
 800dece:	f43f aede 	beq.w	800dc8e <_strtod_l+0x43e>
 800ded2:	9805      	ldr	r0, [sp, #20]
 800ded4:	2101      	movs	r1, #1
 800ded6:	f7ff f929 	bl	800d12c <__i2b>
 800deda:	4680      	mov	r8, r0
 800dedc:	b948      	cbnz	r0, 800def2 <_strtod_l+0x6a2>
 800dede:	f04f 0800 	mov.w	r8, #0
 800dee2:	e6d4      	b.n	800dc8e <_strtod_l+0x43e>
 800dee4:	f04f 32ff 	mov.w	r2, #4294967295
 800dee8:	fa02 f303 	lsl.w	r3, r2, r3
 800deec:	ea03 0a0a 	and.w	sl, r3, sl
 800def0:	e7b0      	b.n	800de54 <_strtod_l+0x604>
 800def2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800def4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800def6:	2d00      	cmp	r5, #0
 800def8:	bfab      	itete	ge
 800defa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800defc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800defe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800df00:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800df02:	bfac      	ite	ge
 800df04:	18ef      	addge	r7, r5, r3
 800df06:	1b5e      	sublt	r6, r3, r5
 800df08:	9b08      	ldr	r3, [sp, #32]
 800df0a:	1aed      	subs	r5, r5, r3
 800df0c:	4415      	add	r5, r2
 800df0e:	4b66      	ldr	r3, [pc, #408]	@ (800e0a8 <_strtod_l+0x858>)
 800df10:	3d01      	subs	r5, #1
 800df12:	429d      	cmp	r5, r3
 800df14:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800df18:	da50      	bge.n	800dfbc <_strtod_l+0x76c>
 800df1a:	1b5b      	subs	r3, r3, r5
 800df1c:	2b1f      	cmp	r3, #31
 800df1e:	eba2 0203 	sub.w	r2, r2, r3
 800df22:	f04f 0101 	mov.w	r1, #1
 800df26:	dc3d      	bgt.n	800dfa4 <_strtod_l+0x754>
 800df28:	fa01 f303 	lsl.w	r3, r1, r3
 800df2c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df2e:	2300      	movs	r3, #0
 800df30:	9310      	str	r3, [sp, #64]	@ 0x40
 800df32:	18bd      	adds	r5, r7, r2
 800df34:	9b08      	ldr	r3, [sp, #32]
 800df36:	42af      	cmp	r7, r5
 800df38:	4416      	add	r6, r2
 800df3a:	441e      	add	r6, r3
 800df3c:	463b      	mov	r3, r7
 800df3e:	bfa8      	it	ge
 800df40:	462b      	movge	r3, r5
 800df42:	42b3      	cmp	r3, r6
 800df44:	bfa8      	it	ge
 800df46:	4633      	movge	r3, r6
 800df48:	2b00      	cmp	r3, #0
 800df4a:	bfc2      	ittt	gt
 800df4c:	1aed      	subgt	r5, r5, r3
 800df4e:	1af6      	subgt	r6, r6, r3
 800df50:	1aff      	subgt	r7, r7, r3
 800df52:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800df54:	2b00      	cmp	r3, #0
 800df56:	dd16      	ble.n	800df86 <_strtod_l+0x736>
 800df58:	4641      	mov	r1, r8
 800df5a:	9805      	ldr	r0, [sp, #20]
 800df5c:	461a      	mov	r2, r3
 800df5e:	f7ff f9a5 	bl	800d2ac <__pow5mult>
 800df62:	4680      	mov	r8, r0
 800df64:	2800      	cmp	r0, #0
 800df66:	d0ba      	beq.n	800dede <_strtod_l+0x68e>
 800df68:	4601      	mov	r1, r0
 800df6a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800df6c:	9805      	ldr	r0, [sp, #20]
 800df6e:	f7ff f8f3 	bl	800d158 <__multiply>
 800df72:	900e      	str	r0, [sp, #56]	@ 0x38
 800df74:	2800      	cmp	r0, #0
 800df76:	f43f ae8a 	beq.w	800dc8e <_strtod_l+0x43e>
 800df7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800df7c:	9805      	ldr	r0, [sp, #20]
 800df7e:	f7fe ffd7 	bl	800cf30 <_Bfree>
 800df82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df84:	931a      	str	r3, [sp, #104]	@ 0x68
 800df86:	2d00      	cmp	r5, #0
 800df88:	dc1d      	bgt.n	800dfc6 <_strtod_l+0x776>
 800df8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	dd23      	ble.n	800dfd8 <_strtod_l+0x788>
 800df90:	4649      	mov	r1, r9
 800df92:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800df94:	9805      	ldr	r0, [sp, #20]
 800df96:	f7ff f989 	bl	800d2ac <__pow5mult>
 800df9a:	4681      	mov	r9, r0
 800df9c:	b9e0      	cbnz	r0, 800dfd8 <_strtod_l+0x788>
 800df9e:	f04f 0900 	mov.w	r9, #0
 800dfa2:	e674      	b.n	800dc8e <_strtod_l+0x43e>
 800dfa4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800dfa8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800dfac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800dfb0:	35e2      	adds	r5, #226	@ 0xe2
 800dfb2:	fa01 f305 	lsl.w	r3, r1, r5
 800dfb6:	9310      	str	r3, [sp, #64]	@ 0x40
 800dfb8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800dfba:	e7ba      	b.n	800df32 <_strtod_l+0x6e2>
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	9310      	str	r3, [sp, #64]	@ 0x40
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dfc4:	e7b5      	b.n	800df32 <_strtod_l+0x6e2>
 800dfc6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dfc8:	9805      	ldr	r0, [sp, #20]
 800dfca:	462a      	mov	r2, r5
 800dfcc:	f7ff f9c8 	bl	800d360 <__lshift>
 800dfd0:	901a      	str	r0, [sp, #104]	@ 0x68
 800dfd2:	2800      	cmp	r0, #0
 800dfd4:	d1d9      	bne.n	800df8a <_strtod_l+0x73a>
 800dfd6:	e65a      	b.n	800dc8e <_strtod_l+0x43e>
 800dfd8:	2e00      	cmp	r6, #0
 800dfda:	dd07      	ble.n	800dfec <_strtod_l+0x79c>
 800dfdc:	4649      	mov	r1, r9
 800dfde:	9805      	ldr	r0, [sp, #20]
 800dfe0:	4632      	mov	r2, r6
 800dfe2:	f7ff f9bd 	bl	800d360 <__lshift>
 800dfe6:	4681      	mov	r9, r0
 800dfe8:	2800      	cmp	r0, #0
 800dfea:	d0d8      	beq.n	800df9e <_strtod_l+0x74e>
 800dfec:	2f00      	cmp	r7, #0
 800dfee:	dd08      	ble.n	800e002 <_strtod_l+0x7b2>
 800dff0:	4641      	mov	r1, r8
 800dff2:	9805      	ldr	r0, [sp, #20]
 800dff4:	463a      	mov	r2, r7
 800dff6:	f7ff f9b3 	bl	800d360 <__lshift>
 800dffa:	4680      	mov	r8, r0
 800dffc:	2800      	cmp	r0, #0
 800dffe:	f43f ae46 	beq.w	800dc8e <_strtod_l+0x43e>
 800e002:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e004:	9805      	ldr	r0, [sp, #20]
 800e006:	464a      	mov	r2, r9
 800e008:	f7ff fa32 	bl	800d470 <__mdiff>
 800e00c:	4604      	mov	r4, r0
 800e00e:	2800      	cmp	r0, #0
 800e010:	f43f ae3d 	beq.w	800dc8e <_strtod_l+0x43e>
 800e014:	68c3      	ldr	r3, [r0, #12]
 800e016:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e018:	2300      	movs	r3, #0
 800e01a:	60c3      	str	r3, [r0, #12]
 800e01c:	4641      	mov	r1, r8
 800e01e:	f7ff fa0b 	bl	800d438 <__mcmp>
 800e022:	2800      	cmp	r0, #0
 800e024:	da46      	bge.n	800e0b4 <_strtod_l+0x864>
 800e026:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e028:	ea53 030a 	orrs.w	r3, r3, sl
 800e02c:	d16c      	bne.n	800e108 <_strtod_l+0x8b8>
 800e02e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e032:	2b00      	cmp	r3, #0
 800e034:	d168      	bne.n	800e108 <_strtod_l+0x8b8>
 800e036:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e03a:	0d1b      	lsrs	r3, r3, #20
 800e03c:	051b      	lsls	r3, r3, #20
 800e03e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e042:	d961      	bls.n	800e108 <_strtod_l+0x8b8>
 800e044:	6963      	ldr	r3, [r4, #20]
 800e046:	b913      	cbnz	r3, 800e04e <_strtod_l+0x7fe>
 800e048:	6923      	ldr	r3, [r4, #16]
 800e04a:	2b01      	cmp	r3, #1
 800e04c:	dd5c      	ble.n	800e108 <_strtod_l+0x8b8>
 800e04e:	4621      	mov	r1, r4
 800e050:	2201      	movs	r2, #1
 800e052:	9805      	ldr	r0, [sp, #20]
 800e054:	f7ff f984 	bl	800d360 <__lshift>
 800e058:	4641      	mov	r1, r8
 800e05a:	4604      	mov	r4, r0
 800e05c:	f7ff f9ec 	bl	800d438 <__mcmp>
 800e060:	2800      	cmp	r0, #0
 800e062:	dd51      	ble.n	800e108 <_strtod_l+0x8b8>
 800e064:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e068:	9a08      	ldr	r2, [sp, #32]
 800e06a:	0d1b      	lsrs	r3, r3, #20
 800e06c:	051b      	lsls	r3, r3, #20
 800e06e:	2a00      	cmp	r2, #0
 800e070:	d06b      	beq.n	800e14a <_strtod_l+0x8fa>
 800e072:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e076:	d868      	bhi.n	800e14a <_strtod_l+0x8fa>
 800e078:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e07c:	f67f ae9d 	bls.w	800ddba <_strtod_l+0x56a>
 800e080:	4b0a      	ldr	r3, [pc, #40]	@ (800e0ac <_strtod_l+0x85c>)
 800e082:	4650      	mov	r0, sl
 800e084:	4659      	mov	r1, fp
 800e086:	2200      	movs	r2, #0
 800e088:	f7f2 fae6 	bl	8000658 <__aeabi_dmul>
 800e08c:	4b08      	ldr	r3, [pc, #32]	@ (800e0b0 <_strtod_l+0x860>)
 800e08e:	400b      	ands	r3, r1
 800e090:	4682      	mov	sl, r0
 800e092:	468b      	mov	fp, r1
 800e094:	2b00      	cmp	r3, #0
 800e096:	f47f ae05 	bne.w	800dca4 <_strtod_l+0x454>
 800e09a:	9a05      	ldr	r2, [sp, #20]
 800e09c:	2322      	movs	r3, #34	@ 0x22
 800e09e:	6013      	str	r3, [r2, #0]
 800e0a0:	e600      	b.n	800dca4 <_strtod_l+0x454>
 800e0a2:	bf00      	nop
 800e0a4:	0800fde0 	.word	0x0800fde0
 800e0a8:	fffffc02 	.word	0xfffffc02
 800e0ac:	39500000 	.word	0x39500000
 800e0b0:	7ff00000 	.word	0x7ff00000
 800e0b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e0b8:	d165      	bne.n	800e186 <_strtod_l+0x936>
 800e0ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e0bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e0c0:	b35a      	cbz	r2, 800e11a <_strtod_l+0x8ca>
 800e0c2:	4a9f      	ldr	r2, [pc, #636]	@ (800e340 <_strtod_l+0xaf0>)
 800e0c4:	4293      	cmp	r3, r2
 800e0c6:	d12b      	bne.n	800e120 <_strtod_l+0x8d0>
 800e0c8:	9b08      	ldr	r3, [sp, #32]
 800e0ca:	4651      	mov	r1, sl
 800e0cc:	b303      	cbz	r3, 800e110 <_strtod_l+0x8c0>
 800e0ce:	4b9d      	ldr	r3, [pc, #628]	@ (800e344 <_strtod_l+0xaf4>)
 800e0d0:	465a      	mov	r2, fp
 800e0d2:	4013      	ands	r3, r2
 800e0d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e0d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e0dc:	d81b      	bhi.n	800e116 <_strtod_l+0x8c6>
 800e0de:	0d1b      	lsrs	r3, r3, #20
 800e0e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e0e4:	fa02 f303 	lsl.w	r3, r2, r3
 800e0e8:	4299      	cmp	r1, r3
 800e0ea:	d119      	bne.n	800e120 <_strtod_l+0x8d0>
 800e0ec:	4b96      	ldr	r3, [pc, #600]	@ (800e348 <_strtod_l+0xaf8>)
 800e0ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0f0:	429a      	cmp	r2, r3
 800e0f2:	d102      	bne.n	800e0fa <_strtod_l+0x8aa>
 800e0f4:	3101      	adds	r1, #1
 800e0f6:	f43f adca 	beq.w	800dc8e <_strtod_l+0x43e>
 800e0fa:	4b92      	ldr	r3, [pc, #584]	@ (800e344 <_strtod_l+0xaf4>)
 800e0fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0fe:	401a      	ands	r2, r3
 800e100:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e104:	f04f 0a00 	mov.w	sl, #0
 800e108:	9b08      	ldr	r3, [sp, #32]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d1b8      	bne.n	800e080 <_strtod_l+0x830>
 800e10e:	e5c9      	b.n	800dca4 <_strtod_l+0x454>
 800e110:	f04f 33ff 	mov.w	r3, #4294967295
 800e114:	e7e8      	b.n	800e0e8 <_strtod_l+0x898>
 800e116:	4613      	mov	r3, r2
 800e118:	e7e6      	b.n	800e0e8 <_strtod_l+0x898>
 800e11a:	ea53 030a 	orrs.w	r3, r3, sl
 800e11e:	d0a1      	beq.n	800e064 <_strtod_l+0x814>
 800e120:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e122:	b1db      	cbz	r3, 800e15c <_strtod_l+0x90c>
 800e124:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e126:	4213      	tst	r3, r2
 800e128:	d0ee      	beq.n	800e108 <_strtod_l+0x8b8>
 800e12a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e12c:	9a08      	ldr	r2, [sp, #32]
 800e12e:	4650      	mov	r0, sl
 800e130:	4659      	mov	r1, fp
 800e132:	b1bb      	cbz	r3, 800e164 <_strtod_l+0x914>
 800e134:	f7ff fb6e 	bl	800d814 <sulp>
 800e138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e13c:	ec53 2b10 	vmov	r2, r3, d0
 800e140:	f7f2 f8d4 	bl	80002ec <__adddf3>
 800e144:	4682      	mov	sl, r0
 800e146:	468b      	mov	fp, r1
 800e148:	e7de      	b.n	800e108 <_strtod_l+0x8b8>
 800e14a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e14e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e152:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e156:	f04f 3aff 	mov.w	sl, #4294967295
 800e15a:	e7d5      	b.n	800e108 <_strtod_l+0x8b8>
 800e15c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e15e:	ea13 0f0a 	tst.w	r3, sl
 800e162:	e7e1      	b.n	800e128 <_strtod_l+0x8d8>
 800e164:	f7ff fb56 	bl	800d814 <sulp>
 800e168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e16c:	ec53 2b10 	vmov	r2, r3, d0
 800e170:	f7f2 f8ba 	bl	80002e8 <__aeabi_dsub>
 800e174:	2200      	movs	r2, #0
 800e176:	2300      	movs	r3, #0
 800e178:	4682      	mov	sl, r0
 800e17a:	468b      	mov	fp, r1
 800e17c:	f7f2 fcd4 	bl	8000b28 <__aeabi_dcmpeq>
 800e180:	2800      	cmp	r0, #0
 800e182:	d0c1      	beq.n	800e108 <_strtod_l+0x8b8>
 800e184:	e619      	b.n	800ddba <_strtod_l+0x56a>
 800e186:	4641      	mov	r1, r8
 800e188:	4620      	mov	r0, r4
 800e18a:	f7ff facd 	bl	800d728 <__ratio>
 800e18e:	ec57 6b10 	vmov	r6, r7, d0
 800e192:	2200      	movs	r2, #0
 800e194:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e198:	4630      	mov	r0, r6
 800e19a:	4639      	mov	r1, r7
 800e19c:	f7f2 fcd8 	bl	8000b50 <__aeabi_dcmple>
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	d06f      	beq.n	800e284 <_strtod_l+0xa34>
 800e1a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d17a      	bne.n	800e2a0 <_strtod_l+0xa50>
 800e1aa:	f1ba 0f00 	cmp.w	sl, #0
 800e1ae:	d158      	bne.n	800e262 <_strtod_l+0xa12>
 800e1b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d15a      	bne.n	800e270 <_strtod_l+0xa20>
 800e1ba:	4b64      	ldr	r3, [pc, #400]	@ (800e34c <_strtod_l+0xafc>)
 800e1bc:	2200      	movs	r2, #0
 800e1be:	4630      	mov	r0, r6
 800e1c0:	4639      	mov	r1, r7
 800e1c2:	f7f2 fcbb 	bl	8000b3c <__aeabi_dcmplt>
 800e1c6:	2800      	cmp	r0, #0
 800e1c8:	d159      	bne.n	800e27e <_strtod_l+0xa2e>
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	4639      	mov	r1, r7
 800e1ce:	4b60      	ldr	r3, [pc, #384]	@ (800e350 <_strtod_l+0xb00>)
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	f7f2 fa41 	bl	8000658 <__aeabi_dmul>
 800e1d6:	4606      	mov	r6, r0
 800e1d8:	460f      	mov	r7, r1
 800e1da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e1de:	9606      	str	r6, [sp, #24]
 800e1e0:	9307      	str	r3, [sp, #28]
 800e1e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e1e6:	4d57      	ldr	r5, [pc, #348]	@ (800e344 <_strtod_l+0xaf4>)
 800e1e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e1ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1ee:	401d      	ands	r5, r3
 800e1f0:	4b58      	ldr	r3, [pc, #352]	@ (800e354 <_strtod_l+0xb04>)
 800e1f2:	429d      	cmp	r5, r3
 800e1f4:	f040 80b2 	bne.w	800e35c <_strtod_l+0xb0c>
 800e1f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e1fe:	ec4b ab10 	vmov	d0, sl, fp
 800e202:	f7ff f9c9 	bl	800d598 <__ulp>
 800e206:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e20a:	ec51 0b10 	vmov	r0, r1, d0
 800e20e:	f7f2 fa23 	bl	8000658 <__aeabi_dmul>
 800e212:	4652      	mov	r2, sl
 800e214:	465b      	mov	r3, fp
 800e216:	f7f2 f869 	bl	80002ec <__adddf3>
 800e21a:	460b      	mov	r3, r1
 800e21c:	4949      	ldr	r1, [pc, #292]	@ (800e344 <_strtod_l+0xaf4>)
 800e21e:	4a4e      	ldr	r2, [pc, #312]	@ (800e358 <_strtod_l+0xb08>)
 800e220:	4019      	ands	r1, r3
 800e222:	4291      	cmp	r1, r2
 800e224:	4682      	mov	sl, r0
 800e226:	d942      	bls.n	800e2ae <_strtod_l+0xa5e>
 800e228:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e22a:	4b47      	ldr	r3, [pc, #284]	@ (800e348 <_strtod_l+0xaf8>)
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d103      	bne.n	800e238 <_strtod_l+0x9e8>
 800e230:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e232:	3301      	adds	r3, #1
 800e234:	f43f ad2b 	beq.w	800dc8e <_strtod_l+0x43e>
 800e238:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e348 <_strtod_l+0xaf8>
 800e23c:	f04f 3aff 	mov.w	sl, #4294967295
 800e240:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e242:	9805      	ldr	r0, [sp, #20]
 800e244:	f7fe fe74 	bl	800cf30 <_Bfree>
 800e248:	9805      	ldr	r0, [sp, #20]
 800e24a:	4649      	mov	r1, r9
 800e24c:	f7fe fe70 	bl	800cf30 <_Bfree>
 800e250:	9805      	ldr	r0, [sp, #20]
 800e252:	4641      	mov	r1, r8
 800e254:	f7fe fe6c 	bl	800cf30 <_Bfree>
 800e258:	9805      	ldr	r0, [sp, #20]
 800e25a:	4621      	mov	r1, r4
 800e25c:	f7fe fe68 	bl	800cf30 <_Bfree>
 800e260:	e618      	b.n	800de94 <_strtod_l+0x644>
 800e262:	f1ba 0f01 	cmp.w	sl, #1
 800e266:	d103      	bne.n	800e270 <_strtod_l+0xa20>
 800e268:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	f43f ada5 	beq.w	800ddba <_strtod_l+0x56a>
 800e270:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e320 <_strtod_l+0xad0>
 800e274:	4f35      	ldr	r7, [pc, #212]	@ (800e34c <_strtod_l+0xafc>)
 800e276:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e27a:	2600      	movs	r6, #0
 800e27c:	e7b1      	b.n	800e1e2 <_strtod_l+0x992>
 800e27e:	4f34      	ldr	r7, [pc, #208]	@ (800e350 <_strtod_l+0xb00>)
 800e280:	2600      	movs	r6, #0
 800e282:	e7aa      	b.n	800e1da <_strtod_l+0x98a>
 800e284:	4b32      	ldr	r3, [pc, #200]	@ (800e350 <_strtod_l+0xb00>)
 800e286:	4630      	mov	r0, r6
 800e288:	4639      	mov	r1, r7
 800e28a:	2200      	movs	r2, #0
 800e28c:	f7f2 f9e4 	bl	8000658 <__aeabi_dmul>
 800e290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e292:	4606      	mov	r6, r0
 800e294:	460f      	mov	r7, r1
 800e296:	2b00      	cmp	r3, #0
 800e298:	d09f      	beq.n	800e1da <_strtod_l+0x98a>
 800e29a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e29e:	e7a0      	b.n	800e1e2 <_strtod_l+0x992>
 800e2a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e328 <_strtod_l+0xad8>
 800e2a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e2a8:	ec57 6b17 	vmov	r6, r7, d7
 800e2ac:	e799      	b.n	800e1e2 <_strtod_l+0x992>
 800e2ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e2b2:	9b08      	ldr	r3, [sp, #32]
 800e2b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d1c1      	bne.n	800e240 <_strtod_l+0x9f0>
 800e2bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e2c0:	0d1b      	lsrs	r3, r3, #20
 800e2c2:	051b      	lsls	r3, r3, #20
 800e2c4:	429d      	cmp	r5, r3
 800e2c6:	d1bb      	bne.n	800e240 <_strtod_l+0x9f0>
 800e2c8:	4630      	mov	r0, r6
 800e2ca:	4639      	mov	r1, r7
 800e2cc:	f7f2 fd24 	bl	8000d18 <__aeabi_d2lz>
 800e2d0:	f7f2 f994 	bl	80005fc <__aeabi_l2d>
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	460b      	mov	r3, r1
 800e2d8:	4630      	mov	r0, r6
 800e2da:	4639      	mov	r1, r7
 800e2dc:	f7f2 f804 	bl	80002e8 <__aeabi_dsub>
 800e2e0:	460b      	mov	r3, r1
 800e2e2:	4602      	mov	r2, r0
 800e2e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e2e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e2ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2ee:	ea46 060a 	orr.w	r6, r6, sl
 800e2f2:	431e      	orrs	r6, r3
 800e2f4:	d06f      	beq.n	800e3d6 <_strtod_l+0xb86>
 800e2f6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e330 <_strtod_l+0xae0>)
 800e2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2fc:	f7f2 fc1e 	bl	8000b3c <__aeabi_dcmplt>
 800e300:	2800      	cmp	r0, #0
 800e302:	f47f accf 	bne.w	800dca4 <_strtod_l+0x454>
 800e306:	a30c      	add	r3, pc, #48	@ (adr r3, 800e338 <_strtod_l+0xae8>)
 800e308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e30c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e310:	f7f2 fc32 	bl	8000b78 <__aeabi_dcmpgt>
 800e314:	2800      	cmp	r0, #0
 800e316:	d093      	beq.n	800e240 <_strtod_l+0x9f0>
 800e318:	e4c4      	b.n	800dca4 <_strtod_l+0x454>
 800e31a:	bf00      	nop
 800e31c:	f3af 8000 	nop.w
 800e320:	00000000 	.word	0x00000000
 800e324:	bff00000 	.word	0xbff00000
 800e328:	00000000 	.word	0x00000000
 800e32c:	3ff00000 	.word	0x3ff00000
 800e330:	94a03595 	.word	0x94a03595
 800e334:	3fdfffff 	.word	0x3fdfffff
 800e338:	35afe535 	.word	0x35afe535
 800e33c:	3fe00000 	.word	0x3fe00000
 800e340:	000fffff 	.word	0x000fffff
 800e344:	7ff00000 	.word	0x7ff00000
 800e348:	7fefffff 	.word	0x7fefffff
 800e34c:	3ff00000 	.word	0x3ff00000
 800e350:	3fe00000 	.word	0x3fe00000
 800e354:	7fe00000 	.word	0x7fe00000
 800e358:	7c9fffff 	.word	0x7c9fffff
 800e35c:	9b08      	ldr	r3, [sp, #32]
 800e35e:	b323      	cbz	r3, 800e3aa <_strtod_l+0xb5a>
 800e360:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e364:	d821      	bhi.n	800e3aa <_strtod_l+0xb5a>
 800e366:	a328      	add	r3, pc, #160	@ (adr r3, 800e408 <_strtod_l+0xbb8>)
 800e368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36c:	4630      	mov	r0, r6
 800e36e:	4639      	mov	r1, r7
 800e370:	f7f2 fbee 	bl	8000b50 <__aeabi_dcmple>
 800e374:	b1a0      	cbz	r0, 800e3a0 <_strtod_l+0xb50>
 800e376:	4639      	mov	r1, r7
 800e378:	4630      	mov	r0, r6
 800e37a:	f7f2 fc45 	bl	8000c08 <__aeabi_d2uiz>
 800e37e:	2801      	cmp	r0, #1
 800e380:	bf38      	it	cc
 800e382:	2001      	movcc	r0, #1
 800e384:	f7f2 f8ee 	bl	8000564 <__aeabi_ui2d>
 800e388:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e38a:	4606      	mov	r6, r0
 800e38c:	460f      	mov	r7, r1
 800e38e:	b9fb      	cbnz	r3, 800e3d0 <_strtod_l+0xb80>
 800e390:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e394:	9014      	str	r0, [sp, #80]	@ 0x50
 800e396:	9315      	str	r3, [sp, #84]	@ 0x54
 800e398:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e39c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e3a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e3a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e3a6:	1b5b      	subs	r3, r3, r5
 800e3a8:	9311      	str	r3, [sp, #68]	@ 0x44
 800e3aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e3ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e3b2:	f7ff f8f1 	bl	800d598 <__ulp>
 800e3b6:	4650      	mov	r0, sl
 800e3b8:	ec53 2b10 	vmov	r2, r3, d0
 800e3bc:	4659      	mov	r1, fp
 800e3be:	f7f2 f94b 	bl	8000658 <__aeabi_dmul>
 800e3c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e3c6:	f7f1 ff91 	bl	80002ec <__adddf3>
 800e3ca:	4682      	mov	sl, r0
 800e3cc:	468b      	mov	fp, r1
 800e3ce:	e770      	b.n	800e2b2 <_strtod_l+0xa62>
 800e3d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e3d4:	e7e0      	b.n	800e398 <_strtod_l+0xb48>
 800e3d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e410 <_strtod_l+0xbc0>)
 800e3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3dc:	f7f2 fbae 	bl	8000b3c <__aeabi_dcmplt>
 800e3e0:	e798      	b.n	800e314 <_strtod_l+0xac4>
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e3e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e3ea:	6013      	str	r3, [r2, #0]
 800e3ec:	f7ff ba6d 	b.w	800d8ca <_strtod_l+0x7a>
 800e3f0:	2a65      	cmp	r2, #101	@ 0x65
 800e3f2:	f43f ab66 	beq.w	800dac2 <_strtod_l+0x272>
 800e3f6:	2a45      	cmp	r2, #69	@ 0x45
 800e3f8:	f43f ab63 	beq.w	800dac2 <_strtod_l+0x272>
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	f7ff bb9e 	b.w	800db3e <_strtod_l+0x2ee>
 800e402:	bf00      	nop
 800e404:	f3af 8000 	nop.w
 800e408:	ffc00000 	.word	0xffc00000
 800e40c:	41dfffff 	.word	0x41dfffff
 800e410:	94a03595 	.word	0x94a03595
 800e414:	3fcfffff 	.word	0x3fcfffff

0800e418 <_strtod_r>:
 800e418:	4b01      	ldr	r3, [pc, #4]	@ (800e420 <_strtod_r+0x8>)
 800e41a:	f7ff ba19 	b.w	800d850 <_strtod_l>
 800e41e:	bf00      	nop
 800e420:	20000084 	.word	0x20000084

0800e424 <_strtol_l.constprop.0>:
 800e424:	2b24      	cmp	r3, #36	@ 0x24
 800e426:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e42a:	4686      	mov	lr, r0
 800e42c:	4690      	mov	r8, r2
 800e42e:	d801      	bhi.n	800e434 <_strtol_l.constprop.0+0x10>
 800e430:	2b01      	cmp	r3, #1
 800e432:	d106      	bne.n	800e442 <_strtol_l.constprop.0+0x1e>
 800e434:	f7fd fdae 	bl	800bf94 <__errno>
 800e438:	2316      	movs	r3, #22
 800e43a:	6003      	str	r3, [r0, #0]
 800e43c:	2000      	movs	r0, #0
 800e43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e442:	4834      	ldr	r0, [pc, #208]	@ (800e514 <_strtol_l.constprop.0+0xf0>)
 800e444:	460d      	mov	r5, r1
 800e446:	462a      	mov	r2, r5
 800e448:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e44c:	5d06      	ldrb	r6, [r0, r4]
 800e44e:	f016 0608 	ands.w	r6, r6, #8
 800e452:	d1f8      	bne.n	800e446 <_strtol_l.constprop.0+0x22>
 800e454:	2c2d      	cmp	r4, #45	@ 0x2d
 800e456:	d12d      	bne.n	800e4b4 <_strtol_l.constprop.0+0x90>
 800e458:	782c      	ldrb	r4, [r5, #0]
 800e45a:	2601      	movs	r6, #1
 800e45c:	1c95      	adds	r5, r2, #2
 800e45e:	f033 0210 	bics.w	r2, r3, #16
 800e462:	d109      	bne.n	800e478 <_strtol_l.constprop.0+0x54>
 800e464:	2c30      	cmp	r4, #48	@ 0x30
 800e466:	d12a      	bne.n	800e4be <_strtol_l.constprop.0+0x9a>
 800e468:	782a      	ldrb	r2, [r5, #0]
 800e46a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e46e:	2a58      	cmp	r2, #88	@ 0x58
 800e470:	d125      	bne.n	800e4be <_strtol_l.constprop.0+0x9a>
 800e472:	786c      	ldrb	r4, [r5, #1]
 800e474:	2310      	movs	r3, #16
 800e476:	3502      	adds	r5, #2
 800e478:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e47c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e480:	2200      	movs	r2, #0
 800e482:	fbbc f9f3 	udiv	r9, ip, r3
 800e486:	4610      	mov	r0, r2
 800e488:	fb03 ca19 	mls	sl, r3, r9, ip
 800e48c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e490:	2f09      	cmp	r7, #9
 800e492:	d81b      	bhi.n	800e4cc <_strtol_l.constprop.0+0xa8>
 800e494:	463c      	mov	r4, r7
 800e496:	42a3      	cmp	r3, r4
 800e498:	dd27      	ble.n	800e4ea <_strtol_l.constprop.0+0xc6>
 800e49a:	1c57      	adds	r7, r2, #1
 800e49c:	d007      	beq.n	800e4ae <_strtol_l.constprop.0+0x8a>
 800e49e:	4581      	cmp	r9, r0
 800e4a0:	d320      	bcc.n	800e4e4 <_strtol_l.constprop.0+0xc0>
 800e4a2:	d101      	bne.n	800e4a8 <_strtol_l.constprop.0+0x84>
 800e4a4:	45a2      	cmp	sl, r4
 800e4a6:	db1d      	blt.n	800e4e4 <_strtol_l.constprop.0+0xc0>
 800e4a8:	fb00 4003 	mla	r0, r0, r3, r4
 800e4ac:	2201      	movs	r2, #1
 800e4ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e4b2:	e7eb      	b.n	800e48c <_strtol_l.constprop.0+0x68>
 800e4b4:	2c2b      	cmp	r4, #43	@ 0x2b
 800e4b6:	bf04      	itt	eq
 800e4b8:	782c      	ldrbeq	r4, [r5, #0]
 800e4ba:	1c95      	addeq	r5, r2, #2
 800e4bc:	e7cf      	b.n	800e45e <_strtol_l.constprop.0+0x3a>
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d1da      	bne.n	800e478 <_strtol_l.constprop.0+0x54>
 800e4c2:	2c30      	cmp	r4, #48	@ 0x30
 800e4c4:	bf0c      	ite	eq
 800e4c6:	2308      	moveq	r3, #8
 800e4c8:	230a      	movne	r3, #10
 800e4ca:	e7d5      	b.n	800e478 <_strtol_l.constprop.0+0x54>
 800e4cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e4d0:	2f19      	cmp	r7, #25
 800e4d2:	d801      	bhi.n	800e4d8 <_strtol_l.constprop.0+0xb4>
 800e4d4:	3c37      	subs	r4, #55	@ 0x37
 800e4d6:	e7de      	b.n	800e496 <_strtol_l.constprop.0+0x72>
 800e4d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e4dc:	2f19      	cmp	r7, #25
 800e4de:	d804      	bhi.n	800e4ea <_strtol_l.constprop.0+0xc6>
 800e4e0:	3c57      	subs	r4, #87	@ 0x57
 800e4e2:	e7d8      	b.n	800e496 <_strtol_l.constprop.0+0x72>
 800e4e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e4e8:	e7e1      	b.n	800e4ae <_strtol_l.constprop.0+0x8a>
 800e4ea:	1c53      	adds	r3, r2, #1
 800e4ec:	d108      	bne.n	800e500 <_strtol_l.constprop.0+0xdc>
 800e4ee:	2322      	movs	r3, #34	@ 0x22
 800e4f0:	f8ce 3000 	str.w	r3, [lr]
 800e4f4:	4660      	mov	r0, ip
 800e4f6:	f1b8 0f00 	cmp.w	r8, #0
 800e4fa:	d0a0      	beq.n	800e43e <_strtol_l.constprop.0+0x1a>
 800e4fc:	1e69      	subs	r1, r5, #1
 800e4fe:	e006      	b.n	800e50e <_strtol_l.constprop.0+0xea>
 800e500:	b106      	cbz	r6, 800e504 <_strtol_l.constprop.0+0xe0>
 800e502:	4240      	negs	r0, r0
 800e504:	f1b8 0f00 	cmp.w	r8, #0
 800e508:	d099      	beq.n	800e43e <_strtol_l.constprop.0+0x1a>
 800e50a:	2a00      	cmp	r2, #0
 800e50c:	d1f6      	bne.n	800e4fc <_strtol_l.constprop.0+0xd8>
 800e50e:	f8c8 1000 	str.w	r1, [r8]
 800e512:	e794      	b.n	800e43e <_strtol_l.constprop.0+0x1a>
 800e514:	0800fe09 	.word	0x0800fe09

0800e518 <_strtol_r>:
 800e518:	f7ff bf84 	b.w	800e424 <_strtol_l.constprop.0>

0800e51c <__ssputs_r>:
 800e51c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e520:	688e      	ldr	r6, [r1, #8]
 800e522:	461f      	mov	r7, r3
 800e524:	42be      	cmp	r6, r7
 800e526:	680b      	ldr	r3, [r1, #0]
 800e528:	4682      	mov	sl, r0
 800e52a:	460c      	mov	r4, r1
 800e52c:	4690      	mov	r8, r2
 800e52e:	d82d      	bhi.n	800e58c <__ssputs_r+0x70>
 800e530:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e534:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e538:	d026      	beq.n	800e588 <__ssputs_r+0x6c>
 800e53a:	6965      	ldr	r5, [r4, #20]
 800e53c:	6909      	ldr	r1, [r1, #16]
 800e53e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e542:	eba3 0901 	sub.w	r9, r3, r1
 800e546:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e54a:	1c7b      	adds	r3, r7, #1
 800e54c:	444b      	add	r3, r9
 800e54e:	106d      	asrs	r5, r5, #1
 800e550:	429d      	cmp	r5, r3
 800e552:	bf38      	it	cc
 800e554:	461d      	movcc	r5, r3
 800e556:	0553      	lsls	r3, r2, #21
 800e558:	d527      	bpl.n	800e5aa <__ssputs_r+0x8e>
 800e55a:	4629      	mov	r1, r5
 800e55c:	f7fe fc1c 	bl	800cd98 <_malloc_r>
 800e560:	4606      	mov	r6, r0
 800e562:	b360      	cbz	r0, 800e5be <__ssputs_r+0xa2>
 800e564:	6921      	ldr	r1, [r4, #16]
 800e566:	464a      	mov	r2, r9
 800e568:	f7fd fd41 	bl	800bfee <memcpy>
 800e56c:	89a3      	ldrh	r3, [r4, #12]
 800e56e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e576:	81a3      	strh	r3, [r4, #12]
 800e578:	6126      	str	r6, [r4, #16]
 800e57a:	6165      	str	r5, [r4, #20]
 800e57c:	444e      	add	r6, r9
 800e57e:	eba5 0509 	sub.w	r5, r5, r9
 800e582:	6026      	str	r6, [r4, #0]
 800e584:	60a5      	str	r5, [r4, #8]
 800e586:	463e      	mov	r6, r7
 800e588:	42be      	cmp	r6, r7
 800e58a:	d900      	bls.n	800e58e <__ssputs_r+0x72>
 800e58c:	463e      	mov	r6, r7
 800e58e:	6820      	ldr	r0, [r4, #0]
 800e590:	4632      	mov	r2, r6
 800e592:	4641      	mov	r1, r8
 800e594:	f000 f9c6 	bl	800e924 <memmove>
 800e598:	68a3      	ldr	r3, [r4, #8]
 800e59a:	1b9b      	subs	r3, r3, r6
 800e59c:	60a3      	str	r3, [r4, #8]
 800e59e:	6823      	ldr	r3, [r4, #0]
 800e5a0:	4433      	add	r3, r6
 800e5a2:	6023      	str	r3, [r4, #0]
 800e5a4:	2000      	movs	r0, #0
 800e5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5aa:	462a      	mov	r2, r5
 800e5ac:	f000 fd7d 	bl	800f0aa <_realloc_r>
 800e5b0:	4606      	mov	r6, r0
 800e5b2:	2800      	cmp	r0, #0
 800e5b4:	d1e0      	bne.n	800e578 <__ssputs_r+0x5c>
 800e5b6:	6921      	ldr	r1, [r4, #16]
 800e5b8:	4650      	mov	r0, sl
 800e5ba:	f7fe fb79 	bl	800ccb0 <_free_r>
 800e5be:	230c      	movs	r3, #12
 800e5c0:	f8ca 3000 	str.w	r3, [sl]
 800e5c4:	89a3      	ldrh	r3, [r4, #12]
 800e5c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5ca:	81a3      	strh	r3, [r4, #12]
 800e5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e5d0:	e7e9      	b.n	800e5a6 <__ssputs_r+0x8a>
	...

0800e5d4 <_svfiprintf_r>:
 800e5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5d8:	4698      	mov	r8, r3
 800e5da:	898b      	ldrh	r3, [r1, #12]
 800e5dc:	061b      	lsls	r3, r3, #24
 800e5de:	b09d      	sub	sp, #116	@ 0x74
 800e5e0:	4607      	mov	r7, r0
 800e5e2:	460d      	mov	r5, r1
 800e5e4:	4614      	mov	r4, r2
 800e5e6:	d510      	bpl.n	800e60a <_svfiprintf_r+0x36>
 800e5e8:	690b      	ldr	r3, [r1, #16]
 800e5ea:	b973      	cbnz	r3, 800e60a <_svfiprintf_r+0x36>
 800e5ec:	2140      	movs	r1, #64	@ 0x40
 800e5ee:	f7fe fbd3 	bl	800cd98 <_malloc_r>
 800e5f2:	6028      	str	r0, [r5, #0]
 800e5f4:	6128      	str	r0, [r5, #16]
 800e5f6:	b930      	cbnz	r0, 800e606 <_svfiprintf_r+0x32>
 800e5f8:	230c      	movs	r3, #12
 800e5fa:	603b      	str	r3, [r7, #0]
 800e5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e600:	b01d      	add	sp, #116	@ 0x74
 800e602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e606:	2340      	movs	r3, #64	@ 0x40
 800e608:	616b      	str	r3, [r5, #20]
 800e60a:	2300      	movs	r3, #0
 800e60c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e60e:	2320      	movs	r3, #32
 800e610:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e614:	f8cd 800c 	str.w	r8, [sp, #12]
 800e618:	2330      	movs	r3, #48	@ 0x30
 800e61a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e7b8 <_svfiprintf_r+0x1e4>
 800e61e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e622:	f04f 0901 	mov.w	r9, #1
 800e626:	4623      	mov	r3, r4
 800e628:	469a      	mov	sl, r3
 800e62a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e62e:	b10a      	cbz	r2, 800e634 <_svfiprintf_r+0x60>
 800e630:	2a25      	cmp	r2, #37	@ 0x25
 800e632:	d1f9      	bne.n	800e628 <_svfiprintf_r+0x54>
 800e634:	ebba 0b04 	subs.w	fp, sl, r4
 800e638:	d00b      	beq.n	800e652 <_svfiprintf_r+0x7e>
 800e63a:	465b      	mov	r3, fp
 800e63c:	4622      	mov	r2, r4
 800e63e:	4629      	mov	r1, r5
 800e640:	4638      	mov	r0, r7
 800e642:	f7ff ff6b 	bl	800e51c <__ssputs_r>
 800e646:	3001      	adds	r0, #1
 800e648:	f000 80a7 	beq.w	800e79a <_svfiprintf_r+0x1c6>
 800e64c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e64e:	445a      	add	r2, fp
 800e650:	9209      	str	r2, [sp, #36]	@ 0x24
 800e652:	f89a 3000 	ldrb.w	r3, [sl]
 800e656:	2b00      	cmp	r3, #0
 800e658:	f000 809f 	beq.w	800e79a <_svfiprintf_r+0x1c6>
 800e65c:	2300      	movs	r3, #0
 800e65e:	f04f 32ff 	mov.w	r2, #4294967295
 800e662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e666:	f10a 0a01 	add.w	sl, sl, #1
 800e66a:	9304      	str	r3, [sp, #16]
 800e66c:	9307      	str	r3, [sp, #28]
 800e66e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e672:	931a      	str	r3, [sp, #104]	@ 0x68
 800e674:	4654      	mov	r4, sl
 800e676:	2205      	movs	r2, #5
 800e678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e67c:	484e      	ldr	r0, [pc, #312]	@ (800e7b8 <_svfiprintf_r+0x1e4>)
 800e67e:	f7f1 fdd7 	bl	8000230 <memchr>
 800e682:	9a04      	ldr	r2, [sp, #16]
 800e684:	b9d8      	cbnz	r0, 800e6be <_svfiprintf_r+0xea>
 800e686:	06d0      	lsls	r0, r2, #27
 800e688:	bf44      	itt	mi
 800e68a:	2320      	movmi	r3, #32
 800e68c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e690:	0711      	lsls	r1, r2, #28
 800e692:	bf44      	itt	mi
 800e694:	232b      	movmi	r3, #43	@ 0x2b
 800e696:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e69a:	f89a 3000 	ldrb.w	r3, [sl]
 800e69e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6a0:	d015      	beq.n	800e6ce <_svfiprintf_r+0xfa>
 800e6a2:	9a07      	ldr	r2, [sp, #28]
 800e6a4:	4654      	mov	r4, sl
 800e6a6:	2000      	movs	r0, #0
 800e6a8:	f04f 0c0a 	mov.w	ip, #10
 800e6ac:	4621      	mov	r1, r4
 800e6ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6b2:	3b30      	subs	r3, #48	@ 0x30
 800e6b4:	2b09      	cmp	r3, #9
 800e6b6:	d94b      	bls.n	800e750 <_svfiprintf_r+0x17c>
 800e6b8:	b1b0      	cbz	r0, 800e6e8 <_svfiprintf_r+0x114>
 800e6ba:	9207      	str	r2, [sp, #28]
 800e6bc:	e014      	b.n	800e6e8 <_svfiprintf_r+0x114>
 800e6be:	eba0 0308 	sub.w	r3, r0, r8
 800e6c2:	fa09 f303 	lsl.w	r3, r9, r3
 800e6c6:	4313      	orrs	r3, r2
 800e6c8:	9304      	str	r3, [sp, #16]
 800e6ca:	46a2      	mov	sl, r4
 800e6cc:	e7d2      	b.n	800e674 <_svfiprintf_r+0xa0>
 800e6ce:	9b03      	ldr	r3, [sp, #12]
 800e6d0:	1d19      	adds	r1, r3, #4
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	9103      	str	r1, [sp, #12]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	bfbb      	ittet	lt
 800e6da:	425b      	neglt	r3, r3
 800e6dc:	f042 0202 	orrlt.w	r2, r2, #2
 800e6e0:	9307      	strge	r3, [sp, #28]
 800e6e2:	9307      	strlt	r3, [sp, #28]
 800e6e4:	bfb8      	it	lt
 800e6e6:	9204      	strlt	r2, [sp, #16]
 800e6e8:	7823      	ldrb	r3, [r4, #0]
 800e6ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800e6ec:	d10a      	bne.n	800e704 <_svfiprintf_r+0x130>
 800e6ee:	7863      	ldrb	r3, [r4, #1]
 800e6f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6f2:	d132      	bne.n	800e75a <_svfiprintf_r+0x186>
 800e6f4:	9b03      	ldr	r3, [sp, #12]
 800e6f6:	1d1a      	adds	r2, r3, #4
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	9203      	str	r2, [sp, #12]
 800e6fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e700:	3402      	adds	r4, #2
 800e702:	9305      	str	r3, [sp, #20]
 800e704:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e7c8 <_svfiprintf_r+0x1f4>
 800e708:	7821      	ldrb	r1, [r4, #0]
 800e70a:	2203      	movs	r2, #3
 800e70c:	4650      	mov	r0, sl
 800e70e:	f7f1 fd8f 	bl	8000230 <memchr>
 800e712:	b138      	cbz	r0, 800e724 <_svfiprintf_r+0x150>
 800e714:	9b04      	ldr	r3, [sp, #16]
 800e716:	eba0 000a 	sub.w	r0, r0, sl
 800e71a:	2240      	movs	r2, #64	@ 0x40
 800e71c:	4082      	lsls	r2, r0
 800e71e:	4313      	orrs	r3, r2
 800e720:	3401      	adds	r4, #1
 800e722:	9304      	str	r3, [sp, #16]
 800e724:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e728:	4824      	ldr	r0, [pc, #144]	@ (800e7bc <_svfiprintf_r+0x1e8>)
 800e72a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e72e:	2206      	movs	r2, #6
 800e730:	f7f1 fd7e 	bl	8000230 <memchr>
 800e734:	2800      	cmp	r0, #0
 800e736:	d036      	beq.n	800e7a6 <_svfiprintf_r+0x1d2>
 800e738:	4b21      	ldr	r3, [pc, #132]	@ (800e7c0 <_svfiprintf_r+0x1ec>)
 800e73a:	bb1b      	cbnz	r3, 800e784 <_svfiprintf_r+0x1b0>
 800e73c:	9b03      	ldr	r3, [sp, #12]
 800e73e:	3307      	adds	r3, #7
 800e740:	f023 0307 	bic.w	r3, r3, #7
 800e744:	3308      	adds	r3, #8
 800e746:	9303      	str	r3, [sp, #12]
 800e748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e74a:	4433      	add	r3, r6
 800e74c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e74e:	e76a      	b.n	800e626 <_svfiprintf_r+0x52>
 800e750:	fb0c 3202 	mla	r2, ip, r2, r3
 800e754:	460c      	mov	r4, r1
 800e756:	2001      	movs	r0, #1
 800e758:	e7a8      	b.n	800e6ac <_svfiprintf_r+0xd8>
 800e75a:	2300      	movs	r3, #0
 800e75c:	3401      	adds	r4, #1
 800e75e:	9305      	str	r3, [sp, #20]
 800e760:	4619      	mov	r1, r3
 800e762:	f04f 0c0a 	mov.w	ip, #10
 800e766:	4620      	mov	r0, r4
 800e768:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e76c:	3a30      	subs	r2, #48	@ 0x30
 800e76e:	2a09      	cmp	r2, #9
 800e770:	d903      	bls.n	800e77a <_svfiprintf_r+0x1a6>
 800e772:	2b00      	cmp	r3, #0
 800e774:	d0c6      	beq.n	800e704 <_svfiprintf_r+0x130>
 800e776:	9105      	str	r1, [sp, #20]
 800e778:	e7c4      	b.n	800e704 <_svfiprintf_r+0x130>
 800e77a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e77e:	4604      	mov	r4, r0
 800e780:	2301      	movs	r3, #1
 800e782:	e7f0      	b.n	800e766 <_svfiprintf_r+0x192>
 800e784:	ab03      	add	r3, sp, #12
 800e786:	9300      	str	r3, [sp, #0]
 800e788:	462a      	mov	r2, r5
 800e78a:	4b0e      	ldr	r3, [pc, #56]	@ (800e7c4 <_svfiprintf_r+0x1f0>)
 800e78c:	a904      	add	r1, sp, #16
 800e78e:	4638      	mov	r0, r7
 800e790:	f7fc fc32 	bl	800aff8 <_printf_float>
 800e794:	1c42      	adds	r2, r0, #1
 800e796:	4606      	mov	r6, r0
 800e798:	d1d6      	bne.n	800e748 <_svfiprintf_r+0x174>
 800e79a:	89ab      	ldrh	r3, [r5, #12]
 800e79c:	065b      	lsls	r3, r3, #25
 800e79e:	f53f af2d 	bmi.w	800e5fc <_svfiprintf_r+0x28>
 800e7a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e7a4:	e72c      	b.n	800e600 <_svfiprintf_r+0x2c>
 800e7a6:	ab03      	add	r3, sp, #12
 800e7a8:	9300      	str	r3, [sp, #0]
 800e7aa:	462a      	mov	r2, r5
 800e7ac:	4b05      	ldr	r3, [pc, #20]	@ (800e7c4 <_svfiprintf_r+0x1f0>)
 800e7ae:	a904      	add	r1, sp, #16
 800e7b0:	4638      	mov	r0, r7
 800e7b2:	f7fc feb9 	bl	800b528 <_printf_i>
 800e7b6:	e7ed      	b.n	800e794 <_svfiprintf_r+0x1c0>
 800e7b8:	0800ff09 	.word	0x0800ff09
 800e7bc:	0800ff13 	.word	0x0800ff13
 800e7c0:	0800aff9 	.word	0x0800aff9
 800e7c4:	0800e51d 	.word	0x0800e51d
 800e7c8:	0800ff0f 	.word	0x0800ff0f

0800e7cc <__sflush_r>:
 800e7cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7d4:	0716      	lsls	r6, r2, #28
 800e7d6:	4605      	mov	r5, r0
 800e7d8:	460c      	mov	r4, r1
 800e7da:	d454      	bmi.n	800e886 <__sflush_r+0xba>
 800e7dc:	684b      	ldr	r3, [r1, #4]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	dc02      	bgt.n	800e7e8 <__sflush_r+0x1c>
 800e7e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	dd48      	ble.n	800e87a <__sflush_r+0xae>
 800e7e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e7ea:	2e00      	cmp	r6, #0
 800e7ec:	d045      	beq.n	800e87a <__sflush_r+0xae>
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e7f4:	682f      	ldr	r7, [r5, #0]
 800e7f6:	6a21      	ldr	r1, [r4, #32]
 800e7f8:	602b      	str	r3, [r5, #0]
 800e7fa:	d030      	beq.n	800e85e <__sflush_r+0x92>
 800e7fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e7fe:	89a3      	ldrh	r3, [r4, #12]
 800e800:	0759      	lsls	r1, r3, #29
 800e802:	d505      	bpl.n	800e810 <__sflush_r+0x44>
 800e804:	6863      	ldr	r3, [r4, #4]
 800e806:	1ad2      	subs	r2, r2, r3
 800e808:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e80a:	b10b      	cbz	r3, 800e810 <__sflush_r+0x44>
 800e80c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e80e:	1ad2      	subs	r2, r2, r3
 800e810:	2300      	movs	r3, #0
 800e812:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e814:	6a21      	ldr	r1, [r4, #32]
 800e816:	4628      	mov	r0, r5
 800e818:	47b0      	blx	r6
 800e81a:	1c43      	adds	r3, r0, #1
 800e81c:	89a3      	ldrh	r3, [r4, #12]
 800e81e:	d106      	bne.n	800e82e <__sflush_r+0x62>
 800e820:	6829      	ldr	r1, [r5, #0]
 800e822:	291d      	cmp	r1, #29
 800e824:	d82b      	bhi.n	800e87e <__sflush_r+0xb2>
 800e826:	4a2a      	ldr	r2, [pc, #168]	@ (800e8d0 <__sflush_r+0x104>)
 800e828:	410a      	asrs	r2, r1
 800e82a:	07d6      	lsls	r6, r2, #31
 800e82c:	d427      	bmi.n	800e87e <__sflush_r+0xb2>
 800e82e:	2200      	movs	r2, #0
 800e830:	6062      	str	r2, [r4, #4]
 800e832:	04d9      	lsls	r1, r3, #19
 800e834:	6922      	ldr	r2, [r4, #16]
 800e836:	6022      	str	r2, [r4, #0]
 800e838:	d504      	bpl.n	800e844 <__sflush_r+0x78>
 800e83a:	1c42      	adds	r2, r0, #1
 800e83c:	d101      	bne.n	800e842 <__sflush_r+0x76>
 800e83e:	682b      	ldr	r3, [r5, #0]
 800e840:	b903      	cbnz	r3, 800e844 <__sflush_r+0x78>
 800e842:	6560      	str	r0, [r4, #84]	@ 0x54
 800e844:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e846:	602f      	str	r7, [r5, #0]
 800e848:	b1b9      	cbz	r1, 800e87a <__sflush_r+0xae>
 800e84a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e84e:	4299      	cmp	r1, r3
 800e850:	d002      	beq.n	800e858 <__sflush_r+0x8c>
 800e852:	4628      	mov	r0, r5
 800e854:	f7fe fa2c 	bl	800ccb0 <_free_r>
 800e858:	2300      	movs	r3, #0
 800e85a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e85c:	e00d      	b.n	800e87a <__sflush_r+0xae>
 800e85e:	2301      	movs	r3, #1
 800e860:	4628      	mov	r0, r5
 800e862:	47b0      	blx	r6
 800e864:	4602      	mov	r2, r0
 800e866:	1c50      	adds	r0, r2, #1
 800e868:	d1c9      	bne.n	800e7fe <__sflush_r+0x32>
 800e86a:	682b      	ldr	r3, [r5, #0]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d0c6      	beq.n	800e7fe <__sflush_r+0x32>
 800e870:	2b1d      	cmp	r3, #29
 800e872:	d001      	beq.n	800e878 <__sflush_r+0xac>
 800e874:	2b16      	cmp	r3, #22
 800e876:	d11e      	bne.n	800e8b6 <__sflush_r+0xea>
 800e878:	602f      	str	r7, [r5, #0]
 800e87a:	2000      	movs	r0, #0
 800e87c:	e022      	b.n	800e8c4 <__sflush_r+0xf8>
 800e87e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e882:	b21b      	sxth	r3, r3
 800e884:	e01b      	b.n	800e8be <__sflush_r+0xf2>
 800e886:	690f      	ldr	r7, [r1, #16]
 800e888:	2f00      	cmp	r7, #0
 800e88a:	d0f6      	beq.n	800e87a <__sflush_r+0xae>
 800e88c:	0793      	lsls	r3, r2, #30
 800e88e:	680e      	ldr	r6, [r1, #0]
 800e890:	bf08      	it	eq
 800e892:	694b      	ldreq	r3, [r1, #20]
 800e894:	600f      	str	r7, [r1, #0]
 800e896:	bf18      	it	ne
 800e898:	2300      	movne	r3, #0
 800e89a:	eba6 0807 	sub.w	r8, r6, r7
 800e89e:	608b      	str	r3, [r1, #8]
 800e8a0:	f1b8 0f00 	cmp.w	r8, #0
 800e8a4:	dde9      	ble.n	800e87a <__sflush_r+0xae>
 800e8a6:	6a21      	ldr	r1, [r4, #32]
 800e8a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e8aa:	4643      	mov	r3, r8
 800e8ac:	463a      	mov	r2, r7
 800e8ae:	4628      	mov	r0, r5
 800e8b0:	47b0      	blx	r6
 800e8b2:	2800      	cmp	r0, #0
 800e8b4:	dc08      	bgt.n	800e8c8 <__sflush_r+0xfc>
 800e8b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8be:	81a3      	strh	r3, [r4, #12]
 800e8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8c8:	4407      	add	r7, r0
 800e8ca:	eba8 0800 	sub.w	r8, r8, r0
 800e8ce:	e7e7      	b.n	800e8a0 <__sflush_r+0xd4>
 800e8d0:	dfbffffe 	.word	0xdfbffffe

0800e8d4 <_fflush_r>:
 800e8d4:	b538      	push	{r3, r4, r5, lr}
 800e8d6:	690b      	ldr	r3, [r1, #16]
 800e8d8:	4605      	mov	r5, r0
 800e8da:	460c      	mov	r4, r1
 800e8dc:	b913      	cbnz	r3, 800e8e4 <_fflush_r+0x10>
 800e8de:	2500      	movs	r5, #0
 800e8e0:	4628      	mov	r0, r5
 800e8e2:	bd38      	pop	{r3, r4, r5, pc}
 800e8e4:	b118      	cbz	r0, 800e8ee <_fflush_r+0x1a>
 800e8e6:	6a03      	ldr	r3, [r0, #32]
 800e8e8:	b90b      	cbnz	r3, 800e8ee <_fflush_r+0x1a>
 800e8ea:	f7fd f9dd 	bl	800bca8 <__sinit>
 800e8ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d0f3      	beq.n	800e8de <_fflush_r+0xa>
 800e8f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e8f8:	07d0      	lsls	r0, r2, #31
 800e8fa:	d404      	bmi.n	800e906 <_fflush_r+0x32>
 800e8fc:	0599      	lsls	r1, r3, #22
 800e8fe:	d402      	bmi.n	800e906 <_fflush_r+0x32>
 800e900:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e902:	f7fd fb72 	bl	800bfea <__retarget_lock_acquire_recursive>
 800e906:	4628      	mov	r0, r5
 800e908:	4621      	mov	r1, r4
 800e90a:	f7ff ff5f 	bl	800e7cc <__sflush_r>
 800e90e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e910:	07da      	lsls	r2, r3, #31
 800e912:	4605      	mov	r5, r0
 800e914:	d4e4      	bmi.n	800e8e0 <_fflush_r+0xc>
 800e916:	89a3      	ldrh	r3, [r4, #12]
 800e918:	059b      	lsls	r3, r3, #22
 800e91a:	d4e1      	bmi.n	800e8e0 <_fflush_r+0xc>
 800e91c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e91e:	f7fd fb65 	bl	800bfec <__retarget_lock_release_recursive>
 800e922:	e7dd      	b.n	800e8e0 <_fflush_r+0xc>

0800e924 <memmove>:
 800e924:	4288      	cmp	r0, r1
 800e926:	b510      	push	{r4, lr}
 800e928:	eb01 0402 	add.w	r4, r1, r2
 800e92c:	d902      	bls.n	800e934 <memmove+0x10>
 800e92e:	4284      	cmp	r4, r0
 800e930:	4623      	mov	r3, r4
 800e932:	d807      	bhi.n	800e944 <memmove+0x20>
 800e934:	1e43      	subs	r3, r0, #1
 800e936:	42a1      	cmp	r1, r4
 800e938:	d008      	beq.n	800e94c <memmove+0x28>
 800e93a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e93e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e942:	e7f8      	b.n	800e936 <memmove+0x12>
 800e944:	4402      	add	r2, r0
 800e946:	4601      	mov	r1, r0
 800e948:	428a      	cmp	r2, r1
 800e94a:	d100      	bne.n	800e94e <memmove+0x2a>
 800e94c:	bd10      	pop	{r4, pc}
 800e94e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e952:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e956:	e7f7      	b.n	800e948 <memmove+0x24>

0800e958 <strncmp>:
 800e958:	b510      	push	{r4, lr}
 800e95a:	b16a      	cbz	r2, 800e978 <strncmp+0x20>
 800e95c:	3901      	subs	r1, #1
 800e95e:	1884      	adds	r4, r0, r2
 800e960:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e964:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e968:	429a      	cmp	r2, r3
 800e96a:	d103      	bne.n	800e974 <strncmp+0x1c>
 800e96c:	42a0      	cmp	r0, r4
 800e96e:	d001      	beq.n	800e974 <strncmp+0x1c>
 800e970:	2a00      	cmp	r2, #0
 800e972:	d1f5      	bne.n	800e960 <strncmp+0x8>
 800e974:	1ad0      	subs	r0, r2, r3
 800e976:	bd10      	pop	{r4, pc}
 800e978:	4610      	mov	r0, r2
 800e97a:	e7fc      	b.n	800e976 <strncmp+0x1e>

0800e97c <_sbrk_r>:
 800e97c:	b538      	push	{r3, r4, r5, lr}
 800e97e:	4d06      	ldr	r5, [pc, #24]	@ (800e998 <_sbrk_r+0x1c>)
 800e980:	2300      	movs	r3, #0
 800e982:	4604      	mov	r4, r0
 800e984:	4608      	mov	r0, r1
 800e986:	602b      	str	r3, [r5, #0]
 800e988:	f7f4 f9a6 	bl	8002cd8 <_sbrk>
 800e98c:	1c43      	adds	r3, r0, #1
 800e98e:	d102      	bne.n	800e996 <_sbrk_r+0x1a>
 800e990:	682b      	ldr	r3, [r5, #0]
 800e992:	b103      	cbz	r3, 800e996 <_sbrk_r+0x1a>
 800e994:	6023      	str	r3, [r4, #0]
 800e996:	bd38      	pop	{r3, r4, r5, pc}
 800e998:	200049e8 	.word	0x200049e8
 800e99c:	00000000 	.word	0x00000000

0800e9a0 <nan>:
 800e9a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e9a8 <nan+0x8>
 800e9a4:	4770      	bx	lr
 800e9a6:	bf00      	nop
 800e9a8:	00000000 	.word	0x00000000
 800e9ac:	7ff80000 	.word	0x7ff80000

0800e9b0 <__assert_func>:
 800e9b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e9b2:	4614      	mov	r4, r2
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	4b09      	ldr	r3, [pc, #36]	@ (800e9dc <__assert_func+0x2c>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	4605      	mov	r5, r0
 800e9bc:	68d8      	ldr	r0, [r3, #12]
 800e9be:	b954      	cbnz	r4, 800e9d6 <__assert_func+0x26>
 800e9c0:	4b07      	ldr	r3, [pc, #28]	@ (800e9e0 <__assert_func+0x30>)
 800e9c2:	461c      	mov	r4, r3
 800e9c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e9c8:	9100      	str	r1, [sp, #0]
 800e9ca:	462b      	mov	r3, r5
 800e9cc:	4905      	ldr	r1, [pc, #20]	@ (800e9e4 <__assert_func+0x34>)
 800e9ce:	f000 fba7 	bl	800f120 <fiprintf>
 800e9d2:	f000 fbb7 	bl	800f144 <abort>
 800e9d6:	4b04      	ldr	r3, [pc, #16]	@ (800e9e8 <__assert_func+0x38>)
 800e9d8:	e7f4      	b.n	800e9c4 <__assert_func+0x14>
 800e9da:	bf00      	nop
 800e9dc:	20000034 	.word	0x20000034
 800e9e0:	0800ff5d 	.word	0x0800ff5d
 800e9e4:	0800ff2f 	.word	0x0800ff2f
 800e9e8:	0800ff22 	.word	0x0800ff22

0800e9ec <_calloc_r>:
 800e9ec:	b570      	push	{r4, r5, r6, lr}
 800e9ee:	fba1 5402 	umull	r5, r4, r1, r2
 800e9f2:	b93c      	cbnz	r4, 800ea04 <_calloc_r+0x18>
 800e9f4:	4629      	mov	r1, r5
 800e9f6:	f7fe f9cf 	bl	800cd98 <_malloc_r>
 800e9fa:	4606      	mov	r6, r0
 800e9fc:	b928      	cbnz	r0, 800ea0a <_calloc_r+0x1e>
 800e9fe:	2600      	movs	r6, #0
 800ea00:	4630      	mov	r0, r6
 800ea02:	bd70      	pop	{r4, r5, r6, pc}
 800ea04:	220c      	movs	r2, #12
 800ea06:	6002      	str	r2, [r0, #0]
 800ea08:	e7f9      	b.n	800e9fe <_calloc_r+0x12>
 800ea0a:	462a      	mov	r2, r5
 800ea0c:	4621      	mov	r1, r4
 800ea0e:	f7fd fa18 	bl	800be42 <memset>
 800ea12:	e7f5      	b.n	800ea00 <_calloc_r+0x14>

0800ea14 <rshift>:
 800ea14:	6903      	ldr	r3, [r0, #16]
 800ea16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ea1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ea22:	f100 0414 	add.w	r4, r0, #20
 800ea26:	dd45      	ble.n	800eab4 <rshift+0xa0>
 800ea28:	f011 011f 	ands.w	r1, r1, #31
 800ea2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ea30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ea34:	d10c      	bne.n	800ea50 <rshift+0x3c>
 800ea36:	f100 0710 	add.w	r7, r0, #16
 800ea3a:	4629      	mov	r1, r5
 800ea3c:	42b1      	cmp	r1, r6
 800ea3e:	d334      	bcc.n	800eaaa <rshift+0x96>
 800ea40:	1a9b      	subs	r3, r3, r2
 800ea42:	009b      	lsls	r3, r3, #2
 800ea44:	1eea      	subs	r2, r5, #3
 800ea46:	4296      	cmp	r6, r2
 800ea48:	bf38      	it	cc
 800ea4a:	2300      	movcc	r3, #0
 800ea4c:	4423      	add	r3, r4
 800ea4e:	e015      	b.n	800ea7c <rshift+0x68>
 800ea50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ea54:	f1c1 0820 	rsb	r8, r1, #32
 800ea58:	40cf      	lsrs	r7, r1
 800ea5a:	f105 0e04 	add.w	lr, r5, #4
 800ea5e:	46a1      	mov	r9, r4
 800ea60:	4576      	cmp	r6, lr
 800ea62:	46f4      	mov	ip, lr
 800ea64:	d815      	bhi.n	800ea92 <rshift+0x7e>
 800ea66:	1a9a      	subs	r2, r3, r2
 800ea68:	0092      	lsls	r2, r2, #2
 800ea6a:	3a04      	subs	r2, #4
 800ea6c:	3501      	adds	r5, #1
 800ea6e:	42ae      	cmp	r6, r5
 800ea70:	bf38      	it	cc
 800ea72:	2200      	movcc	r2, #0
 800ea74:	18a3      	adds	r3, r4, r2
 800ea76:	50a7      	str	r7, [r4, r2]
 800ea78:	b107      	cbz	r7, 800ea7c <rshift+0x68>
 800ea7a:	3304      	adds	r3, #4
 800ea7c:	1b1a      	subs	r2, r3, r4
 800ea7e:	42a3      	cmp	r3, r4
 800ea80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ea84:	bf08      	it	eq
 800ea86:	2300      	moveq	r3, #0
 800ea88:	6102      	str	r2, [r0, #16]
 800ea8a:	bf08      	it	eq
 800ea8c:	6143      	streq	r3, [r0, #20]
 800ea8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea92:	f8dc c000 	ldr.w	ip, [ip]
 800ea96:	fa0c fc08 	lsl.w	ip, ip, r8
 800ea9a:	ea4c 0707 	orr.w	r7, ip, r7
 800ea9e:	f849 7b04 	str.w	r7, [r9], #4
 800eaa2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eaa6:	40cf      	lsrs	r7, r1
 800eaa8:	e7da      	b.n	800ea60 <rshift+0x4c>
 800eaaa:	f851 cb04 	ldr.w	ip, [r1], #4
 800eaae:	f847 cf04 	str.w	ip, [r7, #4]!
 800eab2:	e7c3      	b.n	800ea3c <rshift+0x28>
 800eab4:	4623      	mov	r3, r4
 800eab6:	e7e1      	b.n	800ea7c <rshift+0x68>

0800eab8 <__hexdig_fun>:
 800eab8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800eabc:	2b09      	cmp	r3, #9
 800eabe:	d802      	bhi.n	800eac6 <__hexdig_fun+0xe>
 800eac0:	3820      	subs	r0, #32
 800eac2:	b2c0      	uxtb	r0, r0
 800eac4:	4770      	bx	lr
 800eac6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800eaca:	2b05      	cmp	r3, #5
 800eacc:	d801      	bhi.n	800ead2 <__hexdig_fun+0x1a>
 800eace:	3847      	subs	r0, #71	@ 0x47
 800ead0:	e7f7      	b.n	800eac2 <__hexdig_fun+0xa>
 800ead2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ead6:	2b05      	cmp	r3, #5
 800ead8:	d801      	bhi.n	800eade <__hexdig_fun+0x26>
 800eada:	3827      	subs	r0, #39	@ 0x27
 800eadc:	e7f1      	b.n	800eac2 <__hexdig_fun+0xa>
 800eade:	2000      	movs	r0, #0
 800eae0:	4770      	bx	lr
	...

0800eae4 <__gethex>:
 800eae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eae8:	b085      	sub	sp, #20
 800eaea:	468a      	mov	sl, r1
 800eaec:	9302      	str	r3, [sp, #8]
 800eaee:	680b      	ldr	r3, [r1, #0]
 800eaf0:	9001      	str	r0, [sp, #4]
 800eaf2:	4690      	mov	r8, r2
 800eaf4:	1c9c      	adds	r4, r3, #2
 800eaf6:	46a1      	mov	r9, r4
 800eaf8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800eafc:	2830      	cmp	r0, #48	@ 0x30
 800eafe:	d0fa      	beq.n	800eaf6 <__gethex+0x12>
 800eb00:	eba9 0303 	sub.w	r3, r9, r3
 800eb04:	f1a3 0b02 	sub.w	fp, r3, #2
 800eb08:	f7ff ffd6 	bl	800eab8 <__hexdig_fun>
 800eb0c:	4605      	mov	r5, r0
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	d168      	bne.n	800ebe4 <__gethex+0x100>
 800eb12:	49a0      	ldr	r1, [pc, #640]	@ (800ed94 <__gethex+0x2b0>)
 800eb14:	2201      	movs	r2, #1
 800eb16:	4648      	mov	r0, r9
 800eb18:	f7ff ff1e 	bl	800e958 <strncmp>
 800eb1c:	4607      	mov	r7, r0
 800eb1e:	2800      	cmp	r0, #0
 800eb20:	d167      	bne.n	800ebf2 <__gethex+0x10e>
 800eb22:	f899 0001 	ldrb.w	r0, [r9, #1]
 800eb26:	4626      	mov	r6, r4
 800eb28:	f7ff ffc6 	bl	800eab8 <__hexdig_fun>
 800eb2c:	2800      	cmp	r0, #0
 800eb2e:	d062      	beq.n	800ebf6 <__gethex+0x112>
 800eb30:	4623      	mov	r3, r4
 800eb32:	7818      	ldrb	r0, [r3, #0]
 800eb34:	2830      	cmp	r0, #48	@ 0x30
 800eb36:	4699      	mov	r9, r3
 800eb38:	f103 0301 	add.w	r3, r3, #1
 800eb3c:	d0f9      	beq.n	800eb32 <__gethex+0x4e>
 800eb3e:	f7ff ffbb 	bl	800eab8 <__hexdig_fun>
 800eb42:	fab0 f580 	clz	r5, r0
 800eb46:	096d      	lsrs	r5, r5, #5
 800eb48:	f04f 0b01 	mov.w	fp, #1
 800eb4c:	464a      	mov	r2, r9
 800eb4e:	4616      	mov	r6, r2
 800eb50:	3201      	adds	r2, #1
 800eb52:	7830      	ldrb	r0, [r6, #0]
 800eb54:	f7ff ffb0 	bl	800eab8 <__hexdig_fun>
 800eb58:	2800      	cmp	r0, #0
 800eb5a:	d1f8      	bne.n	800eb4e <__gethex+0x6a>
 800eb5c:	498d      	ldr	r1, [pc, #564]	@ (800ed94 <__gethex+0x2b0>)
 800eb5e:	2201      	movs	r2, #1
 800eb60:	4630      	mov	r0, r6
 800eb62:	f7ff fef9 	bl	800e958 <strncmp>
 800eb66:	2800      	cmp	r0, #0
 800eb68:	d13f      	bne.n	800ebea <__gethex+0x106>
 800eb6a:	b944      	cbnz	r4, 800eb7e <__gethex+0x9a>
 800eb6c:	1c74      	adds	r4, r6, #1
 800eb6e:	4622      	mov	r2, r4
 800eb70:	4616      	mov	r6, r2
 800eb72:	3201      	adds	r2, #1
 800eb74:	7830      	ldrb	r0, [r6, #0]
 800eb76:	f7ff ff9f 	bl	800eab8 <__hexdig_fun>
 800eb7a:	2800      	cmp	r0, #0
 800eb7c:	d1f8      	bne.n	800eb70 <__gethex+0x8c>
 800eb7e:	1ba4      	subs	r4, r4, r6
 800eb80:	00a7      	lsls	r7, r4, #2
 800eb82:	7833      	ldrb	r3, [r6, #0]
 800eb84:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800eb88:	2b50      	cmp	r3, #80	@ 0x50
 800eb8a:	d13e      	bne.n	800ec0a <__gethex+0x126>
 800eb8c:	7873      	ldrb	r3, [r6, #1]
 800eb8e:	2b2b      	cmp	r3, #43	@ 0x2b
 800eb90:	d033      	beq.n	800ebfa <__gethex+0x116>
 800eb92:	2b2d      	cmp	r3, #45	@ 0x2d
 800eb94:	d034      	beq.n	800ec00 <__gethex+0x11c>
 800eb96:	1c71      	adds	r1, r6, #1
 800eb98:	2400      	movs	r4, #0
 800eb9a:	7808      	ldrb	r0, [r1, #0]
 800eb9c:	f7ff ff8c 	bl	800eab8 <__hexdig_fun>
 800eba0:	1e43      	subs	r3, r0, #1
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	2b18      	cmp	r3, #24
 800eba6:	d830      	bhi.n	800ec0a <__gethex+0x126>
 800eba8:	f1a0 0210 	sub.w	r2, r0, #16
 800ebac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ebb0:	f7ff ff82 	bl	800eab8 <__hexdig_fun>
 800ebb4:	f100 3cff 	add.w	ip, r0, #4294967295
 800ebb8:	fa5f fc8c 	uxtb.w	ip, ip
 800ebbc:	f1bc 0f18 	cmp.w	ip, #24
 800ebc0:	f04f 030a 	mov.w	r3, #10
 800ebc4:	d91e      	bls.n	800ec04 <__gethex+0x120>
 800ebc6:	b104      	cbz	r4, 800ebca <__gethex+0xe6>
 800ebc8:	4252      	negs	r2, r2
 800ebca:	4417      	add	r7, r2
 800ebcc:	f8ca 1000 	str.w	r1, [sl]
 800ebd0:	b1ed      	cbz	r5, 800ec0e <__gethex+0x12a>
 800ebd2:	f1bb 0f00 	cmp.w	fp, #0
 800ebd6:	bf0c      	ite	eq
 800ebd8:	2506      	moveq	r5, #6
 800ebda:	2500      	movne	r5, #0
 800ebdc:	4628      	mov	r0, r5
 800ebde:	b005      	add	sp, #20
 800ebe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebe4:	2500      	movs	r5, #0
 800ebe6:	462c      	mov	r4, r5
 800ebe8:	e7b0      	b.n	800eb4c <__gethex+0x68>
 800ebea:	2c00      	cmp	r4, #0
 800ebec:	d1c7      	bne.n	800eb7e <__gethex+0x9a>
 800ebee:	4627      	mov	r7, r4
 800ebf0:	e7c7      	b.n	800eb82 <__gethex+0x9e>
 800ebf2:	464e      	mov	r6, r9
 800ebf4:	462f      	mov	r7, r5
 800ebf6:	2501      	movs	r5, #1
 800ebf8:	e7c3      	b.n	800eb82 <__gethex+0x9e>
 800ebfa:	2400      	movs	r4, #0
 800ebfc:	1cb1      	adds	r1, r6, #2
 800ebfe:	e7cc      	b.n	800eb9a <__gethex+0xb6>
 800ec00:	2401      	movs	r4, #1
 800ec02:	e7fb      	b.n	800ebfc <__gethex+0x118>
 800ec04:	fb03 0002 	mla	r0, r3, r2, r0
 800ec08:	e7ce      	b.n	800eba8 <__gethex+0xc4>
 800ec0a:	4631      	mov	r1, r6
 800ec0c:	e7de      	b.n	800ebcc <__gethex+0xe8>
 800ec0e:	eba6 0309 	sub.w	r3, r6, r9
 800ec12:	3b01      	subs	r3, #1
 800ec14:	4629      	mov	r1, r5
 800ec16:	2b07      	cmp	r3, #7
 800ec18:	dc0a      	bgt.n	800ec30 <__gethex+0x14c>
 800ec1a:	9801      	ldr	r0, [sp, #4]
 800ec1c:	f7fe f948 	bl	800ceb0 <_Balloc>
 800ec20:	4604      	mov	r4, r0
 800ec22:	b940      	cbnz	r0, 800ec36 <__gethex+0x152>
 800ec24:	4b5c      	ldr	r3, [pc, #368]	@ (800ed98 <__gethex+0x2b4>)
 800ec26:	4602      	mov	r2, r0
 800ec28:	21e4      	movs	r1, #228	@ 0xe4
 800ec2a:	485c      	ldr	r0, [pc, #368]	@ (800ed9c <__gethex+0x2b8>)
 800ec2c:	f7ff fec0 	bl	800e9b0 <__assert_func>
 800ec30:	3101      	adds	r1, #1
 800ec32:	105b      	asrs	r3, r3, #1
 800ec34:	e7ef      	b.n	800ec16 <__gethex+0x132>
 800ec36:	f100 0a14 	add.w	sl, r0, #20
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	4655      	mov	r5, sl
 800ec3e:	469b      	mov	fp, r3
 800ec40:	45b1      	cmp	r9, r6
 800ec42:	d337      	bcc.n	800ecb4 <__gethex+0x1d0>
 800ec44:	f845 bb04 	str.w	fp, [r5], #4
 800ec48:	eba5 050a 	sub.w	r5, r5, sl
 800ec4c:	10ad      	asrs	r5, r5, #2
 800ec4e:	6125      	str	r5, [r4, #16]
 800ec50:	4658      	mov	r0, fp
 800ec52:	f7fe fa1f 	bl	800d094 <__hi0bits>
 800ec56:	016d      	lsls	r5, r5, #5
 800ec58:	f8d8 6000 	ldr.w	r6, [r8]
 800ec5c:	1a2d      	subs	r5, r5, r0
 800ec5e:	42b5      	cmp	r5, r6
 800ec60:	dd54      	ble.n	800ed0c <__gethex+0x228>
 800ec62:	1bad      	subs	r5, r5, r6
 800ec64:	4629      	mov	r1, r5
 800ec66:	4620      	mov	r0, r4
 800ec68:	f7fe fdb3 	bl	800d7d2 <__any_on>
 800ec6c:	4681      	mov	r9, r0
 800ec6e:	b178      	cbz	r0, 800ec90 <__gethex+0x1ac>
 800ec70:	1e6b      	subs	r3, r5, #1
 800ec72:	1159      	asrs	r1, r3, #5
 800ec74:	f003 021f 	and.w	r2, r3, #31
 800ec78:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ec7c:	f04f 0901 	mov.w	r9, #1
 800ec80:	fa09 f202 	lsl.w	r2, r9, r2
 800ec84:	420a      	tst	r2, r1
 800ec86:	d003      	beq.n	800ec90 <__gethex+0x1ac>
 800ec88:	454b      	cmp	r3, r9
 800ec8a:	dc36      	bgt.n	800ecfa <__gethex+0x216>
 800ec8c:	f04f 0902 	mov.w	r9, #2
 800ec90:	4629      	mov	r1, r5
 800ec92:	4620      	mov	r0, r4
 800ec94:	f7ff febe 	bl	800ea14 <rshift>
 800ec98:	442f      	add	r7, r5
 800ec9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ec9e:	42bb      	cmp	r3, r7
 800eca0:	da42      	bge.n	800ed28 <__gethex+0x244>
 800eca2:	9801      	ldr	r0, [sp, #4]
 800eca4:	4621      	mov	r1, r4
 800eca6:	f7fe f943 	bl	800cf30 <_Bfree>
 800ecaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ecac:	2300      	movs	r3, #0
 800ecae:	6013      	str	r3, [r2, #0]
 800ecb0:	25a3      	movs	r5, #163	@ 0xa3
 800ecb2:	e793      	b.n	800ebdc <__gethex+0xf8>
 800ecb4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ecb8:	2a2e      	cmp	r2, #46	@ 0x2e
 800ecba:	d012      	beq.n	800ece2 <__gethex+0x1fe>
 800ecbc:	2b20      	cmp	r3, #32
 800ecbe:	d104      	bne.n	800ecca <__gethex+0x1e6>
 800ecc0:	f845 bb04 	str.w	fp, [r5], #4
 800ecc4:	f04f 0b00 	mov.w	fp, #0
 800ecc8:	465b      	mov	r3, fp
 800ecca:	7830      	ldrb	r0, [r6, #0]
 800eccc:	9303      	str	r3, [sp, #12]
 800ecce:	f7ff fef3 	bl	800eab8 <__hexdig_fun>
 800ecd2:	9b03      	ldr	r3, [sp, #12]
 800ecd4:	f000 000f 	and.w	r0, r0, #15
 800ecd8:	4098      	lsls	r0, r3
 800ecda:	ea4b 0b00 	orr.w	fp, fp, r0
 800ecde:	3304      	adds	r3, #4
 800ece0:	e7ae      	b.n	800ec40 <__gethex+0x15c>
 800ece2:	45b1      	cmp	r9, r6
 800ece4:	d8ea      	bhi.n	800ecbc <__gethex+0x1d8>
 800ece6:	492b      	ldr	r1, [pc, #172]	@ (800ed94 <__gethex+0x2b0>)
 800ece8:	9303      	str	r3, [sp, #12]
 800ecea:	2201      	movs	r2, #1
 800ecec:	4630      	mov	r0, r6
 800ecee:	f7ff fe33 	bl	800e958 <strncmp>
 800ecf2:	9b03      	ldr	r3, [sp, #12]
 800ecf4:	2800      	cmp	r0, #0
 800ecf6:	d1e1      	bne.n	800ecbc <__gethex+0x1d8>
 800ecf8:	e7a2      	b.n	800ec40 <__gethex+0x15c>
 800ecfa:	1ea9      	subs	r1, r5, #2
 800ecfc:	4620      	mov	r0, r4
 800ecfe:	f7fe fd68 	bl	800d7d2 <__any_on>
 800ed02:	2800      	cmp	r0, #0
 800ed04:	d0c2      	beq.n	800ec8c <__gethex+0x1a8>
 800ed06:	f04f 0903 	mov.w	r9, #3
 800ed0a:	e7c1      	b.n	800ec90 <__gethex+0x1ac>
 800ed0c:	da09      	bge.n	800ed22 <__gethex+0x23e>
 800ed0e:	1b75      	subs	r5, r6, r5
 800ed10:	4621      	mov	r1, r4
 800ed12:	9801      	ldr	r0, [sp, #4]
 800ed14:	462a      	mov	r2, r5
 800ed16:	f7fe fb23 	bl	800d360 <__lshift>
 800ed1a:	1b7f      	subs	r7, r7, r5
 800ed1c:	4604      	mov	r4, r0
 800ed1e:	f100 0a14 	add.w	sl, r0, #20
 800ed22:	f04f 0900 	mov.w	r9, #0
 800ed26:	e7b8      	b.n	800ec9a <__gethex+0x1b6>
 800ed28:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ed2c:	42bd      	cmp	r5, r7
 800ed2e:	dd6f      	ble.n	800ee10 <__gethex+0x32c>
 800ed30:	1bed      	subs	r5, r5, r7
 800ed32:	42ae      	cmp	r6, r5
 800ed34:	dc34      	bgt.n	800eda0 <__gethex+0x2bc>
 800ed36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ed3a:	2b02      	cmp	r3, #2
 800ed3c:	d022      	beq.n	800ed84 <__gethex+0x2a0>
 800ed3e:	2b03      	cmp	r3, #3
 800ed40:	d024      	beq.n	800ed8c <__gethex+0x2a8>
 800ed42:	2b01      	cmp	r3, #1
 800ed44:	d115      	bne.n	800ed72 <__gethex+0x28e>
 800ed46:	42ae      	cmp	r6, r5
 800ed48:	d113      	bne.n	800ed72 <__gethex+0x28e>
 800ed4a:	2e01      	cmp	r6, #1
 800ed4c:	d10b      	bne.n	800ed66 <__gethex+0x282>
 800ed4e:	9a02      	ldr	r2, [sp, #8]
 800ed50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ed54:	6013      	str	r3, [r2, #0]
 800ed56:	2301      	movs	r3, #1
 800ed58:	6123      	str	r3, [r4, #16]
 800ed5a:	f8ca 3000 	str.w	r3, [sl]
 800ed5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed60:	2562      	movs	r5, #98	@ 0x62
 800ed62:	601c      	str	r4, [r3, #0]
 800ed64:	e73a      	b.n	800ebdc <__gethex+0xf8>
 800ed66:	1e71      	subs	r1, r6, #1
 800ed68:	4620      	mov	r0, r4
 800ed6a:	f7fe fd32 	bl	800d7d2 <__any_on>
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	d1ed      	bne.n	800ed4e <__gethex+0x26a>
 800ed72:	9801      	ldr	r0, [sp, #4]
 800ed74:	4621      	mov	r1, r4
 800ed76:	f7fe f8db 	bl	800cf30 <_Bfree>
 800ed7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	6013      	str	r3, [r2, #0]
 800ed80:	2550      	movs	r5, #80	@ 0x50
 800ed82:	e72b      	b.n	800ebdc <__gethex+0xf8>
 800ed84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d1f3      	bne.n	800ed72 <__gethex+0x28e>
 800ed8a:	e7e0      	b.n	800ed4e <__gethex+0x26a>
 800ed8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d1dd      	bne.n	800ed4e <__gethex+0x26a>
 800ed92:	e7ee      	b.n	800ed72 <__gethex+0x28e>
 800ed94:	0800fdb0 	.word	0x0800fdb0
 800ed98:	0800fc45 	.word	0x0800fc45
 800ed9c:	0800ff5e 	.word	0x0800ff5e
 800eda0:	1e6f      	subs	r7, r5, #1
 800eda2:	f1b9 0f00 	cmp.w	r9, #0
 800eda6:	d130      	bne.n	800ee0a <__gethex+0x326>
 800eda8:	b127      	cbz	r7, 800edb4 <__gethex+0x2d0>
 800edaa:	4639      	mov	r1, r7
 800edac:	4620      	mov	r0, r4
 800edae:	f7fe fd10 	bl	800d7d2 <__any_on>
 800edb2:	4681      	mov	r9, r0
 800edb4:	117a      	asrs	r2, r7, #5
 800edb6:	2301      	movs	r3, #1
 800edb8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800edbc:	f007 071f 	and.w	r7, r7, #31
 800edc0:	40bb      	lsls	r3, r7
 800edc2:	4213      	tst	r3, r2
 800edc4:	4629      	mov	r1, r5
 800edc6:	4620      	mov	r0, r4
 800edc8:	bf18      	it	ne
 800edca:	f049 0902 	orrne.w	r9, r9, #2
 800edce:	f7ff fe21 	bl	800ea14 <rshift>
 800edd2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800edd6:	1b76      	subs	r6, r6, r5
 800edd8:	2502      	movs	r5, #2
 800edda:	f1b9 0f00 	cmp.w	r9, #0
 800edde:	d047      	beq.n	800ee70 <__gethex+0x38c>
 800ede0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ede4:	2b02      	cmp	r3, #2
 800ede6:	d015      	beq.n	800ee14 <__gethex+0x330>
 800ede8:	2b03      	cmp	r3, #3
 800edea:	d017      	beq.n	800ee1c <__gethex+0x338>
 800edec:	2b01      	cmp	r3, #1
 800edee:	d109      	bne.n	800ee04 <__gethex+0x320>
 800edf0:	f019 0f02 	tst.w	r9, #2
 800edf4:	d006      	beq.n	800ee04 <__gethex+0x320>
 800edf6:	f8da 3000 	ldr.w	r3, [sl]
 800edfa:	ea49 0903 	orr.w	r9, r9, r3
 800edfe:	f019 0f01 	tst.w	r9, #1
 800ee02:	d10e      	bne.n	800ee22 <__gethex+0x33e>
 800ee04:	f045 0510 	orr.w	r5, r5, #16
 800ee08:	e032      	b.n	800ee70 <__gethex+0x38c>
 800ee0a:	f04f 0901 	mov.w	r9, #1
 800ee0e:	e7d1      	b.n	800edb4 <__gethex+0x2d0>
 800ee10:	2501      	movs	r5, #1
 800ee12:	e7e2      	b.n	800edda <__gethex+0x2f6>
 800ee14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee16:	f1c3 0301 	rsb	r3, r3, #1
 800ee1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ee1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d0f0      	beq.n	800ee04 <__gethex+0x320>
 800ee22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ee26:	f104 0314 	add.w	r3, r4, #20
 800ee2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ee2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ee32:	f04f 0c00 	mov.w	ip, #0
 800ee36:	4618      	mov	r0, r3
 800ee38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ee40:	d01b      	beq.n	800ee7a <__gethex+0x396>
 800ee42:	3201      	adds	r2, #1
 800ee44:	6002      	str	r2, [r0, #0]
 800ee46:	2d02      	cmp	r5, #2
 800ee48:	f104 0314 	add.w	r3, r4, #20
 800ee4c:	d13c      	bne.n	800eec8 <__gethex+0x3e4>
 800ee4e:	f8d8 2000 	ldr.w	r2, [r8]
 800ee52:	3a01      	subs	r2, #1
 800ee54:	42b2      	cmp	r2, r6
 800ee56:	d109      	bne.n	800ee6c <__gethex+0x388>
 800ee58:	1171      	asrs	r1, r6, #5
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ee60:	f006 061f 	and.w	r6, r6, #31
 800ee64:	fa02 f606 	lsl.w	r6, r2, r6
 800ee68:	421e      	tst	r6, r3
 800ee6a:	d13a      	bne.n	800eee2 <__gethex+0x3fe>
 800ee6c:	f045 0520 	orr.w	r5, r5, #32
 800ee70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee72:	601c      	str	r4, [r3, #0]
 800ee74:	9b02      	ldr	r3, [sp, #8]
 800ee76:	601f      	str	r7, [r3, #0]
 800ee78:	e6b0      	b.n	800ebdc <__gethex+0xf8>
 800ee7a:	4299      	cmp	r1, r3
 800ee7c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ee80:	d8d9      	bhi.n	800ee36 <__gethex+0x352>
 800ee82:	68a3      	ldr	r3, [r4, #8]
 800ee84:	459b      	cmp	fp, r3
 800ee86:	db17      	blt.n	800eeb8 <__gethex+0x3d4>
 800ee88:	6861      	ldr	r1, [r4, #4]
 800ee8a:	9801      	ldr	r0, [sp, #4]
 800ee8c:	3101      	adds	r1, #1
 800ee8e:	f7fe f80f 	bl	800ceb0 <_Balloc>
 800ee92:	4681      	mov	r9, r0
 800ee94:	b918      	cbnz	r0, 800ee9e <__gethex+0x3ba>
 800ee96:	4b1a      	ldr	r3, [pc, #104]	@ (800ef00 <__gethex+0x41c>)
 800ee98:	4602      	mov	r2, r0
 800ee9a:	2184      	movs	r1, #132	@ 0x84
 800ee9c:	e6c5      	b.n	800ec2a <__gethex+0x146>
 800ee9e:	6922      	ldr	r2, [r4, #16]
 800eea0:	3202      	adds	r2, #2
 800eea2:	f104 010c 	add.w	r1, r4, #12
 800eea6:	0092      	lsls	r2, r2, #2
 800eea8:	300c      	adds	r0, #12
 800eeaa:	f7fd f8a0 	bl	800bfee <memcpy>
 800eeae:	4621      	mov	r1, r4
 800eeb0:	9801      	ldr	r0, [sp, #4]
 800eeb2:	f7fe f83d 	bl	800cf30 <_Bfree>
 800eeb6:	464c      	mov	r4, r9
 800eeb8:	6923      	ldr	r3, [r4, #16]
 800eeba:	1c5a      	adds	r2, r3, #1
 800eebc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eec0:	6122      	str	r2, [r4, #16]
 800eec2:	2201      	movs	r2, #1
 800eec4:	615a      	str	r2, [r3, #20]
 800eec6:	e7be      	b.n	800ee46 <__gethex+0x362>
 800eec8:	6922      	ldr	r2, [r4, #16]
 800eeca:	455a      	cmp	r2, fp
 800eecc:	dd0b      	ble.n	800eee6 <__gethex+0x402>
 800eece:	2101      	movs	r1, #1
 800eed0:	4620      	mov	r0, r4
 800eed2:	f7ff fd9f 	bl	800ea14 <rshift>
 800eed6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eeda:	3701      	adds	r7, #1
 800eedc:	42bb      	cmp	r3, r7
 800eede:	f6ff aee0 	blt.w	800eca2 <__gethex+0x1be>
 800eee2:	2501      	movs	r5, #1
 800eee4:	e7c2      	b.n	800ee6c <__gethex+0x388>
 800eee6:	f016 061f 	ands.w	r6, r6, #31
 800eeea:	d0fa      	beq.n	800eee2 <__gethex+0x3fe>
 800eeec:	4453      	add	r3, sl
 800eeee:	f1c6 0620 	rsb	r6, r6, #32
 800eef2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800eef6:	f7fe f8cd 	bl	800d094 <__hi0bits>
 800eefa:	42b0      	cmp	r0, r6
 800eefc:	dbe7      	blt.n	800eece <__gethex+0x3ea>
 800eefe:	e7f0      	b.n	800eee2 <__gethex+0x3fe>
 800ef00:	0800fc45 	.word	0x0800fc45

0800ef04 <L_shift>:
 800ef04:	f1c2 0208 	rsb	r2, r2, #8
 800ef08:	0092      	lsls	r2, r2, #2
 800ef0a:	b570      	push	{r4, r5, r6, lr}
 800ef0c:	f1c2 0620 	rsb	r6, r2, #32
 800ef10:	6843      	ldr	r3, [r0, #4]
 800ef12:	6804      	ldr	r4, [r0, #0]
 800ef14:	fa03 f506 	lsl.w	r5, r3, r6
 800ef18:	432c      	orrs	r4, r5
 800ef1a:	40d3      	lsrs	r3, r2
 800ef1c:	6004      	str	r4, [r0, #0]
 800ef1e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ef22:	4288      	cmp	r0, r1
 800ef24:	d3f4      	bcc.n	800ef10 <L_shift+0xc>
 800ef26:	bd70      	pop	{r4, r5, r6, pc}

0800ef28 <__match>:
 800ef28:	b530      	push	{r4, r5, lr}
 800ef2a:	6803      	ldr	r3, [r0, #0]
 800ef2c:	3301      	adds	r3, #1
 800ef2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef32:	b914      	cbnz	r4, 800ef3a <__match+0x12>
 800ef34:	6003      	str	r3, [r0, #0]
 800ef36:	2001      	movs	r0, #1
 800ef38:	bd30      	pop	{r4, r5, pc}
 800ef3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ef42:	2d19      	cmp	r5, #25
 800ef44:	bf98      	it	ls
 800ef46:	3220      	addls	r2, #32
 800ef48:	42a2      	cmp	r2, r4
 800ef4a:	d0f0      	beq.n	800ef2e <__match+0x6>
 800ef4c:	2000      	movs	r0, #0
 800ef4e:	e7f3      	b.n	800ef38 <__match+0x10>

0800ef50 <__hexnan>:
 800ef50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef54:	680b      	ldr	r3, [r1, #0]
 800ef56:	6801      	ldr	r1, [r0, #0]
 800ef58:	115e      	asrs	r6, r3, #5
 800ef5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ef5e:	f013 031f 	ands.w	r3, r3, #31
 800ef62:	b087      	sub	sp, #28
 800ef64:	bf18      	it	ne
 800ef66:	3604      	addne	r6, #4
 800ef68:	2500      	movs	r5, #0
 800ef6a:	1f37      	subs	r7, r6, #4
 800ef6c:	4682      	mov	sl, r0
 800ef6e:	4690      	mov	r8, r2
 800ef70:	9301      	str	r3, [sp, #4]
 800ef72:	f846 5c04 	str.w	r5, [r6, #-4]
 800ef76:	46b9      	mov	r9, r7
 800ef78:	463c      	mov	r4, r7
 800ef7a:	9502      	str	r5, [sp, #8]
 800ef7c:	46ab      	mov	fp, r5
 800ef7e:	784a      	ldrb	r2, [r1, #1]
 800ef80:	1c4b      	adds	r3, r1, #1
 800ef82:	9303      	str	r3, [sp, #12]
 800ef84:	b342      	cbz	r2, 800efd8 <__hexnan+0x88>
 800ef86:	4610      	mov	r0, r2
 800ef88:	9105      	str	r1, [sp, #20]
 800ef8a:	9204      	str	r2, [sp, #16]
 800ef8c:	f7ff fd94 	bl	800eab8 <__hexdig_fun>
 800ef90:	2800      	cmp	r0, #0
 800ef92:	d151      	bne.n	800f038 <__hexnan+0xe8>
 800ef94:	9a04      	ldr	r2, [sp, #16]
 800ef96:	9905      	ldr	r1, [sp, #20]
 800ef98:	2a20      	cmp	r2, #32
 800ef9a:	d818      	bhi.n	800efce <__hexnan+0x7e>
 800ef9c:	9b02      	ldr	r3, [sp, #8]
 800ef9e:	459b      	cmp	fp, r3
 800efa0:	dd13      	ble.n	800efca <__hexnan+0x7a>
 800efa2:	454c      	cmp	r4, r9
 800efa4:	d206      	bcs.n	800efb4 <__hexnan+0x64>
 800efa6:	2d07      	cmp	r5, #7
 800efa8:	dc04      	bgt.n	800efb4 <__hexnan+0x64>
 800efaa:	462a      	mov	r2, r5
 800efac:	4649      	mov	r1, r9
 800efae:	4620      	mov	r0, r4
 800efb0:	f7ff ffa8 	bl	800ef04 <L_shift>
 800efb4:	4544      	cmp	r4, r8
 800efb6:	d952      	bls.n	800f05e <__hexnan+0x10e>
 800efb8:	2300      	movs	r3, #0
 800efba:	f1a4 0904 	sub.w	r9, r4, #4
 800efbe:	f844 3c04 	str.w	r3, [r4, #-4]
 800efc2:	f8cd b008 	str.w	fp, [sp, #8]
 800efc6:	464c      	mov	r4, r9
 800efc8:	461d      	mov	r5, r3
 800efca:	9903      	ldr	r1, [sp, #12]
 800efcc:	e7d7      	b.n	800ef7e <__hexnan+0x2e>
 800efce:	2a29      	cmp	r2, #41	@ 0x29
 800efd0:	d157      	bne.n	800f082 <__hexnan+0x132>
 800efd2:	3102      	adds	r1, #2
 800efd4:	f8ca 1000 	str.w	r1, [sl]
 800efd8:	f1bb 0f00 	cmp.w	fp, #0
 800efdc:	d051      	beq.n	800f082 <__hexnan+0x132>
 800efde:	454c      	cmp	r4, r9
 800efe0:	d206      	bcs.n	800eff0 <__hexnan+0xa0>
 800efe2:	2d07      	cmp	r5, #7
 800efe4:	dc04      	bgt.n	800eff0 <__hexnan+0xa0>
 800efe6:	462a      	mov	r2, r5
 800efe8:	4649      	mov	r1, r9
 800efea:	4620      	mov	r0, r4
 800efec:	f7ff ff8a 	bl	800ef04 <L_shift>
 800eff0:	4544      	cmp	r4, r8
 800eff2:	d936      	bls.n	800f062 <__hexnan+0x112>
 800eff4:	f1a8 0204 	sub.w	r2, r8, #4
 800eff8:	4623      	mov	r3, r4
 800effa:	f853 1b04 	ldr.w	r1, [r3], #4
 800effe:	f842 1f04 	str.w	r1, [r2, #4]!
 800f002:	429f      	cmp	r7, r3
 800f004:	d2f9      	bcs.n	800effa <__hexnan+0xaa>
 800f006:	1b3b      	subs	r3, r7, r4
 800f008:	f023 0303 	bic.w	r3, r3, #3
 800f00c:	3304      	adds	r3, #4
 800f00e:	3401      	adds	r4, #1
 800f010:	3e03      	subs	r6, #3
 800f012:	42b4      	cmp	r4, r6
 800f014:	bf88      	it	hi
 800f016:	2304      	movhi	r3, #4
 800f018:	4443      	add	r3, r8
 800f01a:	2200      	movs	r2, #0
 800f01c:	f843 2b04 	str.w	r2, [r3], #4
 800f020:	429f      	cmp	r7, r3
 800f022:	d2fb      	bcs.n	800f01c <__hexnan+0xcc>
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	b91b      	cbnz	r3, 800f030 <__hexnan+0xe0>
 800f028:	4547      	cmp	r7, r8
 800f02a:	d128      	bne.n	800f07e <__hexnan+0x12e>
 800f02c:	2301      	movs	r3, #1
 800f02e:	603b      	str	r3, [r7, #0]
 800f030:	2005      	movs	r0, #5
 800f032:	b007      	add	sp, #28
 800f034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f038:	3501      	adds	r5, #1
 800f03a:	2d08      	cmp	r5, #8
 800f03c:	f10b 0b01 	add.w	fp, fp, #1
 800f040:	dd06      	ble.n	800f050 <__hexnan+0x100>
 800f042:	4544      	cmp	r4, r8
 800f044:	d9c1      	bls.n	800efca <__hexnan+0x7a>
 800f046:	2300      	movs	r3, #0
 800f048:	f844 3c04 	str.w	r3, [r4, #-4]
 800f04c:	2501      	movs	r5, #1
 800f04e:	3c04      	subs	r4, #4
 800f050:	6822      	ldr	r2, [r4, #0]
 800f052:	f000 000f 	and.w	r0, r0, #15
 800f056:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f05a:	6020      	str	r0, [r4, #0]
 800f05c:	e7b5      	b.n	800efca <__hexnan+0x7a>
 800f05e:	2508      	movs	r5, #8
 800f060:	e7b3      	b.n	800efca <__hexnan+0x7a>
 800f062:	9b01      	ldr	r3, [sp, #4]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d0dd      	beq.n	800f024 <__hexnan+0xd4>
 800f068:	f1c3 0320 	rsb	r3, r3, #32
 800f06c:	f04f 32ff 	mov.w	r2, #4294967295
 800f070:	40da      	lsrs	r2, r3
 800f072:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f076:	4013      	ands	r3, r2
 800f078:	f846 3c04 	str.w	r3, [r6, #-4]
 800f07c:	e7d2      	b.n	800f024 <__hexnan+0xd4>
 800f07e:	3f04      	subs	r7, #4
 800f080:	e7d0      	b.n	800f024 <__hexnan+0xd4>
 800f082:	2004      	movs	r0, #4
 800f084:	e7d5      	b.n	800f032 <__hexnan+0xe2>

0800f086 <__ascii_mbtowc>:
 800f086:	b082      	sub	sp, #8
 800f088:	b901      	cbnz	r1, 800f08c <__ascii_mbtowc+0x6>
 800f08a:	a901      	add	r1, sp, #4
 800f08c:	b142      	cbz	r2, 800f0a0 <__ascii_mbtowc+0x1a>
 800f08e:	b14b      	cbz	r3, 800f0a4 <__ascii_mbtowc+0x1e>
 800f090:	7813      	ldrb	r3, [r2, #0]
 800f092:	600b      	str	r3, [r1, #0]
 800f094:	7812      	ldrb	r2, [r2, #0]
 800f096:	1e10      	subs	r0, r2, #0
 800f098:	bf18      	it	ne
 800f09a:	2001      	movne	r0, #1
 800f09c:	b002      	add	sp, #8
 800f09e:	4770      	bx	lr
 800f0a0:	4610      	mov	r0, r2
 800f0a2:	e7fb      	b.n	800f09c <__ascii_mbtowc+0x16>
 800f0a4:	f06f 0001 	mvn.w	r0, #1
 800f0a8:	e7f8      	b.n	800f09c <__ascii_mbtowc+0x16>

0800f0aa <_realloc_r>:
 800f0aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ae:	4680      	mov	r8, r0
 800f0b0:	4615      	mov	r5, r2
 800f0b2:	460c      	mov	r4, r1
 800f0b4:	b921      	cbnz	r1, 800f0c0 <_realloc_r+0x16>
 800f0b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ba:	4611      	mov	r1, r2
 800f0bc:	f7fd be6c 	b.w	800cd98 <_malloc_r>
 800f0c0:	b92a      	cbnz	r2, 800f0ce <_realloc_r+0x24>
 800f0c2:	f7fd fdf5 	bl	800ccb0 <_free_r>
 800f0c6:	2400      	movs	r4, #0
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0ce:	f000 f840 	bl	800f152 <_malloc_usable_size_r>
 800f0d2:	4285      	cmp	r5, r0
 800f0d4:	4606      	mov	r6, r0
 800f0d6:	d802      	bhi.n	800f0de <_realloc_r+0x34>
 800f0d8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f0dc:	d8f4      	bhi.n	800f0c8 <_realloc_r+0x1e>
 800f0de:	4629      	mov	r1, r5
 800f0e0:	4640      	mov	r0, r8
 800f0e2:	f7fd fe59 	bl	800cd98 <_malloc_r>
 800f0e6:	4607      	mov	r7, r0
 800f0e8:	2800      	cmp	r0, #0
 800f0ea:	d0ec      	beq.n	800f0c6 <_realloc_r+0x1c>
 800f0ec:	42b5      	cmp	r5, r6
 800f0ee:	462a      	mov	r2, r5
 800f0f0:	4621      	mov	r1, r4
 800f0f2:	bf28      	it	cs
 800f0f4:	4632      	movcs	r2, r6
 800f0f6:	f7fc ff7a 	bl	800bfee <memcpy>
 800f0fa:	4621      	mov	r1, r4
 800f0fc:	4640      	mov	r0, r8
 800f0fe:	f7fd fdd7 	bl	800ccb0 <_free_r>
 800f102:	463c      	mov	r4, r7
 800f104:	e7e0      	b.n	800f0c8 <_realloc_r+0x1e>

0800f106 <__ascii_wctomb>:
 800f106:	4603      	mov	r3, r0
 800f108:	4608      	mov	r0, r1
 800f10a:	b141      	cbz	r1, 800f11e <__ascii_wctomb+0x18>
 800f10c:	2aff      	cmp	r2, #255	@ 0xff
 800f10e:	d904      	bls.n	800f11a <__ascii_wctomb+0x14>
 800f110:	228a      	movs	r2, #138	@ 0x8a
 800f112:	601a      	str	r2, [r3, #0]
 800f114:	f04f 30ff 	mov.w	r0, #4294967295
 800f118:	4770      	bx	lr
 800f11a:	700a      	strb	r2, [r1, #0]
 800f11c:	2001      	movs	r0, #1
 800f11e:	4770      	bx	lr

0800f120 <fiprintf>:
 800f120:	b40e      	push	{r1, r2, r3}
 800f122:	b503      	push	{r0, r1, lr}
 800f124:	4601      	mov	r1, r0
 800f126:	ab03      	add	r3, sp, #12
 800f128:	4805      	ldr	r0, [pc, #20]	@ (800f140 <fiprintf+0x20>)
 800f12a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f12e:	6800      	ldr	r0, [r0, #0]
 800f130:	9301      	str	r3, [sp, #4]
 800f132:	f000 f83f 	bl	800f1b4 <_vfiprintf_r>
 800f136:	b002      	add	sp, #8
 800f138:	f85d eb04 	ldr.w	lr, [sp], #4
 800f13c:	b003      	add	sp, #12
 800f13e:	4770      	bx	lr
 800f140:	20000034 	.word	0x20000034

0800f144 <abort>:
 800f144:	b508      	push	{r3, lr}
 800f146:	2006      	movs	r0, #6
 800f148:	f000 fa08 	bl	800f55c <raise>
 800f14c:	2001      	movs	r0, #1
 800f14e:	f7f3 fd4b 	bl	8002be8 <_exit>

0800f152 <_malloc_usable_size_r>:
 800f152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f156:	1f18      	subs	r0, r3, #4
 800f158:	2b00      	cmp	r3, #0
 800f15a:	bfbc      	itt	lt
 800f15c:	580b      	ldrlt	r3, [r1, r0]
 800f15e:	18c0      	addlt	r0, r0, r3
 800f160:	4770      	bx	lr

0800f162 <__sfputc_r>:
 800f162:	6893      	ldr	r3, [r2, #8]
 800f164:	3b01      	subs	r3, #1
 800f166:	2b00      	cmp	r3, #0
 800f168:	b410      	push	{r4}
 800f16a:	6093      	str	r3, [r2, #8]
 800f16c:	da08      	bge.n	800f180 <__sfputc_r+0x1e>
 800f16e:	6994      	ldr	r4, [r2, #24]
 800f170:	42a3      	cmp	r3, r4
 800f172:	db01      	blt.n	800f178 <__sfputc_r+0x16>
 800f174:	290a      	cmp	r1, #10
 800f176:	d103      	bne.n	800f180 <__sfputc_r+0x1e>
 800f178:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f17c:	f000 b932 	b.w	800f3e4 <__swbuf_r>
 800f180:	6813      	ldr	r3, [r2, #0]
 800f182:	1c58      	adds	r0, r3, #1
 800f184:	6010      	str	r0, [r2, #0]
 800f186:	7019      	strb	r1, [r3, #0]
 800f188:	4608      	mov	r0, r1
 800f18a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f18e:	4770      	bx	lr

0800f190 <__sfputs_r>:
 800f190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f192:	4606      	mov	r6, r0
 800f194:	460f      	mov	r7, r1
 800f196:	4614      	mov	r4, r2
 800f198:	18d5      	adds	r5, r2, r3
 800f19a:	42ac      	cmp	r4, r5
 800f19c:	d101      	bne.n	800f1a2 <__sfputs_r+0x12>
 800f19e:	2000      	movs	r0, #0
 800f1a0:	e007      	b.n	800f1b2 <__sfputs_r+0x22>
 800f1a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1a6:	463a      	mov	r2, r7
 800f1a8:	4630      	mov	r0, r6
 800f1aa:	f7ff ffda 	bl	800f162 <__sfputc_r>
 800f1ae:	1c43      	adds	r3, r0, #1
 800f1b0:	d1f3      	bne.n	800f19a <__sfputs_r+0xa>
 800f1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f1b4 <_vfiprintf_r>:
 800f1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1b8:	460d      	mov	r5, r1
 800f1ba:	b09d      	sub	sp, #116	@ 0x74
 800f1bc:	4614      	mov	r4, r2
 800f1be:	4698      	mov	r8, r3
 800f1c0:	4606      	mov	r6, r0
 800f1c2:	b118      	cbz	r0, 800f1cc <_vfiprintf_r+0x18>
 800f1c4:	6a03      	ldr	r3, [r0, #32]
 800f1c6:	b90b      	cbnz	r3, 800f1cc <_vfiprintf_r+0x18>
 800f1c8:	f7fc fd6e 	bl	800bca8 <__sinit>
 800f1cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1ce:	07d9      	lsls	r1, r3, #31
 800f1d0:	d405      	bmi.n	800f1de <_vfiprintf_r+0x2a>
 800f1d2:	89ab      	ldrh	r3, [r5, #12]
 800f1d4:	059a      	lsls	r2, r3, #22
 800f1d6:	d402      	bmi.n	800f1de <_vfiprintf_r+0x2a>
 800f1d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1da:	f7fc ff06 	bl	800bfea <__retarget_lock_acquire_recursive>
 800f1de:	89ab      	ldrh	r3, [r5, #12]
 800f1e0:	071b      	lsls	r3, r3, #28
 800f1e2:	d501      	bpl.n	800f1e8 <_vfiprintf_r+0x34>
 800f1e4:	692b      	ldr	r3, [r5, #16]
 800f1e6:	b99b      	cbnz	r3, 800f210 <_vfiprintf_r+0x5c>
 800f1e8:	4629      	mov	r1, r5
 800f1ea:	4630      	mov	r0, r6
 800f1ec:	f000 f938 	bl	800f460 <__swsetup_r>
 800f1f0:	b170      	cbz	r0, 800f210 <_vfiprintf_r+0x5c>
 800f1f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1f4:	07dc      	lsls	r4, r3, #31
 800f1f6:	d504      	bpl.n	800f202 <_vfiprintf_r+0x4e>
 800f1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f1fc:	b01d      	add	sp, #116	@ 0x74
 800f1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f202:	89ab      	ldrh	r3, [r5, #12]
 800f204:	0598      	lsls	r0, r3, #22
 800f206:	d4f7      	bmi.n	800f1f8 <_vfiprintf_r+0x44>
 800f208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f20a:	f7fc feef 	bl	800bfec <__retarget_lock_release_recursive>
 800f20e:	e7f3      	b.n	800f1f8 <_vfiprintf_r+0x44>
 800f210:	2300      	movs	r3, #0
 800f212:	9309      	str	r3, [sp, #36]	@ 0x24
 800f214:	2320      	movs	r3, #32
 800f216:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f21a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f21e:	2330      	movs	r3, #48	@ 0x30
 800f220:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f3d0 <_vfiprintf_r+0x21c>
 800f224:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f228:	f04f 0901 	mov.w	r9, #1
 800f22c:	4623      	mov	r3, r4
 800f22e:	469a      	mov	sl, r3
 800f230:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f234:	b10a      	cbz	r2, 800f23a <_vfiprintf_r+0x86>
 800f236:	2a25      	cmp	r2, #37	@ 0x25
 800f238:	d1f9      	bne.n	800f22e <_vfiprintf_r+0x7a>
 800f23a:	ebba 0b04 	subs.w	fp, sl, r4
 800f23e:	d00b      	beq.n	800f258 <_vfiprintf_r+0xa4>
 800f240:	465b      	mov	r3, fp
 800f242:	4622      	mov	r2, r4
 800f244:	4629      	mov	r1, r5
 800f246:	4630      	mov	r0, r6
 800f248:	f7ff ffa2 	bl	800f190 <__sfputs_r>
 800f24c:	3001      	adds	r0, #1
 800f24e:	f000 80a7 	beq.w	800f3a0 <_vfiprintf_r+0x1ec>
 800f252:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f254:	445a      	add	r2, fp
 800f256:	9209      	str	r2, [sp, #36]	@ 0x24
 800f258:	f89a 3000 	ldrb.w	r3, [sl]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	f000 809f 	beq.w	800f3a0 <_vfiprintf_r+0x1ec>
 800f262:	2300      	movs	r3, #0
 800f264:	f04f 32ff 	mov.w	r2, #4294967295
 800f268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f26c:	f10a 0a01 	add.w	sl, sl, #1
 800f270:	9304      	str	r3, [sp, #16]
 800f272:	9307      	str	r3, [sp, #28]
 800f274:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f278:	931a      	str	r3, [sp, #104]	@ 0x68
 800f27a:	4654      	mov	r4, sl
 800f27c:	2205      	movs	r2, #5
 800f27e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f282:	4853      	ldr	r0, [pc, #332]	@ (800f3d0 <_vfiprintf_r+0x21c>)
 800f284:	f7f0 ffd4 	bl	8000230 <memchr>
 800f288:	9a04      	ldr	r2, [sp, #16]
 800f28a:	b9d8      	cbnz	r0, 800f2c4 <_vfiprintf_r+0x110>
 800f28c:	06d1      	lsls	r1, r2, #27
 800f28e:	bf44      	itt	mi
 800f290:	2320      	movmi	r3, #32
 800f292:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f296:	0713      	lsls	r3, r2, #28
 800f298:	bf44      	itt	mi
 800f29a:	232b      	movmi	r3, #43	@ 0x2b
 800f29c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2a0:	f89a 3000 	ldrb.w	r3, [sl]
 800f2a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2a6:	d015      	beq.n	800f2d4 <_vfiprintf_r+0x120>
 800f2a8:	9a07      	ldr	r2, [sp, #28]
 800f2aa:	4654      	mov	r4, sl
 800f2ac:	2000      	movs	r0, #0
 800f2ae:	f04f 0c0a 	mov.w	ip, #10
 800f2b2:	4621      	mov	r1, r4
 800f2b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2b8:	3b30      	subs	r3, #48	@ 0x30
 800f2ba:	2b09      	cmp	r3, #9
 800f2bc:	d94b      	bls.n	800f356 <_vfiprintf_r+0x1a2>
 800f2be:	b1b0      	cbz	r0, 800f2ee <_vfiprintf_r+0x13a>
 800f2c0:	9207      	str	r2, [sp, #28]
 800f2c2:	e014      	b.n	800f2ee <_vfiprintf_r+0x13a>
 800f2c4:	eba0 0308 	sub.w	r3, r0, r8
 800f2c8:	fa09 f303 	lsl.w	r3, r9, r3
 800f2cc:	4313      	orrs	r3, r2
 800f2ce:	9304      	str	r3, [sp, #16]
 800f2d0:	46a2      	mov	sl, r4
 800f2d2:	e7d2      	b.n	800f27a <_vfiprintf_r+0xc6>
 800f2d4:	9b03      	ldr	r3, [sp, #12]
 800f2d6:	1d19      	adds	r1, r3, #4
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	9103      	str	r1, [sp, #12]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	bfbb      	ittet	lt
 800f2e0:	425b      	neglt	r3, r3
 800f2e2:	f042 0202 	orrlt.w	r2, r2, #2
 800f2e6:	9307      	strge	r3, [sp, #28]
 800f2e8:	9307      	strlt	r3, [sp, #28]
 800f2ea:	bfb8      	it	lt
 800f2ec:	9204      	strlt	r2, [sp, #16]
 800f2ee:	7823      	ldrb	r3, [r4, #0]
 800f2f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f2f2:	d10a      	bne.n	800f30a <_vfiprintf_r+0x156>
 800f2f4:	7863      	ldrb	r3, [r4, #1]
 800f2f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2f8:	d132      	bne.n	800f360 <_vfiprintf_r+0x1ac>
 800f2fa:	9b03      	ldr	r3, [sp, #12]
 800f2fc:	1d1a      	adds	r2, r3, #4
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	9203      	str	r2, [sp, #12]
 800f302:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f306:	3402      	adds	r4, #2
 800f308:	9305      	str	r3, [sp, #20]
 800f30a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f3e0 <_vfiprintf_r+0x22c>
 800f30e:	7821      	ldrb	r1, [r4, #0]
 800f310:	2203      	movs	r2, #3
 800f312:	4650      	mov	r0, sl
 800f314:	f7f0 ff8c 	bl	8000230 <memchr>
 800f318:	b138      	cbz	r0, 800f32a <_vfiprintf_r+0x176>
 800f31a:	9b04      	ldr	r3, [sp, #16]
 800f31c:	eba0 000a 	sub.w	r0, r0, sl
 800f320:	2240      	movs	r2, #64	@ 0x40
 800f322:	4082      	lsls	r2, r0
 800f324:	4313      	orrs	r3, r2
 800f326:	3401      	adds	r4, #1
 800f328:	9304      	str	r3, [sp, #16]
 800f32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f32e:	4829      	ldr	r0, [pc, #164]	@ (800f3d4 <_vfiprintf_r+0x220>)
 800f330:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f334:	2206      	movs	r2, #6
 800f336:	f7f0 ff7b 	bl	8000230 <memchr>
 800f33a:	2800      	cmp	r0, #0
 800f33c:	d03f      	beq.n	800f3be <_vfiprintf_r+0x20a>
 800f33e:	4b26      	ldr	r3, [pc, #152]	@ (800f3d8 <_vfiprintf_r+0x224>)
 800f340:	bb1b      	cbnz	r3, 800f38a <_vfiprintf_r+0x1d6>
 800f342:	9b03      	ldr	r3, [sp, #12]
 800f344:	3307      	adds	r3, #7
 800f346:	f023 0307 	bic.w	r3, r3, #7
 800f34a:	3308      	adds	r3, #8
 800f34c:	9303      	str	r3, [sp, #12]
 800f34e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f350:	443b      	add	r3, r7
 800f352:	9309      	str	r3, [sp, #36]	@ 0x24
 800f354:	e76a      	b.n	800f22c <_vfiprintf_r+0x78>
 800f356:	fb0c 3202 	mla	r2, ip, r2, r3
 800f35a:	460c      	mov	r4, r1
 800f35c:	2001      	movs	r0, #1
 800f35e:	e7a8      	b.n	800f2b2 <_vfiprintf_r+0xfe>
 800f360:	2300      	movs	r3, #0
 800f362:	3401      	adds	r4, #1
 800f364:	9305      	str	r3, [sp, #20]
 800f366:	4619      	mov	r1, r3
 800f368:	f04f 0c0a 	mov.w	ip, #10
 800f36c:	4620      	mov	r0, r4
 800f36e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f372:	3a30      	subs	r2, #48	@ 0x30
 800f374:	2a09      	cmp	r2, #9
 800f376:	d903      	bls.n	800f380 <_vfiprintf_r+0x1cc>
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d0c6      	beq.n	800f30a <_vfiprintf_r+0x156>
 800f37c:	9105      	str	r1, [sp, #20]
 800f37e:	e7c4      	b.n	800f30a <_vfiprintf_r+0x156>
 800f380:	fb0c 2101 	mla	r1, ip, r1, r2
 800f384:	4604      	mov	r4, r0
 800f386:	2301      	movs	r3, #1
 800f388:	e7f0      	b.n	800f36c <_vfiprintf_r+0x1b8>
 800f38a:	ab03      	add	r3, sp, #12
 800f38c:	9300      	str	r3, [sp, #0]
 800f38e:	462a      	mov	r2, r5
 800f390:	4b12      	ldr	r3, [pc, #72]	@ (800f3dc <_vfiprintf_r+0x228>)
 800f392:	a904      	add	r1, sp, #16
 800f394:	4630      	mov	r0, r6
 800f396:	f7fb fe2f 	bl	800aff8 <_printf_float>
 800f39a:	4607      	mov	r7, r0
 800f39c:	1c78      	adds	r0, r7, #1
 800f39e:	d1d6      	bne.n	800f34e <_vfiprintf_r+0x19a>
 800f3a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3a2:	07d9      	lsls	r1, r3, #31
 800f3a4:	d405      	bmi.n	800f3b2 <_vfiprintf_r+0x1fe>
 800f3a6:	89ab      	ldrh	r3, [r5, #12]
 800f3a8:	059a      	lsls	r2, r3, #22
 800f3aa:	d402      	bmi.n	800f3b2 <_vfiprintf_r+0x1fe>
 800f3ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3ae:	f7fc fe1d 	bl	800bfec <__retarget_lock_release_recursive>
 800f3b2:	89ab      	ldrh	r3, [r5, #12]
 800f3b4:	065b      	lsls	r3, r3, #25
 800f3b6:	f53f af1f 	bmi.w	800f1f8 <_vfiprintf_r+0x44>
 800f3ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f3bc:	e71e      	b.n	800f1fc <_vfiprintf_r+0x48>
 800f3be:	ab03      	add	r3, sp, #12
 800f3c0:	9300      	str	r3, [sp, #0]
 800f3c2:	462a      	mov	r2, r5
 800f3c4:	4b05      	ldr	r3, [pc, #20]	@ (800f3dc <_vfiprintf_r+0x228>)
 800f3c6:	a904      	add	r1, sp, #16
 800f3c8:	4630      	mov	r0, r6
 800f3ca:	f7fc f8ad 	bl	800b528 <_printf_i>
 800f3ce:	e7e4      	b.n	800f39a <_vfiprintf_r+0x1e6>
 800f3d0:	0800ff09 	.word	0x0800ff09
 800f3d4:	0800ff13 	.word	0x0800ff13
 800f3d8:	0800aff9 	.word	0x0800aff9
 800f3dc:	0800f191 	.word	0x0800f191
 800f3e0:	0800ff0f 	.word	0x0800ff0f

0800f3e4 <__swbuf_r>:
 800f3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3e6:	460e      	mov	r6, r1
 800f3e8:	4614      	mov	r4, r2
 800f3ea:	4605      	mov	r5, r0
 800f3ec:	b118      	cbz	r0, 800f3f6 <__swbuf_r+0x12>
 800f3ee:	6a03      	ldr	r3, [r0, #32]
 800f3f0:	b90b      	cbnz	r3, 800f3f6 <__swbuf_r+0x12>
 800f3f2:	f7fc fc59 	bl	800bca8 <__sinit>
 800f3f6:	69a3      	ldr	r3, [r4, #24]
 800f3f8:	60a3      	str	r3, [r4, #8]
 800f3fa:	89a3      	ldrh	r3, [r4, #12]
 800f3fc:	071a      	lsls	r2, r3, #28
 800f3fe:	d501      	bpl.n	800f404 <__swbuf_r+0x20>
 800f400:	6923      	ldr	r3, [r4, #16]
 800f402:	b943      	cbnz	r3, 800f416 <__swbuf_r+0x32>
 800f404:	4621      	mov	r1, r4
 800f406:	4628      	mov	r0, r5
 800f408:	f000 f82a 	bl	800f460 <__swsetup_r>
 800f40c:	b118      	cbz	r0, 800f416 <__swbuf_r+0x32>
 800f40e:	f04f 37ff 	mov.w	r7, #4294967295
 800f412:	4638      	mov	r0, r7
 800f414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f416:	6823      	ldr	r3, [r4, #0]
 800f418:	6922      	ldr	r2, [r4, #16]
 800f41a:	1a98      	subs	r0, r3, r2
 800f41c:	6963      	ldr	r3, [r4, #20]
 800f41e:	b2f6      	uxtb	r6, r6
 800f420:	4283      	cmp	r3, r0
 800f422:	4637      	mov	r7, r6
 800f424:	dc05      	bgt.n	800f432 <__swbuf_r+0x4e>
 800f426:	4621      	mov	r1, r4
 800f428:	4628      	mov	r0, r5
 800f42a:	f7ff fa53 	bl	800e8d4 <_fflush_r>
 800f42e:	2800      	cmp	r0, #0
 800f430:	d1ed      	bne.n	800f40e <__swbuf_r+0x2a>
 800f432:	68a3      	ldr	r3, [r4, #8]
 800f434:	3b01      	subs	r3, #1
 800f436:	60a3      	str	r3, [r4, #8]
 800f438:	6823      	ldr	r3, [r4, #0]
 800f43a:	1c5a      	adds	r2, r3, #1
 800f43c:	6022      	str	r2, [r4, #0]
 800f43e:	701e      	strb	r6, [r3, #0]
 800f440:	6962      	ldr	r2, [r4, #20]
 800f442:	1c43      	adds	r3, r0, #1
 800f444:	429a      	cmp	r2, r3
 800f446:	d004      	beq.n	800f452 <__swbuf_r+0x6e>
 800f448:	89a3      	ldrh	r3, [r4, #12]
 800f44a:	07db      	lsls	r3, r3, #31
 800f44c:	d5e1      	bpl.n	800f412 <__swbuf_r+0x2e>
 800f44e:	2e0a      	cmp	r6, #10
 800f450:	d1df      	bne.n	800f412 <__swbuf_r+0x2e>
 800f452:	4621      	mov	r1, r4
 800f454:	4628      	mov	r0, r5
 800f456:	f7ff fa3d 	bl	800e8d4 <_fflush_r>
 800f45a:	2800      	cmp	r0, #0
 800f45c:	d0d9      	beq.n	800f412 <__swbuf_r+0x2e>
 800f45e:	e7d6      	b.n	800f40e <__swbuf_r+0x2a>

0800f460 <__swsetup_r>:
 800f460:	b538      	push	{r3, r4, r5, lr}
 800f462:	4b29      	ldr	r3, [pc, #164]	@ (800f508 <__swsetup_r+0xa8>)
 800f464:	4605      	mov	r5, r0
 800f466:	6818      	ldr	r0, [r3, #0]
 800f468:	460c      	mov	r4, r1
 800f46a:	b118      	cbz	r0, 800f474 <__swsetup_r+0x14>
 800f46c:	6a03      	ldr	r3, [r0, #32]
 800f46e:	b90b      	cbnz	r3, 800f474 <__swsetup_r+0x14>
 800f470:	f7fc fc1a 	bl	800bca8 <__sinit>
 800f474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f478:	0719      	lsls	r1, r3, #28
 800f47a:	d422      	bmi.n	800f4c2 <__swsetup_r+0x62>
 800f47c:	06da      	lsls	r2, r3, #27
 800f47e:	d407      	bmi.n	800f490 <__swsetup_r+0x30>
 800f480:	2209      	movs	r2, #9
 800f482:	602a      	str	r2, [r5, #0]
 800f484:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f488:	81a3      	strh	r3, [r4, #12]
 800f48a:	f04f 30ff 	mov.w	r0, #4294967295
 800f48e:	e033      	b.n	800f4f8 <__swsetup_r+0x98>
 800f490:	0758      	lsls	r0, r3, #29
 800f492:	d512      	bpl.n	800f4ba <__swsetup_r+0x5a>
 800f494:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f496:	b141      	cbz	r1, 800f4aa <__swsetup_r+0x4a>
 800f498:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f49c:	4299      	cmp	r1, r3
 800f49e:	d002      	beq.n	800f4a6 <__swsetup_r+0x46>
 800f4a0:	4628      	mov	r0, r5
 800f4a2:	f7fd fc05 	bl	800ccb0 <_free_r>
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800f4aa:	89a3      	ldrh	r3, [r4, #12]
 800f4ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f4b0:	81a3      	strh	r3, [r4, #12]
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	6063      	str	r3, [r4, #4]
 800f4b6:	6923      	ldr	r3, [r4, #16]
 800f4b8:	6023      	str	r3, [r4, #0]
 800f4ba:	89a3      	ldrh	r3, [r4, #12]
 800f4bc:	f043 0308 	orr.w	r3, r3, #8
 800f4c0:	81a3      	strh	r3, [r4, #12]
 800f4c2:	6923      	ldr	r3, [r4, #16]
 800f4c4:	b94b      	cbnz	r3, 800f4da <__swsetup_r+0x7a>
 800f4c6:	89a3      	ldrh	r3, [r4, #12]
 800f4c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f4cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f4d0:	d003      	beq.n	800f4da <__swsetup_r+0x7a>
 800f4d2:	4621      	mov	r1, r4
 800f4d4:	4628      	mov	r0, r5
 800f4d6:	f000 f883 	bl	800f5e0 <__smakebuf_r>
 800f4da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4de:	f013 0201 	ands.w	r2, r3, #1
 800f4e2:	d00a      	beq.n	800f4fa <__swsetup_r+0x9a>
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	60a2      	str	r2, [r4, #8]
 800f4e8:	6962      	ldr	r2, [r4, #20]
 800f4ea:	4252      	negs	r2, r2
 800f4ec:	61a2      	str	r2, [r4, #24]
 800f4ee:	6922      	ldr	r2, [r4, #16]
 800f4f0:	b942      	cbnz	r2, 800f504 <__swsetup_r+0xa4>
 800f4f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f4f6:	d1c5      	bne.n	800f484 <__swsetup_r+0x24>
 800f4f8:	bd38      	pop	{r3, r4, r5, pc}
 800f4fa:	0799      	lsls	r1, r3, #30
 800f4fc:	bf58      	it	pl
 800f4fe:	6962      	ldrpl	r2, [r4, #20]
 800f500:	60a2      	str	r2, [r4, #8]
 800f502:	e7f4      	b.n	800f4ee <__swsetup_r+0x8e>
 800f504:	2000      	movs	r0, #0
 800f506:	e7f7      	b.n	800f4f8 <__swsetup_r+0x98>
 800f508:	20000034 	.word	0x20000034

0800f50c <_raise_r>:
 800f50c:	291f      	cmp	r1, #31
 800f50e:	b538      	push	{r3, r4, r5, lr}
 800f510:	4605      	mov	r5, r0
 800f512:	460c      	mov	r4, r1
 800f514:	d904      	bls.n	800f520 <_raise_r+0x14>
 800f516:	2316      	movs	r3, #22
 800f518:	6003      	str	r3, [r0, #0]
 800f51a:	f04f 30ff 	mov.w	r0, #4294967295
 800f51e:	bd38      	pop	{r3, r4, r5, pc}
 800f520:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f522:	b112      	cbz	r2, 800f52a <_raise_r+0x1e>
 800f524:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f528:	b94b      	cbnz	r3, 800f53e <_raise_r+0x32>
 800f52a:	4628      	mov	r0, r5
 800f52c:	f000 f830 	bl	800f590 <_getpid_r>
 800f530:	4622      	mov	r2, r4
 800f532:	4601      	mov	r1, r0
 800f534:	4628      	mov	r0, r5
 800f536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f53a:	f000 b817 	b.w	800f56c <_kill_r>
 800f53e:	2b01      	cmp	r3, #1
 800f540:	d00a      	beq.n	800f558 <_raise_r+0x4c>
 800f542:	1c59      	adds	r1, r3, #1
 800f544:	d103      	bne.n	800f54e <_raise_r+0x42>
 800f546:	2316      	movs	r3, #22
 800f548:	6003      	str	r3, [r0, #0]
 800f54a:	2001      	movs	r0, #1
 800f54c:	e7e7      	b.n	800f51e <_raise_r+0x12>
 800f54e:	2100      	movs	r1, #0
 800f550:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f554:	4620      	mov	r0, r4
 800f556:	4798      	blx	r3
 800f558:	2000      	movs	r0, #0
 800f55a:	e7e0      	b.n	800f51e <_raise_r+0x12>

0800f55c <raise>:
 800f55c:	4b02      	ldr	r3, [pc, #8]	@ (800f568 <raise+0xc>)
 800f55e:	4601      	mov	r1, r0
 800f560:	6818      	ldr	r0, [r3, #0]
 800f562:	f7ff bfd3 	b.w	800f50c <_raise_r>
 800f566:	bf00      	nop
 800f568:	20000034 	.word	0x20000034

0800f56c <_kill_r>:
 800f56c:	b538      	push	{r3, r4, r5, lr}
 800f56e:	4d07      	ldr	r5, [pc, #28]	@ (800f58c <_kill_r+0x20>)
 800f570:	2300      	movs	r3, #0
 800f572:	4604      	mov	r4, r0
 800f574:	4608      	mov	r0, r1
 800f576:	4611      	mov	r1, r2
 800f578:	602b      	str	r3, [r5, #0]
 800f57a:	f7f3 fb25 	bl	8002bc8 <_kill>
 800f57e:	1c43      	adds	r3, r0, #1
 800f580:	d102      	bne.n	800f588 <_kill_r+0x1c>
 800f582:	682b      	ldr	r3, [r5, #0]
 800f584:	b103      	cbz	r3, 800f588 <_kill_r+0x1c>
 800f586:	6023      	str	r3, [r4, #0]
 800f588:	bd38      	pop	{r3, r4, r5, pc}
 800f58a:	bf00      	nop
 800f58c:	200049e8 	.word	0x200049e8

0800f590 <_getpid_r>:
 800f590:	f7f3 bb12 	b.w	8002bb8 <_getpid>

0800f594 <__swhatbuf_r>:
 800f594:	b570      	push	{r4, r5, r6, lr}
 800f596:	460c      	mov	r4, r1
 800f598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f59c:	2900      	cmp	r1, #0
 800f59e:	b096      	sub	sp, #88	@ 0x58
 800f5a0:	4615      	mov	r5, r2
 800f5a2:	461e      	mov	r6, r3
 800f5a4:	da0d      	bge.n	800f5c2 <__swhatbuf_r+0x2e>
 800f5a6:	89a3      	ldrh	r3, [r4, #12]
 800f5a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f5ac:	f04f 0100 	mov.w	r1, #0
 800f5b0:	bf14      	ite	ne
 800f5b2:	2340      	movne	r3, #64	@ 0x40
 800f5b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f5b8:	2000      	movs	r0, #0
 800f5ba:	6031      	str	r1, [r6, #0]
 800f5bc:	602b      	str	r3, [r5, #0]
 800f5be:	b016      	add	sp, #88	@ 0x58
 800f5c0:	bd70      	pop	{r4, r5, r6, pc}
 800f5c2:	466a      	mov	r2, sp
 800f5c4:	f000 f848 	bl	800f658 <_fstat_r>
 800f5c8:	2800      	cmp	r0, #0
 800f5ca:	dbec      	blt.n	800f5a6 <__swhatbuf_r+0x12>
 800f5cc:	9901      	ldr	r1, [sp, #4]
 800f5ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f5d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f5d6:	4259      	negs	r1, r3
 800f5d8:	4159      	adcs	r1, r3
 800f5da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f5de:	e7eb      	b.n	800f5b8 <__swhatbuf_r+0x24>

0800f5e0 <__smakebuf_r>:
 800f5e0:	898b      	ldrh	r3, [r1, #12]
 800f5e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f5e4:	079d      	lsls	r5, r3, #30
 800f5e6:	4606      	mov	r6, r0
 800f5e8:	460c      	mov	r4, r1
 800f5ea:	d507      	bpl.n	800f5fc <__smakebuf_r+0x1c>
 800f5ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f5f0:	6023      	str	r3, [r4, #0]
 800f5f2:	6123      	str	r3, [r4, #16]
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	6163      	str	r3, [r4, #20]
 800f5f8:	b003      	add	sp, #12
 800f5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5fc:	ab01      	add	r3, sp, #4
 800f5fe:	466a      	mov	r2, sp
 800f600:	f7ff ffc8 	bl	800f594 <__swhatbuf_r>
 800f604:	9f00      	ldr	r7, [sp, #0]
 800f606:	4605      	mov	r5, r0
 800f608:	4639      	mov	r1, r7
 800f60a:	4630      	mov	r0, r6
 800f60c:	f7fd fbc4 	bl	800cd98 <_malloc_r>
 800f610:	b948      	cbnz	r0, 800f626 <__smakebuf_r+0x46>
 800f612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f616:	059a      	lsls	r2, r3, #22
 800f618:	d4ee      	bmi.n	800f5f8 <__smakebuf_r+0x18>
 800f61a:	f023 0303 	bic.w	r3, r3, #3
 800f61e:	f043 0302 	orr.w	r3, r3, #2
 800f622:	81a3      	strh	r3, [r4, #12]
 800f624:	e7e2      	b.n	800f5ec <__smakebuf_r+0xc>
 800f626:	89a3      	ldrh	r3, [r4, #12]
 800f628:	6020      	str	r0, [r4, #0]
 800f62a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f62e:	81a3      	strh	r3, [r4, #12]
 800f630:	9b01      	ldr	r3, [sp, #4]
 800f632:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f636:	b15b      	cbz	r3, 800f650 <__smakebuf_r+0x70>
 800f638:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f63c:	4630      	mov	r0, r6
 800f63e:	f000 f81d 	bl	800f67c <_isatty_r>
 800f642:	b128      	cbz	r0, 800f650 <__smakebuf_r+0x70>
 800f644:	89a3      	ldrh	r3, [r4, #12]
 800f646:	f023 0303 	bic.w	r3, r3, #3
 800f64a:	f043 0301 	orr.w	r3, r3, #1
 800f64e:	81a3      	strh	r3, [r4, #12]
 800f650:	89a3      	ldrh	r3, [r4, #12]
 800f652:	431d      	orrs	r5, r3
 800f654:	81a5      	strh	r5, [r4, #12]
 800f656:	e7cf      	b.n	800f5f8 <__smakebuf_r+0x18>

0800f658 <_fstat_r>:
 800f658:	b538      	push	{r3, r4, r5, lr}
 800f65a:	4d07      	ldr	r5, [pc, #28]	@ (800f678 <_fstat_r+0x20>)
 800f65c:	2300      	movs	r3, #0
 800f65e:	4604      	mov	r4, r0
 800f660:	4608      	mov	r0, r1
 800f662:	4611      	mov	r1, r2
 800f664:	602b      	str	r3, [r5, #0]
 800f666:	f7f3 fb0f 	bl	8002c88 <_fstat>
 800f66a:	1c43      	adds	r3, r0, #1
 800f66c:	d102      	bne.n	800f674 <_fstat_r+0x1c>
 800f66e:	682b      	ldr	r3, [r5, #0]
 800f670:	b103      	cbz	r3, 800f674 <_fstat_r+0x1c>
 800f672:	6023      	str	r3, [r4, #0]
 800f674:	bd38      	pop	{r3, r4, r5, pc}
 800f676:	bf00      	nop
 800f678:	200049e8 	.word	0x200049e8

0800f67c <_isatty_r>:
 800f67c:	b538      	push	{r3, r4, r5, lr}
 800f67e:	4d06      	ldr	r5, [pc, #24]	@ (800f698 <_isatty_r+0x1c>)
 800f680:	2300      	movs	r3, #0
 800f682:	4604      	mov	r4, r0
 800f684:	4608      	mov	r0, r1
 800f686:	602b      	str	r3, [r5, #0]
 800f688:	f7f3 fb0e 	bl	8002ca8 <_isatty>
 800f68c:	1c43      	adds	r3, r0, #1
 800f68e:	d102      	bne.n	800f696 <_isatty_r+0x1a>
 800f690:	682b      	ldr	r3, [r5, #0]
 800f692:	b103      	cbz	r3, 800f696 <_isatty_r+0x1a>
 800f694:	6023      	str	r3, [r4, #0]
 800f696:	bd38      	pop	{r3, r4, r5, pc}
 800f698:	200049e8 	.word	0x200049e8

0800f69c <_init>:
 800f69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f69e:	bf00      	nop
 800f6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6a2:	bc08      	pop	{r3}
 800f6a4:	469e      	mov	lr, r3
 800f6a6:	4770      	bx	lr

0800f6a8 <_fini>:
 800f6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6aa:	bf00      	nop
 800f6ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6ae:	bc08      	pop	{r3}
 800f6b0:	469e      	mov	lr, r3
 800f6b2:	4770      	bx	lr
